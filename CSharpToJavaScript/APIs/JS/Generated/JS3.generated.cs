//19.01.2025 21:21:41

using static CSharpToJavaScript.APIs.JS.GlobalObject;
using CSharpToJavaScript.Utils;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CSharpToJavaScript.APIs.JS;

//
using WindowProxy = Window;
using USVString = string;
using ByteString = string;
using DOMString = string;
//

using ClipboardItemData = Task<string>;
using ClipboardItems = List<ClipboardItem>;
using CookieList = List<CookieListItem>;
using PasswordCredentialInit = Union1;
using CSSStringSource = Union5;
using CSSToken = Union6;
using CSSUnparsedSegment = Union11;
using CSSKeywordish = Union12;
using CSSNumberish = Union13;
using CSSPerspectiveValue = Union14;
using CSSColorRGBComp = Union16;
using CSSColorPercent = Union17;
using CSSColorNumber = Union18;
using CSSColorAngle = Union19;
using GeometryNode = Union22;
using CSSOMString = string;
using GLuint64EXT = ulong;
using UrnOrConfig = Union37;
using ReportEventType = Union38;
using HeadersInit = Union39;
using XMLHttpRequestBodyInit = Union40;
using BodyInit = Union41;
using RequestInfo = Union42;
using StartInDirectory = Union43;
using BlobPart = Union44;
using FileSystemWriteChunkType = Union48;
using DOMHighResTimeStamp = Number;
using EpochTimeStamp = ulong;
using HTMLOrSVGScriptElement = Union56;
using MediaProvider = Union63;
using RenderingContext = Union70;
using HTMLOrSVGImageElement = Union71;
using CanvasImageSource = Union72;
using OffscreenRenderingContext = Union79;
using EventHandler = EventHandlerNonNull;
using OnErrorEventHandler = OnErrorEventHandlerNonNull;
using OnBeforeUnloadEventHandler = OnBeforeUnloadEventHandlerNonNull;
using TimerHandler = Union84;
using ImageBitmapSource = Union93;
using MessageEventSource = Union94;
using ConstrainPoint2D = Union102;
using ProfilerResource = string;
using ConstrainULong = Union115;
using ConstrainDouble = Union116;
using ConstrainBoolean = Union117;
using ConstrainDOMString = Union118;
using Megabit = double;
using Millisecond = ulong;
using ObserverUnion = Union119;
using ObservableInspectorUnion = Union120;
using RotationMatrixType = Union121;
using PerformanceEntryList = List<PerformanceEntry>;
using PushMessageDataInit = Union123;
using ReportList = List<Report>;
using SanitizerElement = Union129;
using SanitizerElementWithAttributes = Union130;
using SanitizerAttribute = Union131;
using RouterSource = Union139;
using SharedStorageResponse = Union142;
using ReadableStreamReader = Union143;
using ReadableStreamController = Union144;
using TrustedType = Union146;
using PreviousWinElement = Union152;
using PreviousWin = List<Unsupported /*PreviousWinElement*/>;
using URLPatternInput = Union154;
using URLPatternCompatible = Union155;
using VibratePattern = Union159;
using UUID = string;
using BluetoothServiceUUID = Union176;
using BluetoothCharacteristicUUID = Union177;
using BluetoothDescriptorUUID = Union178;
using NDEFMessageSource = Union179;
using Base64URLString = string;
using PublicKeyCredentialJSON = Object;
using PublicKeyCredentialClientCapabilities = Dictionary<string, bool>;
using COSEAlgorithmIdentifier = long;
using ImageBufferSource = Union186;
using AlgorithmIdentifier = Union187;
using HashAlgorithmIdentifier = Unsupported /*AlgorithmIdentifier*/;
using BigInteger = System.Byte;
using NamedCurve = string;
using GLenum = ulong;
using GLboolean = bool;
using GLbitfield = ulong;
using GLbyte = byte;
using GLshort = Number;
using GLint = long;
using GLsizei = long;
using GLintptr = long;
using GLsizeiptr = long;
using GLubyte = byte;
using GLushort = ushort;
using GLuint = ulong;
using GLfloat = float;
using GLclampf = float;
using TexImageSource = Union189;
using Float32List = Union190;
using Int32List = Union191;
using GLint64 = long;
using GLuint64 = ulong;
using Uint32List = Union193;
using GPUBufferUsageFlags = ulong;
using GPUMapModeFlags = ulong;
using GPUTextureUsageFlags = ulong;
using GPUShaderStageFlags = ulong;
using GPUBindingResource = Union214;
using GPUPipelineConstantValue = Number;
using GPUColorWriteFlags = ulong;
using GPUCopyExternalImageSource = Union217;
using GPUBufferDynamicOffset = ulong;
using GPUStencilValue = ulong;
using GPUSampleMask = ulong;
using GPUDepthBias = long;
using GPUSize64 = ulong;
using GPUIntegerCoordinate = ulong;
using GPUIndex32 = ulong;
using GPUSize32 = ulong;
using GPUSignedOffset32 = long;
using GPUSize64Out = ulong;
using GPUIntegerCoordinateOut = ulong;
using GPUSize32Out = ulong;
using GPUFlagsConstant = ulong;
using GPUColor = Union219;
using GPUOrigin2D = Union220;
using GPUOrigin3D = Union221;
using GPUExtent3D = Union222;
using ArrayBufferView = Union223;
using BufferSource = Union224;
using AllowSharedBufferSource = Union225;
using MLNamedTensors = Dictionary<string, MLTensor>;
using MLNumber = Union226;
using MLNamedOperands = Dictionary<string, MLOperand>;
using RTCRtpTransform = Union228;
using SmallCryptoKeyID = ulong;
using CryptoKeyID = Union229;
using LineAndPositionSetting = Union234;
using XRWebGLRenderingContext = Union235;
using FormDataEntryValue = Union237;


///<include file='Utils/Docs/Accelerometer/Accelerometer.generated.xml' path='docs/Accelerometer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Accelerometer : Sensor
{
	///<include file='Utils/Docs/AccelerometerAccelerometer/AccelerometerAccelerometer.generated.xml' path='docs/AccelerometerAccelerometer/*'/>
	public Accelerometer(AccelerometerSensorOptions options) { }
	///<include file='Utils/Docs/AccelerometerX/AccelerometerX.generated.xml' path='docs/AccelerometerX/*'/>
	public Number? X { get; }
	///<include file='Utils/Docs/AccelerometerY/AccelerometerY.generated.xml' path='docs/AccelerometerY/*'/>
	public Number? Y { get; }
	///<include file='Utils/Docs/AccelerometerZ/AccelerometerZ.generated.xml' path='docs/AccelerometerZ/*'/>
	public Number? Z { get; }
	public Accelerometer() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AccelerometerSensorOptions : SensorOptions
{
		public AccelerometerLocalCoordinateSystem ReferenceFrame;
}

///<include file='Utils/Docs/LinearAccelerationSensor/LinearAccelerationSensor.generated.xml' path='docs/LinearAccelerationSensor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class LinearAccelerationSensor : Accelerometer
{
	///<include file='Utils/Docs/LinearAccelerationSensorLinearAccelerationSensor/LinearAccelerationSensorLinearAccelerationSensor.generated.xml' path='docs/LinearAccelerationSensorLinearAccelerationSensor/*'/>
	public LinearAccelerationSensor(AccelerometerSensorOptions options) { }
	public LinearAccelerationSensor() { }
}

///<include file='Utils/Docs/GravitySensor/GravitySensor.generated.xml' path='docs/GravitySensor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GravitySensor : Accelerometer
{
	///<include file='Utils/Docs/GravitySensorGravitySensor/GravitySensorGravitySensor.generated.xml' path='docs/GravitySensorGravitySensor/*'/>
	public GravitySensor(AccelerometerSensorOptions options) { }
	public GravitySensor() { }
}

///<include file='Utils/Docs/AmbientLightSensor/AmbientLightSensor.generated.xml' path='docs/AmbientLightSensor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AmbientLightSensor : Sensor
{
	///<include file='Utils/Docs/AmbientLightSensorAmbientLightSensor/AmbientLightSensorAmbientLightSensor.generated.xml' path='docs/AmbientLightSensorAmbientLightSensor/*'/>
	public AmbientLightSensor(SensorOptions sensorOptions) { }
	///<include file='Utils/Docs/AmbientLightSensorIlluminance/AmbientLightSensorIlluminance.generated.xml' path='docs/AmbientLightSensorIlluminance/*'/>
	public Number? Illuminance { get; }
	public AmbientLightSensor() { }
}

///<include file='Utils/Docs/XRAnchor/XRAnchor.generated.xml' path='docs/XRAnchor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRAnchor
{
	///<include file='Utils/Docs/XRAnchorAnchorSpace/XRAnchorAnchorSpace.generated.xml' path='docs/XRAnchorAnchorSpace/*'/>
	public XRSpace AnchorSpace { get; }
		public Task<DOMString> RequestPersistentHandle() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRAnchorDelete/XRAnchorDelete.generated.xml' path='docs/XRAnchorDelete/*'/>
	public Undefined Delete() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRFrame/XRFrame.generated.xml' path='docs/XRFrame/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRFrame
{
	///<include file='Utils/Docs/XRFrameCreateAnchor/XRFrameCreateAnchor.generated.xml' path='docs/XRFrameCreateAnchor/*'/>
	public Task<XRAnchor> CreateAnchor(XRRigidTransform pose, XRSpace space) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRSession/XRSession.generated.xml' path='docs/XRSession/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRSession
{
		public DOMString[] PersistentAnchors { get; }
		public Task<XRAnchor> RestorePersistentAnchor(DOMString uuid) { throw new System.NotImplementedException(); }
		public Task<Undefined> DeletePersistentAnchor(DOMString uuid) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRHitTestResult/XRHitTestResult.generated.xml' path='docs/XRHitTestResult/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRHitTestResult
{
	///<include file='Utils/Docs/XRHitTestResultCreateAnchor/XRHitTestResultCreateAnchor.generated.xml' path='docs/XRHitTestResultCreateAnchor/*'/>
	public Task<XRAnchor> CreateAnchor() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRAnchorSet/XRAnchorSet.generated.xml' path='docs/XRAnchorSet/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRAnchorSet
{
	
}

///<include file='Utils/Docs/XRFrame/XRFrame.generated.xml' path='docs/XRFrame/*'/>
public partial class XRFrame
{
	///<include file='Utils/Docs/XRFrameTrackedAnchors/XRFrameTrackedAnchors.generated.xml' path='docs/XRFrameTrackedAnchors/*'/>
	public XRAnchorSet TrackedAnchors { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ANGLE_instanced_arrays
{
		public const GLenum VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
		public Undefined DrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { throw new System.NotImplementedException(); }
		public Undefined DrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei primcount) { throw new System.NotImplementedException(); }
		public Undefined VertexAttribDivisorANGLE(GLuint index, GLuint divisor) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLIFrameElement/HTMLIFrameElement.generated.xml' path='docs/HTMLIFrameElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLIFrameElement
{
	///<include file='Utils/Docs/HTMLIFrameElementCredentialless/HTMLIFrameElementCredentialless.generated.xml' path='docs/HTMLIFrameElementCredentialless/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Credentialless { get; set; }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
[To(ToAttribute.Default)]
public partial class Window
{
	///<include file='Utils/Docs/WindowCredentialless/WindowCredentialless.generated.xml' path='docs/WindowCredentialless/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Credentialless { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AttributionReportingRequestOptions
{
		public required bool EventSourceEligible;
		public required bool TriggerEligible;
}

///<include file='Utils/Docs/RequestInit/RequestInit.generated.xml' path='docs/RequestInit/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RequestInit
{
		public AttributionReportingRequestOptions AttributionReporting;
}

///<include file='Utils/Docs/XMLHttpRequest/XMLHttpRequest.generated.xml' path='docs/XMLHttpRequest/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XMLHttpRequest
{
	///<include file='Utils/Docs/XMLHttpRequestSetAttributionReporting/XMLHttpRequestSetAttributionReporting.generated.xml' path='docs/XMLHttpRequestSetAttributionReporting/*'/>
	public Undefined SetAttributionReporting(AttributionReportingRequestOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLMediaElement/HTMLMediaElement.generated.xml' path='docs/HTMLMediaElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLMediaElement
{
	///<include file='Utils/Docs/HTMLMediaElementSinkId/HTMLMediaElementSinkId.generated.xml' path='docs/HTMLMediaElementSinkId/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString SinkId { get; }
	///<include file='Utils/Docs/HTMLMediaElementSetSinkId/HTMLMediaElementSetSinkId.generated.xml' path='docs/HTMLMediaElementSetSinkId/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<Undefined> SetSinkId(DOMString sinkId) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaDevices/MediaDevices.generated.xml' path='docs/MediaDevices/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaDevices
{
	///<include file='Utils/Docs/MediaDevicesSelectAudioOutput/MediaDevicesSelectAudioOutput.generated.xml' path='docs/MediaDevicesSelectAudioOutput/*'/>
	public Task<MediaDeviceInfo> SelectAudioOutput(AudioOutputOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioOutputOptions
{
		public DOMString DeviceId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioSession : EventTarget
{
		public AudioSessionType Type { get; set; }
		public AudioSessionState State { get; }
		public EventHandler Onstatechange { get; set; }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Navigator
{
		public AudioSession AudioSession { get; }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorGetAutoplayPolicy/NavigatorGetAutoplayPolicy.generated.xml' path='docs/NavigatorGetAutoplayPolicy/*'/>
	public AutoplayPolicy GetAutoplayPolicy(AutoplayPolicyMediaType type) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigatorGetAutoplayPolicy/NavigatorGetAutoplayPolicy.generated.xml' path='docs/NavigatorGetAutoplayPolicy/*'/>
	public AutoplayPolicy GetAutoplayPolicy(HTMLMediaElement element) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigatorGetAutoplayPolicy/NavigatorGetAutoplayPolicy.generated.xml' path='docs/NavigatorGetAutoplayPolicy/*'/>
	public AutoplayPolicy GetAutoplayPolicy(AudioContext context) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ServiceWorkerGlobalScope/ServiceWorkerGlobalScope.generated.xml' path='docs/ServiceWorkerGlobalScope/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ServiceWorkerGlobalScope
{
		public EventHandler Onbackgroundfetchsuccess { get; set; }
		public EventHandler Onbackgroundfetchfail { get; set; }
		public EventHandler Onbackgroundfetchabort { get; set; }
		public EventHandler Onbackgroundfetchclick { get; set; }
}

///<include file='Utils/Docs/ServiceWorkerRegistration/ServiceWorkerRegistration.generated.xml' path='docs/ServiceWorkerRegistration/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ServiceWorkerRegistration
{
	///<include file='Utils/Docs/ServiceWorkerRegistrationBackgroundFetch/ServiceWorkerRegistrationBackgroundFetch.generated.xml' path='docs/ServiceWorkerRegistrationBackgroundFetch/*'/>
	public BackgroundFetchManager BackgroundFetch { get; }
}

///<include file='Utils/Docs/BackgroundFetchManager/BackgroundFetchManager.generated.xml' path='docs/BackgroundFetchManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BackgroundFetchManager
{
	///<include file='Utils/Docs/BackgroundFetchManagerFetch/BackgroundFetchManagerFetch.generated.xml' path='docs/BackgroundFetchManagerFetch/*'/>
	public Task<BackgroundFetchRegistration> Fetch(DOMString id, Union0 requests, BackgroundFetchOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BackgroundFetchManagerGet/BackgroundFetchManagerGet.generated.xml' path='docs/BackgroundFetchManagerGet/*'/>
	public Task<BackgroundFetchRegistration?> Get(DOMString id) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BackgroundFetchManagerGetIds/BackgroundFetchManagerGetIds.generated.xml' path='docs/BackgroundFetchManagerGetIds/*'/>
	public Task<List<DOMString>> GetIds() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BackgroundFetchUIOptions
{
		public List<ImageResource> Icons;
		public DOMString Title;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BackgroundFetchOptions : BackgroundFetchUIOptions
{
		public ulong DownloadTotal;
}

///<include file='Utils/Docs/BackgroundFetchRegistration/BackgroundFetchRegistration.generated.xml' path='docs/BackgroundFetchRegistration/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BackgroundFetchRegistration : EventTarget
{
	///<include file='Utils/Docs/BackgroundFetchRegistrationId/BackgroundFetchRegistrationId.generated.xml' path='docs/BackgroundFetchRegistrationId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/BackgroundFetchRegistrationUploadTotal/BackgroundFetchRegistrationUploadTotal.generated.xml' path='docs/BackgroundFetchRegistrationUploadTotal/*'/>
	public ulong UploadTotal { get; }
	///<include file='Utils/Docs/BackgroundFetchRegistrationUploaded/BackgroundFetchRegistrationUploaded.generated.xml' path='docs/BackgroundFetchRegistrationUploaded/*'/>
	public ulong Uploaded { get; }
	///<include file='Utils/Docs/BackgroundFetchRegistrationDownloadTotal/BackgroundFetchRegistrationDownloadTotal.generated.xml' path='docs/BackgroundFetchRegistrationDownloadTotal/*'/>
	public ulong DownloadTotal { get; }
	///<include file='Utils/Docs/BackgroundFetchRegistrationDownloaded/BackgroundFetchRegistrationDownloaded.generated.xml' path='docs/BackgroundFetchRegistrationDownloaded/*'/>
	public ulong Downloaded { get; }
	///<include file='Utils/Docs/BackgroundFetchRegistrationResult/BackgroundFetchRegistrationResult.generated.xml' path='docs/BackgroundFetchRegistrationResult/*'/>
	public BackgroundFetchResult Result { get; }
	///<include file='Utils/Docs/BackgroundFetchRegistrationFailureReason/BackgroundFetchRegistrationFailureReason.generated.xml' path='docs/BackgroundFetchRegistrationFailureReason/*'/>
	public BackgroundFetchFailureReason FailureReason { get; }
	///<include file='Utils/Docs/BackgroundFetchRegistrationRecordsAvailable/BackgroundFetchRegistrationRecordsAvailable.generated.xml' path='docs/BackgroundFetchRegistrationRecordsAvailable/*'/>
	public bool RecordsAvailable { get; }
		public EventHandler Onprogress { get; set; }
	///<include file='Utils/Docs/BackgroundFetchRegistrationAbort/BackgroundFetchRegistrationAbort.generated.xml' path='docs/BackgroundFetchRegistrationAbort/*'/>
	public Task<bool> Abort() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BackgroundFetchRegistrationMatch/BackgroundFetchRegistrationMatch.generated.xml' path='docs/BackgroundFetchRegistrationMatch/*'/>
	public Task<BackgroundFetchRecord> Match(RequestInfo request, CacheQueryOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BackgroundFetchRegistrationMatchAll/BackgroundFetchRegistrationMatchAll.generated.xml' path='docs/BackgroundFetchRegistrationMatchAll/*'/>
	public Task<List<BackgroundFetchRecord>> MatchAll(RequestInfo request, CacheQueryOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/BackgroundFetchRecord/BackgroundFetchRecord.generated.xml' path='docs/BackgroundFetchRecord/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BackgroundFetchRecord
{
	///<include file='Utils/Docs/BackgroundFetchRecordRequest/BackgroundFetchRecordRequest.generated.xml' path='docs/BackgroundFetchRecordRequest/*'/>
	public Request Request { get; }
	///<include file='Utils/Docs/BackgroundFetchRecordResponseReady/BackgroundFetchRecordResponseReady.generated.xml' path='docs/BackgroundFetchRecordResponseReady/*'/>
	public Task<Response> ResponseReady { get; }
}

///<include file='Utils/Docs/BackgroundFetchEvent/BackgroundFetchEvent.generated.xml' path='docs/BackgroundFetchEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BackgroundFetchEvent : ExtendableEvent
{
	///<include file='Utils/Docs/BackgroundFetchEventBackgroundFetchEvent/BackgroundFetchEventBackgroundFetchEvent.generated.xml' path='docs/BackgroundFetchEventBackgroundFetchEvent/*'/>
	public BackgroundFetchEvent(DOMString type, BackgroundFetchEventInit init) { }
	///<include file='Utils/Docs/BackgroundFetchEventRegistration/BackgroundFetchEventRegistration.generated.xml' path='docs/BackgroundFetchEventRegistration/*'/>
	public BackgroundFetchRegistration Registration { get; }
	public BackgroundFetchEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BackgroundFetchEventInit : ExtendableEventInit
{
		public required BackgroundFetchRegistration Registration;
}

///<include file='Utils/Docs/BackgroundFetchUpdateUIEvent/BackgroundFetchUpdateUIEvent.generated.xml' path='docs/BackgroundFetchUpdateUIEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BackgroundFetchUpdateUIEvent : BackgroundFetchEvent
{
	///<include file='Utils/Docs/BackgroundFetchUpdateUIEventBackgroundFetchUpdateUIEvent/BackgroundFetchUpdateUIEventBackgroundFetchUpdateUIEvent.generated.xml' path='docs/BackgroundFetchUpdateUIEventBackgroundFetchUpdateUIEvent/*'/>
	public BackgroundFetchUpdateUIEvent(DOMString type, BackgroundFetchEventInit init) { }
	///<include file='Utils/Docs/BackgroundFetchUpdateUIEventUpdateUI/BackgroundFetchUpdateUIEventUpdateUI.generated.xml' path='docs/BackgroundFetchUpdateUIEventUpdateUI/*'/>
	public Task<Undefined> UpdateUI(BackgroundFetchUIOptions options) { throw new System.NotImplementedException(); }
	public BackgroundFetchUpdateUIEvent() { }
}

///<include file='Utils/Docs/ServiceWorkerRegistration/ServiceWorkerRegistration.generated.xml' path='docs/ServiceWorkerRegistration/*'/>
public partial class ServiceWorkerRegistration
{
	///<include file='Utils/Docs/ServiceWorkerRegistrationSync/ServiceWorkerRegistrationSync.generated.xml' path='docs/ServiceWorkerRegistrationSync/*'/>
	public SyncManager Sync { get; }
}

///<include file='Utils/Docs/SyncManager/SyncManager.generated.xml' path='docs/SyncManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SyncManager
{
	///<include file='Utils/Docs/SyncManagerRegister/SyncManagerRegister.generated.xml' path='docs/SyncManagerRegister/*'/>
	public Task<Undefined> Register(DOMString tag) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SyncManagerGetTags/SyncManagerGetTags.generated.xml' path='docs/SyncManagerGetTags/*'/>
	public Task<List<DOMString>> GetTags() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ServiceWorkerGlobalScope/ServiceWorkerGlobalScope.generated.xml' path='docs/ServiceWorkerGlobalScope/*'/>
public partial class ServiceWorkerGlobalScope
{
		public EventHandler Onsync { get; set; }
}

///<include file='Utils/Docs/SyncEvent/SyncEvent.generated.xml' path='docs/SyncEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SyncEvent : ExtendableEvent
{
	///<include file='Utils/Docs/SyncEventSyncEvent/SyncEventSyncEvent.generated.xml' path='docs/SyncEventSyncEvent/*'/>
	public SyncEvent(DOMString type, SyncEventInit init) { }
	///<include file='Utils/Docs/SyncEventTag/SyncEventTag.generated.xml' path='docs/SyncEventTag/*'/>
	public DOMString Tag { get; }
	///<include file='Utils/Docs/SyncEventLastChance/SyncEventLastChance.generated.xml' path='docs/SyncEventLastChance/*'/>
	public bool LastChance { get; }
	public SyncEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SyncEventInit : ExtendableEventInit
{
		public required DOMString Tag;
		public bool LastChance;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorGetBattery/NavigatorGetBattery.generated.xml' path='docs/NavigatorGetBattery/*'/>
	public Task<BatteryManager> GetBattery() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/BatteryManager/BatteryManager.generated.xml' path='docs/BatteryManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BatteryManager : EventTarget
{
	///<include file='Utils/Docs/BatteryManagerCharging/BatteryManagerCharging.generated.xml' path='docs/BatteryManagerCharging/*'/>
	public bool Charging { get; }
	///<include file='Utils/Docs/BatteryManagerChargingTime/BatteryManagerChargingTime.generated.xml' path='docs/BatteryManagerChargingTime/*'/>
	public double ChargingTime { get; }
	///<include file='Utils/Docs/BatteryManagerDischargingTime/BatteryManagerDischargingTime.generated.xml' path='docs/BatteryManagerDischargingTime/*'/>
	public double DischargingTime { get; }
	///<include file='Utils/Docs/BatteryManagerLevel/BatteryManagerLevel.generated.xml' path='docs/BatteryManagerLevel/*'/>
	public Number Level { get; }
		public EventHandler Onchargingchange { get; set; }
		public EventHandler Onchargingtimechange { get; set; }
		public EventHandler Ondischargingtimechange { get; set; }
		public EventHandler Onlevelchange { get; set; }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorSendBeacon/NavigatorSendBeacon.generated.xml' path='docs/NavigatorSendBeacon/*'/>
	public bool SendBeacon(USVString url, BodyInit? data) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CaptureHandleConfig
{
		public bool ExposeOrigin;
		public DOMString Handle;
		public List<DOMString> PermittedOrigins;
}

///<include file='Utils/Docs/MediaDevices/MediaDevices.generated.xml' path='docs/MediaDevices/*'/>
public partial class MediaDevices
{
		public Undefined SetCaptureHandleConfig(CaptureHandleConfig config) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CaptureHandle
{
		public DOMString Origin;
		public DOMString Handle;
}

///<include file='Utils/Docs/MediaStreamTrack/MediaStreamTrack.generated.xml' path='docs/MediaStreamTrack/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamTrack
{
		public CaptureHandle? GetCaptureHandle() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaStreamTrack/MediaStreamTrack.generated.xml' path='docs/MediaStreamTrack/*'/>
public partial class MediaStreamTrack
{
		public EventHandler Oncapturehandlechange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CapturedMouseEvent : Event
{
		public CapturedMouseEvent(DOMString type, CapturedMouseEventInit eventInitDict) { }
		public long SurfaceX { get; }
		public long SurfaceY { get; }
	public CapturedMouseEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CapturedMouseEventInit : EventInit
{
		public long SurfaceX;
		public long SurfaceY;
}

///<include file='Utils/Docs/CaptureController/CaptureController.generated.xml' path='docs/CaptureController/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CaptureController
{
		public EventHandler Oncapturedmousechange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ClipboardEventInit : EventInit
{
		public DataTransfer? ClipboardData;
}

///<include file='Utils/Docs/ClipboardEvent/ClipboardEvent.generated.xml' path='docs/ClipboardEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ClipboardEvent : Event
{
	///<include file='Utils/Docs/ClipboardEventClipboardEvent/ClipboardEventClipboardEvent.generated.xml' path='docs/ClipboardEventClipboardEvent/*'/>
	public ClipboardEvent(DOMString type, ClipboardEventInit eventInitDict) { }
	///<include file='Utils/Docs/ClipboardEventClipboardData/ClipboardEventClipboardData.generated.xml' path='docs/ClipboardEventClipboardData/*'/>
	public DataTransfer? ClipboardData { get; }
	public ClipboardEvent() { }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorClipboard/NavigatorClipboard.generated.xml' path='docs/NavigatorClipboard/*'/>
	public Clipboard Clipboard { get; }
}


///<include file='Utils/Docs/ClipboardItem/ClipboardItem.generated.xml' path='docs/ClipboardItem/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ClipboardItem
{
	///<include file='Utils/Docs/ClipboardItemClipboardItem/ClipboardItemClipboardItem.generated.xml' path='docs/ClipboardItemClipboardItem/*'/>
	public ClipboardItem(Dictionary<DOMString, ClipboardItemData> items, ClipboardItemOptions options) { }
	///<include file='Utils/Docs/ClipboardItemPresentationStyle/ClipboardItemPresentationStyle.generated.xml' path='docs/ClipboardItemPresentationStyle/*'/>
	public PresentationStyle PresentationStyle { get; }
	///<include file='Utils/Docs/ClipboardItemTypes/ClipboardItemTypes.generated.xml' path='docs/ClipboardItemTypes/*'/>
	public DOMString[] Types { get; }
	///<include file='Utils/Docs/ClipboardItemGetType/ClipboardItemGetType.generated.xml' path='docs/ClipboardItemGetType/*'/>
	public Task<Blob> GetType(DOMString type) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ClipboardItemSupports/ClipboardItemSupports.generated.xml' path='docs/ClipboardItemSupports/*'/>
	public static bool Supports(DOMString type) { throw new System.NotImplementedException(); }
	public ClipboardItem() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ClipboardItemOptions
{
		public PresentationStyle PresentationStyle;
}


///<include file='Utils/Docs/Clipboard/Clipboard.generated.xml' path='docs/Clipboard/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Clipboard : EventTarget
{
	///<include file='Utils/Docs/ClipboardRead/ClipboardRead.generated.xml' path='docs/ClipboardRead/*'/>
	public Task<ClipboardItems> Read(ClipboardUnsanitizedFormats formats) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ClipboardReadText/ClipboardReadText.generated.xml' path='docs/ClipboardReadText/*'/>
	public Task<DOMString> ReadText() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ClipboardWrite/ClipboardWrite.generated.xml' path='docs/ClipboardWrite/*'/>
	public Task<Undefined> Write(ClipboardItems data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ClipboardWriteText/ClipboardWriteText.generated.xml' path='docs/ClipboardWriteText/*'/>
	public Task<Undefined> WriteText(DOMString data) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ClipboardUnsanitizedFormats
{
		public List<DOMString> Unsanitized;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ClipboardPermissionDescriptor : PermissionDescriptor
{
		public bool AllowWithoutGesture;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowOrientation/WindowOrientation.generated.xml' path='docs/WindowOrientation/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Orientation { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onorientationchange { get; set; }
}

///<include file='Utils/Docs/HTMLBodyElement/HTMLBodyElement.generated.xml' path='docs/HTMLBodyElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLBodyElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onorientationchange { get; set; }
}

///<include file='Utils/Docs/CompressionStream/CompressionStream.generated.xml' path='docs/CompressionStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CompressionStream
{
	///<include file='Utils/Docs/CompressionStreamCompressionStream/CompressionStreamCompressionStream.generated.xml' path='docs/CompressionStreamCompressionStream/*'/>
	public CompressionStream(CompressionFormat format) { }
	public CompressionStream() { }
}


///<include file='Utils/Docs/DecompressionStream/DecompressionStream.generated.xml' path='docs/DecompressionStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DecompressionStream
{
	///<include file='Utils/Docs/DecompressionStreamDecompressionStream/DecompressionStreamDecompressionStream.generated.xml' path='docs/DecompressionStreamDecompressionStream/*'/>
	public DecompressionStream(CompressionFormat format) { }
	public DecompressionStream() { }
}


///<include file='Utils/Docs/PressureObserver/PressureObserver.generated.xml' path='docs/PressureObserver/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PressureObserver
{
	///<include file='Utils/Docs/PressureObserverPressureObserver/PressureObserverPressureObserver.generated.xml' path='docs/PressureObserverPressureObserver/*'/>
	public PressureObserver(PressureUpdateCallback callback) { }
	///<include file='Utils/Docs/PressureObserverObserve/PressureObserverObserve.generated.xml' path='docs/PressureObserverObserve/*'/>
	public Task<Undefined> Observe(PressureSource source, PressureObserverOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PressureObserverUnobserve/PressureObserverUnobserve.generated.xml' path='docs/PressureObserverUnobserve/*'/>
	public Undefined Unobserve(PressureSource source) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PressureObserverDisconnect/PressureObserverDisconnect.generated.xml' path='docs/PressureObserverDisconnect/*'/>
	public Undefined Disconnect() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PressureObserverTakeRecords/PressureObserverTakeRecords.generated.xml' path='docs/PressureObserverTakeRecords/*'/>
	public List<PressureRecord> TakeRecords() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PressureObserverKnownSources/PressureObserverKnownSources.generated.xml' path='docs/PressureObserverKnownSources/*'/>
	public static PressureSource[] KnownSources { get; }
	public PressureObserver() { }
}

///<include file='Utils/Docs/PressureRecord/PressureRecord.generated.xml' path='docs/PressureRecord/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PressureRecord
{
	///<include file='Utils/Docs/PressureRecordSource/PressureRecordSource.generated.xml' path='docs/PressureRecordSource/*'/>
	public PressureSource Source { get; }
	///<include file='Utils/Docs/PressureRecordState/PressureRecordState.generated.xml' path='docs/PressureRecordState/*'/>
	public PressureState State { get; }
	///<include file='Utils/Docs/PressureRecordTime/PressureRecordTime.generated.xml' path='docs/PressureRecordTime/*'/>
	public DOMHighResTimeStamp Time { get; }
	///<include file='Utils/Docs/PressureRecordToJSON/PressureRecordToJSON.generated.xml' path='docs/PressureRecordToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PressureObserverOptions
{
		public ulong SampleInterval;
}

///<include file='Utils/Docs/Console/Console.generated.xml' path='docs/Console/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class console
{
	///<include file='Utils/Docs/ConsoleAssert/ConsoleAssert.generated.xml' path='docs/ConsoleAssert/*'/>
	public Undefined Assert(bool condition, params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleClear/ConsoleClear.generated.xml' path='docs/ConsoleClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleDebug/ConsoleDebug.generated.xml' path='docs/ConsoleDebug/*'/>
	public Undefined Debug(params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleError/ConsoleError.generated.xml' path='docs/ConsoleError/*'/>
	public Undefined Error(params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleInfo/ConsoleInfo.generated.xml' path='docs/ConsoleInfo/*'/>
	public Undefined Info(params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleLog/ConsoleLog.generated.xml' path='docs/ConsoleLog/*'/>
	public Undefined Log(params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleTable/ConsoleTable.generated.xml' path='docs/ConsoleTable/*'/>
	public Undefined Table(dynamic tabularData, List<DOMString> properties) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleTrace/ConsoleTrace.generated.xml' path='docs/ConsoleTrace/*'/>
	public Undefined Trace(params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleWarn/ConsoleWarn.generated.xml' path='docs/ConsoleWarn/*'/>
	public Undefined Warn(params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleDir/ConsoleDir.generated.xml' path='docs/ConsoleDir/*'/>
	public Undefined Dir(dynamic item, Object? options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleDirxml/ConsoleDirxml.generated.xml' path='docs/ConsoleDirxml/*'/>
	public Undefined Dirxml(params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleCount/ConsoleCount.generated.xml' path='docs/ConsoleCount/*'/>
	public Undefined Count(DOMString label) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleCountReset/ConsoleCountReset.generated.xml' path='docs/ConsoleCountReset/*'/>
	public Undefined CountReset(DOMString label) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleGroup/ConsoleGroup.generated.xml' path='docs/ConsoleGroup/*'/>
	public Undefined Group(params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleGroupCollapsed/ConsoleGroupCollapsed.generated.xml' path='docs/ConsoleGroupCollapsed/*'/>
	public Undefined GroupCollapsed(params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleGroupEnd/ConsoleGroupEnd.generated.xml' path='docs/ConsoleGroupEnd/*'/>
	public Undefined GroupEnd() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleTime/ConsoleTime.generated.xml' path='docs/ConsoleTime/*'/>
	public Undefined Time(DOMString label) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleTimeLog/ConsoleTimeLog.generated.xml' path='docs/ConsoleTimeLog/*'/>
	public Undefined TimeLog(DOMString label, params dynamic[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ConsoleTimeEnd/ConsoleTimeEnd.generated.xml' path='docs/ConsoleTimeEnd/*'/>
	public Undefined TimeEnd(DOMString label) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorContacts/NavigatorContacts.generated.xml' path='docs/NavigatorContacts/*'/>
	public ContactsManager Contacts { get; }
}

///<include file='Utils/Docs/ContactAddress/ContactAddress.generated.xml' path='docs/ContactAddress/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ContactAddress
{
	///<include file='Utils/Docs/ContactAddressToJSON/ContactAddressToJSON.generated.xml' path='docs/ContactAddressToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ContactAddressCity/ContactAddressCity.generated.xml' path='docs/ContactAddressCity/*'/>
	public DOMString City { get; }
	///<include file='Utils/Docs/ContactAddressCountry/ContactAddressCountry.generated.xml' path='docs/ContactAddressCountry/*'/>
	public DOMString Country { get; }
	///<include file='Utils/Docs/ContactAddressDependentLocality/ContactAddressDependentLocality.generated.xml' path='docs/ContactAddressDependentLocality/*'/>
	public DOMString DependentLocality { get; }
	///<include file='Utils/Docs/ContactAddressOrganization/ContactAddressOrganization.generated.xml' path='docs/ContactAddressOrganization/*'/>
	public DOMString Organization { get; }
	///<include file='Utils/Docs/ContactAddressPhone/ContactAddressPhone.generated.xml' path='docs/ContactAddressPhone/*'/>
	public DOMString Phone { get; }
	///<include file='Utils/Docs/ContactAddressPostalCode/ContactAddressPostalCode.generated.xml' path='docs/ContactAddressPostalCode/*'/>
	public DOMString PostalCode { get; }
	///<include file='Utils/Docs/ContactAddressRecipient/ContactAddressRecipient.generated.xml' path='docs/ContactAddressRecipient/*'/>
	public DOMString Recipient { get; }
	///<include file='Utils/Docs/ContactAddressRegion/ContactAddressRegion.generated.xml' path='docs/ContactAddressRegion/*'/>
	public DOMString Region { get; }
	///<include file='Utils/Docs/ContactAddressSortingCode/ContactAddressSortingCode.generated.xml' path='docs/ContactAddressSortingCode/*'/>
	public DOMString SortingCode { get; }
	///<include file='Utils/Docs/ContactAddressAddressLine/ContactAddressAddressLine.generated.xml' path='docs/ContactAddressAddressLine/*'/>
	public DOMString[] AddressLine { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ContactInfo
{
		public List<ContactAddress> Address;
		public List<DOMString> Email;
		public List<Blob> Icon;
		public List<DOMString> Name;
		public List<DOMString> Tel;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ContactsSelectOptions
{
		public bool Multiple;
}

///<include file='Utils/Docs/ContactsManager/ContactsManager.generated.xml' path='docs/ContactsManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ContactsManager
{
	///<include file='Utils/Docs/ContactsManagerGetProperties/ContactsManagerGetProperties.generated.xml' path='docs/ContactsManagerGetProperties/*'/>
	public Task<List<ContactProperty>> GetProperties() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ContactsManagerSelect/ContactsManagerSelect.generated.xml' path='docs/ContactsManagerSelect/*'/>
	public Task<List<ContactInfo>> Select(List<ContactProperty> properties, ContactsSelectOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ServiceWorkerGlobalScope/ServiceWorkerGlobalScope.generated.xml' path='docs/ServiceWorkerGlobalScope/*'/>
public partial class ServiceWorkerGlobalScope
{
		public EventHandler Oncontentdelete { get; set; }
}

///<include file='Utils/Docs/ServiceWorkerRegistration/ServiceWorkerRegistration.generated.xml' path='docs/ServiceWorkerRegistration/*'/>
public partial class ServiceWorkerRegistration
{
	///<include file='Utils/Docs/ServiceWorkerRegistrationIndex/ServiceWorkerRegistrationIndex.generated.xml' path='docs/ServiceWorkerRegistrationIndex/*'/>
	public ContentIndex Index { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ContentDescription
{
		public required DOMString Id;
		public required DOMString Title;
		public required DOMString Description;
		public ContentCategory Category;
		public List<ImageResource> Icons;
		public required USVString Url;
}

///<include file='Utils/Docs/ContentIndex/ContentIndex.generated.xml' path='docs/ContentIndex/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ContentIndex
{
	///<include file='Utils/Docs/ContentIndexAdd/ContentIndexAdd.generated.xml' path='docs/ContentIndexAdd/*'/>
	public Task<Undefined> Add(ContentDescription description) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ContentIndexDelete/ContentIndexDelete.generated.xml' path='docs/ContentIndexDelete/*'/>
	public Task<Undefined> Delete(DOMString id) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ContentIndexGetAll/ContentIndexGetAll.generated.xml' path='docs/ContentIndexGetAll/*'/>
	public Task<List<ContentDescription>> GetAll() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ContentIndexEventInit : ExtendableEventInit
{
		public required DOMString Id;
}

///<include file='Utils/Docs/ContentIndexEvent/ContentIndexEvent.generated.xml' path='docs/ContentIndexEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ContentIndexEvent : ExtendableEvent
{
	///<include file='Utils/Docs/ContentIndexEventContentIndexEvent/ContentIndexEventContentIndexEvent.generated.xml' path='docs/ContentIndexEventContentIndexEvent/*'/>
	public ContentIndexEvent(DOMString type, ContentIndexEventInit init) { }
	///<include file='Utils/Docs/ContentIndexEventId/ContentIndexEventId.generated.xml' path='docs/ContentIndexEventId/*'/>
	public DOMString Id { get; }
	public ContentIndexEvent() { }
}

///<include file='Utils/Docs/CookieStore/CookieStore.generated.xml' path='docs/CookieStore/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CookieStore : EventTarget
{
	///<include file='Utils/Docs/CookieStoreGet/CookieStoreGet.generated.xml' path='docs/CookieStoreGet/*'/>
	public Task<CookieListItem?> Get(USVString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CookieStoreGet/CookieStoreGet.generated.xml' path='docs/CookieStoreGet/*'/>
	public Task<CookieListItem?> Get(CookieStoreGetOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CookieStoreGetAll/CookieStoreGetAll.generated.xml' path='docs/CookieStoreGetAll/*'/>
	public Task<CookieList> GetAll(USVString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CookieStoreGetAll/CookieStoreGetAll.generated.xml' path='docs/CookieStoreGetAll/*'/>
	public Task<CookieList> GetAll(CookieStoreGetOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CookieStoreSet/CookieStoreSet.generated.xml' path='docs/CookieStoreSet/*'/>
	public Task<Undefined> Set(USVString name, USVString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CookieStoreSet/CookieStoreSet.generated.xml' path='docs/CookieStoreSet/*'/>
	public Task<Undefined> Set(CookieInit options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CookieStoreDelete/CookieStoreDelete.generated.xml' path='docs/CookieStoreDelete/*'/>
	public Task<Undefined> Delete(USVString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CookieStoreDelete/CookieStoreDelete.generated.xml' path='docs/CookieStoreDelete/*'/>
	public Task<Undefined> Delete(CookieStoreDeleteOptions options) { throw new System.NotImplementedException(); }
		public EventHandler Onchange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CookieStoreGetOptions
{
		public USVString Name;
		public USVString Url;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CookieInit
{
		public required USVString Name;
		public required USVString Value;
		public DOMHighResTimeStamp? Expires;
		public USVString? Domain;
		public USVString Path;
		public CookieSameSite SameSite;
		public bool Partitioned;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CookieStoreDeleteOptions
{
		public required USVString Name;
		public USVString? Domain;
		public USVString Path;
		public bool Partitioned;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CookieListItem
{
		public USVString Name;
		public USVString Value;
		public USVString? Domain;
		public USVString Path;
		public DOMHighResTimeStamp? Expires;
		public bool Secure;
		public CookieSameSite SameSite;
		public bool Partitioned;
}


///<include file='Utils/Docs/CookieStoreManager/CookieStoreManager.generated.xml' path='docs/CookieStoreManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CookieStoreManager
{
	///<include file='Utils/Docs/CookieStoreManagerSubscribe/CookieStoreManagerSubscribe.generated.xml' path='docs/CookieStoreManagerSubscribe/*'/>
	public Task<Undefined> Subscribe(List<CookieStoreGetOptions> subscriptions) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CookieStoreManagerGetSubscriptions/CookieStoreManagerGetSubscriptions.generated.xml' path='docs/CookieStoreManagerGetSubscriptions/*'/>
	public Task<List<CookieStoreGetOptions>> GetSubscriptions() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CookieStoreManagerUnsubscribe/CookieStoreManagerUnsubscribe.generated.xml' path='docs/CookieStoreManagerUnsubscribe/*'/>
	public Task<Undefined> Unsubscribe(List<CookieStoreGetOptions> subscriptions) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ServiceWorkerRegistration/ServiceWorkerRegistration.generated.xml' path='docs/ServiceWorkerRegistration/*'/>
public partial class ServiceWorkerRegistration
{
	///<include file='Utils/Docs/ServiceWorkerRegistrationCookies/ServiceWorkerRegistrationCookies.generated.xml' path='docs/ServiceWorkerRegistrationCookies/*'/>
	public CookieStoreManager Cookies { get; }
}

///<include file='Utils/Docs/CookieChangeEvent/CookieChangeEvent.generated.xml' path='docs/CookieChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CookieChangeEvent : Event
{
	///<include file='Utils/Docs/CookieChangeEventCookieChangeEvent/CookieChangeEventCookieChangeEvent.generated.xml' path='docs/CookieChangeEventCookieChangeEvent/*'/>
	public CookieChangeEvent(DOMString type, CookieChangeEventInit eventInitDict) { }
	///<include file='Utils/Docs/CookieChangeEventChanged/CookieChangeEventChanged.generated.xml' path='docs/CookieChangeEventChanged/*'/>
	public CookieListItem[] Changed { get; }
	///<include file='Utils/Docs/CookieChangeEventDeleted/CookieChangeEventDeleted.generated.xml' path='docs/CookieChangeEventDeleted/*'/>
	public CookieListItem[] Deleted { get; }
	public CookieChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CookieChangeEventInit : EventInit
{
		public CookieList Changed;
		public CookieList Deleted;
}

///<include file='Utils/Docs/ExtendableCookieChangeEvent/ExtendableCookieChangeEvent.generated.xml' path='docs/ExtendableCookieChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ExtendableCookieChangeEvent : ExtendableEvent
{
	///<include file='Utils/Docs/ExtendableCookieChangeEventExtendableCookieChangeEvent/ExtendableCookieChangeEventExtendableCookieChangeEvent.generated.xml' path='docs/ExtendableCookieChangeEventExtendableCookieChangeEvent/*'/>
	public ExtendableCookieChangeEvent(DOMString type, ExtendableCookieChangeEventInit eventInitDict) { }
	///<include file='Utils/Docs/ExtendableCookieChangeEventChanged/ExtendableCookieChangeEventChanged.generated.xml' path='docs/ExtendableCookieChangeEventChanged/*'/>
	public CookieListItem[] Changed { get; }
	///<include file='Utils/Docs/ExtendableCookieChangeEventDeleted/ExtendableCookieChangeEventDeleted.generated.xml' path='docs/ExtendableCookieChangeEventDeleted/*'/>
	public CookieListItem[] Deleted { get; }
	public ExtendableCookieChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ExtendableCookieChangeEventInit : ExtendableEventInit
{
		public CookieList Changed;
		public CookieList Deleted;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowCookieStore/WindowCookieStore.generated.xml' path='docs/WindowCookieStore/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CookieStore CookieStore { get; }
}

///<include file='Utils/Docs/ServiceWorkerGlobalScope/ServiceWorkerGlobalScope.generated.xml' path='docs/ServiceWorkerGlobalScope/*'/>
public partial class ServiceWorkerGlobalScope
{
	///<include file='Utils/Docs/ServiceWorkerGlobalScopeCookieStore/ServiceWorkerGlobalScopeCookieStore.generated.xml' path='docs/ServiceWorkerGlobalScopeCookieStore/*'/>
	public CookieStore CookieStore { get; }
		public EventHandler Oncookiechange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CrashReportBody : ReportBody
{
		public Object ToJSON() { throw new System.NotImplementedException(); }
		public DOMString? Reason { get; }
		public DOMString? Stack { get; }
}

///<include file='Utils/Docs/Credential/Credential.generated.xml' path='docs/Credential/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Credential
{
	///<include file='Utils/Docs/CredentialId/CredentialId.generated.xml' path='docs/CredentialId/*'/>
	public USVString Id { get; }
	///<include file='Utils/Docs/CredentialType/CredentialType.generated.xml' path='docs/CredentialType/*'/>
	public DOMString Type { get; }
		public static Task<bool> IsConditionalMediationAvailable() { throw new System.NotImplementedException(); }
		public static Task<Undefined> WillRequestConditionalCreation() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorCredentials/NavigatorCredentials.generated.xml' path='docs/NavigatorCredentials/*'/>
	public CredentialsContainer Credentials { get; }
}

///<include file='Utils/Docs/CredentialsContainer/CredentialsContainer.generated.xml' path='docs/CredentialsContainer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CredentialsContainer
{
	///<include file='Utils/Docs/CredentialsContainerGet/CredentialsContainerGet.generated.xml' path='docs/CredentialsContainerGet/*'/>
	public Task<Credential?> Get(CredentialRequestOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CredentialsContainerStore/CredentialsContainerStore.generated.xml' path='docs/CredentialsContainerStore/*'/>
	public Task<Undefined> Store(Credential credential) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CredentialsContainerCreate/CredentialsContainerCreate.generated.xml' path='docs/CredentialsContainerCreate/*'/>
	public Task<Credential?> Create(CredentialCreationOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CredentialsContainerPreventSilentAccess/CredentialsContainerPreventSilentAccess.generated.xml' path='docs/CredentialsContainerPreventSilentAccess/*'/>
	public Task<Undefined> PreventSilentAccess() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CredentialData
{
		public required USVString Id;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CredentialRequestOptions
{
		public CredentialMediationRequirement Mediation;
		public AbortSignal Signal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CredentialCreationOptions
{
		public CredentialMediationRequirement Mediation;
		public AbortSignal Signal;
}

///<include file='Utils/Docs/PasswordCredential/PasswordCredential.generated.xml' path='docs/PasswordCredential/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PasswordCredential : Credential, CredentialUserData
{
	///<include file='Utils/Docs/PasswordCredentialPasswordCredential/PasswordCredentialPasswordCredential.generated.xml' path='docs/PasswordCredentialPasswordCredential/*'/>
	public PasswordCredential(HTMLFormElement form) { }
	///<include file='Utils/Docs/PasswordCredentialPasswordCredential/PasswordCredentialPasswordCredential.generated.xml' path='docs/PasswordCredentialPasswordCredential/*'/>
	public PasswordCredential(PasswordCredentialData data) { }
	///<include file='Utils/Docs/PasswordCredentialPassword/PasswordCredentialPassword.generated.xml' path='docs/PasswordCredentialPassword/*'/>
	public USVString Password { get; }
	public PasswordCredential() { }
}


public partial class CredentialRequestOptions
{
		public bool Password;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PasswordCredentialData : CredentialData
{
		public USVString Name;
		public USVString IconURL;
		public required USVString Origin;
		public required USVString Password;
}


public partial class CredentialCreationOptions
{
		public PasswordCredentialInit Password;
}

///<include file='Utils/Docs/FederatedCredential/FederatedCredential.generated.xml' path='docs/FederatedCredential/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FederatedCredential : Credential, CredentialUserData
{
	///<include file='Utils/Docs/FederatedCredentialFederatedCredential/FederatedCredentialFederatedCredential.generated.xml' path='docs/FederatedCredentialFederatedCredential/*'/>
	public FederatedCredential(FederatedCredentialInit data) { }
	///<include file='Utils/Docs/FederatedCredentialProvider/FederatedCredentialProvider.generated.xml' path='docs/FederatedCredentialProvider/*'/>
	public USVString Provider { get; }
	///<include file='Utils/Docs/FederatedCredentialProtocol/FederatedCredentialProtocol.generated.xml' path='docs/FederatedCredentialProtocol/*'/>
	public DOMString? Protocol { get; }
	public FederatedCredential() { }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class FederatedCredentialRequestOptions
{
		public List<USVString> Providers;
		public List<DOMString> Protocols;
}

public partial class CredentialRequestOptions
{
		public FederatedCredentialRequestOptions Federated;
}

///<include file='Utils/Docs/FederatedCredentialInit/FederatedCredentialInit.generated.xml' path='docs/FederatedCredentialInit/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FederatedCredentialInit : CredentialData
{
		public USVString Name;
		public USVString IconURL;
		public required USVString Origin;
		public required USVString Provider;
		public DOMString Protocol;
}

public partial class CredentialCreationOptions
{
		public FederatedCredentialInit Federated;
}

///<include file='Utils/Docs/HTMLIFrameElement/HTMLIFrameElement.generated.xml' path='docs/HTMLIFrameElement/*'/>
public partial class HTMLIFrameElement
{
	///<include file='Utils/Docs/HTMLIFrameElementCsp/HTMLIFrameElementCsp.generated.xml' path='docs/HTMLIFrameElementCsp/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Csp { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScriptingPolicyReportBody : ReportBody
{
		public Object ToJSON() { throw new System.NotImplementedException(); }
		public DOMString ViolationType { get; }
		public USVString? ViolationURL { get; }
		public USVString? ViolationSample { get; }
		public ulong Lineno { get; }
		public ulong Colno { get; }
}

///<include file='Utils/Docs/CSPViolationReportBody/CSPViolationReportBody.generated.xml' path='docs/CSPViolationReportBody/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CSPViolationReportBody : ReportBody
{
	///<include file='Utils/Docs/CSPViolationReportBodyToJSON/CSPViolationReportBodyToJSON.generated.xml' path='docs/CSPViolationReportBodyToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSPViolationReportBodyDocumentURL/CSPViolationReportBodyDocumentURL.generated.xml' path='docs/CSPViolationReportBodyDocumentURL/*'/>
	public USVString DocumentURL { get; }
	///<include file='Utils/Docs/CSPViolationReportBodyReferrer/CSPViolationReportBodyReferrer.generated.xml' path='docs/CSPViolationReportBodyReferrer/*'/>
	public USVString? Referrer { get; }
	///<include file='Utils/Docs/CSPViolationReportBodyBlockedURL/CSPViolationReportBodyBlockedURL.generated.xml' path='docs/CSPViolationReportBodyBlockedURL/*'/>
	public USVString? BlockedURL { get; }
	///<include file='Utils/Docs/CSPViolationReportBodyEffectiveDirective/CSPViolationReportBodyEffectiveDirective.generated.xml' path='docs/CSPViolationReportBodyEffectiveDirective/*'/>
	public DOMString EffectiveDirective { get; }
	///<include file='Utils/Docs/CSPViolationReportBodyOriginalPolicy/CSPViolationReportBodyOriginalPolicy.generated.xml' path='docs/CSPViolationReportBodyOriginalPolicy/*'/>
	public DOMString OriginalPolicy { get; }
	///<include file='Utils/Docs/CSPViolationReportBodySourceFile/CSPViolationReportBodySourceFile.generated.xml' path='docs/CSPViolationReportBodySourceFile/*'/>
	public USVString? SourceFile { get; }
	///<include file='Utils/Docs/CSPViolationReportBodySample/CSPViolationReportBodySample.generated.xml' path='docs/CSPViolationReportBodySample/*'/>
	public DOMString? Sample { get; }
	///<include file='Utils/Docs/CSPViolationReportBodyDisposition/CSPViolationReportBodyDisposition.generated.xml' path='docs/CSPViolationReportBodyDisposition/*'/>
	public SecurityPolicyViolationEventDisposition Disposition { get; }
	///<include file='Utils/Docs/CSPViolationReportBodyStatusCode/CSPViolationReportBodyStatusCode.generated.xml' path='docs/CSPViolationReportBodyStatusCode/*'/>
	public ushort StatusCode { get; }
	///<include file='Utils/Docs/CSPViolationReportBodyLineNumber/CSPViolationReportBodyLineNumber.generated.xml' path='docs/CSPViolationReportBodyLineNumber/*'/>
	public ulong? LineNumber { get; }
	///<include file='Utils/Docs/CSPViolationReportBodyColumnNumber/CSPViolationReportBodyColumnNumber.generated.xml' path='docs/CSPViolationReportBodyColumnNumber/*'/>
	public ulong? ColumnNumber { get; }
}

///<include file='Utils/Docs/SecurityPolicyViolationEvent/SecurityPolicyViolationEvent.generated.xml' path='docs/SecurityPolicyViolationEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SecurityPolicyViolationEvent : Event
{
	///<include file='Utils/Docs/SecurityPolicyViolationEventSecurityPolicyViolationEvent/SecurityPolicyViolationEventSecurityPolicyViolationEvent.generated.xml' path='docs/SecurityPolicyViolationEventSecurityPolicyViolationEvent/*'/>
	public SecurityPolicyViolationEvent(DOMString type, SecurityPolicyViolationEventInit eventInitDict) { }
	///<include file='Utils/Docs/SecurityPolicyViolationEventDocumentURI/SecurityPolicyViolationEventDocumentURI.generated.xml' path='docs/SecurityPolicyViolationEventDocumentURI/*'/>
	public USVString DocumentURI { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventReferrer/SecurityPolicyViolationEventReferrer.generated.xml' path='docs/SecurityPolicyViolationEventReferrer/*'/>
	public USVString Referrer { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventBlockedURI/SecurityPolicyViolationEventBlockedURI.generated.xml' path='docs/SecurityPolicyViolationEventBlockedURI/*'/>
	public USVString BlockedURI { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventEffectiveDirective/SecurityPolicyViolationEventEffectiveDirective.generated.xml' path='docs/SecurityPolicyViolationEventEffectiveDirective/*'/>
	public DOMString EffectiveDirective { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventViolatedDirective/SecurityPolicyViolationEventViolatedDirective.generated.xml' path='docs/SecurityPolicyViolationEventViolatedDirective/*'/>
	public DOMString ViolatedDirective { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventOriginalPolicy/SecurityPolicyViolationEventOriginalPolicy.generated.xml' path='docs/SecurityPolicyViolationEventOriginalPolicy/*'/>
	public DOMString OriginalPolicy { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventSourceFile/SecurityPolicyViolationEventSourceFile.generated.xml' path='docs/SecurityPolicyViolationEventSourceFile/*'/>
	public USVString SourceFile { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventSample/SecurityPolicyViolationEventSample.generated.xml' path='docs/SecurityPolicyViolationEventSample/*'/>
	public DOMString Sample { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventDisposition/SecurityPolicyViolationEventDisposition.generated.xml' path='docs/SecurityPolicyViolationEventDisposition/*'/>
	public SecurityPolicyViolationEventDisposition Disposition { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventStatusCode/SecurityPolicyViolationEventStatusCode.generated.xml' path='docs/SecurityPolicyViolationEventStatusCode/*'/>
	public ushort StatusCode { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventLineNumber/SecurityPolicyViolationEventLineNumber.generated.xml' path='docs/SecurityPolicyViolationEventLineNumber/*'/>
	public ulong LineNumber { get; }
	///<include file='Utils/Docs/SecurityPolicyViolationEventColumnNumber/SecurityPolicyViolationEventColumnNumber.generated.xml' path='docs/SecurityPolicyViolationEventColumnNumber/*'/>
	public ulong ColumnNumber { get; }
	public SecurityPolicyViolationEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SecurityPolicyViolationEventInit : EventInit
{
		public USVString DocumentURI;
		public USVString Referrer;
		public USVString BlockedURI;
		public DOMString ViolatedDirective;
		public DOMString EffectiveDirective;
		public DOMString OriginalPolicy;
		public USVString SourceFile;
		public DOMString Sample;
		public SecurityPolicyViolationEventDisposition Disposition;
		public ushort StatusCode;
		public ulong LineNumber;
		public ulong ColumnNumber;
}

///<include file='Utils/Docs/CSSPositionTryRule/CSSPositionTryRule.generated.xml' path='docs/CSSPositionTryRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSPositionTryRule : CSSRule
{
	///<include file='Utils/Docs/CSSPositionTryRuleName/CSSPositionTryRuleName.generated.xml' path='docs/CSSPositionTryRuleName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Name { get; }
	///<include file='Utils/Docs/CSSPositionTryRuleStyle/CSSPositionTryRuleStyle.generated.xml' path='docs/CSSPositionTryRuleStyle/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSPositionTryDescriptors Style { get; }
}

///<include file='Utils/Docs/CSSPositionTryDescriptors/CSSPositionTryDescriptors.generated.xml' path='docs/CSSPositionTryDescriptors/*'/>
[To(ToAttribute.Default)]
public partial class CSSPositionTryDescriptors : CSSStyleDeclaration
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginTop { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginRight { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginBottom { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginLeft { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginBlock { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginBlockStart { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginBlockEnd { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginInline { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginInlineStart { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginInlineEnd { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_top { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_right { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_bottom { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_left { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_block { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_block_start { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_block_end { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_inline { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_inline_start { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_inline_end { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Inset { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString InsetBlock { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString InsetBlockStart { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString InsetBlockEnd { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString InsetInline { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString InsetInlineStart { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString InsetInlineEnd { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Top { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Left { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Right { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Bottom { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Inset_block { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Inset_block_start { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Inset_block_end { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Inset_inline { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Inset_inline_start { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Inset_inline_end { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Width { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MinWidth { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MaxWidth { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Height { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MinHeight { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MaxHeight { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString BlockSize { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MinBlockSize { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MaxBlockSize { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString InlineSize { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MinInlineSize { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MaxInlineSize { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Min_width { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Max_width { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Min_height { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Max_height { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Block_size { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Min_block_size { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Max_block_size { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Inline_size { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Min_inline_size { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Max_inline_size { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString PlaceSelf { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString AlignSelf { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString JustifySelf { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Place_self { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Align_self { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Justify_self { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString PositionAnchor { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Position_anchor { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString PositionArea { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Position_area { get; set; }
}

///<include file='Utils/Docs/CSS/CSS.generated.xml' path='docs/CSS/*'/>
[To(ToAttribute.Default)]
public partial class CSS
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public Worklet AnimationWorklet { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AnimationWorkletGlobalScope : WorkletGlobalScope
{
		public Undefined RegisterAnimator(DOMString name, AnimatorInstanceConstructor animatorCtor) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WorkletAnimationEffect
{
		public EffectTiming GetTiming() { throw new System.NotImplementedException(); }
		public ComputedEffectTiming GetComputedTiming() { throw new System.NotImplementedException(); }
		public Number? LocalTime { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WorkletAnimation : Animation
{
		public WorkletAnimation(DOMString animatorName, Union2? effects, AnimationTimeline? timeline, dynamic options) { }
		public DOMString AnimatorName { get; }
	public WorkletAnimation() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WorkletGroupEffect
{
		public List<WorkletAnimationEffect> GetChildren() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CSSAnimation/CSSAnimation.generated.xml' path='docs/CSSAnimation/*'/>
[To(ToAttribute.Default)]
public partial class CSSAnimation : Animation
{
	///<include file='Utils/Docs/CSSAnimationAnimationName/CSSAnimationAnimationName.generated.xml' path='docs/CSSAnimationAnimationName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString AnimationName { get; }
}

///<include file='Utils/Docs/AnimationEvent/AnimationEvent.generated.xml' path='docs/AnimationEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AnimationEvent : Event
{
	///<include file='Utils/Docs/AnimationEventAnimationEvent/AnimationEventAnimationEvent.generated.xml' path='docs/AnimationEventAnimationEvent/*'/>
	public AnimationEvent(CSSOMString type, AnimationEventInit animationEventInitDict) { }
	///<include file='Utils/Docs/AnimationEventAnimationName/AnimationEventAnimationName.generated.xml' path='docs/AnimationEventAnimationName/*'/>
	public CSSOMString AnimationName { get; }
	///<include file='Utils/Docs/AnimationEventElapsedTime/AnimationEventElapsedTime.generated.xml' path='docs/AnimationEventElapsedTime/*'/>
	public Number ElapsedTime { get; }
	///<include file='Utils/Docs/AnimationEventPseudoElement/AnimationEventPseudoElement.generated.xml' path='docs/AnimationEventPseudoElement/*'/>
	public CSSOMString PseudoElement { get; }
	public AnimationEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AnimationEventInit : EventInit
{
		public CSSOMString AnimationName;
		public Number ElapsedTime;
		public CSSOMString PseudoElement;
}

///<include file='Utils/Docs/CSSRule/CSSRule.generated.xml' path='docs/CSSRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSRule
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort KEYFRAMES_RULE = 7;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort KEYFRAME_RULE = 8;
}

///<include file='Utils/Docs/CSSKeyframeRule/CSSKeyframeRule.generated.xml' path='docs/CSSKeyframeRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSKeyframeRule : CSSRule
{
	///<include file='Utils/Docs/CSSKeyframeRuleKeyText/CSSKeyframeRuleKeyText.generated.xml' path='docs/CSSKeyframeRuleKeyText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString KeyText { get; set; }
	///<include file='Utils/Docs/CSSKeyframeRuleStyle/CSSKeyframeRuleStyle.generated.xml' path='docs/CSSKeyframeRuleStyle/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSStyleProperties Style { get; }
}

///<include file='Utils/Docs/CSSKeyframesRule/CSSKeyframesRule.generated.xml' path='docs/CSSKeyframesRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSKeyframesRule : CSSRule
{
	///<include file='Utils/Docs/CSSKeyframesRuleName/CSSKeyframesRuleName.generated.xml' path='docs/CSSKeyframesRuleName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Name { get; set; }
	///<include file='Utils/Docs/CSSKeyframesRuleCssRules/CSSKeyframesRuleCssRules.generated.xml' path='docs/CSSKeyframesRuleCssRules/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSRuleList CssRules { get; }
	///<include file='Utils/Docs/CSSKeyframesRuleLength/CSSKeyframesRuleLength.generated.xml' path='docs/CSSKeyframesRuleLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	
	///<include file='Utils/Docs/CSSKeyframesRuleAppendRule/CSSKeyframesRuleAppendRule.generated.xml' path='docs/CSSKeyframesRuleAppendRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined AppendRule(CSSOMString rule) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSKeyframesRuleDeleteRule/CSSKeyframesRuleDeleteRule.generated.xml' path='docs/CSSKeyframesRuleDeleteRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined DeleteRule(CSSOMString select) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSKeyframesRuleFindRule/CSSKeyframesRuleFindRule.generated.xml' path='docs/CSSKeyframesRuleFindRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSKeyframeRule? FindRule(CSSOMString select) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CSSScopeRule/CSSScopeRule.generated.xml' path='docs/CSSScopeRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSScopeRule : CSSGroupingRule
{
	///<include file='Utils/Docs/CSSScopeRuleStart/CSSScopeRuleStart.generated.xml' path='docs/CSSScopeRuleStart/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString? Start { get; }
	///<include file='Utils/Docs/CSSScopeRuleEnd/CSSScopeRuleEnd.generated.xml' path='docs/CSSScopeRuleEnd/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString? End { get; }
}

///<include file='Utils/Docs/CSSLayerBlockRule/CSSLayerBlockRule.generated.xml' path='docs/CSSLayerBlockRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSLayerBlockRule : CSSGroupingRule
{
	///<include file='Utils/Docs/CSSLayerBlockRuleName/CSSLayerBlockRuleName.generated.xml' path='docs/CSSLayerBlockRuleName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Name { get; }
}

///<include file='Utils/Docs/CSSLayerStatementRule/CSSLayerStatementRule.generated.xml' path='docs/CSSLayerStatementRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSLayerStatementRule : CSSRule
{
	///<include file='Utils/Docs/CSSLayerStatementRuleNameList/CSSLayerStatementRuleNameList.generated.xml' path='docs/CSSLayerStatementRuleNameList/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString[] NameList { get; }
}

[To(ToAttribute.Default)]
public partial class CSSColorProfileRule : CSSRule
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Name { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Src { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString RenderingIntent { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Components { get; }
}

///<include file='Utils/Docs/CSSContainerRule/CSSContainerRule.generated.xml' path='docs/CSSContainerRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSContainerRule : CSSConditionRule
{
	///<include file='Utils/Docs/CSSContainerRuleContainerName/CSSContainerRuleContainerName.generated.xml' path='docs/CSSContainerRuleContainerName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString ContainerName { get; }
	///<include file='Utils/Docs/CSSContainerRuleContainerQuery/CSSContainerRuleContainerQuery.generated.xml' path='docs/CSSContainerRuleContainerQuery/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString ContainerQuery { get; }
}

///<include file='Utils/Docs/CSSRule/CSSRule.generated.xml' path='docs/CSSRule/*'/>
public partial class CSSRule
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort SUPPORTS_RULE = 12;
}

///<include file='Utils/Docs/CSSConditionRule/CSSConditionRule.generated.xml' path='docs/CSSConditionRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSConditionRule : CSSGroupingRule
{
	///<include file='Utils/Docs/CSSConditionRuleConditionText/CSSConditionRuleConditionText.generated.xml' path='docs/CSSConditionRuleConditionText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString ConditionText { get; }
}

///<include file='Utils/Docs/CSSMediaRule/CSSMediaRule.generated.xml' path='docs/CSSMediaRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSMediaRule : CSSConditionRule
{
	///<include file='Utils/Docs/CSSMediaRuleMedia/CSSMediaRuleMedia.generated.xml' path='docs/CSSMediaRuleMedia/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public MediaList Media { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Matches { get; }
}

///<include file='Utils/Docs/CSSSupportsRule/CSSSupportsRule.generated.xml' path='docs/CSSSupportsRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSSupportsRule : CSSConditionRule
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Matches { get; }
}

///<include file='Utils/Docs/CSS/CSS.generated.xml' path='docs/CSS/*'/>
public partial class CSS
{
	///<include file='Utils/Docs/CSSSupports/CSSSupports.generated.xml' path='docs/CSSSupports/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Supports(CSSOMString property, CSSOMString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSSupports/CSSSupports.generated.xml' path='docs/CSSSupports/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Supports(CSSOMString conditionText) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ContentVisibilityAutoStateChangeEvent/ContentVisibilityAutoStateChangeEvent.generated.xml' path='docs/ContentVisibilityAutoStateChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ContentVisibilityAutoStateChangeEvent : Event
{
	///<include file='Utils/Docs/ContentVisibilityAutoStateChangeEventContentVisibilityAutoSt/ContentVisibilityAutoStateChangeEventContentVisibilityAutoSt.generated.xml' path='docs/ContentVisibilityAutoStateChangeEventContentVisibilityAutoSt/*'/>
	public ContentVisibilityAutoStateChangeEvent(DOMString type, ContentVisibilityAutoStateChangeEventInit eventInitDict) { }
	///<include file='Utils/Docs/ContentVisibilityAutoStateChangeEventSkipped/ContentVisibilityAutoStateChangeEventSkipped.generated.xml' path='docs/ContentVisibilityAutoStateChangeEventSkipped/*'/>
	public bool Skipped { get; }
	public ContentVisibilityAutoStateChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ContentVisibilityAutoStateChangeEventInit : EventInit
{
		public bool Skipped;
}

///<include file='Utils/Docs/CSSRule/CSSRule.generated.xml' path='docs/CSSRule/*'/>
public partial class CSSRule
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort COUNTER_STYLE_RULE = 11;
}

///<include file='Utils/Docs/CSSCounterStyleRule/CSSCounterStyleRule.generated.xml' path='docs/CSSCounterStyleRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSCounterStyleRule : CSSRule
{
	///<include file='Utils/Docs/CSSCounterStyleRuleName/CSSCounterStyleRuleName.generated.xml' path='docs/CSSCounterStyleRuleName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Name { get; set; }
	///<include file='Utils/Docs/CSSCounterStyleRuleSystem/CSSCounterStyleRuleSystem.generated.xml' path='docs/CSSCounterStyleRuleSystem/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString System { get; set; }
	///<include file='Utils/Docs/CSSCounterStyleRuleSymbols/CSSCounterStyleRuleSymbols.generated.xml' path='docs/CSSCounterStyleRuleSymbols/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Symbols { get; set; }
	///<include file='Utils/Docs/CSSCounterStyleRuleAdditiveSymbols/CSSCounterStyleRuleAdditiveSymbols.generated.xml' path='docs/CSSCounterStyleRuleAdditiveSymbols/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString AdditiveSymbols { get; set; }
	///<include file='Utils/Docs/CSSCounterStyleRuleNegative/CSSCounterStyleRuleNegative.generated.xml' path='docs/CSSCounterStyleRuleNegative/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Negative { get; set; }
	///<include file='Utils/Docs/CSSCounterStyleRulePrefix/CSSCounterStyleRulePrefix.generated.xml' path='docs/CSSCounterStyleRulePrefix/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Prefix { get; set; }
	///<include file='Utils/Docs/CSSCounterStyleRuleSuffix/CSSCounterStyleRuleSuffix.generated.xml' path='docs/CSSCounterStyleRuleSuffix/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Suffix { get; set; }
	///<include file='Utils/Docs/CSSCounterStyleRuleRange/CSSCounterStyleRuleRange.generated.xml' path='docs/CSSCounterStyleRuleRange/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Range { get; set; }
	///<include file='Utils/Docs/CSSCounterStyleRulePad/CSSCounterStyleRulePad.generated.xml' path='docs/CSSCounterStyleRulePad/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Pad { get; set; }
	///<include file='Utils/Docs/CSSCounterStyleRuleSpeakAs/CSSCounterStyleRuleSpeakAs.generated.xml' path='docs/CSSCounterStyleRuleSpeakAs/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString SpeakAs { get; set; }
	///<include file='Utils/Docs/CSSCounterStyleRuleFallback/CSSCounterStyleRuleFallback.generated.xml' path='docs/CSSCounterStyleRuleFallback/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Fallback { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontFaceDescriptors
{
		public CSSOMString Style;
		public CSSOMString Weight;
		public CSSOMString Stretch;
		public CSSOMString UnicodeRange;
		public CSSOMString FeatureSettings;
		public CSSOMString VariationSettings;
		public CSSOMString Display;
		public CSSOMString AscentOverride;
		public CSSOMString DescentOverride;
		public CSSOMString LineGapOverride;
}

///<include file='Utils/Docs/FontFace/FontFace.generated.xml' path='docs/FontFace/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontFace
{
	///<include file='Utils/Docs/FontFaceFontFace/FontFaceFontFace.generated.xml' path='docs/FontFaceFontFace/*'/>
	public FontFace(CSSOMString family, Union3 source, FontFaceDescriptors descriptors) { }
	///<include file='Utils/Docs/FontFaceFamily/FontFaceFamily.generated.xml' path='docs/FontFaceFamily/*'/>
	public CSSOMString Family { get; set; }
	///<include file='Utils/Docs/FontFaceStyle/FontFaceStyle.generated.xml' path='docs/FontFaceStyle/*'/>
	public CSSOMString Style { get; set; }
	///<include file='Utils/Docs/FontFaceWeight/FontFaceWeight.generated.xml' path='docs/FontFaceWeight/*'/>
	public CSSOMString Weight { get; set; }
	///<include file='Utils/Docs/FontFaceStretch/FontFaceStretch.generated.xml' path='docs/FontFaceStretch/*'/>
	public CSSOMString Stretch { get; set; }
	///<include file='Utils/Docs/FontFaceUnicodeRange/FontFaceUnicodeRange.generated.xml' path='docs/FontFaceUnicodeRange/*'/>
	public CSSOMString UnicodeRange { get; set; }
	///<include file='Utils/Docs/FontFaceFeatureSettings/FontFaceFeatureSettings.generated.xml' path='docs/FontFaceFeatureSettings/*'/>
	public CSSOMString FeatureSettings { get; set; }
	///<include file='Utils/Docs/FontFaceVariationSettings/FontFaceVariationSettings.generated.xml' path='docs/FontFaceVariationSettings/*'/>
	public CSSOMString VariationSettings { get; set; }
	///<include file='Utils/Docs/FontFaceDisplay/FontFaceDisplay.generated.xml' path='docs/FontFaceDisplay/*'/>
	public CSSOMString Display { get; set; }
	///<include file='Utils/Docs/FontFaceAscentOverride/FontFaceAscentOverride.generated.xml' path='docs/FontFaceAscentOverride/*'/>
	public CSSOMString AscentOverride { get; set; }
	///<include file='Utils/Docs/FontFaceDescentOverride/FontFaceDescentOverride.generated.xml' path='docs/FontFaceDescentOverride/*'/>
	public CSSOMString DescentOverride { get; set; }
	///<include file='Utils/Docs/FontFaceLineGapOverride/FontFaceLineGapOverride.generated.xml' path='docs/FontFaceLineGapOverride/*'/>
	public CSSOMString LineGapOverride { get; set; }
	///<include file='Utils/Docs/FontFaceStatus/FontFaceStatus.generated.xml' path='docs/FontFaceStatus/*'/>
	public FontFaceLoadStatus Status { get; }
	///<include file='Utils/Docs/FontFaceLoad/FontFaceLoad.generated.xml' path='docs/FontFaceLoad/*'/>
	public Task<FontFace> Load() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FontFaceLoaded/FontFaceLoaded.generated.xml' path='docs/FontFaceLoaded/*'/>
	public Task<FontFace> Loaded { get; }
	public FontFace() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontFaceFeatures
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontFaceVariationAxis
{
		public DOMString Name { get; }
		public DOMString AxisTag { get; }
		public Number MinimumValue { get; }
		public Number MaximumValue { get; }
		public Number DefaultValue { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontFaceVariations
{
	
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontFacePalette
{
	public DOMString this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
		public ulong Length { get; }
	
		public bool UsableWithLightBackground { get; }
		public bool UsableWithDarkBackground { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontFacePalettes
{
	public FontFacePalette this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
		public ulong Length { get; }
	
}

///<include file='Utils/Docs/FontFace/FontFace.generated.xml' path='docs/FontFace/*'/>
public partial class FontFace
{
		public FontFaceFeatures Features { get; }
		public FontFaceVariations Variations { get; }
		public FontFacePalettes Palettes { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontFaceSetLoadEventInit : EventInit
{
		public List<FontFace> Fontfaces;
}

///<include file='Utils/Docs/FontFaceSetLoadEvent/FontFaceSetLoadEvent.generated.xml' path='docs/FontFaceSetLoadEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontFaceSetLoadEvent : Event
{
	///<include file='Utils/Docs/FontFaceSetLoadEventFontFaceSetLoadEvent/FontFaceSetLoadEventFontFaceSetLoadEvent.generated.xml' path='docs/FontFaceSetLoadEventFontFaceSetLoadEvent/*'/>
	public FontFaceSetLoadEvent(CSSOMString type, FontFaceSetLoadEventInit eventInitDict) { }
	///<include file='Utils/Docs/FontFaceSetLoadEventFontfaces/FontFaceSetLoadEventFontfaces.generated.xml' path='docs/FontFaceSetLoadEventFontfaces/*'/>
	public FontFace[] Fontfaces { get; }
	public FontFaceSetLoadEvent() { }
}

///<include file='Utils/Docs/FontFaceSet/FontFaceSet.generated.xml' path='docs/FontFaceSet/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontFaceSet : EventTarget
{
	
	///<include file='Utils/Docs/FontFaceSetAdd/FontFaceSetAdd.generated.xml' path='docs/FontFaceSetAdd/*'/>
	public FontFaceSet Add(FontFace font) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FontFaceSetDelete/FontFaceSetDelete.generated.xml' path='docs/FontFaceSetDelete/*'/>
	public bool Delete(FontFace font) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FontFaceSetClear/FontFaceSetClear.generated.xml' path='docs/FontFaceSetClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
		public EventHandler Onloading { get; set; }
		public EventHandler Onloadingdone { get; set; }
		public EventHandler Onloadingerror { get; set; }
	///<include file='Utils/Docs/FontFaceSetLoad/FontFaceSetLoad.generated.xml' path='docs/FontFaceSetLoad/*'/>
	public Task<List<FontFace>> Load(CSSOMString font, CSSOMString text) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FontFaceSetCheck/FontFaceSetCheck.generated.xml' path='docs/FontFaceSetCheck/*'/>
	public bool Check(CSSOMString font, CSSOMString text) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FontFaceSetReady/FontFaceSetReady.generated.xml' path='docs/FontFaceSetReady/*'/>
	public Task<FontFaceSet> Ready { get; }
	///<include file='Utils/Docs/FontFaceSetStatus/FontFaceSetStatus.generated.xml' path='docs/FontFaceSetStatus/*'/>
	public FontFaceSetLoadStatus Status { get; }
}

[To(ToAttribute.Default)]
public partial class CSSFontFaceDescriptors : CSSStyleDeclaration
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Src { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontFamily { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_family { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontStyle { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_style { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontWeight { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_weight { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontStretch { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_stretch { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontWidth { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_width { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontSize { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_size { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString SizeAdjust { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Size_adjust { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString UnicodeRange { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Unicode_range { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontFeatureSettings { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_feature_settings { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontVariationSettings { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_variation_settings { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontNamedInstance { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_named_instance { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontDisplay { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_display { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontLanguageOverride { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Font_language_override { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString AscentOverride { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Ascent_override { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString DescentOverride { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Descent_override { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString LineGapOverride { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Line_gap_override { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString SuperscriptPositionOverride { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Superscript_position_override { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString SubscriptPositionOverride { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Subscript_position_override { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString SuperscriptSizeOverride { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Superscript_size_override { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString SubscriptSizeOverride { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Subscript_size_override { get; set; }
}

///<include file='Utils/Docs/CSSFontFaceRule/CSSFontFaceRule.generated.xml' path='docs/CSSFontFaceRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSFontFaceRule : CSSRule
{
	///<include file='Utils/Docs/CSSFontFaceRuleStyle/CSSFontFaceRuleStyle.generated.xml' path='docs/CSSFontFaceRuleStyle/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSFontFaceDescriptors Style { get; }
}

///<include file='Utils/Docs/CSSRule/CSSRule.generated.xml' path='docs/CSSRule/*'/>
public partial class CSSRule
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort FONT_FEATURE_VALUES_RULE = 14;
}

///<include file='Utils/Docs/CSSFontFeatureValuesRule/CSSFontFeatureValuesRule.generated.xml' path='docs/CSSFontFeatureValuesRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSFontFeatureValuesRule : CSSRule
{
	///<include file='Utils/Docs/CSSFontFeatureValuesRuleFontFamily/CSSFontFeatureValuesRuleFontFamily.generated.xml' path='docs/CSSFontFeatureValuesRuleFontFamily/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontFamily { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSFontFeatureValuesMap Annotation { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSFontFeatureValuesMap Ornaments { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSFontFeatureValuesMap Stylistic { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSFontFeatureValuesMap Swash { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSFontFeatureValuesMap CharacterVariant { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSFontFeatureValuesMap Styleset { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSFontFeatureValuesMap HistoricalForms { get; }
}

[To(ToAttribute.Default)]
public partial class CSSFontFeatureValuesMap
{
	
		[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Set(CSSOMString featureValueName, Union4 values) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CSSFontPaletteValuesRule/CSSFontPaletteValuesRule.generated.xml' path='docs/CSSFontPaletteValuesRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSFontPaletteValuesRule : CSSRule
{
	///<include file='Utils/Docs/CSSFontPaletteValuesRuleName/CSSFontPaletteValuesRuleName.generated.xml' path='docs/CSSFontPaletteValuesRuleName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Name { get; }
	///<include file='Utils/Docs/CSSFontPaletteValuesRuleFontFamily/CSSFontPaletteValuesRuleFontFamily.generated.xml' path='docs/CSSFontPaletteValuesRuleFontFamily/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString FontFamily { get; }
	///<include file='Utils/Docs/CSSFontPaletteValuesRuleBasePalette/CSSFontPaletteValuesRuleBasePalette.generated.xml' path='docs/CSSFontPaletteValuesRuleBasePalette/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString BasePalette { get; }
	///<include file='Utils/Docs/CSSFontPaletteValuesRuleOverrideColors/CSSFontPaletteValuesRuleOverrideColors.generated.xml' path='docs/CSSFontPaletteValuesRuleOverrideColors/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString OverrideColors { get; }
}

///<include file='Utils/Docs/Highlight/Highlight.generated.xml' path='docs/Highlight/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Highlight
{
	///<include file='Utils/Docs/HighlightHighlight/HighlightHighlight.generated.xml' path='docs/HighlightHighlight/*'/>
	public Highlight(params AbstractRange[] initialRanges) { }
	
	///<include file='Utils/Docs/HighlightPriority/HighlightPriority.generated.xml' path='docs/HighlightPriority/*'/>
	public long Priority { get; set; }
	///<include file='Utils/Docs/HighlightType/HighlightType.generated.xml' path='docs/HighlightType/*'/>
	public HighlightType Type { get; set; }
	public Highlight() { }
}

///<include file='Utils/Docs/CSS/CSS.generated.xml' path='docs/CSS/*'/>
public partial class CSS
{
	///<include file='Utils/Docs/CSSHighlights/CSSHighlights.generated.xml' path='docs/CSSHighlights/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HighlightRegistry Highlights { get; }
}

///<include file='Utils/Docs/HighlightRegistry/HighlightRegistry.generated.xml' path='docs/HighlightRegistry/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class HighlightRegistry
{
	
}

///<include file='Utils/Docs/CSS/CSS.generated.xml' path='docs/CSS/*'/>
public partial class CSS
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public dynamic ElementSources { get; }
}

///<include file='Utils/Docs/CSS/CSS.generated.xml' path='docs/CSS/*'/>
public partial class CSS
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public Worklet LayoutWorklet { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class LayoutWorkletGlobalScope : WorkletGlobalScope
{
		public Undefined RegisterLayout(DOMString name, VoidFunction layoutCtor) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class LayoutOptions
{
		public ChildDisplayType ChildDisplay;
		public LayoutSizingMode Sizing;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class LayoutChild
{
		public StylePropertyMapReadOnly StyleMap { get; }
		public Task<IntrinsicSizes> IntrinsicSizes() { throw new System.NotImplementedException(); }
		public Task<LayoutFragment> LayoutNextFragment(LayoutConstraintsOptions constraints, ChildBreakToken breakToken) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class LayoutFragment
{
		public Number InlineSize { get; }
		public Number BlockSize { get; }
		public Number InlineOffset { get; set; }
		public Number BlockOffset { get; set; }
		public dynamic Data { get; }
		public ChildBreakToken? BreakToken { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IntrinsicSizes
{
		public Number MinContentSize { get; }
		public Number MaxContentSize { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class LayoutConstraints
{
		public Number AvailableInlineSize { get; }
		public Number AvailableBlockSize { get; }
		public Number? FixedInlineSize { get; }
		public Number? FixedBlockSize { get; }
		public Number PercentageInlineSize { get; }
		public Number PercentageBlockSize { get; }
		public Number? BlockFragmentationOffset { get; }
		public BlockFragmentationType BlockFragmentationType { get; }
		public dynamic Data { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class LayoutConstraintsOptions
{
		public Number AvailableInlineSize;
		public Number AvailableBlockSize;
		public Number FixedInlineSize;
		public Number FixedBlockSize;
		public Number PercentageInlineSize;
		public Number PercentageBlockSize;
		public Number BlockFragmentationOffset;
		public BlockFragmentationType BlockFragmentationType;
		public dynamic Data;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ChildBreakToken
{
		public BreakType BreakType { get; }
		public LayoutChild Child { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BreakToken
{
		public ChildBreakToken[] ChildBreakTokens { get; }
		public dynamic Data { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BreakTokenOptions
{
		public List<ChildBreakToken> ChildBreakTokens;
		public dynamic Data;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class LayoutEdges
{
		public Number InlineStart { get; }
		public Number InlineEnd { get; }
		public Number BlockStart { get; }
		public Number BlockEnd { get; }
		public Number Inline { get; }
		public Number Block { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FragmentResultOptions
{
		public Number InlineSize;
		public Number BlockSize;
		public Number AutoBlockSize;
		public List<LayoutFragment> ChildFragments;
		public dynamic Data;
		public BreakTokenOptions BreakToken;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FragmentResult
{
		public FragmentResult(FragmentResultOptions options) { }
		public Number InlineSize { get; }
		public Number BlockSize { get; }
	public FragmentResult() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IntrinsicSizesResultOptions
{
		public Number MaxContentSize;
		public Number MinContentSize;
}

///<include file='Utils/Docs/SVGClipPathElement/SVGClipPathElement.generated.xml' path='docs/SVGClipPathElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGClipPathElement : SVGElement
{
	///<include file='Utils/Docs/SVGClipPathElementClipPathUnits/SVGClipPathElementClipPathUnits.generated.xml' path='docs/SVGClipPathElementClipPathUnits/*'/>
	public SVGAnimatedEnumeration ClipPathUnits { get; }
	///<include file='Utils/Docs/SVGClipPathElementTransform/SVGClipPathElementTransform.generated.xml' path='docs/SVGClipPathElementTransform/*'/>
	public SVGAnimatedTransformList Transform { get; }
}

///<include file='Utils/Docs/SVGMaskElement/SVGMaskElement.generated.xml' path='docs/SVGMaskElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGMaskElement : SVGElement
{
	///<include file='Utils/Docs/SVGMaskElementMaskUnits/SVGMaskElementMaskUnits.generated.xml' path='docs/SVGMaskElementMaskUnits/*'/>
	public SVGAnimatedEnumeration MaskUnits { get; }
	///<include file='Utils/Docs/SVGMaskElementMaskContentUnits/SVGMaskElementMaskContentUnits.generated.xml' path='docs/SVGMaskElementMaskContentUnits/*'/>
	public SVGAnimatedEnumeration MaskContentUnits { get; }
	///<include file='Utils/Docs/SVGMaskElementX/SVGMaskElementX.generated.xml' path='docs/SVGMaskElementX/*'/>
	public SVGAnimatedLength X { get; }
	///<include file='Utils/Docs/SVGMaskElementY/SVGMaskElementY.generated.xml' path='docs/SVGMaskElementY/*'/>
	public SVGAnimatedLength Y { get; }
	///<include file='Utils/Docs/SVGMaskElementWidth/SVGMaskElementWidth.generated.xml' path='docs/SVGMaskElementWidth/*'/>
	public SVGAnimatedLength Width { get; }
	///<include file='Utils/Docs/SVGMaskElementHeight/SVGMaskElementHeight.generated.xml' path='docs/SVGMaskElementHeight/*'/>
	public SVGAnimatedLength Height { get; }
}

[To(ToAttribute.Default)]
public partial class CSSFunctionRule : CSSGroupingRule
{
}

[To(ToAttribute.Default)]
public partial class CSSFunctionDescriptors : CSSStyleDeclaration
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Result { get; set; }
}

[To(ToAttribute.Default)]
public partial class CSSFunctionDeclarations : CSSRule
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSFunctionDescriptors Style { get; }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Navigate(SpatialNavigationDirection dir) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FocusableAreasOption
{
		public FocusableAreaSearchMode Mode;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpatialNavigationSearchOptions
{
		public List<Node>? Candidates;
		public Node? Container;
}

///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Element
{
		public Node GetSpatialNavigationContainer() { throw new System.NotImplementedException(); }
		public List<Node> FocusableAreas(FocusableAreasOption option) { throw new System.NotImplementedException(); }
		public Node? SpatialNavigationSearch(SpatialNavigationDirection dir, SpatialNavigationSearchOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationEvent : UIEvent
{
		public NavigationEvent(DOMString type, NavigationEventInit eventInitDict) { }
		public SpatialNavigationDirection Dir { get; }
		public EventTarget? RelatedTarget { get; }
	public NavigationEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationEventInit : UIEventInit
{
		public SpatialNavigationDirection Dir;
		public EventTarget? RelatedTarget;
}

///<include file='Utils/Docs/CSSNestedDeclarations/CSSNestedDeclarations.generated.xml' path='docs/CSSNestedDeclarations/*'/>
[To(ToAttribute.Default)]
public partial class CSSNestedDeclarations : CSSRule
{
	///<include file='Utils/Docs/CSSNestedDeclarationsStyle/CSSNestedDeclarationsStyle.generated.xml' path='docs/CSSNestedDeclarationsStyle/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSStyleProperties Style { get; }
}

///<include file='Utils/Docs/CSS/CSS.generated.xml' path='docs/CSS/*'/>
public partial class CSS
{
	///<include file='Utils/Docs/CSSPaintWorklet/CSSPaintWorklet.generated.xml' path='docs/CSSPaintWorklet/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Worklet PaintWorklet { get; }
}

///<include file='Utils/Docs/PaintWorkletGlobalScope/PaintWorkletGlobalScope.generated.xml' path='docs/PaintWorkletGlobalScope/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaintWorkletGlobalScope : WorkletGlobalScope
{
	///<include file='Utils/Docs/PaintWorkletGlobalScopeRegisterPaint/PaintWorkletGlobalScopeRegisterPaint.generated.xml' path='docs/PaintWorkletGlobalScopeRegisterPaint/*'/>
	public Undefined RegisterPaint(DOMString name, VoidFunction paintCtor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PaintWorkletGlobalScopeDevicePixelRatio/PaintWorkletGlobalScopeDevicePixelRatio.generated.xml' path='docs/PaintWorkletGlobalScopeDevicePixelRatio/*'/>
	public double DevicePixelRatio { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaintRenderingContext2DSettings
{
		public bool Alpha;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaintRenderingContext2D
{
}












[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaintSize
{
		public Number Width { get; }
		public Number Height { get; }
}



///<include file='Utils/Docs/CSS/CSS.generated.xml' path='docs/CSS/*'/>
public partial class CSS
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public Task<List<CSSParserRule>> ParseStylesheet(CSSStringSource css, CSSParserOptions options) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Task<List<CSSParserRule>> ParseRuleList(CSSStringSource css, CSSParserOptions options) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Task<CSSParserRule> ParseRule(CSSStringSource css, CSSParserOptions options) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Task<List<CSSParserRule>> ParseDeclarationList(CSSStringSource css, CSSParserOptions options) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSParserDeclaration ParseDeclaration(DOMString css, CSSParserOptions options) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSToken ParseValue(DOMString css) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public List<CSSToken> ParseValueList(DOMString css) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public List<List<CSSToken>> ParseCommaValueList(DOMString css) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.Default)]
public partial class CSSParserOptions
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public Object AtRules;
}

[To(ToAttribute.Default)]
public partial class CSSParserRule
{
}

[To(ToAttribute.Default)]
public partial class CSSParserAtRule : CSSParserRule
{
		public CSSParserAtRule(DOMString name, List<CSSToken> prelude, List<CSSParserRule>? body) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSParserValue[] Prelude { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSParserRule[]? Body { get; }
	
	public CSSParserAtRule() { }
}

[To(ToAttribute.Default)]
public partial class CSSParserQualifiedRule : CSSParserRule
{
		public CSSParserQualifiedRule(List<CSSToken> prelude, List<CSSParserRule>? body) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSParserValue[] Prelude { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSParserRule[] Body { get; }
	
	public CSSParserQualifiedRule() { }
}

[To(ToAttribute.Default)]
public partial class CSSParserDeclaration : CSSParserRule
{
		public CSSParserDeclaration(DOMString name, List<CSSParserRule> body) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSParserValue[] Body { get; }
	
	public CSSParserDeclaration() { }
}

[To(ToAttribute.Default)]
public partial class CSSParserValue
{
}

[To(ToAttribute.Default)]
public partial class CSSParserBlock : CSSParserValue
{
		public CSSParserBlock(DOMString name, List<CSSParserValue> body) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSParserValue[] Body { get; }
	
	public CSSParserBlock() { }
}

[To(ToAttribute.Default)]
public partial class CSSParserFunction : CSSParserValue
{
		public CSSParserFunction(DOMString name, List<List<CSSParserValue>> args) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSParserValue[][] Args { get; }
	
	public CSSParserFunction() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PropertyDefinition
{
		public required DOMString Name;
		public DOMString Syntax;
		public required bool Inherits;
		public DOMString InitialValue;
}

///<include file='Utils/Docs/CSS/CSS.generated.xml' path='docs/CSS/*'/>
public partial class CSS
{
	///<include file='Utils/Docs/CSSRegisterProperty/CSSRegisterProperty.generated.xml' path='docs/CSSRegisterProperty/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined RegisterProperty(PropertyDefinition definition) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CSSPropertyRule/CSSPropertyRule.generated.xml' path='docs/CSSPropertyRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSPropertyRule : CSSRule
{
	///<include file='Utils/Docs/CSSPropertyRuleName/CSSPropertyRuleName.generated.xml' path='docs/CSSPropertyRuleName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Name { get; }
	///<include file='Utils/Docs/CSSPropertyRuleSyntax/CSSPropertyRuleSyntax.generated.xml' path='docs/CSSPropertyRuleSyntax/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Syntax { get; }
	///<include file='Utils/Docs/CSSPropertyRuleInherits/CSSPropertyRuleInherits.generated.xml' path='docs/CSSPropertyRuleInherits/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Inherits { get; }
	///<include file='Utils/Docs/CSSPropertyRuleInitialValue/CSSPropertyRuleInitialValue.generated.xml' path='docs/CSSPropertyRuleInitialValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString? InitialValue { get; }
}

///<include file='Utils/Docs/CSSPseudoElement/CSSPseudoElement.generated.xml' path='docs/CSSPseudoElement/*'/>
[To(ToAttribute.Default)]
public partial class CSSPseudoElement : EventTarget, GeometryUtils
{
	///<include file='Utils/Docs/CSSPseudoElementType/CSSPseudoElementType.generated.xml' path='docs/CSSPseudoElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Type { get; }
	///<include file='Utils/Docs/CSSPseudoElementElement/CSSPseudoElementElement.generated.xml' path='docs/CSSPseudoElementElement/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Element Element { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Union7 Parent { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSPseudoElement? Pseudo(CSSOMString type) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
public partial class Element
{
		public CSSPseudoElement? Pseudo(CSSOMString type) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Document
{
		public NamedFlowMap NamedFlows { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NamedFlowMap
{
	
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NamedFlow : EventTarget
{
		public CSSOMString Name { get; }
		public bool Overset { get; }
		public List<Element> GetRegions() { throw new System.NotImplementedException(); }
		public Number FirstEmptyRegionIndex { get; }
		public List<Node> GetContent() { throw new System.NotImplementedException(); }
		public List<Element> GetRegionsByContent(Node node) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SnapEventInit : EventInit
{
		public Node? SnapTargetBlock;
		public Node? SnapTargetInline;
}

///<include file='Utils/Docs/SnapEvent/SnapEvent.generated.xml' path='docs/SnapEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SnapEvent : Event
{
	///<include file='Utils/Docs/SnapEventSnapEvent/SnapEventSnapEvent.generated.xml' path='docs/SnapEventSnapEvent/*'/>
	public SnapEvent(DOMString type, SnapEventInit eventInitDict) { }
	///<include file='Utils/Docs/SnapEventSnapTargetBlock/SnapEventSnapTargetBlock.generated.xml' path='docs/SnapEventSnapTargetBlock/*'/>
	public Node? SnapTargetBlock { get; }
	///<include file='Utils/Docs/SnapEventSnapTargetInline/SnapEventSnapTargetInline.generated.xml' path='docs/SnapEventSnapTargetInline/*'/>
	public Node? SnapTargetInline { get; }
	public SnapEvent() { }
}

///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
public partial class Element
{
	///<include file='Utils/Docs/ElementPart/ElementPart.generated.xml' path='docs/ElementPart/*'/>
	public DOMTokenList Part { get; }
}

///<include file='Utils/Docs/CSSStartingStyleRule/CSSStartingStyleRule.generated.xml' path='docs/CSSStartingStyleRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSStartingStyleRule : CSSGroupingRule
{
}

///<include file='Utils/Docs/CSSTransition/CSSTransition.generated.xml' path='docs/CSSTransition/*'/>
[To(ToAttribute.Default)]
public partial class CSSTransition : Animation
{
	///<include file='Utils/Docs/CSSTransitionTransitionProperty/CSSTransitionTransitionProperty.generated.xml' path='docs/CSSTransitionTransitionProperty/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString TransitionProperty { get; }
}

///<include file='Utils/Docs/TransitionEvent/TransitionEvent.generated.xml' path='docs/TransitionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TransitionEvent : Event
{
	///<include file='Utils/Docs/TransitionEventTransitionEvent/TransitionEventTransitionEvent.generated.xml' path='docs/TransitionEventTransitionEvent/*'/>
	public TransitionEvent(CSSOMString type, TransitionEventInit transitionEventInitDict) { }
	///<include file='Utils/Docs/TransitionEventPropertyName/TransitionEventPropertyName.generated.xml' path='docs/TransitionEventPropertyName/*'/>
	public CSSOMString PropertyName { get; }
	///<include file='Utils/Docs/TransitionEventElapsedTime/TransitionEventElapsedTime.generated.xml' path='docs/TransitionEventElapsedTime/*'/>
	public Number ElapsedTime { get; }
	///<include file='Utils/Docs/TransitionEventPseudoElement/TransitionEventPseudoElement.generated.xml' path='docs/TransitionEventPseudoElement/*'/>
	public CSSOMString PseudoElement { get; }
	public TransitionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TransitionEventInit : EventInit
{
		public CSSOMString PropertyName;
		public Number ElapsedTime;
		public CSSOMString PseudoElement;
}

///<include file='Utils/Docs/CSSStyleValue/CSSStyleValue.generated.xml' path='docs/CSSStyleValue/*'/>
[To(ToAttribute.Default)]
public partial class CSSStyleValue
{
	
	///<include file='Utils/Docs/CSSStyleValueParse/CSSStyleValueParse.generated.xml' path='docs/CSSStyleValueParse/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public static CSSStyleValue Parse(USVString property, USVString cssText) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSStyleValueParseAll/CSSStyleValueParseAll.generated.xml' path='docs/CSSStyleValueParseAll/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public static List<CSSStyleValue> ParseAll(USVString property, USVString cssText) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/StylePropertyMapReadOnly/StylePropertyMapReadOnly.generated.xml' path='docs/StylePropertyMapReadOnly/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class StylePropertyMapReadOnly
{
	public USVString this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	///<include file='Utils/Docs/StylePropertyMapReadOnlyGet/StylePropertyMapReadOnlyGet.generated.xml' path='docs/StylePropertyMapReadOnlyGet/*'/>
	public Union8 Get(USVString property) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StylePropertyMapReadOnlyGetAll/StylePropertyMapReadOnlyGetAll.generated.xml' path='docs/StylePropertyMapReadOnlyGetAll/*'/>
	public List<CSSStyleValue> GetAll(USVString property) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StylePropertyMapReadOnlyHas/StylePropertyMapReadOnlyHas.generated.xml' path='docs/StylePropertyMapReadOnlyHas/*'/>
	public bool Has(USVString property) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StylePropertyMapReadOnlySize/StylePropertyMapReadOnlySize.generated.xml' path='docs/StylePropertyMapReadOnlySize/*'/>
	public ulong Size { get; }
}

///<include file='Utils/Docs/StylePropertyMap/StylePropertyMap.generated.xml' path='docs/StylePropertyMap/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class StylePropertyMap : StylePropertyMapReadOnly
{
	///<include file='Utils/Docs/StylePropertyMapSet/StylePropertyMapSet.generated.xml' path='docs/StylePropertyMapSet/*'/>
	public Undefined Set(USVString property, params Union9[] values) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StylePropertyMapAppend/StylePropertyMapAppend.generated.xml' path='docs/StylePropertyMapAppend/*'/>
	public Undefined Append(USVString property, params Union10[] values) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StylePropertyMapDelete/StylePropertyMapDelete.generated.xml' path='docs/StylePropertyMapDelete/*'/>
	public Undefined Delete(USVString property) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StylePropertyMapClear/StylePropertyMapClear.generated.xml' path='docs/StylePropertyMapClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
public partial class Element
{
	///<include file='Utils/Docs/ElementComputedStyleMap/ElementComputedStyleMap.generated.xml' path='docs/ElementComputedStyleMap/*'/>
	public StylePropertyMapReadOnly ComputedStyleMap() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CSSStyleRule/CSSStyleRule.generated.xml' path='docs/CSSStyleRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSStyleRule
{
	///<include file='Utils/Docs/CSSStyleRuleStyleMap/CSSStyleRuleStyleMap.generated.xml' path='docs/CSSStyleRuleStyleMap/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public StylePropertyMap StyleMap { get; }
}

///<include file='Utils/Docs/CSSUnparsedValue/CSSUnparsedValue.generated.xml' path='docs/CSSUnparsedValue/*'/>
[To(ToAttribute.Default)]
public partial class CSSUnparsedValue : CSSStyleValue
{
	///<include file='Utils/Docs/CSSUnparsedValueCSSUnparsedValue/CSSUnparsedValueCSSUnparsedValue.generated.xml' path='docs/CSSUnparsedValueCSSUnparsedValue/*'/>
	public CSSUnparsedValue(List<CSSUnparsedSegment> members) { }
	public CSSUnparsedSegment this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	///<include file='Utils/Docs/CSSUnparsedValueLength/CSSUnparsedValueLength.generated.xml' path='docs/CSSUnparsedValueLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	
	
	public CSSUnparsedValue() { }
}


///<include file='Utils/Docs/CSSVariableReferenceValue/CSSVariableReferenceValue.generated.xml' path='docs/CSSVariableReferenceValue/*'/>
[To(ToAttribute.Default)]
public partial class CSSVariableReferenceValue
{
	///<include file='Utils/Docs/CSSVariableReferenceValueCSSVariableReferenceValue/CSSVariableReferenceValueCSSVariableReferenceValue.generated.xml' path='docs/CSSVariableReferenceValueCSSVariableReferenceValue/*'/>
	public CSSVariableReferenceValue(USVString variable, CSSUnparsedValue? fallback) { }
	///<include file='Utils/Docs/CSSVariableReferenceValueVariable/CSSVariableReferenceValueVariable.generated.xml' path='docs/CSSVariableReferenceValueVariable/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Variable { get; set; }
	///<include file='Utils/Docs/CSSVariableReferenceValueFallback/CSSVariableReferenceValueFallback.generated.xml' path='docs/CSSVariableReferenceValueFallback/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnparsedValue? Fallback { get; }
	public CSSVariableReferenceValue() { }
}

///<include file='Utils/Docs/CSSKeywordValue/CSSKeywordValue.generated.xml' path='docs/CSSKeywordValue/*'/>
[To(ToAttribute.Default)]
public partial class CSSKeywordValue : CSSStyleValue
{
	///<include file='Utils/Docs/CSSKeywordValueCSSKeywordValue/CSSKeywordValueCSSKeywordValue.generated.xml' path='docs/CSSKeywordValueCSSKeywordValue/*'/>
	public CSSKeywordValue(USVString value) { }
	///<include file='Utils/Docs/CSSKeywordValueValue/CSSKeywordValueValue.generated.xml' path='docs/CSSKeywordValueValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Value { get; set; }
	public CSSKeywordValue() { }
}



[To(ToAttribute.Default)]
public partial class CSSNumericType
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public long Length;
		[To(ToAttribute.FirstCharToLowerCase)]
	public long Angle;
		[To(ToAttribute.FirstCharToLowerCase)]
	public long Time;
		[To(ToAttribute.FirstCharToLowerCase)]
	public long Frequency;
		[To(ToAttribute.FirstCharToLowerCase)]
	public long Resolution;
		[To(ToAttribute.FirstCharToLowerCase)]
	public long Flex;
		[To(ToAttribute.FirstCharToLowerCase)]
	public long Percent;
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericBaseType PercentHint;
}

///<include file='Utils/Docs/CSSNumericValue/CSSNumericValue.generated.xml' path='docs/CSSNumericValue/*'/>
[To(ToAttribute.Default)]
public partial class CSSNumericValue : CSSStyleValue
{
	///<include file='Utils/Docs/CSSNumericValueAdd/CSSNumericValueAdd.generated.xml' path='docs/CSSNumericValueAdd/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Add(params CSSNumberish[] values) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSNumericValueSub/CSSNumericValueSub.generated.xml' path='docs/CSSNumericValueSub/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Sub(params CSSNumberish[] values) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSNumericValueMul/CSSNumericValueMul.generated.xml' path='docs/CSSNumericValueMul/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Mul(params CSSNumberish[] values) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSNumericValueDiv/CSSNumericValueDiv.generated.xml' path='docs/CSSNumericValueDiv/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Div(params CSSNumberish[] values) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSNumericValueMin/CSSNumericValueMin.generated.xml' path='docs/CSSNumericValueMin/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Min(params CSSNumberish[] values) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSNumericValueMax/CSSNumericValueMax.generated.xml' path='docs/CSSNumericValueMax/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Max(params CSSNumberish[] values) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSNumericValueEquals/CSSNumericValueEquals.generated.xml' path='docs/CSSNumericValueEquals/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Equals(params CSSNumberish[] value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSNumericValueTo/CSSNumericValueTo.generated.xml' path='docs/CSSNumericValueTo/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue To(USVString unit) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSNumericValueToSum/CSSNumericValueToSum.generated.xml' path='docs/CSSNumericValueToSum/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSMathSum ToSum(params USVString[] units) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSNumericValueType/CSSNumericValueType.generated.xml' path='docs/CSSNumericValueType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericType Type() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSNumericValueParse/CSSNumericValueParse.generated.xml' path='docs/CSSNumericValueParse/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public static CSSNumericValue Parse(USVString cssText) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CSSUnitValue/CSSUnitValue.generated.xml' path='docs/CSSUnitValue/*'/>
[To(ToAttribute.Default)]
public partial class CSSUnitValue : CSSNumericValue
{
	///<include file='Utils/Docs/CSSUnitValueCSSUnitValue/CSSUnitValueCSSUnitValue.generated.xml' path='docs/CSSUnitValueCSSUnitValue/*'/>
	public CSSUnitValue(Number value, USVString unit) { }
	///<include file='Utils/Docs/CSSUnitValueValue/CSSUnitValueValue.generated.xml' path='docs/CSSUnitValueValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Value { get; set; }
	///<include file='Utils/Docs/CSSUnitValueUnit/CSSUnitValueUnit.generated.xml' path='docs/CSSUnitValueUnit/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Unit { get; }
	public CSSUnitValue() { }
}

///<include file='Utils/Docs/CSSMathValue/CSSMathValue.generated.xml' path='docs/CSSMathValue/*'/>
[To(ToAttribute.Default)]
public partial class CSSMathValue : CSSNumericValue
{
	///<include file='Utils/Docs/CSSMathValueOperator/CSSMathValueOperator.generated.xml' path='docs/CSSMathValueOperator/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSMathOperator Operator { get; }
}

///<include file='Utils/Docs/CSSMathSum/CSSMathSum.generated.xml' path='docs/CSSMathSum/*'/>
[To(ToAttribute.Default)]
public partial class CSSMathSum : CSSMathValue
{
	///<include file='Utils/Docs/CSSMathSumCSSMathSum/CSSMathSumCSSMathSum.generated.xml' path='docs/CSSMathSumCSSMathSum/*'/>
	public CSSMathSum(params CSSNumberish[] args) { }
	///<include file='Utils/Docs/CSSMathSumValues/CSSMathSumValues.generated.xml' path='docs/CSSMathSumValues/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericArray Values { get; }
	public CSSMathSum() { }
}

///<include file='Utils/Docs/CSSMathProduct/CSSMathProduct.generated.xml' path='docs/CSSMathProduct/*'/>
[To(ToAttribute.Default)]
public partial class CSSMathProduct : CSSMathValue
{
	///<include file='Utils/Docs/CSSMathProductCSSMathProduct/CSSMathProductCSSMathProduct.generated.xml' path='docs/CSSMathProductCSSMathProduct/*'/>
	public CSSMathProduct(params CSSNumberish[] args) { }
	///<include file='Utils/Docs/CSSMathProductValues/CSSMathProductValues.generated.xml' path='docs/CSSMathProductValues/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericArray Values { get; }
	public CSSMathProduct() { }
}

///<include file='Utils/Docs/CSSMathNegate/CSSMathNegate.generated.xml' path='docs/CSSMathNegate/*'/>
[To(ToAttribute.Default)]
public partial class CSSMathNegate : CSSMathValue
{
	///<include file='Utils/Docs/CSSMathNegateCSSMathNegate/CSSMathNegateCSSMathNegate.generated.xml' path='docs/CSSMathNegateCSSMathNegate/*'/>
	public CSSMathNegate(CSSNumberish arg) { }
	///<include file='Utils/Docs/CSSMathNegateValue/CSSMathNegateValue.generated.xml' path='docs/CSSMathNegateValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Value { get; }
	public CSSMathNegate() { }
}

///<include file='Utils/Docs/CSSMathInvert/CSSMathInvert.generated.xml' path='docs/CSSMathInvert/*'/>
[To(ToAttribute.Default)]
public partial class CSSMathInvert : CSSMathValue
{
	///<include file='Utils/Docs/CSSMathInvertCSSMathInvert/CSSMathInvertCSSMathInvert.generated.xml' path='docs/CSSMathInvertCSSMathInvert/*'/>
	public CSSMathInvert(CSSNumberish arg) { }
	///<include file='Utils/Docs/CSSMathInvertValue/CSSMathInvertValue.generated.xml' path='docs/CSSMathInvertValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Value { get; }
	public CSSMathInvert() { }
}

///<include file='Utils/Docs/CSSMathMin/CSSMathMin.generated.xml' path='docs/CSSMathMin/*'/>
[To(ToAttribute.Default)]
public partial class CSSMathMin : CSSMathValue
{
	///<include file='Utils/Docs/CSSMathMinCSSMathMin/CSSMathMinCSSMathMin.generated.xml' path='docs/CSSMathMinCSSMathMin/*'/>
	public CSSMathMin(params CSSNumberish[] args) { }
	///<include file='Utils/Docs/CSSMathMinValues/CSSMathMinValues.generated.xml' path='docs/CSSMathMinValues/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericArray Values { get; }
	public CSSMathMin() { }
}

///<include file='Utils/Docs/CSSMathMax/CSSMathMax.generated.xml' path='docs/CSSMathMax/*'/>
[To(ToAttribute.Default)]
public partial class CSSMathMax : CSSMathValue
{
	///<include file='Utils/Docs/CSSMathMaxCSSMathMax/CSSMathMaxCSSMathMax.generated.xml' path='docs/CSSMathMaxCSSMathMax/*'/>
	public CSSMathMax(params CSSNumberish[] args) { }
	///<include file='Utils/Docs/CSSMathMaxValues/CSSMathMaxValues.generated.xml' path='docs/CSSMathMaxValues/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericArray Values { get; }
	public CSSMathMax() { }
}

[To(ToAttribute.Default)]
public partial class CSSMathClamp : CSSMathValue
{
		public CSSMathClamp(CSSNumberish lower, CSSNumberish value, CSSNumberish upper) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Lower { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Value { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Upper { get; }
	public CSSMathClamp() { }
}

///<include file='Utils/Docs/CSSNumericArray/CSSNumericArray.generated.xml' path='docs/CSSNumericArray/*'/>
[To(ToAttribute.Default)]
public partial class CSSNumericArray
{
	public CSSNumericValue this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	///<include file='Utils/Docs/CSSNumericArrayLength/CSSNumericArrayLength.generated.xml' path='docs/CSSNumericArrayLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	
}

///<include file='Utils/Docs/CSS/CSS.generated.xml' path='docs/CSS/*'/>
public partial class CSS
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Number(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Percent(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Cap(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Ch(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Em(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Ex(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Ic(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Lh(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Rcap(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Rch(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Rem(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Rex(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Ric(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Rlh(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Vw(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Vh(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Vi(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Vb(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Vmin(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Vmax(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Svw(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Svh(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Svi(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Svb(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Svmin(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Svmax(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Lvw(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Lvh(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Lvi(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Lvb(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Lvmin(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Lvmax(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Dvw(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Dvh(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Dvi(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Dvb(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Dvmin(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Dvmax(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Cqw(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Cqh(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Cqi(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Cqb(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Cqmin(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Cqmax(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Cm(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Mm(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Q(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue In(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Pt(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Pc(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Px(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Deg(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Grad(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Rad(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Turn(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue S(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Ms(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Hz(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue KHz(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Dpi(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Dpcm(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Dppx(Number value) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSUnitValue Fr(Number value) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CSSTransformValue/CSSTransformValue.generated.xml' path='docs/CSSTransformValue/*'/>
[To(ToAttribute.Default)]
public partial class CSSTransformValue : CSSStyleValue
{
	///<include file='Utils/Docs/CSSTransformValueCSSTransformValue/CSSTransformValueCSSTransformValue.generated.xml' path='docs/CSSTransformValueCSSTransformValue/*'/>
	public CSSTransformValue(List<CSSTransformComponent> transforms) { }
	public CSSTransformComponent this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	///<include file='Utils/Docs/CSSTransformValueLength/CSSTransformValueLength.generated.xml' path='docs/CSSTransformValueLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	
	
	///<include file='Utils/Docs/CSSTransformValueIs2D/CSSTransformValueIs2D.generated.xml' path='docs/CSSTransformValueIs2D/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Is2D { get; }
	///<include file='Utils/Docs/CSSTransformValueToMatrix/CSSTransformValueToMatrix.generated.xml' path='docs/CSSTransformValueToMatrix/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMMatrix ToMatrix() { throw new System.NotImplementedException(); }
	public CSSTransformValue() { }
}


///<include file='Utils/Docs/CSSTransformComponent/CSSTransformComponent.generated.xml' path='docs/CSSTransformComponent/*'/>
[To(ToAttribute.Default)]
public partial class CSSTransformComponent
{
	
	///<include file='Utils/Docs/CSSTransformComponentIs2D/CSSTransformComponentIs2D.generated.xml' path='docs/CSSTransformComponentIs2D/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Is2D { get; set; }
	///<include file='Utils/Docs/CSSTransformComponentToMatrix/CSSTransformComponentToMatrix.generated.xml' path='docs/CSSTransformComponentToMatrix/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMMatrix ToMatrix() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CSSTranslate/CSSTranslate.generated.xml' path='docs/CSSTranslate/*'/>
[To(ToAttribute.Default)]
public partial class CSSTranslate : CSSTransformComponent
{
	///<include file='Utils/Docs/CSSTranslateCSSTranslate/CSSTranslateCSSTranslate.generated.xml' path='docs/CSSTranslateCSSTranslate/*'/>
	public CSSTranslate(CSSNumericValue x, CSSNumericValue y, CSSNumericValue z) { }
	///<include file='Utils/Docs/CSSTranslateX/CSSTranslateX.generated.xml' path='docs/CSSTranslateX/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue X { get; set; }
	///<include file='Utils/Docs/CSSTranslateY/CSSTranslateY.generated.xml' path='docs/CSSTranslateY/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Y { get; set; }
	///<include file='Utils/Docs/CSSTranslateZ/CSSTranslateZ.generated.xml' path='docs/CSSTranslateZ/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Z { get; set; }
	public CSSTranslate() { }
}

///<include file='Utils/Docs/CSSRotate/CSSRotate.generated.xml' path='docs/CSSRotate/*'/>
[To(ToAttribute.Default)]
public partial class CSSRotate : CSSTransformComponent
{
	///<include file='Utils/Docs/CSSRotateCSSRotate/CSSRotateCSSRotate.generated.xml' path='docs/CSSRotateCSSRotate/*'/>
	public CSSRotate(CSSNumericValue angle) { }
	///<include file='Utils/Docs/CSSRotateCSSRotate/CSSRotateCSSRotate.generated.xml' path='docs/CSSRotateCSSRotate/*'/>
	public CSSRotate(CSSNumberish x, CSSNumberish y, CSSNumberish z, CSSNumericValue angle) { }
	///<include file='Utils/Docs/CSSRotateX/CSSRotateX.generated.xml' path='docs/CSSRotateX/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumberish X { get; set; }
	///<include file='Utils/Docs/CSSRotateY/CSSRotateY.generated.xml' path='docs/CSSRotateY/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumberish Y { get; set; }
	///<include file='Utils/Docs/CSSRotateZ/CSSRotateZ.generated.xml' path='docs/CSSRotateZ/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumberish Z { get; set; }
	///<include file='Utils/Docs/CSSRotateAngle/CSSRotateAngle.generated.xml' path='docs/CSSRotateAngle/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Angle { get; set; }
	public CSSRotate() { }
}

///<include file='Utils/Docs/CSSScale/CSSScale.generated.xml' path='docs/CSSScale/*'/>
[To(ToAttribute.Default)]
public partial class CSSScale : CSSTransformComponent
{
	///<include file='Utils/Docs/CSSScaleCSSScale/CSSScaleCSSScale.generated.xml' path='docs/CSSScaleCSSScale/*'/>
	public CSSScale(CSSNumberish x, CSSNumberish y, CSSNumberish z) { }
	///<include file='Utils/Docs/CSSScaleX/CSSScaleX.generated.xml' path='docs/CSSScaleX/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumberish X { get; set; }
	///<include file='Utils/Docs/CSSScaleY/CSSScaleY.generated.xml' path='docs/CSSScaleY/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumberish Y { get; set; }
	///<include file='Utils/Docs/CSSScaleZ/CSSScaleZ.generated.xml' path='docs/CSSScaleZ/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumberish Z { get; set; }
	public CSSScale() { }
}

///<include file='Utils/Docs/CSSSkew/CSSSkew.generated.xml' path='docs/CSSSkew/*'/>
[To(ToAttribute.Default)]
public partial class CSSSkew : CSSTransformComponent
{
	///<include file='Utils/Docs/CSSSkewCSSSkew/CSSSkewCSSSkew.generated.xml' path='docs/CSSSkewCSSSkew/*'/>
	public CSSSkew(CSSNumericValue ax, CSSNumericValue ay) { }
	///<include file='Utils/Docs/CSSSkewAx/CSSSkewAx.generated.xml' path='docs/CSSSkewAx/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Ax { get; set; }
	///<include file='Utils/Docs/CSSSkewAy/CSSSkewAy.generated.xml' path='docs/CSSSkewAy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Ay { get; set; }
	public CSSSkew() { }
}

///<include file='Utils/Docs/CSSSkewX/CSSSkewX.generated.xml' path='docs/CSSSkewX/*'/>
[To(ToAttribute.Default)]
public partial class CSSSkewX : CSSTransformComponent
{
	///<include file='Utils/Docs/CSSSkewXCSSSkewX/CSSSkewXCSSSkewX.generated.xml' path='docs/CSSSkewXCSSSkewX/*'/>
	public CSSSkewX(CSSNumericValue ax) { }
	///<include file='Utils/Docs/CSSSkewXAx/CSSSkewXAx.generated.xml' path='docs/CSSSkewXAx/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Ax { get; set; }
	public CSSSkewX() { }
}

///<include file='Utils/Docs/CSSSkewY/CSSSkewY.generated.xml' path='docs/CSSSkewY/*'/>
[To(ToAttribute.Default)]
public partial class CSSSkewY : CSSTransformComponent
{
	///<include file='Utils/Docs/CSSSkewYCSSSkewY/CSSSkewYCSSSkewY.generated.xml' path='docs/CSSSkewYCSSSkewY/*'/>
	public CSSSkewY(CSSNumericValue ay) { }
	///<include file='Utils/Docs/CSSSkewYAy/CSSSkewYAy.generated.xml' path='docs/CSSSkewYAy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue Ay { get; set; }
	public CSSSkewY() { }
}

///<include file='Utils/Docs/CSSPerspective/CSSPerspective.generated.xml' path='docs/CSSPerspective/*'/>
[To(ToAttribute.Default)]
public partial class CSSPerspective : CSSTransformComponent
{
	///<include file='Utils/Docs/CSSPerspectiveCSSPerspective/CSSPerspectiveCSSPerspective.generated.xml' path='docs/CSSPerspectiveCSSPerspective/*'/>
	public CSSPerspective(CSSPerspectiveValue length) { }
	///<include file='Utils/Docs/CSSPerspectiveLength/CSSPerspectiveLength.generated.xml' path='docs/CSSPerspectiveLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSPerspectiveValue Length { get; set; }
	public CSSPerspective() { }
}

///<include file='Utils/Docs/CSSMatrixComponent/CSSMatrixComponent.generated.xml' path='docs/CSSMatrixComponent/*'/>
[To(ToAttribute.Default)]
public partial class CSSMatrixComponent : CSSTransformComponent
{
	///<include file='Utils/Docs/CSSMatrixComponentCSSMatrixComponent/CSSMatrixComponentCSSMatrixComponent.generated.xml' path='docs/CSSMatrixComponentCSSMatrixComponent/*'/>
	public CSSMatrixComponent(DOMMatrixReadOnly matrix, CSSMatrixComponentOptions options) { }
	///<include file='Utils/Docs/CSSMatrixComponentMatrix/CSSMatrixComponentMatrix.generated.xml' path='docs/CSSMatrixComponentMatrix/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMMatrix Matrix { get; set; }
	public CSSMatrixComponent() { }
}

[To(ToAttribute.Default)]
public partial class CSSMatrixComponentOptions
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Is2D;
}

///<include file='Utils/Docs/CSSImageValue/CSSImageValue.generated.xml' path='docs/CSSImageValue/*'/>
[To(ToAttribute.Default)]
public partial class CSSImageValue : CSSStyleValue
{
}

[To(ToAttribute.Default)]
public partial class CSSColorValue : CSSStyleValue
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public static Union15 Parse(USVString cssText) { throw new System.NotImplementedException(); }
}





[To(ToAttribute.Default)]
public partial class CSSRGB : CSSColorValue
{
		public CSSRGB(CSSColorRGBComp r, CSSColorRGBComp g, CSSColorRGBComp b, CSSColorPercent alpha) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorRGBComp R { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorRGBComp G { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorRGBComp B { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent Alpha { get; set; }
	public CSSRGB() { }
}

[To(ToAttribute.Default)]
public partial class CSSHSL : CSSColorValue
{
		public CSSHSL(CSSColorAngle h, CSSColorPercent s, CSSColorPercent l, CSSColorPercent alpha) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorAngle H { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent S { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent L { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent Alpha { get; set; }
	public CSSHSL() { }
}

[To(ToAttribute.Default)]
public partial class CSSHWB : CSSColorValue
{
		public CSSHWB(CSSNumericValue h, CSSNumberish w, CSSNumberish b, CSSNumberish alpha) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumericValue H { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumberish W { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumberish B { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumberish Alpha { get; set; }
	public CSSHWB() { }
}

[To(ToAttribute.Default)]
public partial class CSSLab : CSSColorValue
{
		public CSSLab(CSSColorPercent l, CSSColorNumber a, CSSColorNumber b, CSSColorPercent alpha) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent L { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorNumber A { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorNumber B { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent Alpha { get; set; }
	public CSSLab() { }
}

[To(ToAttribute.Default)]
public partial class CSSLCH : CSSColorValue
{
		public CSSLCH(CSSColorPercent l, CSSColorPercent c, CSSColorAngle h, CSSColorPercent alpha) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent L { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent C { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorAngle H { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent Alpha { get; set; }
	public CSSLCH() { }
}

[To(ToAttribute.Default)]
public partial class CSSOKLab : CSSColorValue
{
		public CSSOKLab(CSSColorPercent l, CSSColorNumber a, CSSColorNumber b, CSSColorPercent alpha) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent L { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorNumber A { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorNumber B { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent Alpha { get; set; }
	public CSSOKLab() { }
}

[To(ToAttribute.Default)]
public partial class CSSOKLCH : CSSColorValue
{
		public CSSOKLCH(CSSColorPercent l, CSSColorPercent c, CSSColorAngle h, CSSColorPercent alpha) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent L { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent C { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorAngle H { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent Alpha { get; set; }
	public CSSOKLCH() { }
}

[To(ToAttribute.Default)]
public partial class CSSColor : CSSColorValue
{
		public CSSColor(CSSKeywordish colorSpace, List<CSSColorPercent> channels, CSSNumberish alpha) { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSKeywordish ColorSpace { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSColorPercent[] Channels { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSNumberish Alpha { get; set; }
	public CSSColor() { }
}

[To(ToAttribute.Default)]
public partial class CSSViewTransitionRule : CSSRule
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Navigation { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString[] Types { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ViewTransitionTypeSet
{
	
}

///<include file='Utils/Docs/ViewTransition/ViewTransition.generated.xml' path='docs/ViewTransition/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ViewTransition
{
		public ViewTransitionTypeSet Types { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StartViewTransitionOptions
{
		public ViewTransitionUpdateCallback? Update;
		public List<DOMString>? Types;
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentStartViewTransition/DocumentStartViewTransition.generated.xml' path='docs/DocumentStartViewTransition/*'/>
	public ViewTransition StartViewTransition(Union20 callbackOptions) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ViewTransition/ViewTransition.generated.xml' path='docs/ViewTransition/*'/>
public partial class ViewTransition
{
	///<include file='Utils/Docs/ViewTransitionUpdateCallbackDone/ViewTransitionUpdateCallbackDone.generated.xml' path='docs/ViewTransitionUpdateCallbackDone/*'/>
	public Task<Undefined> UpdateCallbackDone { get; }
	///<include file='Utils/Docs/ViewTransitionReady/ViewTransitionReady.generated.xml' path='docs/ViewTransitionReady/*'/>
	public Task<Undefined> Ready { get; }
	///<include file='Utils/Docs/ViewTransitionFinished/ViewTransitionFinished.generated.xml' path='docs/ViewTransitionFinished/*'/>
	public Task<Undefined> Finished { get; }
	///<include file='Utils/Docs/ViewTransitionSkipTransition/ViewTransitionSkipTransition.generated.xml' path='docs/ViewTransitionSkipTransition/*'/>
	public Undefined SkipTransition() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public Viewport Viewport { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Viewport
{
		public DOMRect[]? Segments { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScrollOptions
{
		public ScrollBehavior Behavior;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScrollToOptions : ScrollOptions
{
		public double Left;
		public double Top;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowMatchMedia/WindowMatchMedia.generated.xml' path='docs/WindowMatchMedia/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public MediaQueryList MatchMedia(CSSOMString query) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowScreen/WindowScreen.generated.xml' path='docs/WindowScreen/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Screen Screen { get; }
	///<include file='Utils/Docs/WindowVisualViewport/WindowVisualViewport.generated.xml' path='docs/WindowVisualViewport/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public VisualViewport? VisualViewport { get; }
	///<include file='Utils/Docs/WindowMoveTo/WindowMoveTo.generated.xml' path='docs/WindowMoveTo/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined MoveTo(long x, long y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowMoveBy/WindowMoveBy.generated.xml' path='docs/WindowMoveBy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined MoveBy(long x, long y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowResizeTo/WindowResizeTo.generated.xml' path='docs/WindowResizeTo/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ResizeTo(long width, long height) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowResizeBy/WindowResizeBy.generated.xml' path='docs/WindowResizeBy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ResizeBy(long x, long y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowInnerWidth/WindowInnerWidth.generated.xml' path='docs/WindowInnerWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long InnerWidth { get; }
	///<include file='Utils/Docs/WindowInnerHeight/WindowInnerHeight.generated.xml' path='docs/WindowInnerHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long InnerHeight { get; }
	///<include file='Utils/Docs/WindowScrollX/WindowScrollX.generated.xml' path='docs/WindowScrollX/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number ScrollX { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Number PageXOffset { get; }
	///<include file='Utils/Docs/WindowScrollY/WindowScrollY.generated.xml' path='docs/WindowScrollY/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number ScrollY { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Number PageYOffset { get; }
	///<include file='Utils/Docs/WindowScroll/WindowScroll.generated.xml' path='docs/WindowScroll/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Scroll(ScrollToOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowScroll/WindowScroll.generated.xml' path='docs/WindowScroll/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Scroll(double x, double y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowScrollTo/WindowScrollTo.generated.xml' path='docs/WindowScrollTo/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ScrollTo(ScrollToOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowScrollTo/WindowScrollTo.generated.xml' path='docs/WindowScrollTo/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ScrollTo(double x, double y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowScrollBy/WindowScrollBy.generated.xml' path='docs/WindowScrollBy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ScrollBy(ScrollToOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowScrollBy/WindowScrollBy.generated.xml' path='docs/WindowScrollBy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ScrollBy(double x, double y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowScreenX/WindowScreenX.generated.xml' path='docs/WindowScreenX/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long ScreenX { get; }
	///<include file='Utils/Docs/WindowScreenLeft/WindowScreenLeft.generated.xml' path='docs/WindowScreenLeft/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long ScreenLeft { get; }
	///<include file='Utils/Docs/WindowScreenY/WindowScreenY.generated.xml' path='docs/WindowScreenY/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long ScreenY { get; }
	///<include file='Utils/Docs/WindowScreenTop/WindowScreenTop.generated.xml' path='docs/WindowScreenTop/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long ScreenTop { get; }
	///<include file='Utils/Docs/WindowOuterWidth/WindowOuterWidth.generated.xml' path='docs/WindowOuterWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long OuterWidth { get; }
	///<include file='Utils/Docs/WindowOuterHeight/WindowOuterHeight.generated.xml' path='docs/WindowOuterHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long OuterHeight { get; }
	///<include file='Utils/Docs/WindowDevicePixelRatio/WindowDevicePixelRatio.generated.xml' path='docs/WindowDevicePixelRatio/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number DevicePixelRatio { get; }
}

///<include file='Utils/Docs/MediaQueryList/MediaQueryList.generated.xml' path='docs/MediaQueryList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaQueryList : EventTarget
{
	///<include file='Utils/Docs/MediaQueryListMedia/MediaQueryListMedia.generated.xml' path='docs/MediaQueryListMedia/*'/>
	public CSSOMString Media { get; }
	///<include file='Utils/Docs/MediaQueryListMatches/MediaQueryListMatches.generated.xml' path='docs/MediaQueryListMatches/*'/>
	public bool Matches { get; }
	///<include file='Utils/Docs/MediaQueryListAddListener/MediaQueryListAddListener.generated.xml' path='docs/MediaQueryListAddListener/*'/>
	public Undefined AddListener(EventListener? callback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaQueryListRemoveListener/MediaQueryListRemoveListener.generated.xml' path='docs/MediaQueryListRemoveListener/*'/>
	public Undefined RemoveListener(EventListener? callback) { throw new System.NotImplementedException(); }
		public EventHandler Onchange { get; set; }
}

///<include file='Utils/Docs/MediaQueryListEvent/MediaQueryListEvent.generated.xml' path='docs/MediaQueryListEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaQueryListEvent : Event
{
	///<include file='Utils/Docs/MediaQueryListEventMediaQueryListEvent/MediaQueryListEventMediaQueryListEvent.generated.xml' path='docs/MediaQueryListEventMediaQueryListEvent/*'/>
	public MediaQueryListEvent(CSSOMString type, MediaQueryListEventInit eventInitDict) { }
	///<include file='Utils/Docs/MediaQueryListEventMedia/MediaQueryListEventMedia.generated.xml' path='docs/MediaQueryListEventMedia/*'/>
	public CSSOMString Media { get; }
	///<include file='Utils/Docs/MediaQueryListEventMatches/MediaQueryListEventMatches.generated.xml' path='docs/MediaQueryListEventMatches/*'/>
	public bool Matches { get; }
	public MediaQueryListEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaQueryListEventInit : EventInit
{
		public CSSOMString Media;
		public bool Matches;
}

///<include file='Utils/Docs/Screen/Screen.generated.xml' path='docs/Screen/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Screen
{
	///<include file='Utils/Docs/ScreenAvailWidth/ScreenAvailWidth.generated.xml' path='docs/ScreenAvailWidth/*'/>
	public long AvailWidth { get; }
	///<include file='Utils/Docs/ScreenAvailHeight/ScreenAvailHeight.generated.xml' path='docs/ScreenAvailHeight/*'/>
	public long AvailHeight { get; }
	///<include file='Utils/Docs/ScreenWidth/ScreenWidth.generated.xml' path='docs/ScreenWidth/*'/>
	public long Width { get; }
	///<include file='Utils/Docs/ScreenHeight/ScreenHeight.generated.xml' path='docs/ScreenHeight/*'/>
	public long Height { get; }
	///<include file='Utils/Docs/ScreenColorDepth/ScreenColorDepth.generated.xml' path='docs/ScreenColorDepth/*'/>
	public ulong ColorDepth { get; }
	///<include file='Utils/Docs/ScreenPixelDepth/ScreenPixelDepth.generated.xml' path='docs/ScreenPixelDepth/*'/>
	public ulong PixelDepth { get; }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentElementFromPoint/DocumentElementFromPoint.generated.xml' path='docs/DocumentElementFromPoint/*'/>
	public Element? ElementFromPoint(Number x, Number y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentElementsFromPoint/DocumentElementsFromPoint.generated.xml' path='docs/DocumentElementsFromPoint/*'/>
	public List<Element> ElementsFromPoint(Number x, Number y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCaretPositionFromPoint/DocumentCaretPositionFromPoint.generated.xml' path='docs/DocumentCaretPositionFromPoint/*'/>
	public CaretPosition? CaretPositionFromPoint(Number x, Number y, CaretPositionFromPointOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentScrollingElement/DocumentScrollingElement.generated.xml' path='docs/DocumentScrollingElement/*'/>
	public Element? ScrollingElement { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CaretPositionFromPointOptions
{
		public List<ShadowRoot> ShadowRoots;
}

///<include file='Utils/Docs/CaretPosition/CaretPosition.generated.xml' path='docs/CaretPosition/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CaretPosition
{
		public Node OffsetNode { get; }
		public ulong Offset { get; }
		public DOMRect? GetClientRect() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScrollIntoViewOptions : ScrollOptions
{
		public ScrollLogicalPosition Block;
		public ScrollLogicalPosition Inline;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CheckVisibilityOptions
{
		public bool CheckOpacity;
		public bool CheckVisibilityCSS;
		public bool ContentVisibilityAuto;
		public bool OpacityProperty;
		public bool VisibilityProperty;
}

///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
public partial class Element
{
	///<include file='Utils/Docs/ElementGetClientRects/ElementGetClientRects.generated.xml' path='docs/ElementGetClientRects/*'/>
	public DOMRectList GetClientRects() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementGetBoundingClientRect/ElementGetBoundingClientRect.generated.xml' path='docs/ElementGetBoundingClientRect/*'/>
	public DOMRect GetBoundingClientRect() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementCheckVisibility/ElementCheckVisibility.generated.xml' path='docs/ElementCheckVisibility/*'/>
	public bool CheckVisibility(CheckVisibilityOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementScrollIntoView/ElementScrollIntoView.generated.xml' path='docs/ElementScrollIntoView/*'/>
	public Undefined ScrollIntoView(Union21 arg) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementScroll/ElementScroll.generated.xml' path='docs/ElementScroll/*'/>
	public Undefined Scroll(ScrollToOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementScroll/ElementScroll.generated.xml' path='docs/ElementScroll/*'/>
	public Undefined Scroll(double x, double y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementScrollTo/ElementScrollTo.generated.xml' path='docs/ElementScrollTo/*'/>
	public Undefined ScrollTo(ScrollToOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementScrollTo/ElementScrollTo.generated.xml' path='docs/ElementScrollTo/*'/>
	public Undefined ScrollTo(double x, double y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementScrollBy/ElementScrollBy.generated.xml' path='docs/ElementScrollBy/*'/>
	public Undefined ScrollBy(ScrollToOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementScrollBy/ElementScrollBy.generated.xml' path='docs/ElementScrollBy/*'/>
	public Undefined ScrollBy(double x, double y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementScrollTop/ElementScrollTop.generated.xml' path='docs/ElementScrollTop/*'/>
	public double ScrollTop { get; set; }
	///<include file='Utils/Docs/ElementScrollLeft/ElementScrollLeft.generated.xml' path='docs/ElementScrollLeft/*'/>
	public double ScrollLeft { get; set; }
	///<include file='Utils/Docs/ElementScrollWidth/ElementScrollWidth.generated.xml' path='docs/ElementScrollWidth/*'/>
	public long ScrollWidth { get; }
	///<include file='Utils/Docs/ElementScrollHeight/ElementScrollHeight.generated.xml' path='docs/ElementScrollHeight/*'/>
	public long ScrollHeight { get; }
	///<include file='Utils/Docs/ElementClientTop/ElementClientTop.generated.xml' path='docs/ElementClientTop/*'/>
	public long ClientTop { get; }
	///<include file='Utils/Docs/ElementClientLeft/ElementClientLeft.generated.xml' path='docs/ElementClientLeft/*'/>
	public long ClientLeft { get; }
	///<include file='Utils/Docs/ElementClientWidth/ElementClientWidth.generated.xml' path='docs/ElementClientWidth/*'/>
	public long ClientWidth { get; }
	///<include file='Utils/Docs/ElementClientHeight/ElementClientHeight.generated.xml' path='docs/ElementClientHeight/*'/>
	public long ClientHeight { get; }
	///<include file='Utils/Docs/ElementCurrentCSSZoom/ElementCurrentCSSZoom.generated.xml' path='docs/ElementCurrentCSSZoom/*'/>
	public Number CurrentCSSZoom { get; }
}

///<include file='Utils/Docs/HTMLElement/HTMLElement.generated.xml' path='docs/HTMLElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLElement
{
	///<include file='Utils/Docs/HTMLElementOffsetParent/HTMLElementOffsetParent.generated.xml' path='docs/HTMLElementOffsetParent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Element? OffsetParent { get; }
	///<include file='Utils/Docs/HTMLElementOffsetTop/HTMLElementOffsetTop.generated.xml' path='docs/HTMLElementOffsetTop/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long OffsetTop { get; }
	///<include file='Utils/Docs/HTMLElementOffsetLeft/HTMLElementOffsetLeft.generated.xml' path='docs/HTMLElementOffsetLeft/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long OffsetLeft { get; }
	///<include file='Utils/Docs/HTMLElementOffsetWidth/HTMLElementOffsetWidth.generated.xml' path='docs/HTMLElementOffsetWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long OffsetWidth { get; }
	///<include file='Utils/Docs/HTMLElementOffsetHeight/HTMLElementOffsetHeight.generated.xml' path='docs/HTMLElementOffsetHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long OffsetHeight { get; }
}

///<include file='Utils/Docs/HTMLImageElement/HTMLImageElement.generated.xml' path='docs/HTMLImageElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLImageElement
{
	///<include file='Utils/Docs/HTMLImageElementX/HTMLImageElementX.generated.xml' path='docs/HTMLImageElementX/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long X { get; }
	///<include file='Utils/Docs/HTMLImageElementY/HTMLImageElementY.generated.xml' path='docs/HTMLImageElementY/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long Y { get; }
}

///<include file='Utils/Docs/Range/Range.generated.xml' path='docs/Range/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Range
{
	///<include file='Utils/Docs/RangeGetClientRects/RangeGetClientRects.generated.xml' path='docs/RangeGetClientRects/*'/>
	public DOMRectList GetClientRects() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeGetBoundingClientRect/RangeGetBoundingClientRect.generated.xml' path='docs/RangeGetBoundingClientRect/*'/>
	public DOMRect GetBoundingClientRect() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MouseEvent/MouseEvent.generated.xml' path='docs/MouseEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MouseEvent
{
	///<include file='Utils/Docs/MouseEventPageX/MouseEventPageX.generated.xml' path='docs/MouseEventPageX/*'/>
	public Number PageX { get; }
	///<include file='Utils/Docs/MouseEventPageY/MouseEventPageY.generated.xml' path='docs/MouseEventPageY/*'/>
	public Number PageY { get; }
	///<include file='Utils/Docs/MouseEventX/MouseEventX.generated.xml' path='docs/MouseEventX/*'/>
	public Number X { get; }
	///<include file='Utils/Docs/MouseEventY/MouseEventY.generated.xml' path='docs/MouseEventY/*'/>
	public Number Y { get; }
	///<include file='Utils/Docs/MouseEventOffsetX/MouseEventOffsetX.generated.xml' path='docs/MouseEventOffsetX/*'/>
	public Number OffsetX { get; }
	///<include file='Utils/Docs/MouseEventOffsetY/MouseEventOffsetY.generated.xml' path='docs/MouseEventOffsetY/*'/>
	public Number OffsetY { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BoxQuadOptions
{
		public CSSBoxType Box;
		public GeometryNode RelativeTo;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ConvertCoordinateOptions
{
		public CSSBoxType FromBox;
		public CSSBoxType ToBox;
}

///<include file='Utils/Docs/VisualViewport/VisualViewport.generated.xml' path='docs/VisualViewport/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VisualViewport : EventTarget
{
	///<include file='Utils/Docs/VisualViewportOffsetLeft/VisualViewportOffsetLeft.generated.xml' path='docs/VisualViewportOffsetLeft/*'/>
	public Number OffsetLeft { get; }
	///<include file='Utils/Docs/VisualViewportOffsetTop/VisualViewportOffsetTop.generated.xml' path='docs/VisualViewportOffsetTop/*'/>
	public Number OffsetTop { get; }
	///<include file='Utils/Docs/VisualViewportPageLeft/VisualViewportPageLeft.generated.xml' path='docs/VisualViewportPageLeft/*'/>
	public Number PageLeft { get; }
	///<include file='Utils/Docs/VisualViewportPageTop/VisualViewportPageTop.generated.xml' path='docs/VisualViewportPageTop/*'/>
	public Number PageTop { get; }
	///<include file='Utils/Docs/VisualViewportWidth/VisualViewportWidth.generated.xml' path='docs/VisualViewportWidth/*'/>
	public Number Width { get; }
	///<include file='Utils/Docs/VisualViewportHeight/VisualViewportHeight.generated.xml' path='docs/VisualViewportHeight/*'/>
	public Number Height { get; }
	///<include file='Utils/Docs/VisualViewportScale/VisualViewportScale.generated.xml' path='docs/VisualViewportScale/*'/>
	public Number Scale { get; }
		public EventHandler Onresize { get; set; }
		public EventHandler Onscroll { get; set; }
		public EventHandler Onscrollend { get; set; }
}


///<include file='Utils/Docs/MediaList/MediaList.generated.xml' path='docs/MediaList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaList
{
	///<include file='Utils/Docs/MediaListMediaText/MediaListMediaText.generated.xml' path='docs/MediaListMediaText/*'/>
	public CSSOMString MediaText { get; set; }
	///<include file='Utils/Docs/MediaListLength/MediaListLength.generated.xml' path='docs/MediaListLength/*'/>
	public ulong Length { get; }
	
	///<include file='Utils/Docs/MediaListAppendMedium/MediaListAppendMedium.generated.xml' path='docs/MediaListAppendMedium/*'/>
	public Undefined AppendMedium(CSSOMString medium) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaListDeleteMedium/MediaListDeleteMedium.generated.xml' path='docs/MediaListDeleteMedium/*'/>
	public Undefined DeleteMedium(CSSOMString medium) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/StyleSheet/StyleSheet.generated.xml' path='docs/StyleSheet/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class StyleSheet
{
	///<include file='Utils/Docs/StyleSheetType/StyleSheetType.generated.xml' path='docs/StyleSheetType/*'/>
	public CSSOMString Type { get; }
	///<include file='Utils/Docs/StyleSheetHref/StyleSheetHref.generated.xml' path='docs/StyleSheetHref/*'/>
	public USVString? Href { get; }
	///<include file='Utils/Docs/StyleSheetOwnerNode/StyleSheetOwnerNode.generated.xml' path='docs/StyleSheetOwnerNode/*'/>
	public Union23? OwnerNode { get; }
	///<include file='Utils/Docs/StyleSheetParentStyleSheet/StyleSheetParentStyleSheet.generated.xml' path='docs/StyleSheetParentStyleSheet/*'/>
	public CSSStyleSheet? ParentStyleSheet { get; }
	///<include file='Utils/Docs/StyleSheetTitle/StyleSheetTitle.generated.xml' path='docs/StyleSheetTitle/*'/>
	public DOMString? Title { get; }
	///<include file='Utils/Docs/StyleSheetMedia/StyleSheetMedia.generated.xml' path='docs/StyleSheetMedia/*'/>
	public MediaList Media { get; }
	///<include file='Utils/Docs/StyleSheetDisabled/StyleSheetDisabled.generated.xml' path='docs/StyleSheetDisabled/*'/>
	public bool Disabled { get; set; }
}

///<include file='Utils/Docs/CSSStyleSheet/CSSStyleSheet.generated.xml' path='docs/CSSStyleSheet/*'/>
[To(ToAttribute.Default)]
public partial class CSSStyleSheet : StyleSheet
{
	///<include file='Utils/Docs/CSSStyleSheetCSSStyleSheet/CSSStyleSheetCSSStyleSheet.generated.xml' path='docs/CSSStyleSheetCSSStyleSheet/*'/>
	public CSSStyleSheet(CSSStyleSheetInit options) { }
	///<include file='Utils/Docs/CSSStyleSheetOwnerRule/CSSStyleSheetOwnerRule.generated.xml' path='docs/CSSStyleSheetOwnerRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSRule? OwnerRule { get; }
	///<include file='Utils/Docs/CSSStyleSheetCssRules/CSSStyleSheetCssRules.generated.xml' path='docs/CSSStyleSheetCssRules/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSRuleList CssRules { get; }
	///<include file='Utils/Docs/CSSStyleSheetInsertRule/CSSStyleSheetInsertRule.generated.xml' path='docs/CSSStyleSheetInsertRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong InsertRule(CSSOMString rule, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSStyleSheetDeleteRule/CSSStyleSheetDeleteRule.generated.xml' path='docs/CSSStyleSheetDeleteRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined DeleteRule(ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSStyleSheetReplace/CSSStyleSheetReplace.generated.xml' path='docs/CSSStyleSheetReplace/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<CSSStyleSheet> Replace(USVString text) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSStyleSheetReplaceSync/CSSStyleSheetReplaceSync.generated.xml' path='docs/CSSStyleSheetReplaceSync/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ReplaceSync(USVString text) { throw new System.NotImplementedException(); }
	public CSSStyleSheet() { }
}

[To(ToAttribute.Default)]
public partial class CSSStyleSheetInit
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString BaseURL;
		[To(ToAttribute.FirstCharToLowerCase)]
	public Union24 Media;
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Disabled;
}

///<include file='Utils/Docs/CSSStyleSheet/CSSStyleSheet.generated.xml' path='docs/CSSStyleSheet/*'/>
public partial class CSSStyleSheet
{
	///<include file='Utils/Docs/CSSStyleSheetRules/CSSStyleSheetRules.generated.xml' path='docs/CSSStyleSheetRules/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSRuleList Rules { get; }
	///<include file='Utils/Docs/CSSStyleSheetAddRule/CSSStyleSheetAddRule.generated.xml' path='docs/CSSStyleSheetAddRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long AddRule(DOMString selector, DOMString style, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSStyleSheetRemoveRule/CSSStyleSheetRemoveRule.generated.xml' path='docs/CSSStyleSheetRemoveRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined RemoveRule(ulong index) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/StyleSheetList/StyleSheetList.generated.xml' path='docs/StyleSheetList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class StyleSheetList
{
	
	///<include file='Utils/Docs/StyleSheetListLength/StyleSheetListLength.generated.xml' path='docs/StyleSheetListLength/*'/>
	public ulong Length { get; }
}

///<include file='Utils/Docs/CSSRuleList/CSSRuleList.generated.xml' path='docs/CSSRuleList/*'/>
[To(ToAttribute.Default)]
public partial class CSSRuleList
{
	
	///<include file='Utils/Docs/CSSRuleListLength/CSSRuleListLength.generated.xml' path='docs/CSSRuleListLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
}

///<include file='Utils/Docs/CSSRule/CSSRule.generated.xml' path='docs/CSSRule/*'/>
public partial class CSSRule
{
	///<include file='Utils/Docs/CSSRuleCssText/CSSRuleCssText.generated.xml' path='docs/CSSRuleCssText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString CssText { get; set; }
	///<include file='Utils/Docs/CSSRuleParentRule/CSSRuleParentRule.generated.xml' path='docs/CSSRuleParentRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSRule? ParentRule { get; }
	///<include file='Utils/Docs/CSSRuleParentStyleSheet/CSSRuleParentStyleSheet.generated.xml' path='docs/CSSRuleParentStyleSheet/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSStyleSheet? ParentStyleSheet { get; }
	///<include file='Utils/Docs/CSSRuleType/CSSRuleType.generated.xml' path='docs/CSSRuleType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ushort Type { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort STYLE_RULE = 1;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort CHARSET_RULE = 2;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort IMPORT_RULE = 3;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort MEDIA_RULE = 4;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort FONT_FACE_RULE = 5;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort PAGE_RULE = 6;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort MARGIN_RULE = 9;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort NAMESPACE_RULE = 10;
}

///<include file='Utils/Docs/CSSStyleRule/CSSStyleRule.generated.xml' path='docs/CSSStyleRule/*'/>
public partial class CSSStyleRule : CSSGroupingRule
{
	///<include file='Utils/Docs/CSSStyleRuleSelectorText/CSSStyleRuleSelectorText.generated.xml' path='docs/CSSStyleRuleSelectorText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString SelectorText { get; set; }
	///<include file='Utils/Docs/CSSStyleRuleStyle/CSSStyleRuleStyle.generated.xml' path='docs/CSSStyleRuleStyle/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSStyleProperties Style { get; }
}

///<include file='Utils/Docs/CSSImportRule/CSSImportRule.generated.xml' path='docs/CSSImportRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSImportRule : CSSRule
{
	///<include file='Utils/Docs/CSSImportRuleHref/CSSImportRuleHref.generated.xml' path='docs/CSSImportRuleHref/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Href { get; }
	///<include file='Utils/Docs/CSSImportRuleMedia/CSSImportRuleMedia.generated.xml' path='docs/CSSImportRuleMedia/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public MediaList Media { get; }
	///<include file='Utils/Docs/CSSImportRuleStyleSheet/CSSImportRuleStyleSheet.generated.xml' path='docs/CSSImportRuleStyleSheet/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSStyleSheet? StyleSheet { get; }
	///<include file='Utils/Docs/CSSImportRuleLayerName/CSSImportRuleLayerName.generated.xml' path='docs/CSSImportRuleLayerName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString? LayerName { get; }
	///<include file='Utils/Docs/CSSImportRuleSupportsText/CSSImportRuleSupportsText.generated.xml' path='docs/CSSImportRuleSupportsText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString? SupportsText { get; }
}

///<include file='Utils/Docs/CSSGroupingRule/CSSGroupingRule.generated.xml' path='docs/CSSGroupingRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSGroupingRule : CSSRule
{
	///<include file='Utils/Docs/CSSGroupingRuleCssRules/CSSGroupingRuleCssRules.generated.xml' path='docs/CSSGroupingRuleCssRules/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSRuleList CssRules { get; }
	///<include file='Utils/Docs/CSSGroupingRuleInsertRule/CSSGroupingRuleInsertRule.generated.xml' path='docs/CSSGroupingRuleInsertRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong InsertRule(CSSOMString rule, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSGroupingRuleDeleteRule/CSSGroupingRuleDeleteRule.generated.xml' path='docs/CSSGroupingRuleDeleteRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined DeleteRule(ulong index) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CSSPageDescriptors/CSSPageDescriptors.generated.xml' path='docs/CSSPageDescriptors/*'/>
[To(ToAttribute.Default)]
public partial class CSSPageDescriptors : CSSStyleDeclaration
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginTop { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginRight { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginBottom { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString MarginLeft { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_top { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_right { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_bottom { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Margin_left { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Size { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString PageOrientation { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Page_orientation { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Marks { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Bleed { get; set; }
}

///<include file='Utils/Docs/CSSPageRule/CSSPageRule.generated.xml' path='docs/CSSPageRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSPageRule : CSSGroupingRule
{
	///<include file='Utils/Docs/CSSPageRuleSelectorText/CSSPageRuleSelectorText.generated.xml' path='docs/CSSPageRuleSelectorText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString SelectorText { get; set; }
	///<include file='Utils/Docs/CSSPageRuleStyle/CSSPageRuleStyle.generated.xml' path='docs/CSSPageRuleStyle/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSPageDescriptors Style { get; }
}

[To(ToAttribute.Default)]
public partial class CSSMarginRule : CSSRule
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Name { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSStyleDeclaration Style { get; }
}

///<include file='Utils/Docs/CSSNamespaceRule/CSSNamespaceRule.generated.xml' path='docs/CSSNamespaceRule/*'/>
[To(ToAttribute.Default)]
public partial class CSSNamespaceRule : CSSRule
{
	///<include file='Utils/Docs/CSSNamespaceRuleNamespaceURI/CSSNamespaceRuleNamespaceURI.generated.xml' path='docs/CSSNamespaceRuleNamespaceURI/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString NamespaceURI { get; }
	///<include file='Utils/Docs/CSSNamespaceRulePrefix/CSSNamespaceRulePrefix.generated.xml' path='docs/CSSNamespaceRulePrefix/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Prefix { get; }
}

///<include file='Utils/Docs/CSSStyleDeclaration/CSSStyleDeclaration.generated.xml' path='docs/CSSStyleDeclaration/*'/>
[To(ToAttribute.Default)]
public partial class CSSStyleDeclaration
{
	///<include file='Utils/Docs/CSSStyleDeclarationCssText/CSSStyleDeclarationCssText.generated.xml' path='docs/CSSStyleDeclarationCssText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString CssText { get; set; }
	///<include file='Utils/Docs/CSSStyleDeclarationLength/CSSStyleDeclarationLength.generated.xml' path='docs/CSSStyleDeclarationLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	
	///<include file='Utils/Docs/CSSStyleDeclarationGetPropertyValue/CSSStyleDeclarationGetPropertyValue.generated.xml' path='docs/CSSStyleDeclarationGetPropertyValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString GetPropertyValue(CSSOMString property) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSStyleDeclarationGetPropertyPriority/CSSStyleDeclarationGetPropertyPriority.generated.xml' path='docs/CSSStyleDeclarationGetPropertyPriority/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString GetPropertyPriority(CSSOMString property) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSStyleDeclarationSetProperty/CSSStyleDeclarationSetProperty.generated.xml' path='docs/CSSStyleDeclarationSetProperty/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetProperty(CSSOMString property, CSSOMString value, CSSOMString priority) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSStyleDeclarationRemoveProperty/CSSStyleDeclarationRemoveProperty.generated.xml' path='docs/CSSStyleDeclarationRemoveProperty/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString RemoveProperty(CSSOMString property) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CSSStyleDeclarationParentRule/CSSStyleDeclarationParentRule.generated.xml' path='docs/CSSStyleDeclarationParentRule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSRule? ParentRule { get; }
}

[To(ToAttribute.Default)]
public partial class CSSStyleProperties : CSSStyleDeclaration
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString CssFloat { get; set; }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowGetComputedStyle/WindowGetComputedStyle.generated.xml' path='docs/WindowGetComputedStyle/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSStyleDeclaration GetComputedStyle(Element elt, CSSOMString? pseudoElt) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CSS/CSS.generated.xml' path='docs/CSS/*'/>
public partial class CSS
{
	///<include file='Utils/Docs/CSSEscape/CSSEscape.generated.xml' path='docs/CSSEscape/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CSSOMString Escape(CSSOMString ident) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DataCue : TextTrackCue
{
		public DataCue(Number startTime, double endTime, dynamic value, DOMString type) { }
		public dynamic Value { get; set; }
		public DOMString Type { get; }
	public DataCue() { }
}

///<include file='Utils/Docs/DeprecationReportBody/DeprecationReportBody.generated.xml' path='docs/DeprecationReportBody/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeprecationReportBody : ReportBody
{
	///<include file='Utils/Docs/DeprecationReportBodyToJSON/DeprecationReportBodyToJSON.generated.xml' path='docs/DeprecationReportBodyToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DeprecationReportBodyId/DeprecationReportBodyId.generated.xml' path='docs/DeprecationReportBodyId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/DeprecationReportBodyAnticipatedRemoval/DeprecationReportBodyAnticipatedRemoval.generated.xml' path='docs/DeprecationReportBodyAnticipatedRemoval/*'/>
	public Object? AnticipatedRemoval { get; }
	///<include file='Utils/Docs/DeprecationReportBodyMessage/DeprecationReportBodyMessage.generated.xml' path='docs/DeprecationReportBodyMessage/*'/>
	public DOMString Message { get; }
	///<include file='Utils/Docs/DeprecationReportBodySourceFile/DeprecationReportBodySourceFile.generated.xml' path='docs/DeprecationReportBodySourceFile/*'/>
	public DOMString? SourceFile { get; }
	///<include file='Utils/Docs/DeprecationReportBodyLineNumber/DeprecationReportBodyLineNumber.generated.xml' path='docs/DeprecationReportBodyLineNumber/*'/>
	public ulong? LineNumber { get; }
	///<include file='Utils/Docs/DeprecationReportBodyColumnNumber/DeprecationReportBodyColumnNumber.generated.xml' path='docs/DeprecationReportBodyColumnNumber/*'/>
	public ulong? ColumnNumber { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigatorManagedData
{
		public Task<DOMString> GetAnnotatedAssetId() { throw new System.NotImplementedException(); }
		public Task<DOMString> GetAnnotatedLocation() { throw new System.NotImplementedException(); }
		public Task<DOMString> GetDirectoryId() { throw new System.NotImplementedException(); }
		public Task<DOMString> GetHostname() { throw new System.NotImplementedException(); }
		public Task<DOMString> GetSerialNumber() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public DevicePosture DevicePosture { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DevicePosture : EventTarget
{
		public DevicePostureType Type { get; }
		public EventHandler Onchange { get; set; }
}

public partial class CredentialRequestOptions
{
		public DigitalCredentialRequestOptions Digital;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DigitalCredentialRequestOptions
{
		public List<DigitalCredentialRequest> Requests;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DigitalCredentialRequest
{
		public required DOMString Protocol;
		public required Object Data;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DigitalCredential : Credential
{
		public DOMString Protocol { get; }
		public Object Data { get; }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public Task<DigitalGoodsService> GetDigitalGoodsService(DOMString serviceProvider) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DigitalGoodsService
{
		public Task<List<ItemDetails>> GetDetails(List<DOMString> itemIds) { throw new System.NotImplementedException(); }
		public Task<List<PurchaseDetails>> ListPurchases() { throw new System.NotImplementedException(); }
		public Task<List<PurchaseDetails>> ListPurchaseHistory() { throw new System.NotImplementedException(); }
		public Task<Undefined> Consume(DOMString purchaseToken) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ItemDetails
{
		public required DOMString ItemId;
		public required DOMString Title;
		public required PaymentCurrencyAmount Price;
		public ItemType Type;
		public DOMString Description;
		public List<DOMString> IconURLs;
		public DOMString SubscriptionPeriod;
		public DOMString FreeTrialPeriod;
		public PaymentCurrencyAmount IntroductoryPrice;
		public DOMString IntroductoryPricePeriod;
		public ulong IntroductoryPriceCycles;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PurchaseDetails
{
		public required DOMString ItemId;
		public required DOMString PurchaseToken;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowDocumentPictureInPicture/WindowDocumentPictureInPicture.generated.xml' path='docs/WindowDocumentPictureInPicture/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DocumentPictureInPicture DocumentPictureInPicture { get; }
}

///<include file='Utils/Docs/DocumentPictureInPicture/DocumentPictureInPicture.generated.xml' path='docs/DocumentPictureInPicture/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DocumentPictureInPicture : EventTarget
{
	///<include file='Utils/Docs/DocumentPictureInPictureRequestWindow/DocumentPictureInPictureRequestWindow.generated.xml' path='docs/DocumentPictureInPictureRequestWindow/*'/>
	public Task<Window> RequestWindow(DocumentPictureInPictureOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentPictureInPictureWindow/DocumentPictureInPictureWindow.generated.xml' path='docs/DocumentPictureInPictureWindow/*'/>
	public Window _window { get; }
		public EventHandler Onenter { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DocumentPictureInPictureOptions
{
		public ulong Width;
		public ulong Height;
		public bool DisallowReturnToOpener;
		public bool PreferInitialWindowPlacement;
}

///<include file='Utils/Docs/DocumentPictureInPictureEvent/DocumentPictureInPictureEvent.generated.xml' path='docs/DocumentPictureInPictureEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DocumentPictureInPictureEvent : Event
{
	///<include file='Utils/Docs/DocumentPictureInPictureEventDocumentPictureInPictureEvent/DocumentPictureInPictureEventDocumentPictureInPictureEvent.generated.xml' path='docs/DocumentPictureInPictureEventDocumentPictureInPictureEvent/*'/>
	public DocumentPictureInPictureEvent(DOMString type, DocumentPictureInPictureEventInit eventInitDict) { }
	///<include file='Utils/Docs/DocumentPictureInPictureEventWindow/DocumentPictureInPictureEventWindow.generated.xml' path='docs/DocumentPictureInPictureEventWindow/*'/>
	public Window _window { get; }
	public DocumentPictureInPictureEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DocumentPictureInPictureEventInit : EventInit
{
		public required Window Window;
}

///<include file='Utils/Docs/XMLSerializer/XMLSerializer.generated.xml' path='docs/XMLSerializer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XMLSerializer
{
	///<include file='Utils/Docs/XMLSerializerXMLSerializer/XMLSerializerXMLSerializer.generated.xml' path='docs/XMLSerializerXMLSerializer/*'/>
	public XMLSerializer() { }
	///<include file='Utils/Docs/XMLSerializerSerializeToString/XMLSerializerSerializeToString.generated.xml' path='docs/XMLSerializerSerializeToString/*'/>
	public DOMString SerializeToString(Node root) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Event/Event.generated.xml' path='docs/Event/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Event
{
	///<include file='Utils/Docs/EventEvent/EventEvent.generated.xml' path='docs/EventEvent/*'/>
	public Event(DOMString type, EventInit eventInitDict) { }
	///<include file='Utils/Docs/EventType/EventType.generated.xml' path='docs/EventType/*'/>
	public DOMString Type { get; }
	///<include file='Utils/Docs/EventTarget/EventTarget.generated.xml' path='docs/EventTarget/*'/>
	public EventTarget? Target { get; }
	///<include file='Utils/Docs/EventSrcElement/EventSrcElement.generated.xml' path='docs/EventSrcElement/*'/>
	public EventTarget? SrcElement { get; }
	///<include file='Utils/Docs/EventCurrentTarget/EventCurrentTarget.generated.xml' path='docs/EventCurrentTarget/*'/>
	public EventTarget? CurrentTarget { get; }
	///<include file='Utils/Docs/EventComposedPath/EventComposedPath.generated.xml' path='docs/EventComposedPath/*'/>
	public List<EventTarget> ComposedPath() { throw new System.NotImplementedException(); }
		public const ushort NONE = 0;
		public const ushort CAPTURING_PHASE = 1;
		public const ushort AT_TARGET = 2;
		public const ushort BUBBLING_PHASE = 3;
	///<include file='Utils/Docs/EventEventPhase/EventEventPhase.generated.xml' path='docs/EventEventPhase/*'/>
	public ushort EventPhase { get; }
	///<include file='Utils/Docs/EventStopPropagation/EventStopPropagation.generated.xml' path='docs/EventStopPropagation/*'/>
	public Undefined StopPropagation() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EventCancelBubble/EventCancelBubble.generated.xml' path='docs/EventCancelBubble/*'/>
	public bool CancelBubble { get; set; }
	///<include file='Utils/Docs/EventStopImmediatePropagation/EventStopImmediatePropagation.generated.xml' path='docs/EventStopImmediatePropagation/*'/>
	public Undefined StopImmediatePropagation() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EventBubbles/EventBubbles.generated.xml' path='docs/EventBubbles/*'/>
	public bool Bubbles { get; }
	///<include file='Utils/Docs/EventCancelable/EventCancelable.generated.xml' path='docs/EventCancelable/*'/>
	public bool Cancelable { get; }
	///<include file='Utils/Docs/EventReturnValue/EventReturnValue.generated.xml' path='docs/EventReturnValue/*'/>
	public bool ReturnValue { get; set; }
	///<include file='Utils/Docs/EventPreventDefault/EventPreventDefault.generated.xml' path='docs/EventPreventDefault/*'/>
	public Undefined PreventDefault() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EventDefaultPrevented/EventDefaultPrevented.generated.xml' path='docs/EventDefaultPrevented/*'/>
	public bool DefaultPrevented { get; }
	///<include file='Utils/Docs/EventComposed/EventComposed.generated.xml' path='docs/EventComposed/*'/>
	public bool Composed { get; }
	///<include file='Utils/Docs/EventIsTrusted/EventIsTrusted.generated.xml' path='docs/EventIsTrusted/*'/>
	public bool IsTrusted { get; }
	///<include file='Utils/Docs/EventTimeStamp/EventTimeStamp.generated.xml' path='docs/EventTimeStamp/*'/>
	public DOMHighResTimeStamp TimeStamp { get; }
	///<include file='Utils/Docs/EventInitEvent/EventInitEvent.generated.xml' path='docs/EventInitEvent/*'/>
	public Undefined InitEvent(DOMString type, bool bubbles, bool cancelable) { throw new System.NotImplementedException(); }
	public Event() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EventInit
{
		public bool Bubbles;
		public bool Cancelable;
		public bool Composed;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowEvent/WindowEvent.generated.xml' path='docs/WindowEvent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Union25 Event { get; }
}

///<include file='Utils/Docs/CustomEvent/CustomEvent.generated.xml' path='docs/CustomEvent/*'/>
[To(ToAttribute.Default)]
public partial class CustomEvent : Event
{
	///<include file='Utils/Docs/CustomEventCustomEvent/CustomEventCustomEvent.generated.xml' path='docs/CustomEventCustomEvent/*'/>
	public CustomEvent(DOMString type, CustomEventInit eventInitDict) { }
	///<include file='Utils/Docs/CustomEventDetail/CustomEventDetail.generated.xml' path='docs/CustomEventDetail/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public dynamic Detail { get; }
	///<include file='Utils/Docs/CustomEventInitCustomEvent/CustomEventInitCustomEvent.generated.xml' path='docs/CustomEventInitCustomEvent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined InitCustomEvent(DOMString type, bool bubbles, bool cancelable, dynamic detail) { throw new System.NotImplementedException(); }
	public CustomEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CustomEventInit : EventInit
{
		public dynamic Detail;
}

///<include file='Utils/Docs/EventTarget/EventTarget.generated.xml' path='docs/EventTarget/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EventTarget
{
	///<include file='Utils/Docs/EventTargetEventTarget/EventTargetEventTarget.generated.xml' path='docs/EventTargetEventTarget/*'/>
	public EventTarget() { }
	///<include file='Utils/Docs/EventTargetAddEventListener/EventTargetAddEventListener.generated.xml' path='docs/EventTargetAddEventListener/*'/>
	public Undefined AddEventListener(DOMString type, EventListener? callback, Union26 options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EventTargetRemoveEventListener/EventTargetRemoveEventListener.generated.xml' path='docs/EventTargetRemoveEventListener/*'/>
	public Undefined RemoveEventListener(DOMString type, EventListener? callback, Union27 options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EventTargetDispatchEvent/EventTargetDispatchEvent.generated.xml' path='docs/EventTargetDispatchEvent/*'/>
	public bool DispatchEvent(Event event_) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EventListenerOptions
{
		public bool Capture;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AddEventListenerOptions : EventListenerOptions
{
		public bool Passive;
		public bool Once;
		public AbortSignal Signal;
}

///<include file='Utils/Docs/AbortController/AbortController.generated.xml' path='docs/AbortController/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AbortController
{
	///<include file='Utils/Docs/AbortControllerAbortController/AbortControllerAbortController.generated.xml' path='docs/AbortControllerAbortController/*'/>
	public AbortController() { }
	///<include file='Utils/Docs/AbortControllerSignal/AbortControllerSignal.generated.xml' path='docs/AbortControllerSignal/*'/>
	public AbortSignal Signal { get; }
	///<include file='Utils/Docs/AbortControllerAbort/AbortControllerAbort.generated.xml' path='docs/AbortControllerAbort/*'/>
	public Undefined Abort(dynamic reason) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/AbortSignal/AbortSignal.generated.xml' path='docs/AbortSignal/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AbortSignal : EventTarget
{
	///<include file='Utils/Docs/AbortSignalAbort/AbortSignalAbort.generated.xml' path='docs/AbortSignalAbort/*'/>
	public static AbortSignal Abort(dynamic reason) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AbortSignalTimeout/AbortSignalTimeout.generated.xml' path='docs/AbortSignalTimeout/*'/>
	public static AbortSignal Timeout(ulong milliseconds) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AbortSignalAny/AbortSignalAny.generated.xml' path='docs/AbortSignalAny/*'/>
	public static AbortSignal Any(List<AbortSignal> signals) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AbortSignalAborted/AbortSignalAborted.generated.xml' path='docs/AbortSignalAborted/*'/>
	public bool Aborted { get; }
	///<include file='Utils/Docs/AbortSignalReason/AbortSignalReason.generated.xml' path='docs/AbortSignalReason/*'/>
	public dynamic Reason { get; }
	///<include file='Utils/Docs/AbortSignalThrowIfAborted/AbortSignalThrowIfAborted.generated.xml' path='docs/AbortSignalThrowIfAborted/*'/>
	public Undefined ThrowIfAborted() { throw new System.NotImplementedException(); }
		public EventHandler Onabort { get; set; }
}

///<include file='Utils/Docs/NodeList/NodeList.generated.xml' path='docs/NodeList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NodeList
{
	
	///<include file='Utils/Docs/NodeListLength/NodeListLength.generated.xml' path='docs/NodeListLength/*'/>
	public ulong Length { get; }
	public Node this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
}

///<include file='Utils/Docs/HTMLCollection/HTMLCollection.generated.xml' path='docs/HTMLCollection/*'/>
[To(ToAttribute.Default)]
public partial class HTMLCollection
{
	///<include file='Utils/Docs/HTMLCollectionLength/HTMLCollectionLength.generated.xml' path='docs/HTMLCollectionLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	
	
}

///<include file='Utils/Docs/MutationObserver/MutationObserver.generated.xml' path='docs/MutationObserver/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MutationObserver
{
	///<include file='Utils/Docs/MutationObserverMutationObserver/MutationObserverMutationObserver.generated.xml' path='docs/MutationObserverMutationObserver/*'/>
	public MutationObserver(MutationCallback callback) { }
	///<include file='Utils/Docs/MutationObserverObserve/MutationObserverObserve.generated.xml' path='docs/MutationObserverObserve/*'/>
	public Undefined Observe(Node target, MutationObserverInit options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MutationObserverDisconnect/MutationObserverDisconnect.generated.xml' path='docs/MutationObserverDisconnect/*'/>
	public Undefined Disconnect() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MutationObserverTakeRecords/MutationObserverTakeRecords.generated.xml' path='docs/MutationObserverTakeRecords/*'/>
	public List<MutationRecord> TakeRecords() { throw new System.NotImplementedException(); }
	public MutationObserver() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MutationObserverInit
{
		public bool ChildList;
		public bool Attributes;
		public bool CharacterData;
		public bool Subtree;
		public bool AttributeOldValue;
		public bool CharacterDataOldValue;
		public List<DOMString> AttributeFilter;
}

///<include file='Utils/Docs/MutationRecord/MutationRecord.generated.xml' path='docs/MutationRecord/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MutationRecord
{
	///<include file='Utils/Docs/MutationRecordType/MutationRecordType.generated.xml' path='docs/MutationRecordType/*'/>
	public DOMString Type { get; }
	///<include file='Utils/Docs/MutationRecordTarget/MutationRecordTarget.generated.xml' path='docs/MutationRecordTarget/*'/>
	public Node Target { get; }
	///<include file='Utils/Docs/MutationRecordAddedNodes/MutationRecordAddedNodes.generated.xml' path='docs/MutationRecordAddedNodes/*'/>
	public NodeList AddedNodes { get; }
	///<include file='Utils/Docs/MutationRecordRemovedNodes/MutationRecordRemovedNodes.generated.xml' path='docs/MutationRecordRemovedNodes/*'/>
	public NodeList RemovedNodes { get; }
	///<include file='Utils/Docs/MutationRecordPreviousSibling/MutationRecordPreviousSibling.generated.xml' path='docs/MutationRecordPreviousSibling/*'/>
	public Node? PreviousSibling { get; }
	///<include file='Utils/Docs/MutationRecordNextSibling/MutationRecordNextSibling.generated.xml' path='docs/MutationRecordNextSibling/*'/>
	public Node? NextSibling { get; }
	///<include file='Utils/Docs/MutationRecordAttributeName/MutationRecordAttributeName.generated.xml' path='docs/MutationRecordAttributeName/*'/>
	public DOMString? AttributeName { get; }
	///<include file='Utils/Docs/MutationRecordAttributeNamespace/MutationRecordAttributeNamespace.generated.xml' path='docs/MutationRecordAttributeNamespace/*'/>
	public DOMString? AttributeNamespace { get; }
	///<include file='Utils/Docs/MutationRecordOldValue/MutationRecordOldValue.generated.xml' path='docs/MutationRecordOldValue/*'/>
	public DOMString? OldValue { get; }
}

///<include file='Utils/Docs/Node/Node.generated.xml' path='docs/Node/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Node : EventTarget
{
		public const ushort ELEMENT_NODE = 1;
		public const ushort ATTRIBUTE_NODE = 2;
		public const ushort TEXT_NODE = 3;
		public const ushort CDATA_SECTION_NODE = 4;
		public const ushort ENTITY_REFERENCE_NODE = 5;
		public const ushort ENTITY_NODE = 6;
		public const ushort PROCESSING_INSTRUCTION_NODE = 7;
		public const ushort COMMENT_NODE = 8;
		public const ushort DOCUMENT_NODE = 9;
		public const ushort DOCUMENT_TYPE_NODE = 10;
		public const ushort DOCUMENT_FRAGMENT_NODE = 11;
		public const ushort NOTATION_NODE = 12;
	///<include file='Utils/Docs/NodeNodeType/NodeNodeType.generated.xml' path='docs/NodeNodeType/*'/>
	public ushort NodeType { get; }
	///<include file='Utils/Docs/NodeNodeName/NodeNodeName.generated.xml' path='docs/NodeNodeName/*'/>
	public DOMString NodeName { get; }
	///<include file='Utils/Docs/NodeBaseURI/NodeBaseURI.generated.xml' path='docs/NodeBaseURI/*'/>
	public USVString BaseURI { get; }
	///<include file='Utils/Docs/NodeIsConnected/NodeIsConnected.generated.xml' path='docs/NodeIsConnected/*'/>
	public bool IsConnected { get; }
	///<include file='Utils/Docs/NodeOwnerDocument/NodeOwnerDocument.generated.xml' path='docs/NodeOwnerDocument/*'/>
	public Document? OwnerDocument { get; }
	///<include file='Utils/Docs/NodeGetRootNode/NodeGetRootNode.generated.xml' path='docs/NodeGetRootNode/*'/>
	public Node GetRootNode(GetRootNodeOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeParentNode/NodeParentNode.generated.xml' path='docs/NodeParentNode/*'/>
	public Node? ParentNode { get; }
	///<include file='Utils/Docs/NodeParentElement/NodeParentElement.generated.xml' path='docs/NodeParentElement/*'/>
	public Element? ParentElement { get; }
	///<include file='Utils/Docs/NodeHasChildNodes/NodeHasChildNodes.generated.xml' path='docs/NodeHasChildNodes/*'/>
	public bool HasChildNodes() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeChildNodes/NodeChildNodes.generated.xml' path='docs/NodeChildNodes/*'/>
	public NodeList ChildNodes { get; }
	///<include file='Utils/Docs/NodeFirstChild/NodeFirstChild.generated.xml' path='docs/NodeFirstChild/*'/>
	public Node? FirstChild { get; }
	///<include file='Utils/Docs/NodeLastChild/NodeLastChild.generated.xml' path='docs/NodeLastChild/*'/>
	public Node? LastChild { get; }
	///<include file='Utils/Docs/NodePreviousSibling/NodePreviousSibling.generated.xml' path='docs/NodePreviousSibling/*'/>
	public Node? PreviousSibling { get; }
	///<include file='Utils/Docs/NodeNextSibling/NodeNextSibling.generated.xml' path='docs/NodeNextSibling/*'/>
	public Node? NextSibling { get; }
	///<include file='Utils/Docs/NodeNodeValue/NodeNodeValue.generated.xml' path='docs/NodeNodeValue/*'/>
	public DOMString? NodeValue { get; set; }
	///<include file='Utils/Docs/NodeTextContent/NodeTextContent.generated.xml' path='docs/NodeTextContent/*'/>
	public DOMString? TextContent { get; set; }
	///<include file='Utils/Docs/NodeNormalize/NodeNormalize.generated.xml' path='docs/NodeNormalize/*'/>
	public Undefined Normalize() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeCloneNode/NodeCloneNode.generated.xml' path='docs/NodeCloneNode/*'/>
	public Node CloneNode(bool subtree) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeIsEqualNode/NodeIsEqualNode.generated.xml' path='docs/NodeIsEqualNode/*'/>
	public bool IsEqualNode(Node? otherNode) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeIsSameNode/NodeIsSameNode.generated.xml' path='docs/NodeIsSameNode/*'/>
	public bool IsSameNode(Node? otherNode) { throw new System.NotImplementedException(); }
		public const ushort DOCUMENT_POSITION_DISCONNECTED = 0x01;
		public const ushort DOCUMENT_POSITION_PRECEDING = 0x02;
		public const ushort DOCUMENT_POSITION_FOLLOWING = 0x04;
		public const ushort DOCUMENT_POSITION_CONTAINS = 0x08;
		public const ushort DOCUMENT_POSITION_CONTAINED_BY = 0x10;
		public const ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;
	///<include file='Utils/Docs/NodeCompareDocumentPosition/NodeCompareDocumentPosition.generated.xml' path='docs/NodeCompareDocumentPosition/*'/>
	public ushort CompareDocumentPosition(Node other) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeContains/NodeContains.generated.xml' path='docs/NodeContains/*'/>
	public bool Contains(Node? other) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeLookupPrefix/NodeLookupPrefix.generated.xml' path='docs/NodeLookupPrefix/*'/>
	public DOMString? LookupPrefix(DOMString? namespace_) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeLookupNamespaceURI/NodeLookupNamespaceURI.generated.xml' path='docs/NodeLookupNamespaceURI/*'/>
	public DOMString? LookupNamespaceURI(DOMString? prefix) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeIsDefaultNamespace/NodeIsDefaultNamespace.generated.xml' path='docs/NodeIsDefaultNamespace/*'/>
	public bool IsDefaultNamespace(DOMString? namespace_) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeInsertBefore/NodeInsertBefore.generated.xml' path='docs/NodeInsertBefore/*'/>
	public Node InsertBefore(Node node, Node? child) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeAppendChild/NodeAppendChild.generated.xml' path='docs/NodeAppendChild/*'/>
	public Node AppendChild(Node node) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeReplaceChild/NodeReplaceChild.generated.xml' path='docs/NodeReplaceChild/*'/>
	public Node ReplaceChild(Node node, Node child) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeRemoveChild/NodeRemoveChild.generated.xml' path='docs/NodeRemoveChild/*'/>
	public Node RemoveChild(Node child) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GetRootNodeOptions
{
		public bool Composed;
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document : Node
{
	///<include file='Utils/Docs/DocumentDocument/DocumentDocument.generated.xml' path='docs/DocumentDocument/*'/>
	public Document() { }
	///<include file='Utils/Docs/DocumentImplementation/DocumentImplementation.generated.xml' path='docs/DocumentImplementation/*'/>
	public DOMImplementation Implementation { get; }
	///<include file='Utils/Docs/DocumentURL/DocumentURL.generated.xml' path='docs/DocumentURL/*'/>
	public USVString URL { get; }
	///<include file='Utils/Docs/DocumentDocumentURI/DocumentDocumentURI.generated.xml' path='docs/DocumentDocumentURI/*'/>
	public USVString DocumentURI { get; }
	///<include file='Utils/Docs/DocumentCompatMode/DocumentCompatMode.generated.xml' path='docs/DocumentCompatMode/*'/>
	public DOMString CompatMode { get; }
	///<include file='Utils/Docs/DocumentCharacterSet/DocumentCharacterSet.generated.xml' path='docs/DocumentCharacterSet/*'/>
	public DOMString CharacterSet { get; }
		public DOMString Charset { get; }
		public DOMString InputEncoding { get; }
	///<include file='Utils/Docs/DocumentContentType/DocumentContentType.generated.xml' path='docs/DocumentContentType/*'/>
	public DOMString ContentType { get; }
	///<include file='Utils/Docs/DocumentDoctype/DocumentDoctype.generated.xml' path='docs/DocumentDoctype/*'/>
	public DocumentType? Doctype { get; }
	///<include file='Utils/Docs/DocumentDocumentElement/DocumentDocumentElement.generated.xml' path='docs/DocumentDocumentElement/*'/>
	public Element? DocumentElement { get; }
	///<include file='Utils/Docs/DocumentGetElementsByTagName/DocumentGetElementsByTagName.generated.xml' path='docs/DocumentGetElementsByTagName/*'/>
	public HTMLCollection GetElementsByTagName(DOMString qualifiedName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentGetElementsByTagNameNS/DocumentGetElementsByTagNameNS.generated.xml' path='docs/DocumentGetElementsByTagNameNS/*'/>
	public HTMLCollection GetElementsByTagNameNS(DOMString? namespace_, DOMString localName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentGetElementsByClassName/DocumentGetElementsByClassName.generated.xml' path='docs/DocumentGetElementsByClassName/*'/>
	public HTMLCollection GetElementsByClassName(DOMString classNames) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateElement/DocumentCreateElement.generated.xml' path='docs/DocumentCreateElement/*'/>
	public Element CreateElement(DOMString localName, Union34 options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateElementNS/DocumentCreateElementNS.generated.xml' path='docs/DocumentCreateElementNS/*'/>
	public Element CreateElementNS(DOMString? namespace_, DOMString qualifiedName, Union35 options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateDocumentFragment/DocumentCreateDocumentFragment.generated.xml' path='docs/DocumentCreateDocumentFragment/*'/>
	public DocumentFragment CreateDocumentFragment() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateTextNode/DocumentCreateTextNode.generated.xml' path='docs/DocumentCreateTextNode/*'/>
	public Text CreateTextNode(DOMString data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateCDATASection/DocumentCreateCDATASection.generated.xml' path='docs/DocumentCreateCDATASection/*'/>
	public CDATASection CreateCDATASection(DOMString data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateComment/DocumentCreateComment.generated.xml' path='docs/DocumentCreateComment/*'/>
	public Comment CreateComment(DOMString data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateProcessingInstruction/DocumentCreateProcessingInstruction.generated.xml' path='docs/DocumentCreateProcessingInstruction/*'/>
	public ProcessingInstruction CreateProcessingInstruction(DOMString target, DOMString data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentImportNode/DocumentImportNode.generated.xml' path='docs/DocumentImportNode/*'/>
	public Node ImportNode(Node node, bool subtree) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentAdoptNode/DocumentAdoptNode.generated.xml' path='docs/DocumentAdoptNode/*'/>
	public Node AdoptNode(Node node) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateAttribute/DocumentCreateAttribute.generated.xml' path='docs/DocumentCreateAttribute/*'/>
	public Attr CreateAttribute(DOMString localName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateAttributeNS/DocumentCreateAttributeNS.generated.xml' path='docs/DocumentCreateAttributeNS/*'/>
	public Attr CreateAttributeNS(DOMString? namespace_, DOMString qualifiedName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateEvent/DocumentCreateEvent.generated.xml' path='docs/DocumentCreateEvent/*'/>
	public Event CreateEvent(DOMString interface_) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateRange/DocumentCreateRange.generated.xml' path='docs/DocumentCreateRange/*'/>
	public Range CreateRange() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateNodeIterator/DocumentCreateNodeIterator.generated.xml' path='docs/DocumentCreateNodeIterator/*'/>
	public NodeIterator CreateNodeIterator(Node root, ulong whatToShow, NodeFilter? filter) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCreateTreeWalker/DocumentCreateTreeWalker.generated.xml' path='docs/DocumentCreateTreeWalker/*'/>
	public TreeWalker CreateTreeWalker(Node root, ulong whatToShow, NodeFilter? filter) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XMLDocument/XMLDocument.generated.xml' path='docs/XMLDocument/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XMLDocument : Document
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ElementCreationOptions
{
		public DOMString Is;
}

///<include file='Utils/Docs/DOMImplementation/DOMImplementation.generated.xml' path='docs/DOMImplementation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMImplementation
{
	///<include file='Utils/Docs/DOMImplementationCreateDocumentType/DOMImplementationCreateDocumentType.generated.xml' path='docs/DOMImplementationCreateDocumentType/*'/>
	public DocumentType CreateDocumentType(DOMString qualifiedName, DOMString publicId, DOMString systemId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMImplementationCreateDocument/DOMImplementationCreateDocument.generated.xml' path='docs/DOMImplementationCreateDocument/*'/>
	public XMLDocument CreateDocument(DOMString? namespace_, DOMString qualifiedName, DocumentType? doctype) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMImplementationCreateHTMLDocument/DOMImplementationCreateHTMLDocument.generated.xml' path='docs/DOMImplementationCreateHTMLDocument/*'/>
	public Document CreateHTMLDocument(DOMString title) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMImplementationHasFeature/DOMImplementationHasFeature.generated.xml' path='docs/DOMImplementationHasFeature/*'/>
	public bool HasFeature() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/DocumentType/DocumentType.generated.xml' path='docs/DocumentType/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DocumentType : Node, ChildNode
{
	///<include file='Utils/Docs/DocumentTypeName/DocumentTypeName.generated.xml' path='docs/DocumentTypeName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/DocumentTypePublicId/DocumentTypePublicId.generated.xml' path='docs/DocumentTypePublicId/*'/>
	public DOMString PublicId { get; }
	///<include file='Utils/Docs/DocumentTypeSystemId/DocumentTypeSystemId.generated.xml' path='docs/DocumentTypeSystemId/*'/>
	public DOMString SystemId { get; }
}

///<include file='Utils/Docs/DocumentFragment/DocumentFragment.generated.xml' path='docs/DocumentFragment/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DocumentFragment : Node, NonElementParentNode, ParentNode
{
	///<include file='Utils/Docs/DocumentFragmentDocumentFragment/DocumentFragmentDocumentFragment.generated.xml' path='docs/DocumentFragmentDocumentFragment/*'/>
	public DocumentFragment() { }
}

///<include file='Utils/Docs/ShadowRoot/ShadowRoot.generated.xml' path='docs/ShadowRoot/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ShadowRoot : DocumentFragment, DocumentOrShadowRoot
{
	///<include file='Utils/Docs/ShadowRootMode/ShadowRootMode.generated.xml' path='docs/ShadowRootMode/*'/>
	public ShadowRootMode Mode { get; }
	///<include file='Utils/Docs/ShadowRootDelegatesFocus/ShadowRootDelegatesFocus.generated.xml' path='docs/ShadowRootDelegatesFocus/*'/>
	public bool DelegatesFocus { get; }
	///<include file='Utils/Docs/ShadowRootSlotAssignment/ShadowRootSlotAssignment.generated.xml' path='docs/ShadowRootSlotAssignment/*'/>
	public SlotAssignmentMode SlotAssignment { get; }
	///<include file='Utils/Docs/ShadowRootClonable/ShadowRootClonable.generated.xml' path='docs/ShadowRootClonable/*'/>
	public bool Clonable { get; }
	///<include file='Utils/Docs/ShadowRootSerializable/ShadowRootSerializable.generated.xml' path='docs/ShadowRootSerializable/*'/>
	public bool Serializable { get; }
	///<include file='Utils/Docs/ShadowRootHost/ShadowRootHost.generated.xml' path='docs/ShadowRootHost/*'/>
	public Element Host { get; }
		public EventHandler Onslotchange { get; set; }
}

///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
public partial class Element : Node
{
	///<include file='Utils/Docs/ElementNamespaceURI/ElementNamespaceURI.generated.xml' path='docs/ElementNamespaceURI/*'/>
	public DOMString? NamespaceURI { get; }
	///<include file='Utils/Docs/ElementPrefix/ElementPrefix.generated.xml' path='docs/ElementPrefix/*'/>
	public DOMString? Prefix { get; }
	///<include file='Utils/Docs/ElementLocalName/ElementLocalName.generated.xml' path='docs/ElementLocalName/*'/>
	public DOMString LocalName { get; }
	///<include file='Utils/Docs/ElementTagName/ElementTagName.generated.xml' path='docs/ElementTagName/*'/>
	public DOMString TagName { get; }
	///<include file='Utils/Docs/ElementId/ElementId.generated.xml' path='docs/ElementId/*'/>
	public DOMString Id { get; set; }
	///<include file='Utils/Docs/ElementClassName/ElementClassName.generated.xml' path='docs/ElementClassName/*'/>
	public DOMString ClassName { get; set; }
	///<include file='Utils/Docs/ElementClassList/ElementClassList.generated.xml' path='docs/ElementClassList/*'/>
	public DOMTokenList ClassList { get; }
	///<include file='Utils/Docs/ElementSlot/ElementSlot.generated.xml' path='docs/ElementSlot/*'/>
	public DOMString Slot { get; set; }
	///<include file='Utils/Docs/ElementHasAttributes/ElementHasAttributes.generated.xml' path='docs/ElementHasAttributes/*'/>
	public bool HasAttributes() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementAttributes/ElementAttributes.generated.xml' path='docs/ElementAttributes/*'/>
	public NamedNodeMap Attributes { get; }
	///<include file='Utils/Docs/ElementGetAttributeNames/ElementGetAttributeNames.generated.xml' path='docs/ElementGetAttributeNames/*'/>
	public List<DOMString> GetAttributeNames() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementGetAttribute/ElementGetAttribute.generated.xml' path='docs/ElementGetAttribute/*'/>
	public DOMString? GetAttribute(DOMString qualifiedName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementGetAttributeNS/ElementGetAttributeNS.generated.xml' path='docs/ElementGetAttributeNS/*'/>
	public DOMString? GetAttributeNS(DOMString? namespace_, DOMString localName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementSetAttribute/ElementSetAttribute.generated.xml' path='docs/ElementSetAttribute/*'/>
	public Undefined SetAttribute(DOMString qualifiedName, DOMString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementSetAttributeNS/ElementSetAttributeNS.generated.xml' path='docs/ElementSetAttributeNS/*'/>
	public Undefined SetAttributeNS(DOMString? namespace_, DOMString qualifiedName, DOMString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementRemoveAttribute/ElementRemoveAttribute.generated.xml' path='docs/ElementRemoveAttribute/*'/>
	public Undefined RemoveAttribute(DOMString qualifiedName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementRemoveAttributeNS/ElementRemoveAttributeNS.generated.xml' path='docs/ElementRemoveAttributeNS/*'/>
	public Undefined RemoveAttributeNS(DOMString? namespace_, DOMString localName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementToggleAttribute/ElementToggleAttribute.generated.xml' path='docs/ElementToggleAttribute/*'/>
	public bool ToggleAttribute(DOMString qualifiedName, bool force) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementHasAttribute/ElementHasAttribute.generated.xml' path='docs/ElementHasAttribute/*'/>
	public bool HasAttribute(DOMString qualifiedName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementHasAttributeNS/ElementHasAttributeNS.generated.xml' path='docs/ElementHasAttributeNS/*'/>
	public bool HasAttributeNS(DOMString? namespace_, DOMString localName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementGetAttributeNode/ElementGetAttributeNode.generated.xml' path='docs/ElementGetAttributeNode/*'/>
	public Attr? GetAttributeNode(DOMString qualifiedName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementGetAttributeNodeNS/ElementGetAttributeNodeNS.generated.xml' path='docs/ElementGetAttributeNodeNS/*'/>
	public Attr? GetAttributeNodeNS(DOMString? namespace_, DOMString localName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementSetAttributeNode/ElementSetAttributeNode.generated.xml' path='docs/ElementSetAttributeNode/*'/>
	public Attr? SetAttributeNode(Attr attr) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementSetAttributeNodeNS/ElementSetAttributeNodeNS.generated.xml' path='docs/ElementSetAttributeNodeNS/*'/>
	public Attr? SetAttributeNodeNS(Attr attr) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementRemoveAttributeNode/ElementRemoveAttributeNode.generated.xml' path='docs/ElementRemoveAttributeNode/*'/>
	public Attr RemoveAttributeNode(Attr attr) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementAttachShadow/ElementAttachShadow.generated.xml' path='docs/ElementAttachShadow/*'/>
	public ShadowRoot AttachShadow(ShadowRootInit init) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementShadowRoot/ElementShadowRoot.generated.xml' path='docs/ElementShadowRoot/*'/>
	public ShadowRoot? ShadowRoot { get; }
	///<include file='Utils/Docs/ElementClosest/ElementClosest.generated.xml' path='docs/ElementClosest/*'/>
	public Element? Closest(DOMString selectors) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementMatches/ElementMatches.generated.xml' path='docs/ElementMatches/*'/>
	public bool Matches(DOMString selectors) { throw new System.NotImplementedException(); }
		public bool WebkitMatchesSelector(DOMString selectors) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementGetElementsByTagName/ElementGetElementsByTagName.generated.xml' path='docs/ElementGetElementsByTagName/*'/>
	public HTMLCollection GetElementsByTagName(DOMString qualifiedName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementGetElementsByTagNameNS/ElementGetElementsByTagNameNS.generated.xml' path='docs/ElementGetElementsByTagNameNS/*'/>
	public HTMLCollection GetElementsByTagNameNS(DOMString? namespace_, DOMString localName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementGetElementsByClassName/ElementGetElementsByClassName.generated.xml' path='docs/ElementGetElementsByClassName/*'/>
	public HTMLCollection GetElementsByClassName(DOMString classNames) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementInsertAdjacentElement/ElementInsertAdjacentElement.generated.xml' path='docs/ElementInsertAdjacentElement/*'/>
	public Element? InsertAdjacentElement(DOMString where, Element element) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementInsertAdjacentText/ElementInsertAdjacentText.generated.xml' path='docs/ElementInsertAdjacentText/*'/>
	public Undefined InsertAdjacentText(DOMString where, DOMString data) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ShadowRootInit
{
		public required ShadowRootMode Mode;
		public bool DelegatesFocus;
		public SlotAssignmentMode SlotAssignment;
		public bool Clonable;
		public bool Serializable;
}

///<include file='Utils/Docs/NamedNodeMap/NamedNodeMap.generated.xml' path='docs/NamedNodeMap/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NamedNodeMap
{
	///<include file='Utils/Docs/NamedNodeMapLength/NamedNodeMapLength.generated.xml' path='docs/NamedNodeMapLength/*'/>
	public ulong Length { get; }
	
	
	///<include file='Utils/Docs/NamedNodeMapGetNamedItemNS/NamedNodeMapGetNamedItemNS.generated.xml' path='docs/NamedNodeMapGetNamedItemNS/*'/>
	public Attr? GetNamedItemNS(DOMString? namespace_, DOMString localName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NamedNodeMapSetNamedItem/NamedNodeMapSetNamedItem.generated.xml' path='docs/NamedNodeMapSetNamedItem/*'/>
	public Attr? SetNamedItem(Attr attr) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NamedNodeMapSetNamedItemNS/NamedNodeMapSetNamedItemNS.generated.xml' path='docs/NamedNodeMapSetNamedItemNS/*'/>
	public Attr? SetNamedItemNS(Attr attr) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NamedNodeMapRemoveNamedItem/NamedNodeMapRemoveNamedItem.generated.xml' path='docs/NamedNodeMapRemoveNamedItem/*'/>
	public Attr RemoveNamedItem(DOMString qualifiedName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NamedNodeMapRemoveNamedItemNS/NamedNodeMapRemoveNamedItemNS.generated.xml' path='docs/NamedNodeMapRemoveNamedItemNS/*'/>
	public Attr RemoveNamedItemNS(DOMString? namespace_, DOMString localName) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Attr/Attr.generated.xml' path='docs/Attr/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Attr : Node
{
	///<include file='Utils/Docs/AttrNamespaceURI/AttrNamespaceURI.generated.xml' path='docs/AttrNamespaceURI/*'/>
	public DOMString? NamespaceURI { get; }
	///<include file='Utils/Docs/AttrPrefix/AttrPrefix.generated.xml' path='docs/AttrPrefix/*'/>
	public DOMString? Prefix { get; }
	///<include file='Utils/Docs/AttrLocalName/AttrLocalName.generated.xml' path='docs/AttrLocalName/*'/>
	public DOMString LocalName { get; }
	///<include file='Utils/Docs/AttrName/AttrName.generated.xml' path='docs/AttrName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/AttrValue/AttrValue.generated.xml' path='docs/AttrValue/*'/>
	public DOMString Value { get; set; }
	///<include file='Utils/Docs/AttrOwnerElement/AttrOwnerElement.generated.xml' path='docs/AttrOwnerElement/*'/>
	public Element? OwnerElement { get; }
	///<include file='Utils/Docs/AttrSpecified/AttrSpecified.generated.xml' path='docs/AttrSpecified/*'/>
	public bool Specified { get; }
}

///<include file='Utils/Docs/CharacterData/CharacterData.generated.xml' path='docs/CharacterData/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CharacterData : Node, NonDocumentTypeChildNode, ChildNode
{
	///<include file='Utils/Docs/CharacterDataData/CharacterDataData.generated.xml' path='docs/CharacterDataData/*'/>
	public DOMString Data { get; set; }
	///<include file='Utils/Docs/CharacterDataLength/CharacterDataLength.generated.xml' path='docs/CharacterDataLength/*'/>
	public ulong Length { get; }
	///<include file='Utils/Docs/CharacterDataSubstringData/CharacterDataSubstringData.generated.xml' path='docs/CharacterDataSubstringData/*'/>
	public DOMString SubstringData(ulong offset, ulong count) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CharacterDataAppendData/CharacterDataAppendData.generated.xml' path='docs/CharacterDataAppendData/*'/>
	public Undefined AppendData(DOMString data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CharacterDataInsertData/CharacterDataInsertData.generated.xml' path='docs/CharacterDataInsertData/*'/>
	public Undefined InsertData(ulong offset, DOMString data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CharacterDataDeleteData/CharacterDataDeleteData.generated.xml' path='docs/CharacterDataDeleteData/*'/>
	public Undefined DeleteData(ulong offset, ulong count) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CharacterDataReplaceData/CharacterDataReplaceData.generated.xml' path='docs/CharacterDataReplaceData/*'/>
	public Undefined ReplaceData(ulong offset, ulong count, DOMString data) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Text/Text.generated.xml' path='docs/Text/*'/>
[To(ToAttribute.Default)]
public partial class Text : CharacterData, GeometryUtils, Slottable
{
	///<include file='Utils/Docs/TextText/TextText.generated.xml' path='docs/TextText/*'/>
	public Text(DOMString data) { }
	///<include file='Utils/Docs/TextSplitText/TextSplitText.generated.xml' path='docs/TextSplitText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Text SplitText(ulong offset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TextWholeText/TextWholeText.generated.xml' path='docs/TextWholeText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString WholeText { get; }
	public Text() { }
}

///<include file='Utils/Docs/CDATASection/CDATASection.generated.xml' path='docs/CDATASection/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CDATASection : Text
{
}

///<include file='Utils/Docs/ProcessingInstruction/ProcessingInstruction.generated.xml' path='docs/ProcessingInstruction/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProcessingInstruction : CharacterData, LinkStyle
{
	///<include file='Utils/Docs/ProcessingInstructionTarget/ProcessingInstructionTarget.generated.xml' path='docs/ProcessingInstructionTarget/*'/>
	public DOMString Target { get; }
}

///<include file='Utils/Docs/Comment/Comment.generated.xml' path='docs/Comment/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Comment : CharacterData
{
	///<include file='Utils/Docs/CommentComment/CommentComment.generated.xml' path='docs/CommentComment/*'/>
	public Comment(DOMString data) { }
	public Comment() { }
}

///<include file='Utils/Docs/AbstractRange/AbstractRange.generated.xml' path='docs/AbstractRange/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AbstractRange
{
	///<include file='Utils/Docs/AbstractRangeStartContainer/AbstractRangeStartContainer.generated.xml' path='docs/AbstractRangeStartContainer/*'/>
	public Node StartContainer { get; }
	///<include file='Utils/Docs/AbstractRangeStartOffset/AbstractRangeStartOffset.generated.xml' path='docs/AbstractRangeStartOffset/*'/>
	public ulong StartOffset { get; }
	///<include file='Utils/Docs/AbstractRangeEndContainer/AbstractRangeEndContainer.generated.xml' path='docs/AbstractRangeEndContainer/*'/>
	public Node EndContainer { get; }
	///<include file='Utils/Docs/AbstractRangeEndOffset/AbstractRangeEndOffset.generated.xml' path='docs/AbstractRangeEndOffset/*'/>
	public ulong EndOffset { get; }
	///<include file='Utils/Docs/AbstractRangeCollapsed/AbstractRangeCollapsed.generated.xml' path='docs/AbstractRangeCollapsed/*'/>
	public bool Collapsed { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StaticRangeInit
{
		public required Node StartContainer;
		public required ulong StartOffset;
		public required Node EndContainer;
		public required ulong EndOffset;
}

///<include file='Utils/Docs/StaticRange/StaticRange.generated.xml' path='docs/StaticRange/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class StaticRange : AbstractRange
{
	///<include file='Utils/Docs/StaticRangeStaticRange/StaticRangeStaticRange.generated.xml' path='docs/StaticRangeStaticRange/*'/>
	public StaticRange(StaticRangeInit init) { }
	public StaticRange() { }
}

///<include file='Utils/Docs/Range/Range.generated.xml' path='docs/Range/*'/>
public partial class Range : AbstractRange
{
	///<include file='Utils/Docs/RangeRange/RangeRange.generated.xml' path='docs/RangeRange/*'/>
	public Range() { }
	///<include file='Utils/Docs/RangeCommonAncestorContainer/RangeCommonAncestorContainer.generated.xml' path='docs/RangeCommonAncestorContainer/*'/>
	public Node CommonAncestorContainer { get; }
	///<include file='Utils/Docs/RangeSetStart/RangeSetStart.generated.xml' path='docs/RangeSetStart/*'/>
	public Undefined SetStart(Node node, ulong offset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeSetEnd/RangeSetEnd.generated.xml' path='docs/RangeSetEnd/*'/>
	public Undefined SetEnd(Node node, ulong offset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeSetStartBefore/RangeSetStartBefore.generated.xml' path='docs/RangeSetStartBefore/*'/>
	public Undefined SetStartBefore(Node node) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeSetStartAfter/RangeSetStartAfter.generated.xml' path='docs/RangeSetStartAfter/*'/>
	public Undefined SetStartAfter(Node node) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeSetEndBefore/RangeSetEndBefore.generated.xml' path='docs/RangeSetEndBefore/*'/>
	public Undefined SetEndBefore(Node node) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeSetEndAfter/RangeSetEndAfter.generated.xml' path='docs/RangeSetEndAfter/*'/>
	public Undefined SetEndAfter(Node node) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeCollapse/RangeCollapse.generated.xml' path='docs/RangeCollapse/*'/>
	public Undefined Collapse(bool toStart) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeSelectNode/RangeSelectNode.generated.xml' path='docs/RangeSelectNode/*'/>
	public Undefined SelectNode(Node node) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeSelectNodeContents/RangeSelectNodeContents.generated.xml' path='docs/RangeSelectNodeContents/*'/>
	public Undefined SelectNodeContents(Node node) { throw new System.NotImplementedException(); }
		public const ushort START_TO_START = 0;
		public const ushort START_TO_END = 1;
		public const ushort END_TO_END = 2;
		public const ushort END_TO_START = 3;
	///<include file='Utils/Docs/RangeCompareBoundaryPoints/RangeCompareBoundaryPoints.generated.xml' path='docs/RangeCompareBoundaryPoints/*'/>
	public Number CompareBoundaryPoints(ushort how, Range sourceRange) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeDeleteContents/RangeDeleteContents.generated.xml' path='docs/RangeDeleteContents/*'/>
	public Undefined DeleteContents() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeExtractContents/RangeExtractContents.generated.xml' path='docs/RangeExtractContents/*'/>
	public DocumentFragment ExtractContents() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeCloneContents/RangeCloneContents.generated.xml' path='docs/RangeCloneContents/*'/>
	public DocumentFragment CloneContents() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeInsertNode/RangeInsertNode.generated.xml' path='docs/RangeInsertNode/*'/>
	public Undefined InsertNode(Node node) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeSurroundContents/RangeSurroundContents.generated.xml' path='docs/RangeSurroundContents/*'/>
	public Undefined SurroundContents(Node newParent) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeCloneRange/RangeCloneRange.generated.xml' path='docs/RangeCloneRange/*'/>
	public Range CloneRange() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeDetach/RangeDetach.generated.xml' path='docs/RangeDetach/*'/>
	public Undefined Detach() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeIsPointInRange/RangeIsPointInRange.generated.xml' path='docs/RangeIsPointInRange/*'/>
	public bool IsPointInRange(Node node, ulong offset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeComparePoint/RangeComparePoint.generated.xml' path='docs/RangeComparePoint/*'/>
	public Number ComparePoint(Node node, ulong offset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RangeIntersectsNode/RangeIntersectsNode.generated.xml' path='docs/RangeIntersectsNode/*'/>
	public bool IntersectsNode(Node node) { throw new System.NotImplementedException(); }
	
}

///<include file='Utils/Docs/NodeIterator/NodeIterator.generated.xml' path='docs/NodeIterator/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NodeIterator
{
	///<include file='Utils/Docs/NodeIteratorRoot/NodeIteratorRoot.generated.xml' path='docs/NodeIteratorRoot/*'/>
	public Node Root { get; }
	///<include file='Utils/Docs/NodeIteratorReferenceNode/NodeIteratorReferenceNode.generated.xml' path='docs/NodeIteratorReferenceNode/*'/>
	public Node ReferenceNode { get; }
	///<include file='Utils/Docs/NodeIteratorPointerBeforeReferenceNode/NodeIteratorPointerBeforeReferenceNode.generated.xml' path='docs/NodeIteratorPointerBeforeReferenceNode/*'/>
	public bool PointerBeforeReferenceNode { get; }
	///<include file='Utils/Docs/NodeIteratorWhatToShow/NodeIteratorWhatToShow.generated.xml' path='docs/NodeIteratorWhatToShow/*'/>
	public ulong WhatToShow { get; }
	///<include file='Utils/Docs/NodeIteratorFilter/NodeIteratorFilter.generated.xml' path='docs/NodeIteratorFilter/*'/>
	public NodeFilter? Filter { get; }
	///<include file='Utils/Docs/NodeIteratorNextNode/NodeIteratorNextNode.generated.xml' path='docs/NodeIteratorNextNode/*'/>
	public Node? NextNode() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeIteratorPreviousNode/NodeIteratorPreviousNode.generated.xml' path='docs/NodeIteratorPreviousNode/*'/>
	public Node? PreviousNode() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NodeIteratorDetach/NodeIteratorDetach.generated.xml' path='docs/NodeIteratorDetach/*'/>
	public Undefined Detach() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TreeWalker/TreeWalker.generated.xml' path='docs/TreeWalker/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TreeWalker
{
	///<include file='Utils/Docs/TreeWalkerRoot/TreeWalkerRoot.generated.xml' path='docs/TreeWalkerRoot/*'/>
	public Node Root { get; }
	///<include file='Utils/Docs/TreeWalkerWhatToShow/TreeWalkerWhatToShow.generated.xml' path='docs/TreeWalkerWhatToShow/*'/>
	public ulong WhatToShow { get; }
	///<include file='Utils/Docs/TreeWalkerFilter/TreeWalkerFilter.generated.xml' path='docs/TreeWalkerFilter/*'/>
	public NodeFilter? Filter { get; }
	///<include file='Utils/Docs/TreeWalkerCurrentNode/TreeWalkerCurrentNode.generated.xml' path='docs/TreeWalkerCurrentNode/*'/>
	public Node CurrentNode { get; set; }
	///<include file='Utils/Docs/TreeWalkerParentNode/TreeWalkerParentNode.generated.xml' path='docs/TreeWalkerParentNode/*'/>
	public Node? ParentNode() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TreeWalkerFirstChild/TreeWalkerFirstChild.generated.xml' path='docs/TreeWalkerFirstChild/*'/>
	public Node? FirstChild() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TreeWalkerLastChild/TreeWalkerLastChild.generated.xml' path='docs/TreeWalkerLastChild/*'/>
	public Node? LastChild() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TreeWalkerPreviousSibling/TreeWalkerPreviousSibling.generated.xml' path='docs/TreeWalkerPreviousSibling/*'/>
	public Node? PreviousSibling() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TreeWalkerNextSibling/TreeWalkerNextSibling.generated.xml' path='docs/TreeWalkerNextSibling/*'/>
	public Node? NextSibling() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TreeWalkerPreviousNode/TreeWalkerPreviousNode.generated.xml' path='docs/TreeWalkerPreviousNode/*'/>
	public Node? PreviousNode() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TreeWalkerNextNode/TreeWalkerNextNode.generated.xml' path='docs/TreeWalkerNextNode/*'/>
	public Node? NextNode() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/DOMTokenList/DOMTokenList.generated.xml' path='docs/DOMTokenList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMTokenList
{
	///<include file='Utils/Docs/DOMTokenListLength/DOMTokenListLength.generated.xml' path='docs/DOMTokenListLength/*'/>
	public ulong Length { get; }
	
	///<include file='Utils/Docs/DOMTokenListContains/DOMTokenListContains.generated.xml' path='docs/DOMTokenListContains/*'/>
	public bool Contains(DOMString token) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMTokenListAdd/DOMTokenListAdd.generated.xml' path='docs/DOMTokenListAdd/*'/>
	public Undefined Add(params DOMString[] tokens) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMTokenListRemove/DOMTokenListRemove.generated.xml' path='docs/DOMTokenListRemove/*'/>
	public Undefined Remove(params DOMString[] tokens) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMTokenListToggle/DOMTokenListToggle.generated.xml' path='docs/DOMTokenListToggle/*'/>
	public bool Toggle(DOMString token, bool force) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMTokenListReplace/DOMTokenListReplace.generated.xml' path='docs/DOMTokenListReplace/*'/>
	public bool Replace(DOMString token, DOMString newToken) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMTokenListSupports/DOMTokenListSupports.generated.xml' path='docs/DOMTokenListSupports/*'/>
	public bool Supports(DOMString token) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMTokenListValue/DOMTokenListValue.generated.xml' path='docs/DOMTokenListValue/*'/>
	public DOMString Value { get; set; }
	public DOMString this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
}

///<include file='Utils/Docs/XPathResult/XPathResult.generated.xml' path='docs/XPathResult/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XPathResult
{
		public const ushort ANY_TYPE = 0;
		public const ushort NUMBER_TYPE = 1;
		public const ushort STRING_TYPE = 2;
		public const ushort BOOLEAN_TYPE = 3;
		public const ushort UNORDERED_NODE_ITERATOR_TYPE = 4;
		public const ushort ORDERED_NODE_ITERATOR_TYPE = 5;
		public const ushort UNORDERED_NODE_SNAPSHOT_TYPE = 6;
		public const ushort ORDERED_NODE_SNAPSHOT_TYPE = 7;
		public const ushort ANY_UNORDERED_NODE_TYPE = 8;
		public const ushort FIRST_ORDERED_NODE_TYPE = 9;
	///<include file='Utils/Docs/XPathResultResultType/XPathResultResultType.generated.xml' path='docs/XPathResultResultType/*'/>
	public ushort ResultType { get; }
	///<include file='Utils/Docs/XPathResultNumberValue/XPathResultNumberValue.generated.xml' path='docs/XPathResultNumberValue/*'/>
	public double NumberValue { get; }
	///<include file='Utils/Docs/XPathResultStringValue/XPathResultStringValue.generated.xml' path='docs/XPathResultStringValue/*'/>
	public DOMString StringValue { get; }
	///<include file='Utils/Docs/XPathResultBooleanValue/XPathResultBooleanValue.generated.xml' path='docs/XPathResultBooleanValue/*'/>
	public bool BooleanValue { get; }
	///<include file='Utils/Docs/XPathResultSingleNodeValue/XPathResultSingleNodeValue.generated.xml' path='docs/XPathResultSingleNodeValue/*'/>
	public Node? SingleNodeValue { get; }
	///<include file='Utils/Docs/XPathResultInvalidIteratorState/XPathResultInvalidIteratorState.generated.xml' path='docs/XPathResultInvalidIteratorState/*'/>
	public bool InvalidIteratorState { get; }
	///<include file='Utils/Docs/XPathResultSnapshotLength/XPathResultSnapshotLength.generated.xml' path='docs/XPathResultSnapshotLength/*'/>
	public ulong SnapshotLength { get; }
	///<include file='Utils/Docs/XPathResultIterateNext/XPathResultIterateNext.generated.xml' path='docs/XPathResultIterateNext/*'/>
	public Node? IterateNext() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XPathResultSnapshotItem/XPathResultSnapshotItem.generated.xml' path='docs/XPathResultSnapshotItem/*'/>
	public Node? SnapshotItem(ulong index) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XPathExpression/XPathExpression.generated.xml' path='docs/XPathExpression/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XPathExpression
{
	///<include file='Utils/Docs/XPathExpressionEvaluate/XPathExpressionEvaluate.generated.xml' path='docs/XPathExpressionEvaluate/*'/>
	public XPathResult Evaluate(Node contextNode, ushort type, XPathResult? result) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XPathEvaluator/XPathEvaluator.generated.xml' path='docs/XPathEvaluator/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XPathEvaluator
{
	///<include file='Utils/Docs/XPathEvaluatorXPathEvaluator/XPathEvaluatorXPathEvaluator.generated.xml' path='docs/XPathEvaluatorXPathEvaluator/*'/>
	public XPathEvaluator() { }
}


///<include file='Utils/Docs/XSLTProcessor/XSLTProcessor.generated.xml' path='docs/XSLTProcessor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XSLTProcessor
{
	///<include file='Utils/Docs/XSLTProcessorXSLTProcessor/XSLTProcessorXSLTProcessor.generated.xml' path='docs/XSLTProcessorXSLTProcessor/*'/>
	public XSLTProcessor() { }
	///<include file='Utils/Docs/XSLTProcessorImportStylesheet/XSLTProcessorImportStylesheet.generated.xml' path='docs/XSLTProcessorImportStylesheet/*'/>
	public Undefined ImportStylesheet(Node style) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XSLTProcessorTransformToFragment/XSLTProcessorTransformToFragment.generated.xml' path='docs/XSLTProcessorTransformToFragment/*'/>
	public DocumentFragment TransformToFragment(Node source, Document output) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XSLTProcessorTransformToDocument/XSLTProcessorTransformToDocument.generated.xml' path='docs/XSLTProcessorTransformToDocument/*'/>
	public Document TransformToDocument(Node source) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XSLTProcessorSetParameter/XSLTProcessorSetParameter.generated.xml' path='docs/XSLTProcessorSetParameter/*'/>
	public Undefined SetParameter(DOMString namespaceURI, DOMString localName, dynamic value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XSLTProcessorGetParameter/XSLTProcessorGetParameter.generated.xml' path='docs/XSLTProcessorGetParameter/*'/>
	public dynamic GetParameter(DOMString namespaceURI, DOMString localName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XSLTProcessorRemoveParameter/XSLTProcessorRemoveParameter.generated.xml' path='docs/XSLTProcessorRemoveParameter/*'/>
	public Undefined RemoveParameter(DOMString namespaceURI, DOMString localName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XSLTProcessorClearParameters/XSLTProcessorClearParameters.generated.xml' path='docs/XSLTProcessorClearParameters/*'/>
	public Undefined ClearParameters() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XSLTProcessorReset/XSLTProcessorReset.generated.xml' path='docs/XSLTProcessorReset/*'/>
	public Undefined Reset() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLElement/HTMLElement.generated.xml' path='docs/HTMLElement/*'/>
public partial class HTMLElement
{
	///<include file='Utils/Docs/HTMLElementEditContext/HTMLElementEditContext.generated.xml' path='docs/HTMLElementEditContext/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public EditContext? EditContext { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EditContextInit
{
		public DOMString Text;
		public ulong SelectionStart;
		public ulong SelectionEnd;
}

///<include file='Utils/Docs/EditContext/EditContext.generated.xml' path='docs/EditContext/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EditContext : EventTarget
{
	///<include file='Utils/Docs/EditContextEditContext/EditContextEditContext.generated.xml' path='docs/EditContextEditContext/*'/>
	public EditContext(EditContextInit options) { }
	///<include file='Utils/Docs/EditContextUpdateText/EditContextUpdateText.generated.xml' path='docs/EditContextUpdateText/*'/>
	public Undefined UpdateText(ulong rangeStart, ulong rangeEnd, DOMString text) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EditContextUpdateSelection/EditContextUpdateSelection.generated.xml' path='docs/EditContextUpdateSelection/*'/>
	public Undefined UpdateSelection(ulong start, ulong end) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EditContextUpdateControlBounds/EditContextUpdateControlBounds.generated.xml' path='docs/EditContextUpdateControlBounds/*'/>
	public Undefined UpdateControlBounds(DOMRect controlBounds) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EditContextUpdateSelectionBounds/EditContextUpdateSelectionBounds.generated.xml' path='docs/EditContextUpdateSelectionBounds/*'/>
	public Undefined UpdateSelectionBounds(DOMRect selectionBounds) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EditContextUpdateCharacterBounds/EditContextUpdateCharacterBounds.generated.xml' path='docs/EditContextUpdateCharacterBounds/*'/>
	public Undefined UpdateCharacterBounds(ulong rangeStart, List<DOMRect> characterBounds) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EditContextAttachedElements/EditContextAttachedElements.generated.xml' path='docs/EditContextAttachedElements/*'/>
	public List<HTMLElement> AttachedElements() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/EditContextText/EditContextText.generated.xml' path='docs/EditContextText/*'/>
	public DOMString Text { get; }
	///<include file='Utils/Docs/EditContextSelectionStart/EditContextSelectionStart.generated.xml' path='docs/EditContextSelectionStart/*'/>
	public ulong SelectionStart { get; }
	///<include file='Utils/Docs/EditContextSelectionEnd/EditContextSelectionEnd.generated.xml' path='docs/EditContextSelectionEnd/*'/>
	public ulong SelectionEnd { get; }
	///<include file='Utils/Docs/EditContextCharacterBoundsRangeStart/EditContextCharacterBoundsRangeStart.generated.xml' path='docs/EditContextCharacterBoundsRangeStart/*'/>
	public ulong CharacterBoundsRangeStart { get; }
	///<include file='Utils/Docs/EditContextCharacterBounds/EditContextCharacterBounds.generated.xml' path='docs/EditContextCharacterBounds/*'/>
	public List<DOMRect> CharacterBounds() { throw new System.NotImplementedException(); }
		public EventHandler Ontextupdate { get; set; }
		public EventHandler Ontextformatupdate { get; set; }
		public EventHandler Oncharacterboundsupdate { get; set; }
		public EventHandler Oncompositionstart { get; set; }
		public EventHandler Oncompositionend { get; set; }
	public EditContext() { }
}

[To(ToAttribute.Default)]
public partial class TextUpdateEventInit : EventInit
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong UpdateRangeStart;
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong UpdateRangeEnd;
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Text;
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong SelectionStart;
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong SelectionEnd;
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong CompositionStart;
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong CompositionEnd;
}

///<include file='Utils/Docs/TextUpdateEvent/TextUpdateEvent.generated.xml' path='docs/TextUpdateEvent/*'/>
[To(ToAttribute.Default)]
public partial class TextUpdateEvent : Event
{
	///<include file='Utils/Docs/TextUpdateEventTextUpdateEvent/TextUpdateEventTextUpdateEvent.generated.xml' path='docs/TextUpdateEventTextUpdateEvent/*'/>
	public TextUpdateEvent(DOMString type, TextUpdateEventInit options) { }
	///<include file='Utils/Docs/TextUpdateEventUpdateRangeStart/TextUpdateEventUpdateRangeStart.generated.xml' path='docs/TextUpdateEventUpdateRangeStart/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong UpdateRangeStart { get; }
	///<include file='Utils/Docs/TextUpdateEventUpdateRangeEnd/TextUpdateEventUpdateRangeEnd.generated.xml' path='docs/TextUpdateEventUpdateRangeEnd/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong UpdateRangeEnd { get; }
	///<include file='Utils/Docs/TextUpdateEventText/TextUpdateEventText.generated.xml' path='docs/TextUpdateEventText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Text { get; }
	///<include file='Utils/Docs/TextUpdateEventSelectionStart/TextUpdateEventSelectionStart.generated.xml' path='docs/TextUpdateEventSelectionStart/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong SelectionStart { get; }
	///<include file='Utils/Docs/TextUpdateEventSelectionEnd/TextUpdateEventSelectionEnd.generated.xml' path='docs/TextUpdateEventSelectionEnd/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong SelectionEnd { get; }
	public TextUpdateEvent() { }
}

[To(ToAttribute.Default)]
public partial class TextFormatInit
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong RangeStart;
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong RangeEnd;
		[To(ToAttribute.FirstCharToLowerCase)]
	public UnderlineStyle UnderlineStyle;
		[To(ToAttribute.FirstCharToLowerCase)]
	public UnderlineThickness UnderlineThickness;
}

///<include file='Utils/Docs/TextFormat/TextFormat.generated.xml' path='docs/TextFormat/*'/>
[To(ToAttribute.Default)]
public partial class TextFormat
{
	///<include file='Utils/Docs/TextFormatTextFormat/TextFormatTextFormat.generated.xml' path='docs/TextFormatTextFormat/*'/>
	public TextFormat(TextFormatInit options) { }
	///<include file='Utils/Docs/TextFormatRangeStart/TextFormatRangeStart.generated.xml' path='docs/TextFormatRangeStart/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong RangeStart { get; }
	///<include file='Utils/Docs/TextFormatRangeEnd/TextFormatRangeEnd.generated.xml' path='docs/TextFormatRangeEnd/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong RangeEnd { get; }
	///<include file='Utils/Docs/TextFormatUnderlineStyle/TextFormatUnderlineStyle.generated.xml' path='docs/TextFormatUnderlineStyle/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public UnderlineStyle UnderlineStyle { get; }
	///<include file='Utils/Docs/TextFormatUnderlineThickness/TextFormatUnderlineThickness.generated.xml' path='docs/TextFormatUnderlineThickness/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public UnderlineThickness UnderlineThickness { get; }
	public TextFormat() { }
}

[To(ToAttribute.Default)]
public partial class TextFormatUpdateEventInit : EventInit
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public List<TextFormat> TextFormats;
}

///<include file='Utils/Docs/TextFormatUpdateEvent/TextFormatUpdateEvent.generated.xml' path='docs/TextFormatUpdateEvent/*'/>
[To(ToAttribute.Default)]
public partial class TextFormatUpdateEvent : Event
{
	///<include file='Utils/Docs/TextFormatUpdateEventTextFormatUpdateEvent/TextFormatUpdateEventTextFormatUpdateEvent.generated.xml' path='docs/TextFormatUpdateEventTextFormatUpdateEvent/*'/>
	public TextFormatUpdateEvent(DOMString type, TextFormatUpdateEventInit options) { }
	///<include file='Utils/Docs/TextFormatUpdateEventGetTextFormats/TextFormatUpdateEventGetTextFormats.generated.xml' path='docs/TextFormatUpdateEventGetTextFormats/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public List<TextFormat> GetTextFormats() { throw new System.NotImplementedException(); }
	public TextFormatUpdateEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CharacterBoundsUpdateEventInit : EventInit
{
		public ulong RangeStart;
		public ulong RangeEnd;
}

///<include file='Utils/Docs/CharacterBoundsUpdateEvent/CharacterBoundsUpdateEvent.generated.xml' path='docs/CharacterBoundsUpdateEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CharacterBoundsUpdateEvent : Event
{
	///<include file='Utils/Docs/CharacterBoundsUpdateEventCharacterBoundsUpdateEvent/CharacterBoundsUpdateEventCharacterBoundsUpdateEvent.generated.xml' path='docs/CharacterBoundsUpdateEventCharacterBoundsUpdateEvent/*'/>
	public CharacterBoundsUpdateEvent(DOMString type, CharacterBoundsUpdateEventInit options) { }
	///<include file='Utils/Docs/CharacterBoundsUpdateEventRangeStart/CharacterBoundsUpdateEventRangeStart.generated.xml' path='docs/CharacterBoundsUpdateEventRangeStart/*'/>
	public ulong RangeStart { get; }
	///<include file='Utils/Docs/CharacterBoundsUpdateEventRangeEnd/CharacterBoundsUpdateEventRangeEnd.generated.xml' path='docs/CharacterBoundsUpdateEventRangeEnd/*'/>
	public ulong RangeEnd { get; }
	public CharacterBoundsUpdateEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RestrictionTarget
{
		public static Task<RestrictionTarget> FromElement(Element element) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BrowserCaptureMediaStreamTrack
{
		public Task<Undefined> RestrictTo(RestrictionTarget? RestrictionTarget) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PerformanceElementTiming/PerformanceElementTiming.generated.xml' path='docs/PerformanceElementTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceElementTiming : PerformanceEntry, PaintTimingMixin
{
	///<include file='Utils/Docs/PerformanceElementTimingRenderTime/PerformanceElementTimingRenderTime.generated.xml' path='docs/PerformanceElementTimingRenderTime/*'/>
	public DOMHighResTimeStamp RenderTime { get; }
	///<include file='Utils/Docs/PerformanceElementTimingLoadTime/PerformanceElementTimingLoadTime.generated.xml' path='docs/PerformanceElementTimingLoadTime/*'/>
	public DOMHighResTimeStamp LoadTime { get; }
	///<include file='Utils/Docs/PerformanceElementTimingIntersectionRect/PerformanceElementTimingIntersectionRect.generated.xml' path='docs/PerformanceElementTimingIntersectionRect/*'/>
	public DOMRectReadOnly IntersectionRect { get; }
	///<include file='Utils/Docs/PerformanceElementTimingIdentifier/PerformanceElementTimingIdentifier.generated.xml' path='docs/PerformanceElementTimingIdentifier/*'/>
	public DOMString Identifier { get; }
	///<include file='Utils/Docs/PerformanceElementTimingNaturalWidth/PerformanceElementTimingNaturalWidth.generated.xml' path='docs/PerformanceElementTimingNaturalWidth/*'/>
	public ulong NaturalWidth { get; }
	///<include file='Utils/Docs/PerformanceElementTimingNaturalHeight/PerformanceElementTimingNaturalHeight.generated.xml' path='docs/PerformanceElementTimingNaturalHeight/*'/>
	public ulong NaturalHeight { get; }
	///<include file='Utils/Docs/PerformanceElementTimingId/PerformanceElementTimingId.generated.xml' path='docs/PerformanceElementTimingId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/PerformanceElementTimingElement/PerformanceElementTimingElement.generated.xml' path='docs/PerformanceElementTimingElement/*'/>
	public Element? Element { get; }
	///<include file='Utils/Docs/PerformanceElementTimingUrl/PerformanceElementTimingUrl.generated.xml' path='docs/PerformanceElementTimingUrl/*'/>
	public DOMString Url { get; }
	///<include file='Utils/Docs/PerformanceElementTimingToJSON/PerformanceElementTimingToJSON.generated.xml' path='docs/PerformanceElementTimingToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
public partial class Element
{
	///<include file='Utils/Docs/ElementElementTiming/ElementElementTiming.generated.xml' path='docs/ElementElementTiming/*'/>
	public DOMString ElementTiming { get; set; }
}

[To(ToAttribute.Default)]
public partial class TextDecoderOptions
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Fatal;
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool IgnoreBOM;
}

[To(ToAttribute.Default)]
public partial class TextDecodeOptions
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Stream;
}

///<include file='Utils/Docs/TextDecoder/TextDecoder.generated.xml' path='docs/TextDecoder/*'/>
[To(ToAttribute.Default)]
public partial class TextDecoder
{
	///<include file='Utils/Docs/TextDecoderTextDecoder/TextDecoderTextDecoder.generated.xml' path='docs/TextDecoderTextDecoder/*'/>
	public TextDecoder(DOMString label, TextDecoderOptions options) { }
	///<include file='Utils/Docs/TextDecoderDecode/TextDecoderDecode.generated.xml' path='docs/TextDecoderDecode/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Decode(AllowSharedBufferSource input, TextDecodeOptions options) { throw new System.NotImplementedException(); }
	public TextDecoder() { }
}


[To(ToAttribute.Default)]
public partial class TextEncoderEncodeIntoResult
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Read;
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Written;
}

///<include file='Utils/Docs/TextEncoder/TextEncoder.generated.xml' path='docs/TextEncoder/*'/>
[To(ToAttribute.Default)]
public partial class TextEncoder
{
	///<include file='Utils/Docs/TextEncoderTextEncoder/TextEncoderTextEncoder.generated.xml' path='docs/TextEncoderTextEncoder/*'/>
	public TextEncoder() { }
	///<include file='Utils/Docs/TextEncoderEncode/TextEncoderEncode.generated.xml' path='docs/TextEncoderEncode/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public System.Byte Encode(USVString input) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TextEncoderEncodeInto/TextEncoderEncodeInto.generated.xml' path='docs/TextEncoderEncodeInto/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextEncoderEncodeIntoResult EncodeInto(USVString source, System.Byte destination) { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/TextDecoderStream/TextDecoderStream.generated.xml' path='docs/TextDecoderStream/*'/>
[To(ToAttribute.Default)]
public partial class TextDecoderStream
{
	///<include file='Utils/Docs/TextDecoderStreamTextDecoderStream/TextDecoderStreamTextDecoderStream.generated.xml' path='docs/TextDecoderStreamTextDecoderStream/*'/>
	public TextDecoderStream(DOMString label, TextDecoderOptions options) { }
	public TextDecoderStream() { }
}



///<include file='Utils/Docs/TextEncoderStream/TextEncoderStream.generated.xml' path='docs/TextEncoderStream/*'/>
[To(ToAttribute.Default)]
public partial class TextEncoderStream
{
	///<include file='Utils/Docs/TextEncoderStreamTextEncoderStream/TextEncoderStreamTextEncoderStream.generated.xml' path='docs/TextEncoderStreamTextEncoderStream/*'/>
	public TextEncoderStream() { }
}



///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorRequestMediaKeySystemAccess/NavigatorRequestMediaKeySystemAccess.generated.xml' path='docs/NavigatorRequestMediaKeySystemAccess/*'/>
	public Task<MediaKeySystemAccess> RequestMediaKeySystemAccess(DOMString keySystem, List<MediaKeySystemConfiguration> supportedConfigurations) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaKeySystemConfiguration
{
		public DOMString Label;
		public List<DOMString> InitDataTypes;
		public List<MediaKeySystemMediaCapability> AudioCapabilities;
		public List<MediaKeySystemMediaCapability> VideoCapabilities;
		public MediaKeysRequirement DistinctiveIdentifier;
		public MediaKeysRequirement PersistentState;
		public List<DOMString> SessionTypes;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaKeySystemMediaCapability
{
		public DOMString ContentType;
		public DOMString? EncryptionScheme;
		public DOMString Robustness;
}

///<include file='Utils/Docs/MediaKeySystemAccess/MediaKeySystemAccess.generated.xml' path='docs/MediaKeySystemAccess/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaKeySystemAccess
{
	///<include file='Utils/Docs/MediaKeySystemAccessKeySystem/MediaKeySystemAccessKeySystem.generated.xml' path='docs/MediaKeySystemAccessKeySystem/*'/>
	public DOMString KeySystem { get; }
	///<include file='Utils/Docs/MediaKeySystemAccessGetConfiguration/MediaKeySystemAccessGetConfiguration.generated.xml' path='docs/MediaKeySystemAccessGetConfiguration/*'/>
	public MediaKeySystemConfiguration GetConfiguration() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaKeySystemAccessCreateMediaKeys/MediaKeySystemAccessCreateMediaKeys.generated.xml' path='docs/MediaKeySystemAccessCreateMediaKeys/*'/>
	public Task<MediaKeys> CreateMediaKeys() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaKeys/MediaKeys.generated.xml' path='docs/MediaKeys/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaKeys
{
	///<include file='Utils/Docs/MediaKeysCreateSession/MediaKeysCreateSession.generated.xml' path='docs/MediaKeysCreateSession/*'/>
	public MediaKeySession CreateSession(MediaKeySessionType sessionType) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaKeysGetStatusForPolicy/MediaKeysGetStatusForPolicy.generated.xml' path='docs/MediaKeysGetStatusForPolicy/*'/>
	public Task<MediaKeyStatus> GetStatusForPolicy(MediaKeysPolicy policy) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaKeysSetServerCertificate/MediaKeysSetServerCertificate.generated.xml' path='docs/MediaKeysSetServerCertificate/*'/>
	public Task<bool> SetServerCertificate(BufferSource serverCertificate) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaKeysPolicy
{
		public DOMString MinHdcpVersion;
}

///<include file='Utils/Docs/MediaKeySession/MediaKeySession.generated.xml' path='docs/MediaKeySession/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaKeySession : EventTarget
{
	///<include file='Utils/Docs/MediaKeySessionSessionId/MediaKeySessionSessionId.generated.xml' path='docs/MediaKeySessionSessionId/*'/>
	public DOMString SessionId { get; }
	///<include file='Utils/Docs/MediaKeySessionExpiration/MediaKeySessionExpiration.generated.xml' path='docs/MediaKeySessionExpiration/*'/>
	public double Expiration { get; }
	///<include file='Utils/Docs/MediaKeySessionClosed/MediaKeySessionClosed.generated.xml' path='docs/MediaKeySessionClosed/*'/>
	public Task<MediaKeySessionClosedReason> Closed { get; }
	///<include file='Utils/Docs/MediaKeySessionKeyStatuses/MediaKeySessionKeyStatuses.generated.xml' path='docs/MediaKeySessionKeyStatuses/*'/>
	public MediaKeyStatusMap KeyStatuses { get; }
		public EventHandler Onkeystatuseschange { get; set; }
		public EventHandler Onmessage { get; set; }
	///<include file='Utils/Docs/MediaKeySessionGenerateRequest/MediaKeySessionGenerateRequest.generated.xml' path='docs/MediaKeySessionGenerateRequest/*'/>
	public Task<Undefined> GenerateRequest(DOMString initDataType, BufferSource initData) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaKeySessionLoad/MediaKeySessionLoad.generated.xml' path='docs/MediaKeySessionLoad/*'/>
	public Task<bool> Load(DOMString sessionId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaKeySessionUpdate/MediaKeySessionUpdate.generated.xml' path='docs/MediaKeySessionUpdate/*'/>
	public Task<Undefined> Update(BufferSource response) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaKeySessionClose/MediaKeySessionClose.generated.xml' path='docs/MediaKeySessionClose/*'/>
	public Task<Undefined> Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaKeySessionRemove/MediaKeySessionRemove.generated.xml' path='docs/MediaKeySessionRemove/*'/>
	public Task<Undefined> Remove() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaKeyStatusMap/MediaKeyStatusMap.generated.xml' path='docs/MediaKeyStatusMap/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaKeyStatusMap
{
	public BufferSource this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	///<include file='Utils/Docs/MediaKeyStatusMapSize/MediaKeyStatusMapSize.generated.xml' path='docs/MediaKeyStatusMapSize/*'/>
	public ulong Size { get; }
	///<include file='Utils/Docs/MediaKeyStatusMapHas/MediaKeyStatusMapHas.generated.xml' path='docs/MediaKeyStatusMapHas/*'/>
	public bool Has(BufferSource keyId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaKeyStatusMapGet/MediaKeyStatusMapGet.generated.xml' path='docs/MediaKeyStatusMapGet/*'/>
	public Union36 Get(BufferSource keyId) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaKeyMessageEvent/MediaKeyMessageEvent.generated.xml' path='docs/MediaKeyMessageEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaKeyMessageEvent : Event
{
	///<include file='Utils/Docs/MediaKeyMessageEventMediaKeyMessageEvent/MediaKeyMessageEventMediaKeyMessageEvent.generated.xml' path='docs/MediaKeyMessageEventMediaKeyMessageEvent/*'/>
	public MediaKeyMessageEvent(DOMString type, MediaKeyMessageEventInit eventInitDict) { }
	///<include file='Utils/Docs/MediaKeyMessageEventMessageType/MediaKeyMessageEventMessageType.generated.xml' path='docs/MediaKeyMessageEventMessageType/*'/>
	public MediaKeyMessageType MessageType { get; }
	///<include file='Utils/Docs/MediaKeyMessageEventMessage/MediaKeyMessageEventMessage.generated.xml' path='docs/MediaKeyMessageEventMessage/*'/>
	public byte[] Message { get; }
	public MediaKeyMessageEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaKeyMessageEventInit : EventInit
{
		public required MediaKeyMessageType MessageType;
		public required byte[] Message;
}

///<include file='Utils/Docs/HTMLMediaElement/HTMLMediaElement.generated.xml' path='docs/HTMLMediaElement/*'/>
public partial class HTMLMediaElement
{
	///<include file='Utils/Docs/HTMLMediaElementMediaKeys/HTMLMediaElementMediaKeys.generated.xml' path='docs/HTMLMediaElementMediaKeys/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public MediaKeys? MediaKeys { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onencrypted { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onwaitingforkey { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementSetMediaKeys/HTMLMediaElementSetMediaKeys.generated.xml' path='docs/HTMLMediaElementSetMediaKeys/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<Undefined> SetMediaKeys(MediaKeys? mediaKeys) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaEncryptedEvent/MediaEncryptedEvent.generated.xml' path='docs/MediaEncryptedEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaEncryptedEvent : Event
{
	///<include file='Utils/Docs/MediaEncryptedEventMediaEncryptedEvent/MediaEncryptedEventMediaEncryptedEvent.generated.xml' path='docs/MediaEncryptedEventMediaEncryptedEvent/*'/>
	public MediaEncryptedEvent(DOMString type, MediaEncryptedEventInit eventInitDict) { }
	///<include file='Utils/Docs/MediaEncryptedEventInitDataType/MediaEncryptedEventInitDataType.generated.xml' path='docs/MediaEncryptedEventInitDataType/*'/>
	public DOMString InitDataType { get; }
	///<include file='Utils/Docs/MediaEncryptedEventInitData/MediaEncryptedEventInitData.generated.xml' path='docs/MediaEncryptedEventInitData/*'/>
	public byte[]? InitData { get; }
	public MediaEncryptedEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaEncryptedEventInit : EventInit
{
		public DOMString InitDataType;
		public byte[]? InitData;
}

///<include file='Utils/Docs/File/File.generated.xml' path='docs/File/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class File
{
	///<include file='Utils/Docs/FileWebkitRelativePath/FileWebkitRelativePath.generated.xml' path='docs/FileWebkitRelativePath/*'/>
	public USVString WebkitRelativePath { get; }
}

///<include file='Utils/Docs/HTMLInputElement/HTMLInputElement.generated.xml' path='docs/HTMLInputElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLInputElement
{
	///<include file='Utils/Docs/HTMLInputElementWebkitdirectory/HTMLInputElementWebkitdirectory.generated.xml' path='docs/HTMLInputElementWebkitdirectory/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Webkitdirectory { get; set; }
	///<include file='Utils/Docs/HTMLInputElementWebkitEntries/HTMLInputElementWebkitEntries.generated.xml' path='docs/HTMLInputElementWebkitEntries/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public FileSystemEntry[] WebkitEntries { get; }
}

///<include file='Utils/Docs/DataTransferItem/DataTransferItem.generated.xml' path='docs/DataTransferItem/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DataTransferItem
{
	///<include file='Utils/Docs/DataTransferItemWebkitGetAsEntry/DataTransferItemWebkitGetAsEntry.generated.xml' path='docs/DataTransferItemWebkitGetAsEntry/*'/>
	public FileSystemEntry? WebkitGetAsEntry() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/FileSystemEntry/FileSystemEntry.generated.xml' path='docs/FileSystemEntry/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemEntry
{
	///<include file='Utils/Docs/FileSystemEntryIsFile/FileSystemEntryIsFile.generated.xml' path='docs/FileSystemEntryIsFile/*'/>
	public bool IsFile { get; }
	///<include file='Utils/Docs/FileSystemEntryIsDirectory/FileSystemEntryIsDirectory.generated.xml' path='docs/FileSystemEntryIsDirectory/*'/>
	public bool IsDirectory { get; }
	///<include file='Utils/Docs/FileSystemEntryName/FileSystemEntryName.generated.xml' path='docs/FileSystemEntryName/*'/>
	public USVString Name { get; }
	///<include file='Utils/Docs/FileSystemEntryFullPath/FileSystemEntryFullPath.generated.xml' path='docs/FileSystemEntryFullPath/*'/>
	public USVString FullPath { get; }
	///<include file='Utils/Docs/FileSystemEntryFilesystem/FileSystemEntryFilesystem.generated.xml' path='docs/FileSystemEntryFilesystem/*'/>
	public FileSystem Filesystem { get; }
	///<include file='Utils/Docs/FileSystemEntryGetParent/FileSystemEntryGetParent.generated.xml' path='docs/FileSystemEntryGetParent/*'/>
	public Undefined GetParent(FileSystemEntryCallback successCallback, ErrorCallback errorCallback) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/FileSystemDirectoryEntry/FileSystemDirectoryEntry.generated.xml' path='docs/FileSystemDirectoryEntry/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemDirectoryEntry : FileSystemEntry
{
	///<include file='Utils/Docs/FileSystemDirectoryEntryCreateReader/FileSystemDirectoryEntryCreateReader.generated.xml' path='docs/FileSystemDirectoryEntryCreateReader/*'/>
	public FileSystemDirectoryReader CreateReader() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemDirectoryEntryGetFile/FileSystemDirectoryEntryGetFile.generated.xml' path='docs/FileSystemDirectoryEntryGetFile/*'/>
	public Undefined GetFile(USVString? path, FileSystemFlags options, FileSystemEntryCallback successCallback, ErrorCallback errorCallback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemDirectoryEntryGetDirectory/FileSystemDirectoryEntryGetDirectory.generated.xml' path='docs/FileSystemDirectoryEntryGetDirectory/*'/>
	public Undefined GetDirectory(USVString? path, FileSystemFlags options, FileSystemEntryCallback successCallback, ErrorCallback errorCallback) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemFlags
{
		public bool Create;
		public bool Exclusive;
}

///<include file='Utils/Docs/FileSystemDirectoryReader/FileSystemDirectoryReader.generated.xml' path='docs/FileSystemDirectoryReader/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemDirectoryReader
{
	///<include file='Utils/Docs/FileSystemDirectoryReaderReadEntries/FileSystemDirectoryReaderReadEntries.generated.xml' path='docs/FileSystemDirectoryReaderReadEntries/*'/>
	public Undefined ReadEntries(FileSystemEntriesCallback successCallback, ErrorCallback errorCallback) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/FileSystemFileEntry/FileSystemFileEntry.generated.xml' path='docs/FileSystemFileEntry/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemFileEntry : FileSystemEntry
{
	///<include file='Utils/Docs/FileSystemFileEntryFile/FileSystemFileEntryFile.generated.xml' path='docs/FileSystemFileEntryFile/*'/>
	public Undefined File(FileCallback successCallback, ErrorCallback errorCallback) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/FileSystem/FileSystem.generated.xml' path='docs/FileSystem/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystem
{
	///<include file='Utils/Docs/FileSystemName/FileSystemName.generated.xml' path='docs/FileSystemName/*'/>
	public USVString Name { get; }
	///<include file='Utils/Docs/FileSystemRoot/FileSystemRoot.generated.xml' path='docs/FileSystemRoot/*'/>
	public FileSystemDirectoryEntry Root { get; }
}

///<include file='Utils/Docs/PerformanceEventTiming/PerformanceEventTiming.generated.xml' path='docs/PerformanceEventTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceEventTiming : PerformanceEntry
{
	///<include file='Utils/Docs/PerformanceEventTimingProcessingStart/PerformanceEventTimingProcessingStart.generated.xml' path='docs/PerformanceEventTimingProcessingStart/*'/>
	public DOMHighResTimeStamp ProcessingStart { get; }
	///<include file='Utils/Docs/PerformanceEventTimingProcessingEnd/PerformanceEventTimingProcessingEnd.generated.xml' path='docs/PerformanceEventTimingProcessingEnd/*'/>
	public DOMHighResTimeStamp ProcessingEnd { get; }
	///<include file='Utils/Docs/PerformanceEventTimingCancelable/PerformanceEventTimingCancelable.generated.xml' path='docs/PerformanceEventTimingCancelable/*'/>
	public bool Cancelable { get; }
	///<include file='Utils/Docs/PerformanceEventTimingTarget/PerformanceEventTimingTarget.generated.xml' path='docs/PerformanceEventTimingTarget/*'/>
	public Node? Target { get; }
	///<include file='Utils/Docs/PerformanceEventTimingInteractionId/PerformanceEventTimingInteractionId.generated.xml' path='docs/PerformanceEventTimingInteractionId/*'/>
	public ulong InteractionId { get; }
	///<include file='Utils/Docs/PerformanceEventTimingToJSON/PerformanceEventTimingToJSON.generated.xml' path='docs/PerformanceEventTimingToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/EventCounts/EventCounts.generated.xml' path='docs/EventCounts/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EventCounts
{
	
}

///<include file='Utils/Docs/Performance/Performance.generated.xml' path='docs/Performance/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Performance
{
	///<include file='Utils/Docs/PerformanceEventCounts/PerformanceEventCounts.generated.xml' path='docs/PerformanceEventCounts/*'/>
	public EventCounts EventCounts { get; }
		public ulong InteractionCount { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceObserverInit
{
		public DOMHighResTimeStamp DurationThreshold;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_blend_minmax
{
		public const GLenum MIN_EXT = 0x8007;
		public const GLenum MAX_EXT = 0x8008;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_color_buffer_float
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_color_buffer_half_float
{
		public const GLenum RGBA16F_EXT = 0x881A;
		public const GLenum RGB16F_EXT = 0x881B;
		public const GLenum FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211;
		public const GLenum UNSIGNED_NORMALIZED_EXT = 0x8C17;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLTimerQueryEXT : WebGLObject
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_disjoint_timer_query
{
		public const GLenum QUERY_COUNTER_BITS_EXT = 0x8864;
		public const GLenum CURRENT_QUERY_EXT = 0x8865;
		public const GLenum QUERY_RESULT_EXT = 0x8866;
		public const GLenum QUERY_RESULT_AVAILABLE_EXT = 0x8867;
		public const GLenum TIME_ELAPSED_EXT = 0x88BF;
		public const GLenum TIMESTAMP_EXT = 0x8E28;
		public const GLenum GPU_DISJOINT_EXT = 0x8FBB;
		public WebGLTimerQueryEXT CreateQueryEXT() { throw new System.NotImplementedException(); }
		public Undefined DeleteQueryEXT(WebGLTimerQueryEXT? query) { throw new System.NotImplementedException(); }
		public bool IsQueryEXT(WebGLTimerQueryEXT? query) { throw new System.NotImplementedException(); }
		public Undefined BeginQueryEXT(GLenum target, WebGLTimerQueryEXT query) { throw new System.NotImplementedException(); }
		public Undefined EndQueryEXT(GLenum target) { throw new System.NotImplementedException(); }
		public Undefined QueryCounterEXT(WebGLTimerQueryEXT query, GLenum target) { throw new System.NotImplementedException(); }
		public dynamic GetQueryEXT(GLenum target, GLenum pname) { throw new System.NotImplementedException(); }
		public dynamic GetQueryObjectEXT(WebGLTimerQueryEXT query, GLenum pname) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_disjoint_timer_query_webgl2
{
		public const GLenum QUERY_COUNTER_BITS_EXT = 0x8864;
		public const GLenum TIME_ELAPSED_EXT = 0x88BF;
		public const GLenum TIMESTAMP_EXT = 0x8E28;
		public const GLenum GPU_DISJOINT_EXT = 0x8FBB;
		public Undefined QueryCounterEXT(WebGLQuery query, GLenum target) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_float_blend
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_frag_depth
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_shader_texture_lod
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_sRGB
{
		public const GLenum SRGB_EXT = 0x8C40;
		public const GLenum SRGB_ALPHA_EXT = 0x8C42;
		public const GLenum SRGB8_ALPHA8_EXT = 0x8C43;
		public const GLenum FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_texture_compression_bptc
{
		public const GLenum COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C;
		public const GLenum COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D;
		public const GLenum COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E;
		public const GLenum COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_texture_compression_rgtc
{
		public const GLenum COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
		public const GLenum COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
		public const GLenum COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
		public const GLenum COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_texture_filter_anisotropic
{
		public const GLenum TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
		public const GLenum MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EXT_texture_norm16
{
		public const GLenum R16_EXT = 0x822A;
		public const GLenum RG16_EXT = 0x822C;
		public const GLenum RGB16_EXT = 0x8054;
		public const GLenum RGBA16_EXT = 0x805B;
		public const GLenum R16_SNORM_EXT = 0x8F98;
		public const GLenum RG16_SNORM_EXT = 0x8F99;
		public const GLenum RGB16_SNORM_EXT = 0x8F9A;
		public const GLenum RGBA16_SNORM_EXT = 0x8F9B;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ColorSelectionResult
{
		public DOMString SRGBHex;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ColorSelectionOptions
{
		public AbortSignal Signal;
}

///<include file='Utils/Docs/EyeDropper/EyeDropper.generated.xml' path='docs/EyeDropper/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EyeDropper
{
	///<include file='Utils/Docs/EyeDropperEyeDropper/EyeDropperEyeDropper.generated.xml' path='docs/EyeDropperEyeDropper/*'/>
	public EyeDropper() { }
	///<include file='Utils/Docs/EyeDropperOpen/EyeDropperOpen.generated.xml' path='docs/EyeDropperOpen/*'/>
	public Task<ColorSelectionResult> Open(ColorSelectionOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityCredentialDisconnectOptions : IdentityProviderConfig
{
		public required USVString AccountHint;
}

///<include file='Utils/Docs/IdentityCredential/IdentityCredential.generated.xml' path='docs/IdentityCredential/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityCredential : Credential
{
		public static Task<Undefined> Disconnect(IdentityCredentialDisconnectOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IdentityCredentialToken/IdentityCredentialToken.generated.xml' path='docs/IdentityCredentialToken/*'/>
	public USVString? Token { get; }
	///<include file='Utils/Docs/IdentityCredentialIsAutoSelected/IdentityCredentialIsAutoSelected.generated.xml' path='docs/IdentityCredentialIsAutoSelected/*'/>
	public bool IsAutoSelected { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DisconnectedAccount
{
		public required USVString Account_id;
}

public partial class CredentialRequestOptions
{
		public IdentityCredentialRequestOptions Identity;
}

///<include file='Utils/Docs/IdentityCredentialRequestOptions/IdentityCredentialRequestOptions.generated.xml' path='docs/IdentityCredentialRequestOptions/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityCredentialRequestOptions
{
		public required List<IdentityProviderRequestOptions> Providers;
		public IdentityCredentialRequestOptionsContext Context;
		public IdentityCredentialRequestOptionsMode Mode;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityProviderConfig
{
		public required USVString ConfigURL;
		public required USVString ClientId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityProviderRequestOptions : IdentityProviderConfig
{
		public USVString Nonce;
		public DOMString LoginHint;
		public DOMString DomainHint;
		public List<USVString> Fields;
		public dynamic Params;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityProviderWellKnown
{
		public List<USVString> Provider_urls;
		public USVString Accounts_endpoint;
		public USVString Login_url;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityProviderIcon
{
		public required USVString Url;
		public ulong Size;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityProviderBranding
{
		public USVString Background_color;
		public USVString Color;
		public List<IdentityProviderIcon> Icons;
		public USVString Name;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityProviderAPIConfig
{
		public required USVString Accounts_endpoint;
		public required USVString Client_metadata_endpoint;
		public required USVString Id_assertion_endpoint;
		public required USVString Login_url;
		public USVString Disconnect_endpoint;
		public IdentityProviderBranding Branding;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityProviderAccount
{
		public required USVString Id;
		public required USVString Name;
		public required USVString Email;
		public USVString Given_name;
		public USVString Picture;
		public List<USVString> Approved_clients;
		public List<DOMString> Login_hints;
		public List<DOMString> Domain_hints;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityProviderAccountList
{
		public List<IdentityProviderAccount> Accounts;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityAssertionResponse
{
		public USVString Token;
		public USVString Continue_on;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityProviderClientMetadata
{
		public USVString Privacy_policy_url;
		public USVString Terms_of_service_url;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityUserInfo
{
		public USVString Email;
		public USVString Name;
		public USVString GivenName;
		public USVString Picture;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityResolveOptions
{
		public USVString AccountId;
}

///<include file='Utils/Docs/IdentityProvider/IdentityProvider.generated.xml' path='docs/IdentityProvider/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdentityProvider
{
	///<include file='Utils/Docs/IdentityProviderClose/IdentityProviderClose.generated.xml' path='docs/IdentityProviderClose/*'/>
	public static Undefined Close() { throw new System.NotImplementedException(); }
		public static Undefined Resolve(DOMString token, IdentityResolveOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IdentityProviderGetUserInfo/IdentityProviderGetUserInfo.generated.xml' path='docs/IdentityProviderGetUserInfo/*'/>
	public static Task<List<IdentityUserInfo>> GetUserInfo(IdentityProviderConfig config) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLFencedFrameElement/HTMLFencedFrameElement.generated.xml' path='docs/HTMLFencedFrameElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLFencedFrameElement : HTMLElement
{
		public HTMLFencedFrameElement() { }
	///<include file='Utils/Docs/HTMLFencedFrameElementConfig/HTMLFencedFrameElementConfig.generated.xml' path='docs/HTMLFencedFrameElementConfig/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public FencedFrameConfig? Config { get; set; }
	///<include file='Utils/Docs/HTMLFencedFrameElementWidth/HTMLFencedFrameElementWidth.generated.xml' path='docs/HTMLFencedFrameElementWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Width { get; set; }
	///<include file='Utils/Docs/HTMLFencedFrameElementHeight/HTMLFencedFrameElementHeight.generated.xml' path='docs/HTMLFencedFrameElementHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Height { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList Sandbox { get; }
	///<include file='Utils/Docs/HTMLFencedFrameElementAllow/HTMLFencedFrameElementAllow.generated.xml' path='docs/HTMLFencedFrameElementAllow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Allow { get; set; }
}

///<include file='Utils/Docs/FencedFrameConfig/FencedFrameConfig.generated.xml' path='docs/FencedFrameConfig/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FencedFrameConfig
{
		public FencedFrameConfig(USVString url) { }
	///<include file='Utils/Docs/FencedFrameConfigSetSharedStorageContext/FencedFrameConfigSetSharedStorageContext.generated.xml' path='docs/FencedFrameConfigSetSharedStorageContext/*'/>
	public Undefined SetSharedStorageContext(DOMString contextString) { throw new System.NotImplementedException(); }
	public FencedFrameConfig() { }
}


///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorDeprecatedReplaceInURN/NavigatorDeprecatedReplaceInURN.generated.xml' path='docs/NavigatorDeprecatedReplaceInURN/*'/>
	public Task<Undefined> DeprecatedReplaceInURN(UrnOrConfig urnOrConfig, Dictionary<USVString, USVString> replacements) { throw new System.NotImplementedException(); }
		public Task<USVString> DeprecatedURNtoURL(UrnOrConfig urnOrConfig, bool send_reports) { throw new System.NotImplementedException(); }
		public List<USVString> AdAuctionComponents(ushort numAdComponents) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FenceEvent
{
		public DOMString EventType;
		public DOMString EventData;
		public List<FenceReportingDestination> Destination;
		public bool CrossOriginExposed;
		public bool Once;
		public USVString DestinationURL;
}


///<include file='Utils/Docs/Fence/Fence.generated.xml' path='docs/Fence/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Fence
{
	///<include file='Utils/Docs/FenceReportEvent/FenceReportEvent.generated.xml' path='docs/FenceReportEvent/*'/>
	public Undefined ReportEvent(ReportEventType event_) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FenceSetReportEventDataForAutomaticBeacons/FenceSetReportEventDataForAutomaticBeacons.generated.xml' path='docs/FenceSetReportEventDataForAutomaticBeacons/*'/>
	public Undefined SetReportEventDataForAutomaticBeacons(FenceEvent event_) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FenceGetNestedConfigs/FenceGetNestedConfigs.generated.xml' path='docs/FenceGetNestedConfigs/*'/>
	public List<FencedFrameConfig> GetNestedConfigs() { throw new System.NotImplementedException(); }
		public Task<Undefined> DisableUntrustedNetwork() { throw new System.NotImplementedException(); }
		public Undefined NotifyEvent(Event event_) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowFence/WindowFence.generated.xml' path='docs/WindowFence/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Fence? Fence { get; }
}

///<include file='Utils/Docs/Headers/Headers.generated.xml' path='docs/Headers/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Headers
{
	///<include file='Utils/Docs/HeadersHeaders/HeadersHeaders.generated.xml' path='docs/HeadersHeaders/*'/>
	public Headers(HeadersInit init) { }
	///<include file='Utils/Docs/HeadersAppend/HeadersAppend.generated.xml' path='docs/HeadersAppend/*'/>
	public Undefined Append(ByteString name, ByteString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HeadersDelete/HeadersDelete.generated.xml' path='docs/HeadersDelete/*'/>
	public Undefined Delete(ByteString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HeadersGet/HeadersGet.generated.xml' path='docs/HeadersGet/*'/>
	public ByteString? Get(ByteString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HeadersGetSetCookie/HeadersGetSetCookie.generated.xml' path='docs/HeadersGetSetCookie/*'/>
	public List<ByteString> GetSetCookie() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HeadersHas/HeadersHas.generated.xml' path='docs/HeadersHas/*'/>
	public bool Has(ByteString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HeadersSet/HeadersSet.generated.xml' path='docs/HeadersSet/*'/>
	public Undefined Set(ByteString name, ByteString value) { throw new System.NotImplementedException(); }
	public ByteString this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	public Headers() { }
}



///<include file='Utils/Docs/Request/Request.generated.xml' path='docs/Request/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Request
{
	///<include file='Utils/Docs/RequestRequest/RequestRequest.generated.xml' path='docs/RequestRequest/*'/>
	public Request(RequestInfo input, RequestInit init) { }
	///<include file='Utils/Docs/RequestMethod/RequestMethod.generated.xml' path='docs/RequestMethod/*'/>
	public ByteString Method { get; }
	///<include file='Utils/Docs/RequestUrl/RequestUrl.generated.xml' path='docs/RequestUrl/*'/>
	public USVString Url { get; }
	///<include file='Utils/Docs/RequestHeaders/RequestHeaders.generated.xml' path='docs/RequestHeaders/*'/>
	public Headers Headers { get; }
	///<include file='Utils/Docs/RequestDestination/RequestDestination.generated.xml' path='docs/RequestDestination/*'/>
	public RequestDestination Destination { get; }
	///<include file='Utils/Docs/RequestReferrer/RequestReferrer.generated.xml' path='docs/RequestReferrer/*'/>
	public USVString Referrer { get; }
	///<include file='Utils/Docs/RequestReferrerPolicy/RequestReferrerPolicy.generated.xml' path='docs/RequestReferrerPolicy/*'/>
	public ReferrerPolicy ReferrerPolicy { get; }
	///<include file='Utils/Docs/RequestMode/RequestMode.generated.xml' path='docs/RequestMode/*'/>
	public RequestMode Mode { get; }
	///<include file='Utils/Docs/RequestCredentials/RequestCredentials.generated.xml' path='docs/RequestCredentials/*'/>
	public RequestCredentials Credentials { get; }
	///<include file='Utils/Docs/RequestCache/RequestCache.generated.xml' path='docs/RequestCache/*'/>
	public RequestCache Cache { get; }
	///<include file='Utils/Docs/RequestRedirect/RequestRedirect.generated.xml' path='docs/RequestRedirect/*'/>
	public RequestRedirect Redirect { get; }
	///<include file='Utils/Docs/RequestIntegrity/RequestIntegrity.generated.xml' path='docs/RequestIntegrity/*'/>
	public DOMString Integrity { get; }
	///<include file='Utils/Docs/RequestKeepalive/RequestKeepalive.generated.xml' path='docs/RequestKeepalive/*'/>
	public bool Keepalive { get; }
		public bool IsReloadNavigation { get; }
	///<include file='Utils/Docs/RequestIsHistoryNavigation/RequestIsHistoryNavigation.generated.xml' path='docs/RequestIsHistoryNavigation/*'/>
	public bool IsHistoryNavigation { get; }
	///<include file='Utils/Docs/RequestSignal/RequestSignal.generated.xml' path='docs/RequestSignal/*'/>
	public AbortSignal Signal { get; }
		public RequestDuplex Duplex { get; }
	///<include file='Utils/Docs/RequestClone/RequestClone.generated.xml' path='docs/RequestClone/*'/>
	public Request Clone() { throw new System.NotImplementedException(); }
	public Request() { }
}


///<include file='Utils/Docs/RequestInit/RequestInit.generated.xml' path='docs/RequestInit/*'/>
public partial class RequestInit
{
		public ByteString Method;
		public HeadersInit Headers;
		public BodyInit? Body;
		public USVString Referrer;
		public ReferrerPolicy ReferrerPolicy;
		public RequestMode Mode;
		public RequestCredentials Credentials;
		public RequestCache Cache;
		public RequestRedirect Redirect;
		public DOMString Integrity;
		public bool Keepalive;
		public AbortSignal? Signal;
		public RequestDuplex Duplex;
		public RequestPriority Priority;
		public dynamic Window;
}

///<include file='Utils/Docs/Response/Response.generated.xml' path='docs/Response/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Response
{
	///<include file='Utils/Docs/ResponseResponse/ResponseResponse.generated.xml' path='docs/ResponseResponse/*'/>
	public Response(BodyInit? body, ResponseInit init) { }
	///<include file='Utils/Docs/ResponseError/ResponseError.generated.xml' path='docs/ResponseError/*'/>
	public static Response Error() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ResponseRedirect/ResponseRedirect.generated.xml' path='docs/ResponseRedirect/*'/>
	public static Response Redirect(USVString url, ushort status) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ResponseJson/ResponseJson.generated.xml' path='docs/ResponseJson/*'/>
	public static Response Json(dynamic data, ResponseInit init) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ResponseType/ResponseType.generated.xml' path='docs/ResponseType/*'/>
	public ResponseType Type { get; }
	///<include file='Utils/Docs/ResponseUrl/ResponseUrl.generated.xml' path='docs/ResponseUrl/*'/>
	public USVString Url { get; }
	///<include file='Utils/Docs/ResponseRedirected/ResponseRedirected.generated.xml' path='docs/ResponseRedirected/*'/>
	public bool Redirected { get; }
	///<include file='Utils/Docs/ResponseStatus/ResponseStatus.generated.xml' path='docs/ResponseStatus/*'/>
	public ushort Status { get; }
	///<include file='Utils/Docs/ResponseOk/ResponseOk.generated.xml' path='docs/ResponseOk/*'/>
	public bool Ok { get; }
	///<include file='Utils/Docs/ResponseStatusText/ResponseStatusText.generated.xml' path='docs/ResponseStatusText/*'/>
	public ByteString StatusText { get; }
	///<include file='Utils/Docs/ResponseHeaders/ResponseHeaders.generated.xml' path='docs/ResponseHeaders/*'/>
	public Headers Headers { get; }
	///<include file='Utils/Docs/ResponseClone/ResponseClone.generated.xml' path='docs/ResponseClone/*'/>
	public Response Clone() { throw new System.NotImplementedException(); }
	public Response() { }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class ResponseInit
{
		public ushort Status;
		public ByteString StatusText;
		public HeadersInit Headers;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationExtensionsClientInputs
{
		public USVString CredentialProtectionPolicy;
		public bool EnforceCredentialProtectionPolicy;
}

public partial class AuthenticationExtensionsClientInputs
{
		public byte[] CredBlob;
}

public partial class AuthenticationExtensionsClientInputs
{
		public bool GetCredBlob;
}

public partial class AuthenticationExtensionsClientInputs
{
		public bool MinPinLength;
}

public partial class AuthenticationExtensionsClientInputs
{
		public bool HmacCreateSecret;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HMACGetSecretInput
{
		public required byte[] Salt1;
		public byte[] Salt2;
}

public partial class AuthenticationExtensionsClientInputs
{
		public HMACGetSecretInput HmacGetSecret;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationExtensionsClientOutputs
{
		public bool HmacCreateSecret;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HMACGetSecretOutput
{
		public required byte[] Output1;
		public byte[] Output2;
}

public partial class AuthenticationExtensionsClientOutputs
{
		public HMACGetSecretOutput HmacGetSecret;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemPermissionDescriptor : PermissionDescriptor
{
		public required FileSystemHandle Handle;
		public FileSystemPermissionMode Mode;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemHandlePermissionDescriptor
{
		public FileSystemPermissionMode Mode;
}

///<include file='Utils/Docs/FileSystemHandle/FileSystemHandle.generated.xml' path='docs/FileSystemHandle/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemHandle
{
	///<include file='Utils/Docs/FileSystemHandleQueryPermission/FileSystemHandleQueryPermission.generated.xml' path='docs/FileSystemHandleQueryPermission/*'/>
	public Task<PermissionState> QueryPermission(FileSystemHandlePermissionDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemHandleRequestPermission/FileSystemHandleRequestPermission.generated.xml' path='docs/FileSystemHandleRequestPermission/*'/>
	public Task<PermissionState> RequestPermission(FileSystemHandlePermissionDescriptor descriptor) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FilePickerAcceptType
{
		public USVString Description;
		public Dictionary<USVString, USVString> Accept;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FilePickerOptions
{
		public List<FilePickerAcceptType> Types;
		public bool ExcludeAcceptAllOption;
		public DOMString Id;
		public StartInDirectory StartIn;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OpenFilePickerOptions : FilePickerOptions
{
		public bool Multiple;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SaveFilePickerOptions : FilePickerOptions
{
		public USVString? SuggestedName;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DirectoryPickerOptions
{
		public DOMString Id;
		public StartInDirectory StartIn;
		public FileSystemPermissionMode Mode;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowShowOpenFilePicker/WindowShowOpenFilePicker.generated.xml' path='docs/WindowShowOpenFilePicker/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<List<FileSystemFileHandle>> ShowOpenFilePicker(OpenFilePickerOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowShowSaveFilePicker/WindowShowSaveFilePicker.generated.xml' path='docs/WindowShowSaveFilePicker/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<FileSystemFileHandle> ShowSaveFilePicker(SaveFilePickerOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowShowDirectoryPicker/WindowShowDirectoryPicker.generated.xml' path='docs/WindowShowDirectoryPicker/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<FileSystemDirectoryHandle> ShowDirectoryPicker(DirectoryPickerOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/DataTransferItem/DataTransferItem.generated.xml' path='docs/DataTransferItem/*'/>
public partial class DataTransferItem
{
	///<include file='Utils/Docs/DataTransferItemGetAsFileSystemHandle/DataTransferItemGetAsFileSystemHandle.generated.xml' path='docs/DataTransferItemGetAsFileSystemHandle/*'/>
	public Task<FileSystemHandle?> GetAsFileSystemHandle() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Blob/Blob.generated.xml' path='docs/Blob/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Blob
{
	///<include file='Utils/Docs/BlobBlob/BlobBlob.generated.xml' path='docs/BlobBlob/*'/>
	public Blob(List<BlobPart> blobParts, BlobPropertyBag options) { }
	///<include file='Utils/Docs/BlobSize/BlobSize.generated.xml' path='docs/BlobSize/*'/>
	public ulong Size { get; }
	///<include file='Utils/Docs/BlobType/BlobType.generated.xml' path='docs/BlobType/*'/>
	public DOMString Type { get; }
	///<include file='Utils/Docs/BlobSlice/BlobSlice.generated.xml' path='docs/BlobSlice/*'/>
	public Blob Slice(long start, long end, DOMString contentType) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BlobStream/BlobStream.generated.xml' path='docs/BlobStream/*'/>
	public ReadableStream Stream() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BlobText/BlobText.generated.xml' path='docs/BlobText/*'/>
	public Task<USVString> Text() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BlobArrayBuffer/BlobArrayBuffer.generated.xml' path='docs/BlobArrayBuffer/*'/>
	public Task<byte[]> ArrayBuffer() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BlobBytes/BlobBytes.generated.xml' path='docs/BlobBytes/*'/>
	public Task<System.Byte> Bytes() { throw new System.NotImplementedException(); }
	public Blob() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BlobPropertyBag
{
		public DOMString Type;
		public EndingType Endings;
}


///<include file='Utils/Docs/File/File.generated.xml' path='docs/File/*'/>
public partial class File : Blob
{
	///<include file='Utils/Docs/FileFile/FileFile.generated.xml' path='docs/FileFile/*'/>
	public File(List<BlobPart> fileBits, USVString fileName, FilePropertyBag options) { }
	///<include file='Utils/Docs/FileName/FileName.generated.xml' path='docs/FileName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/FileLastModified/FileLastModified.generated.xml' path='docs/FileLastModified/*'/>
	public long LastModified { get; }
	public File() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FilePropertyBag : BlobPropertyBag
{
		public long LastModified;
}

///<include file='Utils/Docs/FileList/FileList.generated.xml' path='docs/FileList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileList
{
	
	///<include file='Utils/Docs/FileListLength/FileListLength.generated.xml' path='docs/FileListLength/*'/>
	public ulong Length { get; }
}

///<include file='Utils/Docs/FileReader/FileReader.generated.xml' path='docs/FileReader/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileReader : EventTarget
{
	///<include file='Utils/Docs/FileReaderFileReader/FileReaderFileReader.generated.xml' path='docs/FileReaderFileReader/*'/>
	public FileReader() { }
	///<include file='Utils/Docs/FileReaderReadAsArrayBuffer/FileReaderReadAsArrayBuffer.generated.xml' path='docs/FileReaderReadAsArrayBuffer/*'/>
	public Undefined ReadAsArrayBuffer(Blob blob) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileReaderReadAsBinaryString/FileReaderReadAsBinaryString.generated.xml' path='docs/FileReaderReadAsBinaryString/*'/>
	public Undefined ReadAsBinaryString(Blob blob) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileReaderReadAsText/FileReaderReadAsText.generated.xml' path='docs/FileReaderReadAsText/*'/>
	public Undefined ReadAsText(Blob blob, DOMString encoding) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileReaderReadAsDataURL/FileReaderReadAsDataURL.generated.xml' path='docs/FileReaderReadAsDataURL/*'/>
	public Undefined ReadAsDataURL(Blob blob) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileReaderAbort/FileReaderAbort.generated.xml' path='docs/FileReaderAbort/*'/>
	public Undefined Abort() { throw new System.NotImplementedException(); }
		public const ushort EMPTY = 0;
		public const ushort LOADING = 1;
		public const ushort DONE = 2;
	///<include file='Utils/Docs/FileReaderReadyState/FileReaderReadyState.generated.xml' path='docs/FileReaderReadyState/*'/>
	public ushort ReadyState { get; }
	///<include file='Utils/Docs/FileReaderResult/FileReaderResult.generated.xml' path='docs/FileReaderResult/*'/>
	public Union45? Result { get; }
	///<include file='Utils/Docs/FileReaderError/FileReaderError.generated.xml' path='docs/FileReaderError/*'/>
	public DOMException? Error { get; }
		public EventHandler Onloadstart { get; set; }
		public EventHandler Onprogress { get; set; }
		public EventHandler Onload { get; set; }
		public EventHandler Onabort { get; set; }
		public EventHandler Onerror { get; set; }
		public EventHandler Onloadend { get; set; }
}

///<include file='Utils/Docs/FileReaderSync/FileReaderSync.generated.xml' path='docs/FileReaderSync/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileReaderSync
{
	///<include file='Utils/Docs/FileReaderSyncFileReaderSync/FileReaderSyncFileReaderSync.generated.xml' path='docs/FileReaderSyncFileReaderSync/*'/>
	public FileReaderSync() { }
	///<include file='Utils/Docs/FileReaderSyncReadAsArrayBuffer/FileReaderSyncReadAsArrayBuffer.generated.xml' path='docs/FileReaderSyncReadAsArrayBuffer/*'/>
	public byte[] ReadAsArrayBuffer(Blob blob) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileReaderSyncReadAsBinaryString/FileReaderSyncReadAsBinaryString.generated.xml' path='docs/FileReaderSyncReadAsBinaryString/*'/>
	public DOMString ReadAsBinaryString(Blob blob) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileReaderSyncReadAsText/FileReaderSyncReadAsText.generated.xml' path='docs/FileReaderSyncReadAsText/*'/>
	public DOMString ReadAsText(Blob blob, DOMString encoding) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileReaderSyncReadAsDataURL/FileReaderSyncReadAsDataURL.generated.xml' path='docs/FileReaderSyncReadAsDataURL/*'/>
	public DOMString ReadAsDataURL(Blob blob) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/URL/URL.generated.xml' path='docs/URL/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class URL
{
	///<include file='Utils/Docs/URLCreateObjectURL/URLCreateObjectURL.generated.xml' path='docs/URLCreateObjectURL/*'/>
	public static DOMString CreateObjectURL(Union46 obj) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLRevokeObjectURL/URLRevokeObjectURL.generated.xml' path='docs/URLRevokeObjectURL/*'/>
	public static Undefined RevokeObjectURL(DOMString url) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SVGFilterElement/SVGFilterElement.generated.xml' path='docs/SVGFilterElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFilterElement : SVGElement, SVGURIReference
{
	///<include file='Utils/Docs/SVGFilterElementFilterUnits/SVGFilterElementFilterUnits.generated.xml' path='docs/SVGFilterElementFilterUnits/*'/>
	public SVGAnimatedEnumeration FilterUnits { get; }
	///<include file='Utils/Docs/SVGFilterElementPrimitiveUnits/SVGFilterElementPrimitiveUnits.generated.xml' path='docs/SVGFilterElementPrimitiveUnits/*'/>
	public SVGAnimatedEnumeration PrimitiveUnits { get; }
	///<include file='Utils/Docs/SVGFilterElementX/SVGFilterElementX.generated.xml' path='docs/SVGFilterElementX/*'/>
	public SVGAnimatedLength X { get; }
	///<include file='Utils/Docs/SVGFilterElementY/SVGFilterElementY.generated.xml' path='docs/SVGFilterElementY/*'/>
	public SVGAnimatedLength Y { get; }
	///<include file='Utils/Docs/SVGFilterElementWidth/SVGFilterElementWidth.generated.xml' path='docs/SVGFilterElementWidth/*'/>
	public SVGAnimatedLength Width { get; }
	///<include file='Utils/Docs/SVGFilterElementHeight/SVGFilterElementHeight.generated.xml' path='docs/SVGFilterElementHeight/*'/>
	public SVGAnimatedLength Height { get; }
}


///<include file='Utils/Docs/SVGFEBlendElement/SVGFEBlendElement.generated.xml' path='docs/SVGFEBlendElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEBlendElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public const ushort SVG_FEBLEND_MODE_UNKNOWN = 0;
		public const ushort SVG_FEBLEND_MODE_NORMAL = 1;
		public const ushort SVG_FEBLEND_MODE_MULTIPLY = 2;
		public const ushort SVG_FEBLEND_MODE_SCREEN = 3;
		public const ushort SVG_FEBLEND_MODE_DARKEN = 4;
		public const ushort SVG_FEBLEND_MODE_LIGHTEN = 5;
		public const ushort SVG_FEBLEND_MODE_OVERLAY = 6;
		public const ushort SVG_FEBLEND_MODE_COLOR_DODGE = 7;
		public const ushort SVG_FEBLEND_MODE_COLOR_BURN = 8;
		public const ushort SVG_FEBLEND_MODE_HARD_LIGHT = 9;
		public const ushort SVG_FEBLEND_MODE_SOFT_LIGHT = 10;
		public const ushort SVG_FEBLEND_MODE_DIFFERENCE = 11;
		public const ushort SVG_FEBLEND_MODE_EXCLUSION = 12;
		public const ushort SVG_FEBLEND_MODE_HUE = 13;
		public const ushort SVG_FEBLEND_MODE_SATURATION = 14;
		public const ushort SVG_FEBLEND_MODE_COLOR = 15;
		public const ushort SVG_FEBLEND_MODE_LUMINOSITY = 16;
		public SVGAnimatedString In1 { get; }
		public SVGAnimatedString In2 { get; }
		public SVGAnimatedEnumeration Mode { get; }
}


///<include file='Utils/Docs/SVGFEColorMatrixElement/SVGFEColorMatrixElement.generated.xml' path='docs/SVGFEColorMatrixElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEColorMatrixElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public const ushort SVG_FECOLORMATRIX_TYPE_UNKNOWN = 0;
		public const ushort SVG_FECOLORMATRIX_TYPE_MATRIX = 1;
		public const ushort SVG_FECOLORMATRIX_TYPE_SATURATE = 2;
		public const ushort SVG_FECOLORMATRIX_TYPE_HUEROTATE = 3;
		public const ushort SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = 4;
	///<include file='Utils/Docs/SVGFEColorMatrixElementIn1/SVGFEColorMatrixElementIn1.generated.xml' path='docs/SVGFEColorMatrixElementIn1/*'/>
	public SVGAnimatedString In1 { get; }
	///<include file='Utils/Docs/SVGFEColorMatrixElementType/SVGFEColorMatrixElementType.generated.xml' path='docs/SVGFEColorMatrixElementType/*'/>
	public SVGAnimatedEnumeration Type { get; }
	///<include file='Utils/Docs/SVGFEColorMatrixElementValues/SVGFEColorMatrixElementValues.generated.xml' path='docs/SVGFEColorMatrixElementValues/*'/>
	public SVGAnimatedNumberList Values { get; }
}


///<include file='Utils/Docs/SVGFEComponentTransferElement/SVGFEComponentTransferElement.generated.xml' path='docs/SVGFEComponentTransferElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEComponentTransferElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public SVGAnimatedString In1 { get; }
}


///<include file='Utils/Docs/SVGComponentTransferFunctionElement/SVGComponentTransferFunctionElement.generated.xml' path='docs/SVGComponentTransferFunctionElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGComponentTransferFunctionElement : SVGElement
{
		public const ushort SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = 0;
		public const ushort SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 1;
		public const ushort SVG_FECOMPONENTTRANSFER_TYPE_TABLE = 2;
		public const ushort SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 3;
		public const ushort SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = 4;
		public const ushort SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = 5;
	///<include file='Utils/Docs/SVGComponentTransferFunctionElementType/SVGComponentTransferFunctionElementType.generated.xml' path='docs/SVGComponentTransferFunctionElementType/*'/>
	public SVGAnimatedEnumeration Type { get; }
	///<include file='Utils/Docs/SVGComponentTransferFunctionElementTableValues/SVGComponentTransferFunctionElementTableValues.generated.xml' path='docs/SVGComponentTransferFunctionElementTableValues/*'/>
	public SVGAnimatedNumberList TableValues { get; }
	///<include file='Utils/Docs/SVGComponentTransferFunctionElementSlope/SVGComponentTransferFunctionElementSlope.generated.xml' path='docs/SVGComponentTransferFunctionElementSlope/*'/>
	public SVGAnimatedNumber Slope { get; }
	///<include file='Utils/Docs/SVGComponentTransferFunctionElementIntercept/SVGComponentTransferFunctionElementIntercept.generated.xml' path='docs/SVGComponentTransferFunctionElementIntercept/*'/>
	public SVGAnimatedNumber Intercept { get; }
	///<include file='Utils/Docs/SVGComponentTransferFunctionElementAmplitude/SVGComponentTransferFunctionElementAmplitude.generated.xml' path='docs/SVGComponentTransferFunctionElementAmplitude/*'/>
	public SVGAnimatedNumber Amplitude { get; }
	///<include file='Utils/Docs/SVGComponentTransferFunctionElementExponent/SVGComponentTransferFunctionElementExponent.generated.xml' path='docs/SVGComponentTransferFunctionElementExponent/*'/>
	public SVGAnimatedNumber Exponent { get; }
	///<include file='Utils/Docs/SVGComponentTransferFunctionElementOffset/SVGComponentTransferFunctionElementOffset.generated.xml' path='docs/SVGComponentTransferFunctionElementOffset/*'/>
	public SVGAnimatedNumber Offset { get; }
}

///<include file='Utils/Docs/SVGFEFuncRElement/SVGFEFuncRElement.generated.xml' path='docs/SVGFEFuncRElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEFuncRElement : SVGComponentTransferFunctionElement
{
}

///<include file='Utils/Docs/SVGFEFuncGElement/SVGFEFuncGElement.generated.xml' path='docs/SVGFEFuncGElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEFuncGElement : SVGComponentTransferFunctionElement
{
}

///<include file='Utils/Docs/SVGFEFuncBElement/SVGFEFuncBElement.generated.xml' path='docs/SVGFEFuncBElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEFuncBElement : SVGComponentTransferFunctionElement
{
}

///<include file='Utils/Docs/SVGFEFuncAElement/SVGFEFuncAElement.generated.xml' path='docs/SVGFEFuncAElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEFuncAElement : SVGComponentTransferFunctionElement
{
}

///<include file='Utils/Docs/SVGFECompositeElement/SVGFECompositeElement.generated.xml' path='docs/SVGFECompositeElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFECompositeElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public const ushort SVG_FECOMPOSITE_OPERATOR_UNKNOWN = 0;
		public const ushort SVG_FECOMPOSITE_OPERATOR_OVER = 1;
		public const ushort SVG_FECOMPOSITE_OPERATOR_IN = 2;
		public const ushort SVG_FECOMPOSITE_OPERATOR_OUT = 3;
		public const ushort SVG_FECOMPOSITE_OPERATOR_ATOP = 4;
		public const ushort SVG_FECOMPOSITE_OPERATOR_XOR = 5;
		public const ushort SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 6;
		public SVGAnimatedString In1 { get; }
		public SVGAnimatedString In2 { get; }
		public SVGAnimatedEnumeration Operator { get; }
		public SVGAnimatedNumber K1 { get; }
		public SVGAnimatedNumber K2 { get; }
		public SVGAnimatedNumber K3 { get; }
		public SVGAnimatedNumber K4 { get; }
}


///<include file='Utils/Docs/SVGFEConvolveMatrixElement/SVGFEConvolveMatrixElement.generated.xml' path='docs/SVGFEConvolveMatrixElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEConvolveMatrixElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public const ushort SVG_EDGEMODE_UNKNOWN = 0;
		public const ushort SVG_EDGEMODE_DUPLICATE = 1;
		public const ushort SVG_EDGEMODE_WRAP = 2;
		public const ushort SVG_EDGEMODE_NONE = 3;
		public SVGAnimatedString In1 { get; }
		public SVGAnimatedInteger OrderX { get; }
		public SVGAnimatedInteger OrderY { get; }
		public SVGAnimatedNumberList KernelMatrix { get; }
		public SVGAnimatedNumber Divisor { get; }
		public SVGAnimatedNumber Bias { get; }
		public SVGAnimatedInteger TargetX { get; }
		public SVGAnimatedInteger TargetY { get; }
		public SVGAnimatedEnumeration EdgeMode { get; }
		public SVGAnimatedNumber KernelUnitLengthX { get; }
		public SVGAnimatedNumber KernelUnitLengthY { get; }
		public SVGAnimatedBoolean PreserveAlpha { get; }
}


///<include file='Utils/Docs/SVGFEDiffuseLightingElement/SVGFEDiffuseLightingElement.generated.xml' path='docs/SVGFEDiffuseLightingElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEDiffuseLightingElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
	///<include file='Utils/Docs/SVGFEDiffuseLightingElementIn1/SVGFEDiffuseLightingElementIn1.generated.xml' path='docs/SVGFEDiffuseLightingElementIn1/*'/>
	public SVGAnimatedString In1 { get; }
	///<include file='Utils/Docs/SVGFEDiffuseLightingElementSurfaceScale/SVGFEDiffuseLightingElementSurfaceScale.generated.xml' path='docs/SVGFEDiffuseLightingElementSurfaceScale/*'/>
	public SVGAnimatedNumber SurfaceScale { get; }
	///<include file='Utils/Docs/SVGFEDiffuseLightingElementDiffuseConstant/SVGFEDiffuseLightingElementDiffuseConstant.generated.xml' path='docs/SVGFEDiffuseLightingElementDiffuseConstant/*'/>
	public SVGAnimatedNumber DiffuseConstant { get; }
	///<include file='Utils/Docs/SVGFEDiffuseLightingElementKernelUnitLengthX/SVGFEDiffuseLightingElementKernelUnitLengthX.generated.xml' path='docs/SVGFEDiffuseLightingElementKernelUnitLengthX/*'/>
	public SVGAnimatedNumber KernelUnitLengthX { get; }
	///<include file='Utils/Docs/SVGFEDiffuseLightingElementKernelUnitLengthY/SVGFEDiffuseLightingElementKernelUnitLengthY.generated.xml' path='docs/SVGFEDiffuseLightingElementKernelUnitLengthY/*'/>
	public SVGAnimatedNumber KernelUnitLengthY { get; }
}


///<include file='Utils/Docs/SVGFEDistantLightElement/SVGFEDistantLightElement.generated.xml' path='docs/SVGFEDistantLightElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEDistantLightElement : SVGElement
{
	///<include file='Utils/Docs/SVGFEDistantLightElementAzimuth/SVGFEDistantLightElementAzimuth.generated.xml' path='docs/SVGFEDistantLightElementAzimuth/*'/>
	public SVGAnimatedNumber Azimuth { get; }
	///<include file='Utils/Docs/SVGFEDistantLightElementElevation/SVGFEDistantLightElementElevation.generated.xml' path='docs/SVGFEDistantLightElementElevation/*'/>
	public SVGAnimatedNumber Elevation { get; }
}

///<include file='Utils/Docs/SVGFEPointLightElement/SVGFEPointLightElement.generated.xml' path='docs/SVGFEPointLightElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEPointLightElement : SVGElement
{
		public SVGAnimatedNumber X { get; }
		public SVGAnimatedNumber Y { get; }
		public SVGAnimatedNumber Z { get; }
}

///<include file='Utils/Docs/SVGFESpotLightElement/SVGFESpotLightElement.generated.xml' path='docs/SVGFESpotLightElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFESpotLightElement : SVGElement
{
		public SVGAnimatedNumber X { get; }
		public SVGAnimatedNumber Y { get; }
		public SVGAnimatedNumber Z { get; }
		public SVGAnimatedNumber PointsAtX { get; }
		public SVGAnimatedNumber PointsAtY { get; }
		public SVGAnimatedNumber PointsAtZ { get; }
		public SVGAnimatedNumber SpecularExponent { get; }
		public SVGAnimatedNumber LimitingConeAngle { get; }
}

///<include file='Utils/Docs/SVGFEDisplacementMapElement/SVGFEDisplacementMapElement.generated.xml' path='docs/SVGFEDisplacementMapElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEDisplacementMapElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public const ushort SVG_CHANNEL_UNKNOWN = 0;
		public const ushort SVG_CHANNEL_R = 1;
		public const ushort SVG_CHANNEL_G = 2;
		public const ushort SVG_CHANNEL_B = 3;
		public const ushort SVG_CHANNEL_A = 4;
		public SVGAnimatedString In1 { get; }
		public SVGAnimatedString In2 { get; }
		public SVGAnimatedNumber Scale { get; }
		public SVGAnimatedEnumeration XChannelSelector { get; }
		public SVGAnimatedEnumeration YChannelSelector { get; }
}


///<include file='Utils/Docs/SVGFEDropShadowElement/SVGFEDropShadowElement.generated.xml' path='docs/SVGFEDropShadowElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEDropShadowElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public SVGAnimatedString In1 { get; }
		public SVGAnimatedNumber Dx { get; }
		public SVGAnimatedNumber Dy { get; }
		public SVGAnimatedNumber StdDeviationX { get; }
		public SVGAnimatedNumber StdDeviationY { get; }
		public Undefined SetStdDeviation(Number stdDeviationX, Number stdDeviationY) { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/SVGFEFloodElement/SVGFEFloodElement.generated.xml' path='docs/SVGFEFloodElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEFloodElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
}


///<include file='Utils/Docs/SVGFEGaussianBlurElement/SVGFEGaussianBlurElement.generated.xml' path='docs/SVGFEGaussianBlurElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEGaussianBlurElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public const ushort SVG_EDGEMODE_UNKNOWN = 0;
		public const ushort SVG_EDGEMODE_DUPLICATE = 1;
		public const ushort SVG_EDGEMODE_WRAP = 2;
		public const ushort SVG_EDGEMODE_NONE = 3;
	///<include file='Utils/Docs/SVGFEGaussianBlurElementIn1/SVGFEGaussianBlurElementIn1.generated.xml' path='docs/SVGFEGaussianBlurElementIn1/*'/>
	public SVGAnimatedString In1 { get; }
	///<include file='Utils/Docs/SVGFEGaussianBlurElementStdDeviationX/SVGFEGaussianBlurElementStdDeviationX.generated.xml' path='docs/SVGFEGaussianBlurElementStdDeviationX/*'/>
	public SVGAnimatedNumber StdDeviationX { get; }
	///<include file='Utils/Docs/SVGFEGaussianBlurElementStdDeviationY/SVGFEGaussianBlurElementStdDeviationY.generated.xml' path='docs/SVGFEGaussianBlurElementStdDeviationY/*'/>
	public SVGAnimatedNumber StdDeviationY { get; }
		public SVGAnimatedEnumeration EdgeMode { get; }
	///<include file='Utils/Docs/SVGFEGaussianBlurElementSetStdDeviation/SVGFEGaussianBlurElementSetStdDeviation.generated.xml' path='docs/SVGFEGaussianBlurElementSetStdDeviation/*'/>
	public Undefined SetStdDeviation(Number stdDeviationX, Number stdDeviationY) { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/SVGFEImageElement/SVGFEImageElement.generated.xml' path='docs/SVGFEImageElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEImageElement : SVGElement, SVGFilterPrimitiveStandardAttributes, SVGURIReference
{
		public SVGAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
		public SVGAnimatedString CrossOrigin { get; }
}



///<include file='Utils/Docs/SVGFEMergeElement/SVGFEMergeElement.generated.xml' path='docs/SVGFEMergeElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEMergeElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
}


///<include file='Utils/Docs/SVGFEMergeNodeElement/SVGFEMergeNodeElement.generated.xml' path='docs/SVGFEMergeNodeElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEMergeNodeElement : SVGElement
{
	///<include file='Utils/Docs/SVGFEMergeNodeElementIn1/SVGFEMergeNodeElementIn1.generated.xml' path='docs/SVGFEMergeNodeElementIn1/*'/>
	public SVGAnimatedString In1 { get; }
}

///<include file='Utils/Docs/SVGFEMorphologyElement/SVGFEMorphologyElement.generated.xml' path='docs/SVGFEMorphologyElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEMorphologyElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public const ushort SVG_MORPHOLOGY_OPERATOR_UNKNOWN = 0;
		public const ushort SVG_MORPHOLOGY_OPERATOR_ERODE = 1;
		public const ushort SVG_MORPHOLOGY_OPERATOR_DILATE = 2;
	///<include file='Utils/Docs/SVGFEMorphologyElementIn1/SVGFEMorphologyElementIn1.generated.xml' path='docs/SVGFEMorphologyElementIn1/*'/>
	public SVGAnimatedString In1 { get; }
	///<include file='Utils/Docs/SVGFEMorphologyElementOperator/SVGFEMorphologyElementOperator.generated.xml' path='docs/SVGFEMorphologyElementOperator/*'/>
	public SVGAnimatedEnumeration Operator { get; }
	///<include file='Utils/Docs/SVGFEMorphologyElementRadiusX/SVGFEMorphologyElementRadiusX.generated.xml' path='docs/SVGFEMorphologyElementRadiusX/*'/>
	public SVGAnimatedNumber RadiusX { get; }
	///<include file='Utils/Docs/SVGFEMorphologyElementRadiusY/SVGFEMorphologyElementRadiusY.generated.xml' path='docs/SVGFEMorphologyElementRadiusY/*'/>
	public SVGAnimatedNumber RadiusY { get; }
}


///<include file='Utils/Docs/SVGFEOffsetElement/SVGFEOffsetElement.generated.xml' path='docs/SVGFEOffsetElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFEOffsetElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public SVGAnimatedString In1 { get; }
		public SVGAnimatedNumber Dx { get; }
		public SVGAnimatedNumber Dy { get; }
}


///<include file='Utils/Docs/SVGFESpecularLightingElement/SVGFESpecularLightingElement.generated.xml' path='docs/SVGFESpecularLightingElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFESpecularLightingElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
	///<include file='Utils/Docs/SVGFESpecularLightingElementIn1/SVGFESpecularLightingElementIn1.generated.xml' path='docs/SVGFESpecularLightingElementIn1/*'/>
	public SVGAnimatedString In1 { get; }
	///<include file='Utils/Docs/SVGFESpecularLightingElementSurfaceScale/SVGFESpecularLightingElementSurfaceScale.generated.xml' path='docs/SVGFESpecularLightingElementSurfaceScale/*'/>
	public SVGAnimatedNumber SurfaceScale { get; }
	///<include file='Utils/Docs/SVGFESpecularLightingElementSpecularConstant/SVGFESpecularLightingElementSpecularConstant.generated.xml' path='docs/SVGFESpecularLightingElementSpecularConstant/*'/>
	public SVGAnimatedNumber SpecularConstant { get; }
	///<include file='Utils/Docs/SVGFESpecularLightingElementSpecularExponent/SVGFESpecularLightingElementSpecularExponent.generated.xml' path='docs/SVGFESpecularLightingElementSpecularExponent/*'/>
	public SVGAnimatedNumber SpecularExponent { get; }
		public SVGAnimatedNumber KernelUnitLengthX { get; }
		public SVGAnimatedNumber KernelUnitLengthY { get; }
}


///<include file='Utils/Docs/SVGFETileElement/SVGFETileElement.generated.xml' path='docs/SVGFETileElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFETileElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public SVGAnimatedString In1 { get; }
}


///<include file='Utils/Docs/SVGFETurbulenceElement/SVGFETurbulenceElement.generated.xml' path='docs/SVGFETurbulenceElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGFETurbulenceElement : SVGElement, SVGFilterPrimitiveStandardAttributes
{
		public const ushort SVG_TURBULENCE_TYPE_UNKNOWN = 0;
		public const ushort SVG_TURBULENCE_TYPE_FRACTALNOISE = 1;
		public const ushort SVG_TURBULENCE_TYPE_TURBULENCE = 2;
		public const ushort SVG_STITCHTYPE_UNKNOWN = 0;
		public const ushort SVG_STITCHTYPE_STITCH = 1;
		public const ushort SVG_STITCHTYPE_NOSTITCH = 2;
		public SVGAnimatedNumber BaseFrequencyX { get; }
		public SVGAnimatedNumber BaseFrequencyY { get; }
		public SVGAnimatedInteger NumOctaves { get; }
		public SVGAnimatedNumber Seed { get; }
		public SVGAnimatedEnumeration StitchTiles { get; }
		public SVGAnimatedEnumeration Type { get; }
}


///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
		public FontMetrics MeasureElement(Element element) { throw new System.NotImplementedException(); }
		public FontMetrics MeasureText(DOMString text, StylePropertyMapReadOnly styleMap) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontMetrics
{
		public Number Width { get; }
		public Number[] Advances { get; }
		public Number BoundingBoxLeft { get; }
		public Number BoundingBoxRight { get; }
		public Number Height { get; }
		public Number EmHeightAscent { get; }
		public Number EmHeightDescent { get; }
		public Number BoundingBoxAscent { get; }
		public Number BoundingBoxDescent { get; }
		public Number FontBoundingBoxAscent { get; }
		public Number FontBoundingBoxDescent { get; }
		public Baseline DominantBaseline { get; }
		public Baseline[] Baselines { get; }
		public Font[] Fonts { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Baseline
{
		public DOMString Name { get; }
		public Number Value { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Font
{
		public DOMString Name { get; }
		public ulong GlyphsRendered { get; }
}

///<include file='Utils/Docs/FileSystemHandle/FileSystemHandle.generated.xml' path='docs/FileSystemHandle/*'/>
public partial class FileSystemHandle
{
	///<include file='Utils/Docs/FileSystemHandleKind/FileSystemHandleKind.generated.xml' path='docs/FileSystemHandleKind/*'/>
	public FileSystemHandleKind Kind { get; }
	///<include file='Utils/Docs/FileSystemHandleName/FileSystemHandleName.generated.xml' path='docs/FileSystemHandleName/*'/>
	public USVString Name { get; }
	///<include file='Utils/Docs/FileSystemHandleIsSameEntry/FileSystemHandleIsSameEntry.generated.xml' path='docs/FileSystemHandleIsSameEntry/*'/>
	public Task<bool> IsSameEntry(FileSystemHandle other) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemCreateWritableOptions
{
		public bool KeepExistingData;
}

///<include file='Utils/Docs/FileSystemFileHandle/FileSystemFileHandle.generated.xml' path='docs/FileSystemFileHandle/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemFileHandle : FileSystemHandle
{
	///<include file='Utils/Docs/FileSystemFileHandleGetFile/FileSystemFileHandleGetFile.generated.xml' path='docs/FileSystemFileHandleGetFile/*'/>
	public Task<File> GetFile() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemFileHandleCreateWritable/FileSystemFileHandleCreateWritable.generated.xml' path='docs/FileSystemFileHandleCreateWritable/*'/>
	public Task<FileSystemWritableFileStream> CreateWritable(FileSystemCreateWritableOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemFileHandleCreateSyncAccessHandle/FileSystemFileHandleCreateSyncAccessHandle.generated.xml' path='docs/FileSystemFileHandleCreateSyncAccessHandle/*'/>
	public Task<FileSystemSyncAccessHandle> CreateSyncAccessHandle() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemGetFileOptions
{
		public bool Create;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemGetDirectoryOptions
{
		public bool Create;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemRemoveOptions
{
		public bool Recursive;
}

///<include file='Utils/Docs/FileSystemDirectoryHandle/FileSystemDirectoryHandle.generated.xml' path='docs/FileSystemDirectoryHandle/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemDirectoryHandle : FileSystemHandle
{
	public USVString this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	///<include file='Utils/Docs/FileSystemDirectoryHandleGetFileHandle/FileSystemDirectoryHandleGetFileHandle.generated.xml' path='docs/FileSystemDirectoryHandleGetFileHandle/*'/>
	public Task<FileSystemFileHandle> GetFileHandle(USVString name, FileSystemGetFileOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemDirectoryHandleGetDirectoryHandle/FileSystemDirectoryHandleGetDirectoryHandle.generated.xml' path='docs/FileSystemDirectoryHandleGetDirectoryHandle/*'/>
	public Task<FileSystemDirectoryHandle> GetDirectoryHandle(USVString name, FileSystemGetDirectoryOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemDirectoryHandleRemoveEntry/FileSystemDirectoryHandleRemoveEntry.generated.xml' path='docs/FileSystemDirectoryHandleRemoveEntry/*'/>
	public Task<Undefined> RemoveEntry(USVString name, FileSystemRemoveOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemDirectoryHandleResolve/FileSystemDirectoryHandleResolve.generated.xml' path='docs/FileSystemDirectoryHandleResolve/*'/>
	public Task<List<USVString>?> Resolve(FileSystemHandle possibleDescendant) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WriteParams
{
		public required WriteCommandType Type;
		public ulong? Size;
		public ulong? Position;
		public Union47? Data;
}


///<include file='Utils/Docs/FileSystemWritableFileStream/FileSystemWritableFileStream.generated.xml' path='docs/FileSystemWritableFileStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemWritableFileStream : WritableStream
{
	///<include file='Utils/Docs/FileSystemWritableFileStreamWrite/FileSystemWritableFileStreamWrite.generated.xml' path='docs/FileSystemWritableFileStreamWrite/*'/>
	public Task<Undefined> Write(FileSystemWriteChunkType data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemWritableFileStreamSeek/FileSystemWritableFileStreamSeek.generated.xml' path='docs/FileSystemWritableFileStreamSeek/*'/>
	public Task<Undefined> Seek(ulong position) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemWritableFileStreamTruncate/FileSystemWritableFileStreamTruncate.generated.xml' path='docs/FileSystemWritableFileStreamTruncate/*'/>
	public Task<Undefined> Truncate(ulong size) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemReadWriteOptions
{
		public ulong At;
}

///<include file='Utils/Docs/FileSystemSyncAccessHandle/FileSystemSyncAccessHandle.generated.xml' path='docs/FileSystemSyncAccessHandle/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FileSystemSyncAccessHandle
{
	///<include file='Utils/Docs/FileSystemSyncAccessHandleRead/FileSystemSyncAccessHandleRead.generated.xml' path='docs/FileSystemSyncAccessHandleRead/*'/>
	public ulong Read(AllowSharedBufferSource buffer, FileSystemReadWriteOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemSyncAccessHandleWrite/FileSystemSyncAccessHandleWrite.generated.xml' path='docs/FileSystemSyncAccessHandleWrite/*'/>
	public ulong Write(AllowSharedBufferSource buffer, FileSystemReadWriteOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemSyncAccessHandleTruncate/FileSystemSyncAccessHandleTruncate.generated.xml' path='docs/FileSystemSyncAccessHandleTruncate/*'/>
	public Undefined Truncate(ulong newSize) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemSyncAccessHandleGetSize/FileSystemSyncAccessHandleGetSize.generated.xml' path='docs/FileSystemSyncAccessHandleGetSize/*'/>
	public ulong GetSize() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemSyncAccessHandleFlush/FileSystemSyncAccessHandleFlush.generated.xml' path='docs/FileSystemSyncAccessHandleFlush/*'/>
	public Undefined Flush() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FileSystemSyncAccessHandleClose/FileSystemSyncAccessHandleClose.generated.xml' path='docs/FileSystemSyncAccessHandleClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/StorageManager/StorageManager.generated.xml' path='docs/StorageManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class StorageManager
{
	///<include file='Utils/Docs/StorageManagerGetDirectory/StorageManagerGetDirectory.generated.xml' path='docs/StorageManagerGetDirectory/*'/>
	public Task<FileSystemDirectoryHandle> GetDirectory() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FullscreenOptions
{
		public FullscreenNavigationUI NavigationUI;
}

///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
public partial class Element
{
	///<include file='Utils/Docs/ElementRequestFullscreen/ElementRequestFullscreen.generated.xml' path='docs/ElementRequestFullscreen/*'/>
	public Task<Undefined> RequestFullscreen(FullscreenOptions options) { throw new System.NotImplementedException(); }
		public EventHandler Onfullscreenchange { get; set; }
		public EventHandler Onfullscreenerror { get; set; }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentFullscreenEnabled/DocumentFullscreenEnabled.generated.xml' path='docs/DocumentFullscreenEnabled/*'/>
	public bool FullscreenEnabled { get; }
	///<include file='Utils/Docs/DocumentFullscreen/DocumentFullscreen.generated.xml' path='docs/DocumentFullscreen/*'/>
	public bool Fullscreen { get; }
	///<include file='Utils/Docs/DocumentExitFullscreen/DocumentExitFullscreen.generated.xml' path='docs/DocumentExitFullscreen/*'/>
	public Task<Undefined> ExitFullscreen() { throw new System.NotImplementedException(); }
		public EventHandler Onfullscreenchange { get; set; }
		public EventHandler Onfullscreenerror { get; set; }
}

///<include file='Utils/Docs/GamepadPose/GamepadPose.generated.xml' path='docs/GamepadPose/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GamepadPose
{
	///<include file='Utils/Docs/GamepadPoseHasOrientation/GamepadPoseHasOrientation.generated.xml' path='docs/GamepadPoseHasOrientation/*'/>
	public bool HasOrientation { get; }
	///<include file='Utils/Docs/GamepadPoseHasPosition/GamepadPoseHasPosition.generated.xml' path='docs/GamepadPoseHasPosition/*'/>
	public bool HasPosition { get; }
	///<include file='Utils/Docs/GamepadPosePosition/GamepadPosePosition.generated.xml' path='docs/GamepadPosePosition/*'/>
	public System.Single? Position { get; }
	///<include file='Utils/Docs/GamepadPoseLinearVelocity/GamepadPoseLinearVelocity.generated.xml' path='docs/GamepadPoseLinearVelocity/*'/>
	public System.Single? LinearVelocity { get; }
	///<include file='Utils/Docs/GamepadPoseLinearAcceleration/GamepadPoseLinearAcceleration.generated.xml' path='docs/GamepadPoseLinearAcceleration/*'/>
	public System.Single? LinearAcceleration { get; }
	///<include file='Utils/Docs/GamepadPoseOrientation/GamepadPoseOrientation.generated.xml' path='docs/GamepadPoseOrientation/*'/>
	public System.Single? Orientation { get; }
	///<include file='Utils/Docs/GamepadPoseAngularVelocity/GamepadPoseAngularVelocity.generated.xml' path='docs/GamepadPoseAngularVelocity/*'/>
	public System.Single? AngularVelocity { get; }
	///<include file='Utils/Docs/GamepadPoseAngularAcceleration/GamepadPoseAngularAcceleration.generated.xml' path='docs/GamepadPoseAngularAcceleration/*'/>
	public System.Single? AngularAcceleration { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GamepadTouch
{
		public ulong TouchId { get; }
		public byte SurfaceId { get; }
		public System.Single Position { get; }
		public System.UInt32? SurfaceDimensions { get; }
}

///<include file='Utils/Docs/Gamepad/Gamepad.generated.xml' path='docs/Gamepad/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Gamepad
{
	///<include file='Utils/Docs/GamepadHand/GamepadHand.generated.xml' path='docs/GamepadHand/*'/>
	public GamepadHand Hand { get; }
	///<include file='Utils/Docs/GamepadHapticActuators/GamepadHapticActuators.generated.xml' path='docs/GamepadHapticActuators/*'/>
	public GamepadHapticActuator[] HapticActuators { get; }
	///<include file='Utils/Docs/GamepadPose/GamepadPose.generated.xml' path='docs/GamepadPose/*'/>
	public GamepadPose? Pose { get; }
		public GamepadTouch[]? TouchEvents { get; }
}

///<include file='Utils/Docs/GamepadHapticActuator/GamepadHapticActuator.generated.xml' path='docs/GamepadHapticActuator/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GamepadHapticActuator
{
	///<include file='Utils/Docs/GamepadHapticActuatorPulse/GamepadHapticActuatorPulse.generated.xml' path='docs/GamepadHapticActuatorPulse/*'/>
	public Task<bool> Pulse(Number value, Number duration) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Gamepad/Gamepad.generated.xml' path='docs/Gamepad/*'/>
public partial class Gamepad
{
	///<include file='Utils/Docs/GamepadId/GamepadId.generated.xml' path='docs/GamepadId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/GamepadIndex/GamepadIndex.generated.xml' path='docs/GamepadIndex/*'/>
	public long Index { get; }
	///<include file='Utils/Docs/GamepadConnected/GamepadConnected.generated.xml' path='docs/GamepadConnected/*'/>
	public bool Connected { get; }
	///<include file='Utils/Docs/GamepadTimestamp/GamepadTimestamp.generated.xml' path='docs/GamepadTimestamp/*'/>
	public DOMHighResTimeStamp Timestamp { get; }
	///<include file='Utils/Docs/GamepadMapping/GamepadMapping.generated.xml' path='docs/GamepadMapping/*'/>
	public GamepadMappingType Mapping { get; }
	///<include file='Utils/Docs/GamepadAxes/GamepadAxes.generated.xml' path='docs/GamepadAxes/*'/>
	public Number[] Axes { get; }
	///<include file='Utils/Docs/GamepadButtons/GamepadButtons.generated.xml' path='docs/GamepadButtons/*'/>
	public GamepadButton[] Buttons { get; }
	///<include file='Utils/Docs/GamepadVibrationActuator/GamepadVibrationActuator.generated.xml' path='docs/GamepadVibrationActuator/*'/>
	public GamepadHapticActuator VibrationActuator { get; }
}

///<include file='Utils/Docs/GamepadButton/GamepadButton.generated.xml' path='docs/GamepadButton/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GamepadButton
{
	///<include file='Utils/Docs/GamepadButtonPressed/GamepadButtonPressed.generated.xml' path='docs/GamepadButtonPressed/*'/>
	public bool Pressed { get; }
	///<include file='Utils/Docs/GamepadButtonTouched/GamepadButtonTouched.generated.xml' path='docs/GamepadButtonTouched/*'/>
	public bool Touched { get; }
	///<include file='Utils/Docs/GamepadButtonValue/GamepadButtonValue.generated.xml' path='docs/GamepadButtonValue/*'/>
	public Number Value { get; }
}

///<include file='Utils/Docs/GamepadHapticActuator/GamepadHapticActuator.generated.xml' path='docs/GamepadHapticActuator/*'/>
public partial class GamepadHapticActuator
{
	///<include file='Utils/Docs/GamepadHapticActuatorEffects/GamepadHapticActuatorEffects.generated.xml' path='docs/GamepadHapticActuatorEffects/*'/>
	public GamepadHapticEffectType[] Effects { get; }
	///<include file='Utils/Docs/GamepadHapticActuatorPlayEffect/GamepadHapticActuatorPlayEffect.generated.xml' path='docs/GamepadHapticActuatorPlayEffect/*'/>
	public Task<GamepadHapticsResult> PlayEffect(GamepadHapticEffectType type, GamepadEffectParameters params_) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GamepadHapticActuatorReset/GamepadHapticActuatorReset.generated.xml' path='docs/GamepadHapticActuatorReset/*'/>
	public Task<GamepadHapticsResult> Reset() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GamepadEffectParameters
{
		public ulong Duration;
		public ulong StartDelay;
		public Number StrongMagnitude;
		public Number WeakMagnitude;
		public Number LeftTrigger;
		public Number RightTrigger;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorGetGamepads/NavigatorGetGamepads.generated.xml' path='docs/NavigatorGetGamepads/*'/>
	public List<Gamepad?> GetGamepads() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/GamepadEvent/GamepadEvent.generated.xml' path='docs/GamepadEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GamepadEvent : Event
{
	///<include file='Utils/Docs/GamepadEventGamepadEvent/GamepadEventGamepadEvent.generated.xml' path='docs/GamepadEventGamepadEvent/*'/>
	public GamepadEvent(DOMString type, GamepadEventInit eventInitDict) { }
	///<include file='Utils/Docs/GamepadEventGamepad/GamepadEventGamepad.generated.xml' path='docs/GamepadEventGamepad/*'/>
	public Gamepad Gamepad { get; }
	public GamepadEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GamepadEventInit : EventInit
{
		public required Gamepad Gamepad;
}

///<include file='Utils/Docs/Sensor/Sensor.generated.xml' path='docs/Sensor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Sensor : EventTarget
{
	///<include file='Utils/Docs/SensorActivated/SensorActivated.generated.xml' path='docs/SensorActivated/*'/>
	public bool Activated { get; }
	///<include file='Utils/Docs/SensorHasReading/SensorHasReading.generated.xml' path='docs/SensorHasReading/*'/>
	public bool HasReading { get; }
	///<include file='Utils/Docs/SensorTimestamp/SensorTimestamp.generated.xml' path='docs/SensorTimestamp/*'/>
	public DOMHighResTimeStamp? Timestamp { get; }
	///<include file='Utils/Docs/SensorStart/SensorStart.generated.xml' path='docs/SensorStart/*'/>
	public Undefined Start() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SensorStop/SensorStop.generated.xml' path='docs/SensorStop/*'/>
	public Undefined Stop() { throw new System.NotImplementedException(); }
		public EventHandler Onreading { get; set; }
		public EventHandler Onactivate { get; set; }
		public EventHandler Onerror { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SensorOptions
{
		public Number Frequency;
}

///<include file='Utils/Docs/SensorErrorEvent/SensorErrorEvent.generated.xml' path='docs/SensorErrorEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SensorErrorEvent : Event
{
	///<include file='Utils/Docs/SensorErrorEventSensorErrorEvent/SensorErrorEventSensorErrorEvent.generated.xml' path='docs/SensorErrorEventSensorErrorEvent/*'/>
	public SensorErrorEvent(DOMString type, SensorErrorEventInit errorEventInitDict) { }
	///<include file='Utils/Docs/SensorErrorEventError/SensorErrorEventError.generated.xml' path='docs/SensorErrorEventError/*'/>
	public DOMException Error { get; }
	public SensorErrorEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SensorErrorEventInit : EventInit
{
		public required DOMException Error;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GeolocationSensor : Sensor
{
		public GeolocationSensor(GeolocationSensorOptions options) { }
		public static Task<GeolocationSensorReading> Read(ReadOptions readOptions) { throw new System.NotImplementedException(); }
		public double? Latitude { get; }
		public double? Longitude { get; }
		public double? Altitude { get; }
		public double? Accuracy { get; }
		public double? AltitudeAccuracy { get; }
		public double? Heading { get; }
		public double? Speed { get; }
	public GeolocationSensor() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GeolocationSensorOptions : SensorOptions
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadOptions : GeolocationSensorOptions
{
		public AbortSignal? Signal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GeolocationSensorReading
{
		public DOMHighResTimeStamp? Timestamp;
		public Number? Latitude;
		public Number? Longitude;
		public Number? Altitude;
		public Number? Accuracy;
		public Number? AltitudeAccuracy;
		public Number? Heading;
		public Number? Speed;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorGeolocation/NavigatorGeolocation.generated.xml' path='docs/NavigatorGeolocation/*'/>
	public Geolocation Geolocation { get; }
}

///<include file='Utils/Docs/Geolocation/Geolocation.generated.xml' path='docs/Geolocation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Geolocation
{
	///<include file='Utils/Docs/GeolocationGetCurrentPosition/GeolocationGetCurrentPosition.generated.xml' path='docs/GeolocationGetCurrentPosition/*'/>
	public Undefined GetCurrentPosition(PositionCallback successCallback, PositionErrorCallback? errorCallback, PositionOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GeolocationWatchPosition/GeolocationWatchPosition.generated.xml' path='docs/GeolocationWatchPosition/*'/>
	public long WatchPosition(PositionCallback successCallback, PositionErrorCallback? errorCallback, PositionOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GeolocationClearWatch/GeolocationClearWatch.generated.xml' path='docs/GeolocationClearWatch/*'/>
	public Undefined ClearWatch(long watchId) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PositionOptions
{
		public bool EnableHighAccuracy;
		public ulong Timeout;
		public ulong MaximumAge;
}

///<include file='Utils/Docs/GeolocationPosition/GeolocationPosition.generated.xml' path='docs/GeolocationPosition/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GeolocationPosition
{
	///<include file='Utils/Docs/GeolocationPositionCoords/GeolocationPositionCoords.generated.xml' path='docs/GeolocationPositionCoords/*'/>
	public GeolocationCoordinates Coords { get; }
	///<include file='Utils/Docs/GeolocationPositionTimestamp/GeolocationPositionTimestamp.generated.xml' path='docs/GeolocationPositionTimestamp/*'/>
	public EpochTimeStamp Timestamp { get; }
	///<include file='Utils/Docs/GeolocationPositionToJSON/GeolocationPositionToJSON.generated.xml' path='docs/GeolocationPositionToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/GeolocationCoordinates/GeolocationCoordinates.generated.xml' path='docs/GeolocationCoordinates/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GeolocationCoordinates
{
	///<include file='Utils/Docs/GeolocationCoordinatesAccuracy/GeolocationCoordinatesAccuracy.generated.xml' path='docs/GeolocationCoordinatesAccuracy/*'/>
	public Number Accuracy { get; }
	///<include file='Utils/Docs/GeolocationCoordinatesLatitude/GeolocationCoordinatesLatitude.generated.xml' path='docs/GeolocationCoordinatesLatitude/*'/>
	public Number Latitude { get; }
	///<include file='Utils/Docs/GeolocationCoordinatesLongitude/GeolocationCoordinatesLongitude.generated.xml' path='docs/GeolocationCoordinatesLongitude/*'/>
	public Number Longitude { get; }
	///<include file='Utils/Docs/GeolocationCoordinatesAltitude/GeolocationCoordinatesAltitude.generated.xml' path='docs/GeolocationCoordinatesAltitude/*'/>
	public Number? Altitude { get; }
	///<include file='Utils/Docs/GeolocationCoordinatesAltitudeAccuracy/GeolocationCoordinatesAltitudeAccuracy.generated.xml' path='docs/GeolocationCoordinatesAltitudeAccuracy/*'/>
	public Number? AltitudeAccuracy { get; }
	///<include file='Utils/Docs/GeolocationCoordinatesHeading/GeolocationCoordinatesHeading.generated.xml' path='docs/GeolocationCoordinatesHeading/*'/>
	public Number? Heading { get; }
	///<include file='Utils/Docs/GeolocationCoordinatesSpeed/GeolocationCoordinatesSpeed.generated.xml' path='docs/GeolocationCoordinatesSpeed/*'/>
	public Number? Speed { get; }
	///<include file='Utils/Docs/GeolocationCoordinatesToJSON/GeolocationCoordinatesToJSON.generated.xml' path='docs/GeolocationCoordinatesToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/GeolocationPositionError/GeolocationPositionError.generated.xml' path='docs/GeolocationPositionError/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GeolocationPositionError
{
		public const ushort PERMISSION_DENIED = 1;
		public const ushort POSITION_UNAVAILABLE = 2;
		public const ushort TIMEOUT = 3;
	///<include file='Utils/Docs/GeolocationPositionErrorCode/GeolocationPositionErrorCode.generated.xml' path='docs/GeolocationPositionErrorCode/*'/>
	public ushort Code { get; }
	///<include file='Utils/Docs/GeolocationPositionErrorMessage/GeolocationPositionErrorMessage.generated.xml' path='docs/GeolocationPositionErrorMessage/*'/>
	public DOMString Message { get; }
}

///<include file='Utils/Docs/DOMPointReadOnly/DOMPointReadOnly.generated.xml' path='docs/DOMPointReadOnly/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMPointReadOnly
{
	///<include file='Utils/Docs/DOMPointReadOnlyDOMPointReadOnly/DOMPointReadOnlyDOMPointReadOnly.generated.xml' path='docs/DOMPointReadOnlyDOMPointReadOnly/*'/>
	public DOMPointReadOnly(double x, double y, double z, double w) { }
	///<include file='Utils/Docs/DOMPointReadOnlyFromPoint/DOMPointReadOnlyFromPoint.generated.xml' path='docs/DOMPointReadOnlyFromPoint/*'/>
	public static DOMPointReadOnly FromPoint(DOMPointInit other) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMPointReadOnlyX/DOMPointReadOnlyX.generated.xml' path='docs/DOMPointReadOnlyX/*'/>
	public double X { get; }
	///<include file='Utils/Docs/DOMPointReadOnlyY/DOMPointReadOnlyY.generated.xml' path='docs/DOMPointReadOnlyY/*'/>
	public double Y { get; }
	///<include file='Utils/Docs/DOMPointReadOnlyZ/DOMPointReadOnlyZ.generated.xml' path='docs/DOMPointReadOnlyZ/*'/>
	public double Z { get; }
	///<include file='Utils/Docs/DOMPointReadOnlyW/DOMPointReadOnlyW.generated.xml' path='docs/DOMPointReadOnlyW/*'/>
	public double W { get; }
	///<include file='Utils/Docs/DOMPointReadOnlyMatrixTransform/DOMPointReadOnlyMatrixTransform.generated.xml' path='docs/DOMPointReadOnlyMatrixTransform/*'/>
	public DOMPoint MatrixTransform(DOMMatrixInit matrix) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMPointReadOnlyToJSON/DOMPointReadOnlyToJSON.generated.xml' path='docs/DOMPointReadOnlyToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
	public DOMPointReadOnly() { }
}

///<include file='Utils/Docs/DOMPoint/DOMPoint.generated.xml' path='docs/DOMPoint/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMPoint : DOMPointReadOnly
{
	///<include file='Utils/Docs/DOMPointDOMPoint/DOMPointDOMPoint.generated.xml' path='docs/DOMPointDOMPoint/*'/>
	public DOMPoint(double x, double y, double z, double w) { }
	///<include file='Utils/Docs/DOMPointFromPoint/DOMPointFromPoint.generated.xml' path='docs/DOMPointFromPoint/*'/>
	public static DOMPoint FromPoint(DOMPointInit other) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMPointX/DOMPointX.generated.xml' path='docs/DOMPointX/*'/>
	public double X { get; set; }
	///<include file='Utils/Docs/DOMPointY/DOMPointY.generated.xml' path='docs/DOMPointY/*'/>
	public double Y { get; set; }
	///<include file='Utils/Docs/DOMPointZ/DOMPointZ.generated.xml' path='docs/DOMPointZ/*'/>
	public double Z { get; set; }
	///<include file='Utils/Docs/DOMPointW/DOMPointW.generated.xml' path='docs/DOMPointW/*'/>
	public double W { get; set; }
	public DOMPoint() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMPointInit
{
		public double X;
		public double Y;
		public double Z;
		public double W;
}

///<include file='Utils/Docs/DOMRectReadOnly/DOMRectReadOnly.generated.xml' path='docs/DOMRectReadOnly/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMRectReadOnly
{
	///<include file='Utils/Docs/DOMRectReadOnlyDOMRectReadOnly/DOMRectReadOnlyDOMRectReadOnly.generated.xml' path='docs/DOMRectReadOnlyDOMRectReadOnly/*'/>
	public DOMRectReadOnly(double x, double y, double width, double height) { }
	///<include file='Utils/Docs/DOMRectReadOnlyFromRect/DOMRectReadOnlyFromRect.generated.xml' path='docs/DOMRectReadOnlyFromRect/*'/>
	public static DOMRectReadOnly FromRect(DOMRectInit other) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMRectReadOnlyX/DOMRectReadOnlyX.generated.xml' path='docs/DOMRectReadOnlyX/*'/>
	public double X { get; }
	///<include file='Utils/Docs/DOMRectReadOnlyY/DOMRectReadOnlyY.generated.xml' path='docs/DOMRectReadOnlyY/*'/>
	public double Y { get; }
	///<include file='Utils/Docs/DOMRectReadOnlyWidth/DOMRectReadOnlyWidth.generated.xml' path='docs/DOMRectReadOnlyWidth/*'/>
	public double Width { get; }
	///<include file='Utils/Docs/DOMRectReadOnlyHeight/DOMRectReadOnlyHeight.generated.xml' path='docs/DOMRectReadOnlyHeight/*'/>
	public double Height { get; }
	///<include file='Utils/Docs/DOMRectReadOnlyTop/DOMRectReadOnlyTop.generated.xml' path='docs/DOMRectReadOnlyTop/*'/>
	public double Top { get; }
	///<include file='Utils/Docs/DOMRectReadOnlyRight/DOMRectReadOnlyRight.generated.xml' path='docs/DOMRectReadOnlyRight/*'/>
	public double Right { get; }
	///<include file='Utils/Docs/DOMRectReadOnlyBottom/DOMRectReadOnlyBottom.generated.xml' path='docs/DOMRectReadOnlyBottom/*'/>
	public double Bottom { get; }
	///<include file='Utils/Docs/DOMRectReadOnlyLeft/DOMRectReadOnlyLeft.generated.xml' path='docs/DOMRectReadOnlyLeft/*'/>
	public double Left { get; }
	///<include file='Utils/Docs/DOMRectReadOnlyToJSON/DOMRectReadOnlyToJSON.generated.xml' path='docs/DOMRectReadOnlyToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
	public DOMRectReadOnly() { }
}

///<include file='Utils/Docs/DOMRect/DOMRect.generated.xml' path='docs/DOMRect/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMRect : DOMRectReadOnly
{
	///<include file='Utils/Docs/DOMRectDOMRect/DOMRectDOMRect.generated.xml' path='docs/DOMRectDOMRect/*'/>
	public DOMRect(double x, double y, double width, double height) { }
	///<include file='Utils/Docs/DOMRectFromRect/DOMRectFromRect.generated.xml' path='docs/DOMRectFromRect/*'/>
	public static DOMRect FromRect(DOMRectInit other) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMRectX/DOMRectX.generated.xml' path='docs/DOMRectX/*'/>
	public double X { get; set; }
	///<include file='Utils/Docs/DOMRectY/DOMRectY.generated.xml' path='docs/DOMRectY/*'/>
	public double Y { get; set; }
	///<include file='Utils/Docs/DOMRectWidth/DOMRectWidth.generated.xml' path='docs/DOMRectWidth/*'/>
	public double Width { get; set; }
	///<include file='Utils/Docs/DOMRectHeight/DOMRectHeight.generated.xml' path='docs/DOMRectHeight/*'/>
	public double Height { get; set; }
	public DOMRect() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMRectInit
{
		public double X;
		public double Y;
		public double Width;
		public double Height;
}

///<include file='Utils/Docs/DOMRectList/DOMRectList.generated.xml' path='docs/DOMRectList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMRectList
{
	///<include file='Utils/Docs/DOMRectListLength/DOMRectListLength.generated.xml' path='docs/DOMRectListLength/*'/>
	public ulong Length { get; }
	
}

///<include file='Utils/Docs/DOMQuad/DOMQuad.generated.xml' path='docs/DOMQuad/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMQuad
{
	///<include file='Utils/Docs/DOMQuadDOMQuad/DOMQuadDOMQuad.generated.xml' path='docs/DOMQuadDOMQuad/*'/>
	public DOMQuad(DOMPointInit p1, DOMPointInit p2, DOMPointInit p3, DOMPointInit p4) { }
		public static DOMQuad FromRect(DOMRectInit other) { throw new System.NotImplementedException(); }
		public static DOMQuad FromQuad(DOMQuadInit other) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMQuadP1/DOMQuadP1.generated.xml' path='docs/DOMQuadP1/*'/>
	public DOMPoint P1 { get; }
	///<include file='Utils/Docs/DOMQuadP2/DOMQuadP2.generated.xml' path='docs/DOMQuadP2/*'/>
	public DOMPoint P2 { get; }
	///<include file='Utils/Docs/DOMQuadP3/DOMQuadP3.generated.xml' path='docs/DOMQuadP3/*'/>
	public DOMPoint P3 { get; }
	///<include file='Utils/Docs/DOMQuadP4/DOMQuadP4.generated.xml' path='docs/DOMQuadP4/*'/>
	public DOMPoint P4 { get; }
	///<include file='Utils/Docs/DOMQuadGetBounds/DOMQuadGetBounds.generated.xml' path='docs/DOMQuadGetBounds/*'/>
	public DOMRect GetBounds() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMQuadToJSON/DOMQuadToJSON.generated.xml' path='docs/DOMQuadToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
	public DOMQuad() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMQuadInit
{
		public DOMPointInit P1;
		public DOMPointInit P2;
		public DOMPointInit P3;
		public DOMPointInit P4;
}

///<include file='Utils/Docs/DOMMatrixReadOnly/DOMMatrixReadOnly.generated.xml' path='docs/DOMMatrixReadOnly/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMMatrixReadOnly
{
	///<include file='Utils/Docs/DOMMatrixReadOnlyDOMMatrixReadOnly/DOMMatrixReadOnlyDOMMatrixReadOnly.generated.xml' path='docs/DOMMatrixReadOnlyDOMMatrixReadOnly/*'/>
	public DOMMatrixReadOnly(Union49 init) { }
		public static DOMMatrixReadOnly FromMatrix(DOMMatrixInit other) { throw new System.NotImplementedException(); }
		public static DOMMatrixReadOnly FromFloat32Array(System.Single array32) { throw new System.NotImplementedException(); }
		public static DOMMatrixReadOnly FromFloat64Array(System.Double array64) { throw new System.NotImplementedException(); }
		public double A { get; }
		public double B { get; }
		public double C { get; }
		public double D { get; }
		public double E { get; }
		public double F { get; }
		public double M11 { get; }
		public double M12 { get; }
		public double M13 { get; }
		public double M14 { get; }
		public double M21 { get; }
		public double M22 { get; }
		public double M23 { get; }
		public double M24 { get; }
		public double M31 { get; }
		public double M32 { get; }
		public double M33 { get; }
		public double M34 { get; }
		public double M41 { get; }
		public double M42 { get; }
		public double M43 { get; }
		public double M44 { get; }
		public bool Is2D { get; }
		public bool IsIdentity { get; }
	///<include file='Utils/Docs/DOMMatrixReadOnlyTranslate/DOMMatrixReadOnlyTranslate.generated.xml' path='docs/DOMMatrixReadOnlyTranslate/*'/>
	public DOMMatrix Translate(double tx, double ty, double tz) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixReadOnlyScale/DOMMatrixReadOnlyScale.generated.xml' path='docs/DOMMatrixReadOnlyScale/*'/>
	public DOMMatrix Scale(double scaleX, double scaleY, double scaleZ, double originX, double originY, double originZ) { throw new System.NotImplementedException(); }
		public DOMMatrix ScaleNonUniform(double scaleX, double scaleY) { throw new System.NotImplementedException(); }
		public DOMMatrix Scale3d(double scale, double originX, double originY, double originZ) { throw new System.NotImplementedException(); }
		public DOMMatrix Rotate(double rotX, double rotY, double rotZ) { throw new System.NotImplementedException(); }
		public DOMMatrix RotateFromVector(double x, double y) { throw new System.NotImplementedException(); }
		public DOMMatrix RotateAxisAngle(double x, double y, double z, double angle) { throw new System.NotImplementedException(); }
		public DOMMatrix SkewX(double sx) { throw new System.NotImplementedException(); }
		public DOMMatrix SkewY(double sy) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixReadOnlyMultiply/DOMMatrixReadOnlyMultiply.generated.xml' path='docs/DOMMatrixReadOnlyMultiply/*'/>
	public DOMMatrix Multiply(DOMMatrixInit other) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixReadOnlyFlipX/DOMMatrixReadOnlyFlipX.generated.xml' path='docs/DOMMatrixReadOnlyFlipX/*'/>
	public DOMMatrix FlipX() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixReadOnlyFlipY/DOMMatrixReadOnlyFlipY.generated.xml' path='docs/DOMMatrixReadOnlyFlipY/*'/>
	public DOMMatrix FlipY() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixReadOnlyInverse/DOMMatrixReadOnlyInverse.generated.xml' path='docs/DOMMatrixReadOnlyInverse/*'/>
	public DOMMatrix Inverse() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixReadOnlyTransformPoint/DOMMatrixReadOnlyTransformPoint.generated.xml' path='docs/DOMMatrixReadOnlyTransformPoint/*'/>
	public DOMPoint TransformPoint(DOMPointInit point) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixReadOnlyToFloat32Array/DOMMatrixReadOnlyToFloat32Array.generated.xml' path='docs/DOMMatrixReadOnlyToFloat32Array/*'/>
	public System.Single ToFloat32Array() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixReadOnlyToFloat64Array/DOMMatrixReadOnlyToFloat64Array.generated.xml' path='docs/DOMMatrixReadOnlyToFloat64Array/*'/>
	public System.Double ToFloat64Array() { throw new System.NotImplementedException(); }
	
	///<include file='Utils/Docs/DOMMatrixReadOnlyToJSON/DOMMatrixReadOnlyToJSON.generated.xml' path='docs/DOMMatrixReadOnlyToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
	public DOMMatrixReadOnly() { }
}

///<include file='Utils/Docs/DOMMatrix/DOMMatrix.generated.xml' path='docs/DOMMatrix/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMMatrix : DOMMatrixReadOnly
{
	///<include file='Utils/Docs/DOMMatrixDOMMatrix/DOMMatrixDOMMatrix.generated.xml' path='docs/DOMMatrixDOMMatrix/*'/>
	public DOMMatrix(Union50 init) { }
		public static DOMMatrix FromMatrix(DOMMatrixInit other) { throw new System.NotImplementedException(); }
		public static DOMMatrix FromFloat32Array(System.Single array32) { throw new System.NotImplementedException(); }
		public static DOMMatrix FromFloat64Array(System.Double array64) { throw new System.NotImplementedException(); }
		public double A { get; set; }
		public double B { get; set; }
		public double C { get; set; }
		public double D { get; set; }
		public double E { get; set; }
		public double F { get; set; }
		public double M11 { get; set; }
		public double M12 { get; set; }
		public double M13 { get; set; }
		public double M14 { get; set; }
		public double M21 { get; set; }
		public double M22 { get; set; }
		public double M23 { get; set; }
		public double M24 { get; set; }
		public double M31 { get; set; }
		public double M32 { get; set; }
		public double M33 { get; set; }
		public double M34 { get; set; }
		public double M41 { get; set; }
		public double M42 { get; set; }
		public double M43 { get; set; }
		public double M44 { get; set; }
	///<include file='Utils/Docs/DOMMatrixMultiplySelf/DOMMatrixMultiplySelf.generated.xml' path='docs/DOMMatrixMultiplySelf/*'/>
	public DOMMatrix MultiplySelf(DOMMatrixInit other) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixPreMultiplySelf/DOMMatrixPreMultiplySelf.generated.xml' path='docs/DOMMatrixPreMultiplySelf/*'/>
	public DOMMatrix PreMultiplySelf(DOMMatrixInit other) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixTranslateSelf/DOMMatrixTranslateSelf.generated.xml' path='docs/DOMMatrixTranslateSelf/*'/>
	public DOMMatrix TranslateSelf(double tx, double ty, double tz) { throw new System.NotImplementedException(); }
		public DOMMatrix ScaleSelf(double scaleX, double scaleY, double scaleZ, double originX, double originY, double originZ) { throw new System.NotImplementedException(); }
		public DOMMatrix Scale3dSelf(double scale, double originX, double originY, double originZ) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixRotateSelf/DOMMatrixRotateSelf.generated.xml' path='docs/DOMMatrixRotateSelf/*'/>
	public DOMMatrix RotateSelf(double rotX, double rotY, double rotZ) { throw new System.NotImplementedException(); }
		public DOMMatrix RotateFromVectorSelf(double x, double y) { throw new System.NotImplementedException(); }
		public DOMMatrix RotateAxisAngleSelf(double x, double y, double z, double angle) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixSkewXSelf/DOMMatrixSkewXSelf.generated.xml' path='docs/DOMMatrixSkewXSelf/*'/>
	public DOMMatrix SkewXSelf(double sx) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixSkewYSelf/DOMMatrixSkewYSelf.generated.xml' path='docs/DOMMatrixSkewYSelf/*'/>
	public DOMMatrix SkewYSelf(double sy) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixInvertSelf/DOMMatrixInvertSelf.generated.xml' path='docs/DOMMatrixInvertSelf/*'/>
	public DOMMatrix InvertSelf() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DOMMatrixSetMatrixValue/DOMMatrixSetMatrixValue.generated.xml' path='docs/DOMMatrixSetMatrixValue/*'/>
	public DOMMatrix SetMatrixValue(DOMString transformList) { throw new System.NotImplementedException(); }
	public DOMMatrix() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMMatrix2DInit
{
		public double A;
		public double B;
		public double C;
		public double D;
		public double E;
		public double F;
		public double M11;
		public double M12;
		public double M21;
		public double M22;
		public double M41;
		public double M42;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMMatrixInit : DOMMatrix2DInit
{
		public double M13;
		public double M14;
		public double M23;
		public double M24;
		public double M31;
		public double M32;
		public double M33;
		public double M34;
		public double M43;
		public double M44;
		public bool Is2D;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RelatedApplication
{
		public required USVString Platform;
		public USVString Url;
		public DOMString Id;
		public USVString Version;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorGetInstalledRelatedApps/NavigatorGetInstalledRelatedApps.generated.xml' path='docs/NavigatorGetInstalledRelatedApps/*'/>
	public Task<List<RelatedApplication>> GetInstalledRelatedApps() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Gyroscope/Gyroscope.generated.xml' path='docs/Gyroscope/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Gyroscope : Sensor
{
	///<include file='Utils/Docs/GyroscopeGyroscope/GyroscopeGyroscope.generated.xml' path='docs/GyroscopeGyroscope/*'/>
	public Gyroscope(GyroscopeSensorOptions sensorOptions) { }
	///<include file='Utils/Docs/GyroscopeX/GyroscopeX.generated.xml' path='docs/GyroscopeX/*'/>
	public Number? X { get; }
	///<include file='Utils/Docs/GyroscopeY/GyroscopeY.generated.xml' path='docs/GyroscopeY/*'/>
	public Number? Y { get; }
	///<include file='Utils/Docs/GyroscopeZ/GyroscopeZ.generated.xml' path='docs/GyroscopeZ/*'/>
	public Number? Z { get; }
	public Gyroscope() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GyroscopeSensorOptions : SensorOptions
{
		public GyroscopeLocalCoordinateSystem ReferenceFrame;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public Task<HandwritingRecognizerQueryResult?> QueryHandwritingRecognizer(HandwritingModelConstraint constraint) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingModelConstraint
{
		public required List<DOMString> Languages;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingRecognizerQueryResult
{
		public bool TextAlternatives;
		public bool TextSegmentation;
		public HandwritingHintsQueryResult Hints;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingHintsQueryResult
{
		public List<HandwritingRecognitionType> RecognitionType;
		public List<HandwritingInputType> InputType;
		public bool TextContext;
		public bool Alternatives;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public Task<HandwritingRecognizer> CreateHandwritingRecognizer(HandwritingModelConstraint constraint) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingRecognizer
{
		public HandwritingDrawing StartDrawing(HandwritingHints hints) { throw new System.NotImplementedException(); }
		public Undefined Finish() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingHints
{
		public DOMString RecognitionType;
		public DOMString InputType;
		public DOMString TextContext;
		public ulong Alternatives;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingDrawing
{
		public Undefined AddStroke(HandwritingStroke stroke) { throw new System.NotImplementedException(); }
		public Undefined RemoveStroke(HandwritingStroke stroke) { throw new System.NotImplementedException(); }
		public Undefined Clear() { throw new System.NotImplementedException(); }
		public List<HandwritingStroke> GetStrokes() { throw new System.NotImplementedException(); }
		public Task<List<HandwritingPrediction>> GetPrediction() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingStroke
{
		public HandwritingStroke() { }
		public Undefined AddPoint(HandwritingPoint point) { throw new System.NotImplementedException(); }
		public List<HandwritingPoint> GetPoints() { throw new System.NotImplementedException(); }
		public Undefined Clear() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingPoint
{
		public required Number X;
		public required Number Y;
		public DOMHighResTimeStamp T;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingPrediction
{
		public required DOMString Text;
		public List<HandwritingSegment> SegmentationResult;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingSegment
{
		public required DOMString Grapheme;
		public required ulong BeginIndex;
		public required ulong EndIndex;
		public required List<HandwritingDrawingSegment> DrawingSegments;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HandwritingDrawingSegment
{
		public required ulong StrokeIndex;
		public required ulong BeginPointIndex;
		public required ulong EndPointIndex;
}



///<include file='Utils/Docs/Performance/Performance.generated.xml' path='docs/Performance/*'/>
public partial class Performance : EventTarget
{
	///<include file='Utils/Docs/PerformanceNow/PerformanceNow.generated.xml' path='docs/PerformanceNow/*'/>
	public DOMHighResTimeStamp Now() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceTimeOrigin/PerformanceTimeOrigin.generated.xml' path='docs/PerformanceTimeOrigin/*'/>
	public DOMHighResTimeStamp TimeOrigin { get; }
	///<include file='Utils/Docs/PerformanceToJSON/PerformanceToJSON.generated.xml' path='docs/PerformanceToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLInputElement/HTMLInputElement.generated.xml' path='docs/HTMLInputElement/*'/>
public partial class HTMLInputElement
{
	///<include file='Utils/Docs/HTMLInputElementCapture/HTMLInputElementCapture.generated.xml' path='docs/HTMLInputElementCapture/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Capture { get; set; }
}

///<include file='Utils/Docs/HTMLAllCollection/HTMLAllCollection.generated.xml' path='docs/HTMLAllCollection/*'/>
[To(ToAttribute.Default)]
public partial class HTMLAllCollection
{
	///<include file='Utils/Docs/HTMLAllCollectionLength/HTMLAllCollectionLength.generated.xml' path='docs/HTMLAllCollectionLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	
	
	///<include file='Utils/Docs/HTMLAllCollectionItem/HTMLAllCollectionItem.generated.xml' path='docs/HTMLAllCollectionItem/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Union52? Item(DOMString nameOrIndex) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLFormControlsCollection/HTMLFormControlsCollection.generated.xml' path='docs/HTMLFormControlsCollection/*'/>
[To(ToAttribute.Default)]
public partial class HTMLFormControlsCollection : HTMLCollection
{
	
}

///<include file='Utils/Docs/RadioNodeList/RadioNodeList.generated.xml' path='docs/RadioNodeList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RadioNodeList : NodeList
{
	///<include file='Utils/Docs/RadioNodeListValue/RadioNodeListValue.generated.xml' path='docs/RadioNodeListValue/*'/>
	public DOMString Value { get; set; }
}

///<include file='Utils/Docs/HTMLOptionsCollection/HTMLOptionsCollection.generated.xml' path='docs/HTMLOptionsCollection/*'/>
[To(ToAttribute.Default)]
public partial class HTMLOptionsCollection : HTMLCollection
{
	///<include file='Utils/Docs/HTMLOptionsCollectionLength/HTMLOptionsCollectionLength.generated.xml' path='docs/HTMLOptionsCollectionLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; set; }
	
	///<include file='Utils/Docs/HTMLOptionsCollectionAdd/HTMLOptionsCollectionAdd.generated.xml' path='docs/HTMLOptionsCollectionAdd/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Add(Union54 element, Union55? before) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLOptionsCollectionRemove/HTMLOptionsCollectionRemove.generated.xml' path='docs/HTMLOptionsCollectionRemove/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Remove(long index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLOptionsCollectionSelectedIndex/HTMLOptionsCollectionSelectedIndex.generated.xml' path='docs/HTMLOptionsCollectionSelectedIndex/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long SelectedIndex { get; set; }
}

///<include file='Utils/Docs/DOMStringList/DOMStringList.generated.xml' path='docs/DOMStringList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMStringList
{
	///<include file='Utils/Docs/DOMStringListLength/DOMStringListLength.generated.xml' path='docs/DOMStringListLength/*'/>
	public ulong Length { get; }
	
	///<include file='Utils/Docs/DOMStringListContains/DOMStringListContains.generated.xml' path='docs/DOMStringListContains/*'/>
	public bool Contains(DOMString string_) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentParseHTMLUnsafe/DocumentParseHTMLUnsafe.generated.xml' path='docs/DocumentParseHTMLUnsafe/*'/>
	public static Document ParseHTMLUnsafe(Union57 html) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentLocation/DocumentLocation.generated.xml' path='docs/DocumentLocation/*'/>
	public Location? Location { get; }
	///<include file='Utils/Docs/DocumentDomain/DocumentDomain.generated.xml' path='docs/DocumentDomain/*'/>
	public USVString Domain { get; set; }
	///<include file='Utils/Docs/DocumentReferrer/DocumentReferrer.generated.xml' path='docs/DocumentReferrer/*'/>
	public USVString Referrer { get; }
	///<include file='Utils/Docs/DocumentCookie/DocumentCookie.generated.xml' path='docs/DocumentCookie/*'/>
	public USVString Cookie { get; set; }
	///<include file='Utils/Docs/DocumentLastModified/DocumentLastModified.generated.xml' path='docs/DocumentLastModified/*'/>
	public DOMString LastModified { get; }
	///<include file='Utils/Docs/DocumentReadyState/DocumentReadyState.generated.xml' path='docs/DocumentReadyState/*'/>
	public DocumentReadyState ReadyState { get; }
	
	///<include file='Utils/Docs/DocumentTitle/DocumentTitle.generated.xml' path='docs/DocumentTitle/*'/>
	public DOMString Title { get; set; }
	///<include file='Utils/Docs/DocumentDir/DocumentDir.generated.xml' path='docs/DocumentDir/*'/>
	public DOMString Dir { get; set; }
	///<include file='Utils/Docs/DocumentBody/DocumentBody.generated.xml' path='docs/DocumentBody/*'/>
	public HTMLElement? Body { get; set; }
	///<include file='Utils/Docs/DocumentHead/DocumentHead.generated.xml' path='docs/DocumentHead/*'/>
	public HTMLHeadElement? Head { get; }
	///<include file='Utils/Docs/DocumentImages/DocumentImages.generated.xml' path='docs/DocumentImages/*'/>
	public HTMLCollection Images { get; }
	///<include file='Utils/Docs/DocumentEmbeds/DocumentEmbeds.generated.xml' path='docs/DocumentEmbeds/*'/>
	public HTMLCollection Embeds { get; }
	///<include file='Utils/Docs/DocumentPlugins/DocumentPlugins.generated.xml' path='docs/DocumentPlugins/*'/>
	public HTMLCollection Plugins { get; }
	///<include file='Utils/Docs/DocumentLinks/DocumentLinks.generated.xml' path='docs/DocumentLinks/*'/>
	public HTMLCollection Links { get; }
	///<include file='Utils/Docs/DocumentForms/DocumentForms.generated.xml' path='docs/DocumentForms/*'/>
	public HTMLCollection Forms { get; }
	///<include file='Utils/Docs/DocumentScripts/DocumentScripts.generated.xml' path='docs/DocumentScripts/*'/>
	public HTMLCollection Scripts { get; }
	///<include file='Utils/Docs/DocumentGetElementsByName/DocumentGetElementsByName.generated.xml' path='docs/DocumentGetElementsByName/*'/>
	public NodeList GetElementsByName(DOMString elementName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentCurrentScript/DocumentCurrentScript.generated.xml' path='docs/DocumentCurrentScript/*'/>
	public HTMLOrSVGScriptElement? CurrentScript { get; }
	///<include file='Utils/Docs/DocumentOpen/DocumentOpen.generated.xml' path='docs/DocumentOpen/*'/>
	public Document Open(DOMString unused1, DOMString unused2) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentOpen/DocumentOpen.generated.xml' path='docs/DocumentOpen/*'/>
	public WindowProxy? Open(USVString url, DOMString name, DOMString features) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentClose/DocumentClose.generated.xml' path='docs/DocumentClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentWrite/DocumentWrite.generated.xml' path='docs/DocumentWrite/*'/>
	public Undefined Write(params Union58[] text) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentWriteln/DocumentWriteln.generated.xml' path='docs/DocumentWriteln/*'/>
	public Undefined Writeln(params Union59[] text) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentDefaultView/DocumentDefaultView.generated.xml' path='docs/DocumentDefaultView/*'/>
	public WindowProxy? DefaultView { get; }
	///<include file='Utils/Docs/DocumentHasFocus/DocumentHasFocus.generated.xml' path='docs/DocumentHasFocus/*'/>
	public bool HasFocus() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentDesignMode/DocumentDesignMode.generated.xml' path='docs/DocumentDesignMode/*'/>
	public DOMString DesignMode { get; set; }
	///<include file='Utils/Docs/DocumentExecCommand/DocumentExecCommand.generated.xml' path='docs/DocumentExecCommand/*'/>
	public bool ExecCommand(DOMString commandId, bool showUI, DOMString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentQueryCommandEnabled/DocumentQueryCommandEnabled.generated.xml' path='docs/DocumentQueryCommandEnabled/*'/>
	public bool QueryCommandEnabled(DOMString commandId) { throw new System.NotImplementedException(); }
		public bool QueryCommandIndeterm(DOMString commandId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentQueryCommandState/DocumentQueryCommandState.generated.xml' path='docs/DocumentQueryCommandState/*'/>
	public bool QueryCommandState(DOMString commandId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentQueryCommandSupported/DocumentQueryCommandSupported.generated.xml' path='docs/DocumentQueryCommandSupported/*'/>
	public bool QueryCommandSupported(DOMString commandId) { throw new System.NotImplementedException(); }
		public DOMString QueryCommandValue(DOMString commandId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentHidden/DocumentHidden.generated.xml' path='docs/DocumentHidden/*'/>
	public bool Hidden { get; }
	///<include file='Utils/Docs/DocumentVisibilityState/DocumentVisibilityState.generated.xml' path='docs/DocumentVisibilityState/*'/>
	public DocumentVisibilityState VisibilityState { get; }
		public EventHandler Onreadystatechange { get; set; }
		public EventHandler Onvisibilitychange { get; set; }
}


///<include file='Utils/Docs/HTMLElement/HTMLElement.generated.xml' path='docs/HTMLElement/*'/>
public partial class HTMLElement : Element
{
		public HTMLElement() { }
	///<include file='Utils/Docs/HTMLElementTitle/HTMLElementTitle.generated.xml' path='docs/HTMLElementTitle/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Title { get; set; }
	///<include file='Utils/Docs/HTMLElementLang/HTMLElementLang.generated.xml' path='docs/HTMLElementLang/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Lang { get; set; }
	///<include file='Utils/Docs/HTMLElementTranslate/HTMLElementTranslate.generated.xml' path='docs/HTMLElementTranslate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Translate { get; set; }
	///<include file='Utils/Docs/HTMLElementDir/HTMLElementDir.generated.xml' path='docs/HTMLElementDir/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Dir { get; set; }
	///<include file='Utils/Docs/HTMLElementHidden/HTMLElementHidden.generated.xml' path='docs/HTMLElementHidden/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Union60? Hidden { get; set; }
	///<include file='Utils/Docs/HTMLElementInert/HTMLElementInert.generated.xml' path='docs/HTMLElementInert/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Inert { get; set; }
	///<include file='Utils/Docs/HTMLElementClick/HTMLElementClick.generated.xml' path='docs/HTMLElementClick/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Click() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLElementAccessKey/HTMLElementAccessKey.generated.xml' path='docs/HTMLElementAccessKey/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString AccessKey { get; set; }
	///<include file='Utils/Docs/HTMLElementAccessKeyLabel/HTMLElementAccessKeyLabel.generated.xml' path='docs/HTMLElementAccessKeyLabel/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString AccessKeyLabel { get; }
	///<include file='Utils/Docs/HTMLElementDraggable/HTMLElementDraggable.generated.xml' path='docs/HTMLElementDraggable/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Draggable { get; set; }
	///<include file='Utils/Docs/HTMLElementSpellcheck/HTMLElementSpellcheck.generated.xml' path='docs/HTMLElementSpellcheck/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Spellcheck { get; set; }
	///<include file='Utils/Docs/HTMLElementWritingSuggestions/HTMLElementWritingSuggestions.generated.xml' path='docs/HTMLElementWritingSuggestions/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString WritingSuggestions { get; set; }
	///<include file='Utils/Docs/HTMLElementAutocapitalize/HTMLElementAutocapitalize.generated.xml' path='docs/HTMLElementAutocapitalize/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Autocapitalize { get; set; }
	///<include file='Utils/Docs/HTMLElementAutocorrect/HTMLElementAutocorrect.generated.xml' path='docs/HTMLElementAutocorrect/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Autocorrect { get; set; }
	///<include file='Utils/Docs/HTMLElementInnerText/HTMLElementInnerText.generated.xml' path='docs/HTMLElementInnerText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString InnerText { get; set; }
	///<include file='Utils/Docs/HTMLElementOuterText/HTMLElementOuterText.generated.xml' path='docs/HTMLElementOuterText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString OuterText { get; set; }
	///<include file='Utils/Docs/HTMLElementAttachInternals/HTMLElementAttachInternals.generated.xml' path='docs/HTMLElementAttachInternals/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ElementInternals AttachInternals() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLElementShowPopover/HTMLElementShowPopover.generated.xml' path='docs/HTMLElementShowPopover/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ShowPopover(ShowPopoverOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLElementHidePopover/HTMLElementHidePopover.generated.xml' path='docs/HTMLElementHidePopover/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined HidePopover() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLElementTogglePopover/HTMLElementTogglePopover.generated.xml' path='docs/HTMLElementTogglePopover/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool TogglePopover(Union61 options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLElementPopover/HTMLElementPopover.generated.xml' path='docs/HTMLElementPopover/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString? Popover { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ShowPopoverOptions
{
		public HTMLElement Source;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TogglePopoverOptions : ShowPopoverOptions
{
		public bool Force;
}




///<include file='Utils/Docs/HTMLUnknownElement/HTMLUnknownElement.generated.xml' path='docs/HTMLUnknownElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLUnknownElement : HTMLElement
{
}

///<include file='Utils/Docs/DOMStringMap/DOMStringMap.generated.xml' path='docs/DOMStringMap/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMStringMap
{
	
	
	
}

///<include file='Utils/Docs/HTMLHtmlElement/HTMLHtmlElement.generated.xml' path='docs/HTMLHtmlElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLHtmlElement : HTMLElement
{
		public HTMLHtmlElement() { }
}

///<include file='Utils/Docs/HTMLHeadElement/HTMLHeadElement.generated.xml' path='docs/HTMLHeadElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLHeadElement : HTMLElement
{
		public HTMLHeadElement() { }
}

///<include file='Utils/Docs/HTMLTitleElement/HTMLTitleElement.generated.xml' path='docs/HTMLTitleElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTitleElement : HTMLElement
{
		public HTMLTitleElement() { }
	///<include file='Utils/Docs/HTMLTitleElementText/HTMLTitleElementText.generated.xml' path='docs/HTMLTitleElementText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Text { get; set; }
}

///<include file='Utils/Docs/HTMLBaseElement/HTMLBaseElement.generated.xml' path='docs/HTMLBaseElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLBaseElement : HTMLElement
{
		public HTMLBaseElement() { }
	///<include file='Utils/Docs/HTMLBaseElementHref/HTMLBaseElementHref.generated.xml' path='docs/HTMLBaseElementHref/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Href { get; set; }
	///<include file='Utils/Docs/HTMLBaseElementTarget/HTMLBaseElementTarget.generated.xml' path='docs/HTMLBaseElementTarget/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Target { get; set; }
}

///<include file='Utils/Docs/HTMLLinkElement/HTMLLinkElement.generated.xml' path='docs/HTMLLinkElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLLinkElement : HTMLElement, LinkStyle
{
		public HTMLLinkElement() { }
	///<include file='Utils/Docs/HTMLLinkElementHref/HTMLLinkElementHref.generated.xml' path='docs/HTMLLinkElementHref/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Href { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementCrossOrigin/HTMLLinkElementCrossOrigin.generated.xml' path='docs/HTMLLinkElementCrossOrigin/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString? CrossOrigin { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementRel/HTMLLinkElementRel.generated.xml' path='docs/HTMLLinkElementRel/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Rel { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementAs/HTMLLinkElementAs.generated.xml' path='docs/HTMLLinkElementAs/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString As { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementRelList/HTMLLinkElementRelList.generated.xml' path='docs/HTMLLinkElementRelList/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList RelList { get; }
	///<include file='Utils/Docs/HTMLLinkElementMedia/HTMLLinkElementMedia.generated.xml' path='docs/HTMLLinkElementMedia/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Media { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementIntegrity/HTMLLinkElementIntegrity.generated.xml' path='docs/HTMLLinkElementIntegrity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Integrity { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementHreflang/HTMLLinkElementHreflang.generated.xml' path='docs/HTMLLinkElementHreflang/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Hreflang { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementType/HTMLLinkElementType.generated.xml' path='docs/HTMLLinkElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementSizes/HTMLLinkElementSizes.generated.xml' path='docs/HTMLLinkElementSizes/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList Sizes { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public USVString ImageSrcset { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ImageSizes { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementReferrerPolicy/HTMLLinkElementReferrerPolicy.generated.xml' path='docs/HTMLLinkElementReferrerPolicy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ReferrerPolicy { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementBlocking/HTMLLinkElementBlocking.generated.xml' path='docs/HTMLLinkElementBlocking/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList Blocking { get; }
	///<include file='Utils/Docs/HTMLLinkElementDisabled/HTMLLinkElementDisabled.generated.xml' path='docs/HTMLLinkElementDisabled/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Disabled { get; set; }
	///<include file='Utils/Docs/HTMLLinkElementFetchPriority/HTMLLinkElementFetchPriority.generated.xml' path='docs/HTMLLinkElementFetchPriority/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FetchPriority { get; set; }
}


///<include file='Utils/Docs/HTMLMetaElement/HTMLMetaElement.generated.xml' path='docs/HTMLMetaElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLMetaElement : HTMLElement
{
		public HTMLMetaElement() { }
	///<include file='Utils/Docs/HTMLMetaElementName/HTMLMetaElementName.generated.xml' path='docs/HTMLMetaElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLMetaElementHttpEquiv/HTMLMetaElementHttpEquiv.generated.xml' path='docs/HTMLMetaElementHttpEquiv/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString HttpEquiv { get; set; }
	///<include file='Utils/Docs/HTMLMetaElementContent/HTMLMetaElementContent.generated.xml' path='docs/HTMLMetaElementContent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Content { get; set; }
	///<include file='Utils/Docs/HTMLMetaElementMedia/HTMLMetaElementMedia.generated.xml' path='docs/HTMLMetaElementMedia/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Media { get; set; }
}

///<include file='Utils/Docs/HTMLStyleElement/HTMLStyleElement.generated.xml' path='docs/HTMLStyleElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLStyleElement : HTMLElement, LinkStyle
{
		public HTMLStyleElement() { }
	///<include file='Utils/Docs/HTMLStyleElementDisabled/HTMLStyleElementDisabled.generated.xml' path='docs/HTMLStyleElementDisabled/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Disabled { get; set; }
	///<include file='Utils/Docs/HTMLStyleElementMedia/HTMLStyleElementMedia.generated.xml' path='docs/HTMLStyleElementMedia/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Media { get; set; }
	///<include file='Utils/Docs/HTMLStyleElementBlocking/HTMLStyleElementBlocking.generated.xml' path='docs/HTMLStyleElementBlocking/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList Blocking { get; }
}


///<include file='Utils/Docs/HTMLBodyElement/HTMLBodyElement.generated.xml' path='docs/HTMLBodyElement/*'/>
public partial class HTMLBodyElement : HTMLElement
{
		public HTMLBodyElement() { }
}


///<include file='Utils/Docs/HTMLHeadingElement/HTMLHeadingElement.generated.xml' path='docs/HTMLHeadingElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLHeadingElement : HTMLElement
{
		public HTMLHeadingElement() { }
}

///<include file='Utils/Docs/HTMLParagraphElement/HTMLParagraphElement.generated.xml' path='docs/HTMLParagraphElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLParagraphElement : HTMLElement
{
		public HTMLParagraphElement() { }
}

///<include file='Utils/Docs/HTMLHRElement/HTMLHRElement.generated.xml' path='docs/HTMLHRElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLHRElement : HTMLElement
{
		public HTMLHRElement() { }
}

///<include file='Utils/Docs/HTMLPreElement/HTMLPreElement.generated.xml' path='docs/HTMLPreElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLPreElement : HTMLElement
{
		public HTMLPreElement() { }
}

///<include file='Utils/Docs/HTMLQuoteElement/HTMLQuoteElement.generated.xml' path='docs/HTMLQuoteElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLQuoteElement : HTMLElement
{
		public HTMLQuoteElement() { }
	///<include file='Utils/Docs/HTMLQuoteElementCite/HTMLQuoteElementCite.generated.xml' path='docs/HTMLQuoteElementCite/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Cite { get; set; }
}

///<include file='Utils/Docs/HTMLOListElement/HTMLOListElement.generated.xml' path='docs/HTMLOListElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLOListElement : HTMLElement
{
		public HTMLOListElement() { }
	///<include file='Utils/Docs/HTMLOListElementReversed/HTMLOListElementReversed.generated.xml' path='docs/HTMLOListElementReversed/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Reversed { get; set; }
	///<include file='Utils/Docs/HTMLOListElementStart/HTMLOListElementStart.generated.xml' path='docs/HTMLOListElementStart/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long Start { get; set; }
	///<include file='Utils/Docs/HTMLOListElementType/HTMLOListElementType.generated.xml' path='docs/HTMLOListElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
}

///<include file='Utils/Docs/HTMLUListElement/HTMLUListElement.generated.xml' path='docs/HTMLUListElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLUListElement : HTMLElement
{
		public HTMLUListElement() { }
}

///<include file='Utils/Docs/HTMLMenuElement/HTMLMenuElement.generated.xml' path='docs/HTMLMenuElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLMenuElement : HTMLElement
{
		public HTMLMenuElement() { }
}

///<include file='Utils/Docs/HTMLLIElement/HTMLLIElement.generated.xml' path='docs/HTMLLIElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLLIElement : HTMLElement
{
		public HTMLLIElement() { }
	///<include file='Utils/Docs/HTMLLIElementValue/HTMLLIElementValue.generated.xml' path='docs/HTMLLIElementValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long Value { get; set; }
}

///<include file='Utils/Docs/HTMLDListElement/HTMLDListElement.generated.xml' path='docs/HTMLDListElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLDListElement : HTMLElement
{
		public HTMLDListElement() { }
}

///<include file='Utils/Docs/HTMLDivElement/HTMLDivElement.generated.xml' path='docs/HTMLDivElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLDivElement : HTMLElement
{
		public HTMLDivElement() { }
}

///<include file='Utils/Docs/HTMLAnchorElement/HTMLAnchorElement.generated.xml' path='docs/HTMLAnchorElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLAnchorElement : HTMLElement, HTMLAttributionSrcElementUtils, HTMLHyperlinkElementUtils
{
		public HTMLAnchorElement() { }
	///<include file='Utils/Docs/HTMLAnchorElementTarget/HTMLAnchorElementTarget.generated.xml' path='docs/HTMLAnchorElementTarget/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Target { get; set; }
	///<include file='Utils/Docs/HTMLAnchorElementDownload/HTMLAnchorElementDownload.generated.xml' path='docs/HTMLAnchorElementDownload/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Download { get; set; }
	///<include file='Utils/Docs/HTMLAnchorElementPing/HTMLAnchorElementPing.generated.xml' path='docs/HTMLAnchorElementPing/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Ping { get; set; }
	///<include file='Utils/Docs/HTMLAnchorElementRel/HTMLAnchorElementRel.generated.xml' path='docs/HTMLAnchorElementRel/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Rel { get; set; }
	///<include file='Utils/Docs/HTMLAnchorElementRelList/HTMLAnchorElementRelList.generated.xml' path='docs/HTMLAnchorElementRelList/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList RelList { get; }
	///<include file='Utils/Docs/HTMLAnchorElementHreflang/HTMLAnchorElementHreflang.generated.xml' path='docs/HTMLAnchorElementHreflang/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Hreflang { get; set; }
	///<include file='Utils/Docs/HTMLAnchorElementType/HTMLAnchorElementType.generated.xml' path='docs/HTMLAnchorElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
	///<include file='Utils/Docs/HTMLAnchorElementText/HTMLAnchorElementText.generated.xml' path='docs/HTMLAnchorElementText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Text { get; set; }
	///<include file='Utils/Docs/HTMLAnchorElementReferrerPolicy/HTMLAnchorElementReferrerPolicy.generated.xml' path='docs/HTMLAnchorElementReferrerPolicy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ReferrerPolicy { get; set; }
}


///<include file='Utils/Docs/HTMLDataElement/HTMLDataElement.generated.xml' path='docs/HTMLDataElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLDataElement : HTMLElement
{
		public HTMLDataElement() { }
	///<include file='Utils/Docs/HTMLDataElementValue/HTMLDataElementValue.generated.xml' path='docs/HTMLDataElementValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Value { get; set; }
}

///<include file='Utils/Docs/HTMLTimeElement/HTMLTimeElement.generated.xml' path='docs/HTMLTimeElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTimeElement : HTMLElement
{
		public HTMLTimeElement() { }
	///<include file='Utils/Docs/HTMLTimeElementDateTime/HTMLTimeElementDateTime.generated.xml' path='docs/HTMLTimeElementDateTime/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString DateTime { get; set; }
}

///<include file='Utils/Docs/HTMLSpanElement/HTMLSpanElement.generated.xml' path='docs/HTMLSpanElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLSpanElement : HTMLElement
{
		public HTMLSpanElement() { }
}

///<include file='Utils/Docs/HTMLBRElement/HTMLBRElement.generated.xml' path='docs/HTMLBRElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLBRElement : HTMLElement
{
		public HTMLBRElement() { }
}

///<include file='Utils/Docs/HTMLModElement/HTMLModElement.generated.xml' path='docs/HTMLModElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLModElement : HTMLElement
{
		public HTMLModElement() { }
	///<include file='Utils/Docs/HTMLModElementCite/HTMLModElementCite.generated.xml' path='docs/HTMLModElementCite/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Cite { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString DateTime { get; set; }
}

///<include file='Utils/Docs/HTMLPictureElement/HTMLPictureElement.generated.xml' path='docs/HTMLPictureElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLPictureElement : HTMLElement
{
		public HTMLPictureElement() { }
}

///<include file='Utils/Docs/HTMLSourceElement/HTMLSourceElement.generated.xml' path='docs/HTMLSourceElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLSourceElement : HTMLElement
{
		public HTMLSourceElement() { }
	///<include file='Utils/Docs/HTMLSourceElementSrc/HTMLSourceElementSrc.generated.xml' path='docs/HTMLSourceElementSrc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Src { get; set; }
	///<include file='Utils/Docs/HTMLSourceElementType/HTMLSourceElementType.generated.xml' path='docs/HTMLSourceElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
	///<include file='Utils/Docs/HTMLSourceElementSrcset/HTMLSourceElementSrcset.generated.xml' path='docs/HTMLSourceElementSrcset/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Srcset { get; set; }
	///<include file='Utils/Docs/HTMLSourceElementSizes/HTMLSourceElementSizes.generated.xml' path='docs/HTMLSourceElementSizes/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Sizes { get; set; }
	///<include file='Utils/Docs/HTMLSourceElementMedia/HTMLSourceElementMedia.generated.xml' path='docs/HTMLSourceElementMedia/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Media { get; set; }
	///<include file='Utils/Docs/HTMLSourceElementWidth/HTMLSourceElementWidth.generated.xml' path='docs/HTMLSourceElementWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Width { get; set; }
	///<include file='Utils/Docs/HTMLSourceElementHeight/HTMLSourceElementHeight.generated.xml' path='docs/HTMLSourceElementHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Height { get; set; }
}

///<include file='Utils/Docs/HTMLImageElement/HTMLImageElement.generated.xml' path='docs/HTMLImageElement/*'/>
public partial class HTMLImageElement : HTMLElement
{
		public HTMLImageElement() { }
	///<include file='Utils/Docs/HTMLImageElementAlt/HTMLImageElementAlt.generated.xml' path='docs/HTMLImageElementAlt/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Alt { get; set; }
	///<include file='Utils/Docs/HTMLImageElementSrc/HTMLImageElementSrc.generated.xml' path='docs/HTMLImageElementSrc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Src { get; set; }
	///<include file='Utils/Docs/HTMLImageElementSrcset/HTMLImageElementSrcset.generated.xml' path='docs/HTMLImageElementSrcset/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Srcset { get; set; }
	///<include file='Utils/Docs/HTMLImageElementSizes/HTMLImageElementSizes.generated.xml' path='docs/HTMLImageElementSizes/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Sizes { get; set; }
	///<include file='Utils/Docs/HTMLImageElementCrossOrigin/HTMLImageElementCrossOrigin.generated.xml' path='docs/HTMLImageElementCrossOrigin/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString? CrossOrigin { get; set; }
	///<include file='Utils/Docs/HTMLImageElementUseMap/HTMLImageElementUseMap.generated.xml' path='docs/HTMLImageElementUseMap/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString UseMap { get; set; }
	///<include file='Utils/Docs/HTMLImageElementIsMap/HTMLImageElementIsMap.generated.xml' path='docs/HTMLImageElementIsMap/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool IsMap { get; set; }
	///<include file='Utils/Docs/HTMLImageElementWidth/HTMLImageElementWidth.generated.xml' path='docs/HTMLImageElementWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Width { get; set; }
	///<include file='Utils/Docs/HTMLImageElementHeight/HTMLImageElementHeight.generated.xml' path='docs/HTMLImageElementHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Height { get; set; }
	///<include file='Utils/Docs/HTMLImageElementNaturalWidth/HTMLImageElementNaturalWidth.generated.xml' path='docs/HTMLImageElementNaturalWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong NaturalWidth { get; }
	///<include file='Utils/Docs/HTMLImageElementNaturalHeight/HTMLImageElementNaturalHeight.generated.xml' path='docs/HTMLImageElementNaturalHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong NaturalHeight { get; }
	///<include file='Utils/Docs/HTMLImageElementComplete/HTMLImageElementComplete.generated.xml' path='docs/HTMLImageElementComplete/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Complete { get; }
	///<include file='Utils/Docs/HTMLImageElementCurrentSrc/HTMLImageElementCurrentSrc.generated.xml' path='docs/HTMLImageElementCurrentSrc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString CurrentSrc { get; }
	///<include file='Utils/Docs/HTMLImageElementReferrerPolicy/HTMLImageElementReferrerPolicy.generated.xml' path='docs/HTMLImageElementReferrerPolicy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ReferrerPolicy { get; set; }
	///<include file='Utils/Docs/HTMLImageElementDecoding/HTMLImageElementDecoding.generated.xml' path='docs/HTMLImageElementDecoding/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Decoding { get; set; }
	///<include file='Utils/Docs/HTMLImageElementLoading/HTMLImageElementLoading.generated.xml' path='docs/HTMLImageElementLoading/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Loading { get; set; }
	///<include file='Utils/Docs/HTMLImageElementFetchPriority/HTMLImageElementFetchPriority.generated.xml' path='docs/HTMLImageElementFetchPriority/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FetchPriority { get; set; }
	///<include file='Utils/Docs/HTMLImageElementDecode/HTMLImageElementDecode.generated.xml' path='docs/HTMLImageElementDecode/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<Undefined> Decode() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLIFrameElement/HTMLIFrameElement.generated.xml' path='docs/HTMLIFrameElement/*'/>
public partial class HTMLIFrameElement : HTMLElement
{
		public HTMLIFrameElement() { }
	///<include file='Utils/Docs/HTMLIFrameElementSrc/HTMLIFrameElementSrc.generated.xml' path='docs/HTMLIFrameElementSrc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Src { get; set; }
	///<include file='Utils/Docs/HTMLIFrameElementSrcdoc/HTMLIFrameElementSrcdoc.generated.xml' path='docs/HTMLIFrameElementSrcdoc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Union62 Srcdoc { get; set; }
	///<include file='Utils/Docs/HTMLIFrameElementName/HTMLIFrameElementName.generated.xml' path='docs/HTMLIFrameElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLIFrameElementSandbox/HTMLIFrameElementSandbox.generated.xml' path='docs/HTMLIFrameElementSandbox/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList Sandbox { get; }
	///<include file='Utils/Docs/HTMLIFrameElementAllow/HTMLIFrameElementAllow.generated.xml' path='docs/HTMLIFrameElementAllow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Allow { get; set; }
	///<include file='Utils/Docs/HTMLIFrameElementAllowFullscreen/HTMLIFrameElementAllowFullscreen.generated.xml' path='docs/HTMLIFrameElementAllowFullscreen/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool AllowFullscreen { get; set; }
	///<include file='Utils/Docs/HTMLIFrameElementWidth/HTMLIFrameElementWidth.generated.xml' path='docs/HTMLIFrameElementWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Width { get; set; }
	///<include file='Utils/Docs/HTMLIFrameElementHeight/HTMLIFrameElementHeight.generated.xml' path='docs/HTMLIFrameElementHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Height { get; set; }
	///<include file='Utils/Docs/HTMLIFrameElementReferrerPolicy/HTMLIFrameElementReferrerPolicy.generated.xml' path='docs/HTMLIFrameElementReferrerPolicy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ReferrerPolicy { get; set; }
	///<include file='Utils/Docs/HTMLIFrameElementLoading/HTMLIFrameElementLoading.generated.xml' path='docs/HTMLIFrameElementLoading/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Loading { get; set; }
	///<include file='Utils/Docs/HTMLIFrameElementContentDocument/HTMLIFrameElementContentDocument.generated.xml' path='docs/HTMLIFrameElementContentDocument/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Document? ContentDocument { get; }
	///<include file='Utils/Docs/HTMLIFrameElementContentWindow/HTMLIFrameElementContentWindow.generated.xml' path='docs/HTMLIFrameElementContentWindow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public WindowProxy? ContentWindow { get; }
	///<include file='Utils/Docs/HTMLIFrameElementGetSVGDocument/HTMLIFrameElementGetSVGDocument.generated.xml' path='docs/HTMLIFrameElementGetSVGDocument/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Document? GetSVGDocument() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLEmbedElement/HTMLEmbedElement.generated.xml' path='docs/HTMLEmbedElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLEmbedElement : HTMLElement
{
		public HTMLEmbedElement() { }
	///<include file='Utils/Docs/HTMLEmbedElementSrc/HTMLEmbedElementSrc.generated.xml' path='docs/HTMLEmbedElementSrc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Src { get; set; }
	///<include file='Utils/Docs/HTMLEmbedElementType/HTMLEmbedElementType.generated.xml' path='docs/HTMLEmbedElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
	///<include file='Utils/Docs/HTMLEmbedElementWidth/HTMLEmbedElementWidth.generated.xml' path='docs/HTMLEmbedElementWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Width { get; set; }
	///<include file='Utils/Docs/HTMLEmbedElementHeight/HTMLEmbedElementHeight.generated.xml' path='docs/HTMLEmbedElementHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Height { get; set; }
	///<include file='Utils/Docs/HTMLEmbedElementGetSVGDocument/HTMLEmbedElementGetSVGDocument.generated.xml' path='docs/HTMLEmbedElementGetSVGDocument/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Document? GetSVGDocument() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLObjectElement/HTMLObjectElement.generated.xml' path='docs/HTMLObjectElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLObjectElement : HTMLElement
{
		public HTMLObjectElement() { }
	///<include file='Utils/Docs/HTMLObjectElementData/HTMLObjectElementData.generated.xml' path='docs/HTMLObjectElementData/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Data { get; set; }
	///<include file='Utils/Docs/HTMLObjectElementType/HTMLObjectElementType.generated.xml' path='docs/HTMLObjectElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
	///<include file='Utils/Docs/HTMLObjectElementName/HTMLObjectElementName.generated.xml' path='docs/HTMLObjectElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLObjectElementForm/HTMLObjectElementForm.generated.xml' path='docs/HTMLObjectElementForm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormElement? Form { get; }
	///<include file='Utils/Docs/HTMLObjectElementWidth/HTMLObjectElementWidth.generated.xml' path='docs/HTMLObjectElementWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Width { get; set; }
	///<include file='Utils/Docs/HTMLObjectElementHeight/HTMLObjectElementHeight.generated.xml' path='docs/HTMLObjectElementHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Height { get; set; }
	///<include file='Utils/Docs/HTMLObjectElementContentDocument/HTMLObjectElementContentDocument.generated.xml' path='docs/HTMLObjectElementContentDocument/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Document? ContentDocument { get; }
	///<include file='Utils/Docs/HTMLObjectElementContentWindow/HTMLObjectElementContentWindow.generated.xml' path='docs/HTMLObjectElementContentWindow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public WindowProxy? ContentWindow { get; }
	///<include file='Utils/Docs/HTMLObjectElementGetSVGDocument/HTMLObjectElementGetSVGDocument.generated.xml' path='docs/HTMLObjectElementGetSVGDocument/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Document? GetSVGDocument() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLObjectElementWillValidate/HTMLObjectElementWillValidate.generated.xml' path='docs/HTMLObjectElementWillValidate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool WillValidate { get; }
	///<include file='Utils/Docs/HTMLObjectElementValidity/HTMLObjectElementValidity.generated.xml' path='docs/HTMLObjectElementValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ValidityState Validity { get; }
	///<include file='Utils/Docs/HTMLObjectElementValidationMessage/HTMLObjectElementValidationMessage.generated.xml' path='docs/HTMLObjectElementValidationMessage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ValidationMessage { get; }
	///<include file='Utils/Docs/HTMLObjectElementCheckValidity/HTMLObjectElementCheckValidity.generated.xml' path='docs/HTMLObjectElementCheckValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool CheckValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLObjectElementReportValidity/HTMLObjectElementReportValidity.generated.xml' path='docs/HTMLObjectElementReportValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ReportValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLObjectElementSetCustomValidity/HTMLObjectElementSetCustomValidity.generated.xml' path='docs/HTMLObjectElementSetCustomValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetCustomValidity(DOMString error) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLVideoElement/HTMLVideoElement.generated.xml' path='docs/HTMLVideoElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLVideoElement : HTMLMediaElement
{
		public HTMLVideoElement() { }
	///<include file='Utils/Docs/HTMLVideoElementWidth/HTMLVideoElementWidth.generated.xml' path='docs/HTMLVideoElementWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Width { get; set; }
	///<include file='Utils/Docs/HTMLVideoElementHeight/HTMLVideoElementHeight.generated.xml' path='docs/HTMLVideoElementHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Height { get; set; }
	///<include file='Utils/Docs/HTMLVideoElementVideoWidth/HTMLVideoElementVideoWidth.generated.xml' path='docs/HTMLVideoElementVideoWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong VideoWidth { get; }
	///<include file='Utils/Docs/HTMLVideoElementVideoHeight/HTMLVideoElementVideoHeight.generated.xml' path='docs/HTMLVideoElementVideoHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong VideoHeight { get; }
	///<include file='Utils/Docs/HTMLVideoElementPoster/HTMLVideoElementPoster.generated.xml' path='docs/HTMLVideoElementPoster/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Poster { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool PlaysInline { get; set; }
}

///<include file='Utils/Docs/HTMLAudioElement/HTMLAudioElement.generated.xml' path='docs/HTMLAudioElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLAudioElement : HTMLMediaElement
{
		public HTMLAudioElement() { }
}

///<include file='Utils/Docs/HTMLTrackElement/HTMLTrackElement.generated.xml' path='docs/HTMLTrackElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTrackElement : HTMLElement
{
		public HTMLTrackElement() { }
	///<include file='Utils/Docs/HTMLTrackElementKind/HTMLTrackElementKind.generated.xml' path='docs/HTMLTrackElementKind/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Kind { get; set; }
	///<include file='Utils/Docs/HTMLTrackElementSrc/HTMLTrackElementSrc.generated.xml' path='docs/HTMLTrackElementSrc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Src { get; set; }
	///<include file='Utils/Docs/HTMLTrackElementSrclang/HTMLTrackElementSrclang.generated.xml' path='docs/HTMLTrackElementSrclang/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Srclang { get; set; }
	///<include file='Utils/Docs/HTMLTrackElementLabel/HTMLTrackElementLabel.generated.xml' path='docs/HTMLTrackElementLabel/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Label { get; set; }
	///<include file='Utils/Docs/HTMLTrackElementDefault/HTMLTrackElementDefault.generated.xml' path='docs/HTMLTrackElementDefault/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Default { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort NONE = 0;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort LOADING = 1;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort LOADED = 2;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort ERROR = 3;
	///<include file='Utils/Docs/HTMLTrackElementReadyState/HTMLTrackElementReadyState.generated.xml' path='docs/HTMLTrackElementReadyState/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ushort ReadyState { get; }
	///<include file='Utils/Docs/HTMLTrackElementTrack/HTMLTrackElementTrack.generated.xml' path='docs/HTMLTrackElementTrack/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextTrack Track { get; }
}

///<include file='Utils/Docs/HTMLMediaElement/HTMLMediaElement.generated.xml' path='docs/HTMLMediaElement/*'/>
public partial class HTMLMediaElement : HTMLElement
{
	///<include file='Utils/Docs/HTMLMediaElementError/HTMLMediaElementError.generated.xml' path='docs/HTMLMediaElementError/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public MediaError? Error { get; }
	///<include file='Utils/Docs/HTMLMediaElementSrc/HTMLMediaElementSrc.generated.xml' path='docs/HTMLMediaElementSrc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Src { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementSrcObject/HTMLMediaElementSrcObject.generated.xml' path='docs/HTMLMediaElementSrcObject/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public MediaProvider? SrcObject { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementCurrentSrc/HTMLMediaElementCurrentSrc.generated.xml' path='docs/HTMLMediaElementCurrentSrc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString CurrentSrc { get; }
	///<include file='Utils/Docs/HTMLMediaElementCrossOrigin/HTMLMediaElementCrossOrigin.generated.xml' path='docs/HTMLMediaElementCrossOrigin/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString? CrossOrigin { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort NETWORK_EMPTY = 0;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort NETWORK_IDLE = 1;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort NETWORK_LOADING = 2;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort NETWORK_NO_SOURCE = 3;
	///<include file='Utils/Docs/HTMLMediaElementNetworkState/HTMLMediaElementNetworkState.generated.xml' path='docs/HTMLMediaElementNetworkState/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ushort NetworkState { get; }
	///<include file='Utils/Docs/HTMLMediaElementPreload/HTMLMediaElementPreload.generated.xml' path='docs/HTMLMediaElementPreload/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Preload { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementBuffered/HTMLMediaElementBuffered.generated.xml' path='docs/HTMLMediaElementBuffered/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TimeRanges Buffered { get; }
	///<include file='Utils/Docs/HTMLMediaElementLoad/HTMLMediaElementLoad.generated.xml' path='docs/HTMLMediaElementLoad/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Load() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLMediaElementCanPlayType/HTMLMediaElementCanPlayType.generated.xml' path='docs/HTMLMediaElementCanPlayType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CanPlayTypeResult CanPlayType(DOMString type) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort HAVE_NOTHING = 0;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort HAVE_METADATA = 1;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort HAVE_CURRENT_DATA = 2;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort HAVE_FUTURE_DATA = 3;
		[To(ToAttribute.FirstCharToLowerCase)]
	public const ushort HAVE_ENOUGH_DATA = 4;
	///<include file='Utils/Docs/HTMLMediaElementReadyState/HTMLMediaElementReadyState.generated.xml' path='docs/HTMLMediaElementReadyState/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ushort ReadyState { get; }
	///<include file='Utils/Docs/HTMLMediaElementSeeking/HTMLMediaElementSeeking.generated.xml' path='docs/HTMLMediaElementSeeking/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Seeking { get; }
	///<include file='Utils/Docs/HTMLMediaElementCurrentTime/HTMLMediaElementCurrentTime.generated.xml' path='docs/HTMLMediaElementCurrentTime/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number CurrentTime { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementFastSeek/HTMLMediaElementFastSeek.generated.xml' path='docs/HTMLMediaElementFastSeek/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined FastSeek(Number time) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLMediaElementDuration/HTMLMediaElementDuration.generated.xml' path='docs/HTMLMediaElementDuration/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public double Duration { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Object GetStartDate() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLMediaElementPaused/HTMLMediaElementPaused.generated.xml' path='docs/HTMLMediaElementPaused/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Paused { get; }
	///<include file='Utils/Docs/HTMLMediaElementDefaultPlaybackRate/HTMLMediaElementDefaultPlaybackRate.generated.xml' path='docs/HTMLMediaElementDefaultPlaybackRate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number DefaultPlaybackRate { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementPlaybackRate/HTMLMediaElementPlaybackRate.generated.xml' path='docs/HTMLMediaElementPlaybackRate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number PlaybackRate { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementPreservesPitch/HTMLMediaElementPreservesPitch.generated.xml' path='docs/HTMLMediaElementPreservesPitch/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool PreservesPitch { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementPlayed/HTMLMediaElementPlayed.generated.xml' path='docs/HTMLMediaElementPlayed/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TimeRanges Played { get; }
	///<include file='Utils/Docs/HTMLMediaElementSeekable/HTMLMediaElementSeekable.generated.xml' path='docs/HTMLMediaElementSeekable/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TimeRanges Seekable { get; }
	///<include file='Utils/Docs/HTMLMediaElementEnded/HTMLMediaElementEnded.generated.xml' path='docs/HTMLMediaElementEnded/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Ended { get; }
	///<include file='Utils/Docs/HTMLMediaElementAutoplay/HTMLMediaElementAutoplay.generated.xml' path='docs/HTMLMediaElementAutoplay/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Autoplay { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementLoop/HTMLMediaElementLoop.generated.xml' path='docs/HTMLMediaElementLoop/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Loop { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementPlay/HTMLMediaElementPlay.generated.xml' path='docs/HTMLMediaElementPlay/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<Undefined> Play() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLMediaElementPause/HTMLMediaElementPause.generated.xml' path='docs/HTMLMediaElementPause/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Pause() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLMediaElementControls/HTMLMediaElementControls.generated.xml' path='docs/HTMLMediaElementControls/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Controls { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementVolume/HTMLMediaElementVolume.generated.xml' path='docs/HTMLMediaElementVolume/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Volume { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementMuted/HTMLMediaElementMuted.generated.xml' path='docs/HTMLMediaElementMuted/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Muted { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementDefaultMuted/HTMLMediaElementDefaultMuted.generated.xml' path='docs/HTMLMediaElementDefaultMuted/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool DefaultMuted { get; set; }
	///<include file='Utils/Docs/HTMLMediaElementAudioTracks/HTMLMediaElementAudioTracks.generated.xml' path='docs/HTMLMediaElementAudioTracks/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public AudioTrackList AudioTracks { get; }
	///<include file='Utils/Docs/HTMLMediaElementVideoTracks/HTMLMediaElementVideoTracks.generated.xml' path='docs/HTMLMediaElementVideoTracks/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public VideoTrackList VideoTracks { get; }
	///<include file='Utils/Docs/HTMLMediaElementTextTracks/HTMLMediaElementTextTracks.generated.xml' path='docs/HTMLMediaElementTextTracks/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextTrackList TextTracks { get; }
	///<include file='Utils/Docs/HTMLMediaElementAddTextTrack/HTMLMediaElementAddTextTrack.generated.xml' path='docs/HTMLMediaElementAddTextTrack/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextTrack AddTextTrack(TextTrackKind kind, DOMString label, DOMString language) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaError/MediaError.generated.xml' path='docs/MediaError/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaError
{
		public const ushort MEDIA_ERR_ABORTED = 1;
		public const ushort MEDIA_ERR_NETWORK = 2;
		public const ushort MEDIA_ERR_DECODE = 3;
		public const ushort MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
	///<include file='Utils/Docs/MediaErrorCode/MediaErrorCode.generated.xml' path='docs/MediaErrorCode/*'/>
	public ushort Code { get; }
	///<include file='Utils/Docs/MediaErrorMessage/MediaErrorMessage.generated.xml' path='docs/MediaErrorMessage/*'/>
	public DOMString Message { get; }
}

///<include file='Utils/Docs/AudioTrackList/AudioTrackList.generated.xml' path='docs/AudioTrackList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioTrackList : EventTarget
{
	///<include file='Utils/Docs/AudioTrackListLength/AudioTrackListLength.generated.xml' path='docs/AudioTrackListLength/*'/>
	public ulong Length { get; }
	
	///<include file='Utils/Docs/AudioTrackListGetTrackById/AudioTrackListGetTrackById.generated.xml' path='docs/AudioTrackListGetTrackById/*'/>
	public AudioTrack? GetTrackById(DOMString id) { throw new System.NotImplementedException(); }
		public EventHandler Onchange { get; set; }
		public EventHandler Onaddtrack { get; set; }
		public EventHandler Onremovetrack { get; set; }
}

///<include file='Utils/Docs/AudioTrack/AudioTrack.generated.xml' path='docs/AudioTrack/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioTrack
{
	///<include file='Utils/Docs/AudioTrackId/AudioTrackId.generated.xml' path='docs/AudioTrackId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/AudioTrackKind/AudioTrackKind.generated.xml' path='docs/AudioTrackKind/*'/>
	public DOMString Kind { get; }
	///<include file='Utils/Docs/AudioTrackLabel/AudioTrackLabel.generated.xml' path='docs/AudioTrackLabel/*'/>
	public DOMString Label { get; }
	///<include file='Utils/Docs/AudioTrackLanguage/AudioTrackLanguage.generated.xml' path='docs/AudioTrackLanguage/*'/>
	public DOMString Language { get; }
	///<include file='Utils/Docs/AudioTrackEnabled/AudioTrackEnabled.generated.xml' path='docs/AudioTrackEnabled/*'/>
	public bool Enabled { get; set; }
}

///<include file='Utils/Docs/VideoTrackList/VideoTrackList.generated.xml' path='docs/VideoTrackList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoTrackList : EventTarget
{
	///<include file='Utils/Docs/VideoTrackListLength/VideoTrackListLength.generated.xml' path='docs/VideoTrackListLength/*'/>
	public ulong Length { get; }
	
	///<include file='Utils/Docs/VideoTrackListGetTrackById/VideoTrackListGetTrackById.generated.xml' path='docs/VideoTrackListGetTrackById/*'/>
	public VideoTrack? GetTrackById(DOMString id) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoTrackListSelectedIndex/VideoTrackListSelectedIndex.generated.xml' path='docs/VideoTrackListSelectedIndex/*'/>
	public long SelectedIndex { get; }
		public EventHandler Onchange { get; set; }
		public EventHandler Onaddtrack { get; set; }
		public EventHandler Onremovetrack { get; set; }
}

///<include file='Utils/Docs/VideoTrack/VideoTrack.generated.xml' path='docs/VideoTrack/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoTrack
{
	///<include file='Utils/Docs/VideoTrackId/VideoTrackId.generated.xml' path='docs/VideoTrackId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/VideoTrackKind/VideoTrackKind.generated.xml' path='docs/VideoTrackKind/*'/>
	public DOMString Kind { get; }
	///<include file='Utils/Docs/VideoTrackLabel/VideoTrackLabel.generated.xml' path='docs/VideoTrackLabel/*'/>
	public DOMString Label { get; }
	///<include file='Utils/Docs/VideoTrackLanguage/VideoTrackLanguage.generated.xml' path='docs/VideoTrackLanguage/*'/>
	public DOMString Language { get; }
	///<include file='Utils/Docs/VideoTrackSelected/VideoTrackSelected.generated.xml' path='docs/VideoTrackSelected/*'/>
	public bool Selected { get; set; }
}

///<include file='Utils/Docs/TextTrackList/TextTrackList.generated.xml' path='docs/TextTrackList/*'/>
[To(ToAttribute.Default)]
public partial class TextTrackList : EventTarget
{
	///<include file='Utils/Docs/TextTrackListLength/TextTrackListLength.generated.xml' path='docs/TextTrackListLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	
	///<include file='Utils/Docs/TextTrackListGetTrackById/TextTrackListGetTrackById.generated.xml' path='docs/TextTrackListGetTrackById/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextTrack? GetTrackById(DOMString id) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onchange { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onaddtrack { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onremovetrack { get; set; }
}

///<include file='Utils/Docs/TextTrack/TextTrack.generated.xml' path='docs/TextTrack/*'/>
[To(ToAttribute.Default)]
public partial class TextTrack : EventTarget
{
	///<include file='Utils/Docs/TextTrackKind/TextTrackKind.generated.xml' path='docs/TextTrackKind/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextTrackKind Kind { get; }
	///<include file='Utils/Docs/TextTrackLabel/TextTrackLabel.generated.xml' path='docs/TextTrackLabel/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Label { get; }
	///<include file='Utils/Docs/TextTrackLanguage/TextTrackLanguage.generated.xml' path='docs/TextTrackLanguage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Language { get; }
	///<include file='Utils/Docs/TextTrackId/TextTrackId.generated.xml' path='docs/TextTrackId/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Id { get; }
	///<include file='Utils/Docs/TextTrackInBandMetadataTrackDispatchType/TextTrackInBandMetadataTrackDispatchType.generated.xml' path='docs/TextTrackInBandMetadataTrackDispatchType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString InBandMetadataTrackDispatchType { get; }
	///<include file='Utils/Docs/TextTrackMode/TextTrackMode.generated.xml' path='docs/TextTrackMode/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextTrackMode Mode { get; set; }
	///<include file='Utils/Docs/TextTrackCues/TextTrackCues.generated.xml' path='docs/TextTrackCues/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextTrackCueList? Cues { get; }
	///<include file='Utils/Docs/TextTrackActiveCues/TextTrackActiveCues.generated.xml' path='docs/TextTrackActiveCues/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextTrackCueList? ActiveCues { get; }
	///<include file='Utils/Docs/TextTrackAddCue/TextTrackAddCue.generated.xml' path='docs/TextTrackAddCue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined AddCue(TextTrackCue cue) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TextTrackRemoveCue/TextTrackRemoveCue.generated.xml' path='docs/TextTrackRemoveCue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined RemoveCue(TextTrackCue cue) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Oncuechange { get; set; }
}

///<include file='Utils/Docs/TextTrackCueList/TextTrackCueList.generated.xml' path='docs/TextTrackCueList/*'/>
[To(ToAttribute.Default)]
public partial class TextTrackCueList
{
	///<include file='Utils/Docs/TextTrackCueListLength/TextTrackCueListLength.generated.xml' path='docs/TextTrackCueListLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	
	///<include file='Utils/Docs/TextTrackCueListGetCueById/TextTrackCueListGetCueById.generated.xml' path='docs/TextTrackCueListGetCueById/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextTrackCue? GetCueById(DOMString id) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TextTrackCue/TextTrackCue.generated.xml' path='docs/TextTrackCue/*'/>
[To(ToAttribute.Default)]
public partial class TextTrackCue : EventTarget
{
	///<include file='Utils/Docs/TextTrackCueTrack/TextTrackCueTrack.generated.xml' path='docs/TextTrackCueTrack/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public TextTrack? Track { get; }
	///<include file='Utils/Docs/TextTrackCueId/TextTrackCueId.generated.xml' path='docs/TextTrackCueId/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Id { get; set; }
	///<include file='Utils/Docs/TextTrackCueStartTime/TextTrackCueStartTime.generated.xml' path='docs/TextTrackCueStartTime/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number StartTime { get; set; }
	///<include file='Utils/Docs/TextTrackCueEndTime/TextTrackCueEndTime.generated.xml' path='docs/TextTrackCueEndTime/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public double EndTime { get; set; }
	///<include file='Utils/Docs/TextTrackCuePauseOnExit/TextTrackCuePauseOnExit.generated.xml' path='docs/TextTrackCuePauseOnExit/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool PauseOnExit { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onenter { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onexit { get; set; }
}

///<include file='Utils/Docs/TimeRanges/TimeRanges.generated.xml' path='docs/TimeRanges/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TimeRanges
{
	///<include file='Utils/Docs/TimeRangesLength/TimeRangesLength.generated.xml' path='docs/TimeRangesLength/*'/>
	public ulong Length { get; }
	///<include file='Utils/Docs/TimeRangesStart/TimeRangesStart.generated.xml' path='docs/TimeRangesStart/*'/>
	public Number Start(ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TimeRangesEnd/TimeRangesEnd.generated.xml' path='docs/TimeRangesEnd/*'/>
	public Number End(ulong index) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TrackEvent/TrackEvent.generated.xml' path='docs/TrackEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TrackEvent : Event
{
	///<include file='Utils/Docs/TrackEventTrackEvent/TrackEventTrackEvent.generated.xml' path='docs/TrackEventTrackEvent/*'/>
	public TrackEvent(DOMString type, TrackEventInit eventInitDict) { }
	///<include file='Utils/Docs/TrackEventTrack/TrackEventTrack.generated.xml' path='docs/TrackEventTrack/*'/>
	public Union64? Track { get; }
	public TrackEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TrackEventInit : EventInit
{
		public Union65? Track;
}

///<include file='Utils/Docs/HTMLMapElement/HTMLMapElement.generated.xml' path='docs/HTMLMapElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLMapElement : HTMLElement
{
		public HTMLMapElement() { }
	///<include file='Utils/Docs/HTMLMapElementName/HTMLMapElementName.generated.xml' path='docs/HTMLMapElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLMapElementAreas/HTMLMapElementAreas.generated.xml' path='docs/HTMLMapElementAreas/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLCollection Areas { get; }
}

///<include file='Utils/Docs/HTMLAreaElement/HTMLAreaElement.generated.xml' path='docs/HTMLAreaElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLAreaElement : HTMLElement, HTMLAttributionSrcElementUtils, HTMLHyperlinkElementUtils
{
		public HTMLAreaElement() { }
	///<include file='Utils/Docs/HTMLAreaElementAlt/HTMLAreaElementAlt.generated.xml' path='docs/HTMLAreaElementAlt/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Alt { get; set; }
	///<include file='Utils/Docs/HTMLAreaElementCoords/HTMLAreaElementCoords.generated.xml' path='docs/HTMLAreaElementCoords/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Coords { get; set; }
	///<include file='Utils/Docs/HTMLAreaElementShape/HTMLAreaElementShape.generated.xml' path='docs/HTMLAreaElementShape/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Shape { get; set; }
	///<include file='Utils/Docs/HTMLAreaElementTarget/HTMLAreaElementTarget.generated.xml' path='docs/HTMLAreaElementTarget/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Target { get; set; }
	///<include file='Utils/Docs/HTMLAreaElementDownload/HTMLAreaElementDownload.generated.xml' path='docs/HTMLAreaElementDownload/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Download { get; set; }
	///<include file='Utils/Docs/HTMLAreaElementPing/HTMLAreaElementPing.generated.xml' path='docs/HTMLAreaElementPing/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Ping { get; set; }
	///<include file='Utils/Docs/HTMLAreaElementRel/HTMLAreaElementRel.generated.xml' path='docs/HTMLAreaElementRel/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Rel { get; set; }
	///<include file='Utils/Docs/HTMLAreaElementRelList/HTMLAreaElementRelList.generated.xml' path='docs/HTMLAreaElementRelList/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList RelList { get; }
	///<include file='Utils/Docs/HTMLAreaElementReferrerPolicy/HTMLAreaElementReferrerPolicy.generated.xml' path='docs/HTMLAreaElementReferrerPolicy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ReferrerPolicy { get; set; }
}


///<include file='Utils/Docs/HTMLTableElement/HTMLTableElement.generated.xml' path='docs/HTMLTableElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTableElement : HTMLElement
{
		public HTMLTableElement() { }
	///<include file='Utils/Docs/HTMLTableElementCaption/HTMLTableElementCaption.generated.xml' path='docs/HTMLTableElementCaption/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLTableCaptionElement? Caption { get; set; }
	///<include file='Utils/Docs/HTMLTableElementCreateCaption/HTMLTableElementCreateCaption.generated.xml' path='docs/HTMLTableElementCreateCaption/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLTableCaptionElement CreateCaption() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTableElementDeleteCaption/HTMLTableElementDeleteCaption.generated.xml' path='docs/HTMLTableElementDeleteCaption/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined DeleteCaption() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTableElementTHead/HTMLTableElementTHead.generated.xml' path='docs/HTMLTableElementTHead/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLTableSectionElement? THead { get; set; }
	///<include file='Utils/Docs/HTMLTableElementCreateTHead/HTMLTableElementCreateTHead.generated.xml' path='docs/HTMLTableElementCreateTHead/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLTableSectionElement CreateTHead() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTableElementDeleteTHead/HTMLTableElementDeleteTHead.generated.xml' path='docs/HTMLTableElementDeleteTHead/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined DeleteTHead() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTableElementTFoot/HTMLTableElementTFoot.generated.xml' path='docs/HTMLTableElementTFoot/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLTableSectionElement? TFoot { get; set; }
	///<include file='Utils/Docs/HTMLTableElementCreateTFoot/HTMLTableElementCreateTFoot.generated.xml' path='docs/HTMLTableElementCreateTFoot/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLTableSectionElement CreateTFoot() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTableElementDeleteTFoot/HTMLTableElementDeleteTFoot.generated.xml' path='docs/HTMLTableElementDeleteTFoot/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined DeleteTFoot() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTableElementTBodies/HTMLTableElementTBodies.generated.xml' path='docs/HTMLTableElementTBodies/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLCollection TBodies { get; }
	///<include file='Utils/Docs/HTMLTableElementCreateTBody/HTMLTableElementCreateTBody.generated.xml' path='docs/HTMLTableElementCreateTBody/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLTableSectionElement CreateTBody() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTableElementRows/HTMLTableElementRows.generated.xml' path='docs/HTMLTableElementRows/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLCollection Rows { get; }
	///<include file='Utils/Docs/HTMLTableElementInsertRow/HTMLTableElementInsertRow.generated.xml' path='docs/HTMLTableElementInsertRow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLTableRowElement InsertRow(long index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTableElementDeleteRow/HTMLTableElementDeleteRow.generated.xml' path='docs/HTMLTableElementDeleteRow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined DeleteRow(long index) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLTableCaptionElement/HTMLTableCaptionElement.generated.xml' path='docs/HTMLTableCaptionElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTableCaptionElement : HTMLElement
{
		public HTMLTableCaptionElement() { }
}

///<include file='Utils/Docs/HTMLTableColElement/HTMLTableColElement.generated.xml' path='docs/HTMLTableColElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTableColElement : HTMLElement
{
		public HTMLTableColElement() { }
	///<include file='Utils/Docs/HTMLTableColElementSpan/HTMLTableColElementSpan.generated.xml' path='docs/HTMLTableColElementSpan/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Span { get; set; }
}

///<include file='Utils/Docs/HTMLTableSectionElement/HTMLTableSectionElement.generated.xml' path='docs/HTMLTableSectionElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTableSectionElement : HTMLElement
{
		public HTMLTableSectionElement() { }
	///<include file='Utils/Docs/HTMLTableSectionElementRows/HTMLTableSectionElementRows.generated.xml' path='docs/HTMLTableSectionElementRows/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLCollection Rows { get; }
	///<include file='Utils/Docs/HTMLTableSectionElementInsertRow/HTMLTableSectionElementInsertRow.generated.xml' path='docs/HTMLTableSectionElementInsertRow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLTableRowElement InsertRow(long index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTableSectionElementDeleteRow/HTMLTableSectionElementDeleteRow.generated.xml' path='docs/HTMLTableSectionElementDeleteRow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined DeleteRow(long index) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLTableRowElement/HTMLTableRowElement.generated.xml' path='docs/HTMLTableRowElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTableRowElement : HTMLElement
{
		public HTMLTableRowElement() { }
	///<include file='Utils/Docs/HTMLTableRowElementRowIndex/HTMLTableRowElementRowIndex.generated.xml' path='docs/HTMLTableRowElementRowIndex/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long RowIndex { get; }
	///<include file='Utils/Docs/HTMLTableRowElementSectionRowIndex/HTMLTableRowElementSectionRowIndex.generated.xml' path='docs/HTMLTableRowElementSectionRowIndex/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long SectionRowIndex { get; }
	///<include file='Utils/Docs/HTMLTableRowElementCells/HTMLTableRowElementCells.generated.xml' path='docs/HTMLTableRowElementCells/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLCollection Cells { get; }
	///<include file='Utils/Docs/HTMLTableRowElementInsertCell/HTMLTableRowElementInsertCell.generated.xml' path='docs/HTMLTableRowElementInsertCell/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLTableCellElement InsertCell(long index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTableRowElementDeleteCell/HTMLTableRowElementDeleteCell.generated.xml' path='docs/HTMLTableRowElementDeleteCell/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined DeleteCell(long index) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLTableCellElement/HTMLTableCellElement.generated.xml' path='docs/HTMLTableCellElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTableCellElement : HTMLElement
{
		public HTMLTableCellElement() { }
	///<include file='Utils/Docs/HTMLTableCellElementColSpan/HTMLTableCellElementColSpan.generated.xml' path='docs/HTMLTableCellElementColSpan/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong ColSpan { get; set; }
	///<include file='Utils/Docs/HTMLTableCellElementRowSpan/HTMLTableCellElementRowSpan.generated.xml' path='docs/HTMLTableCellElementRowSpan/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong RowSpan { get; set; }
	///<include file='Utils/Docs/HTMLTableCellElementHeaders/HTMLTableCellElementHeaders.generated.xml' path='docs/HTMLTableCellElementHeaders/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Headers { get; set; }
	///<include file='Utils/Docs/HTMLTableCellElementCellIndex/HTMLTableCellElementCellIndex.generated.xml' path='docs/HTMLTableCellElementCellIndex/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long CellIndex { get; }
	///<include file='Utils/Docs/HTMLTableCellElementScope/HTMLTableCellElementScope.generated.xml' path='docs/HTMLTableCellElementScope/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Scope { get; set; }
	///<include file='Utils/Docs/HTMLTableCellElementAbbr/HTMLTableCellElementAbbr.generated.xml' path='docs/HTMLTableCellElementAbbr/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Abbr { get; set; }
}

///<include file='Utils/Docs/HTMLFormElement/HTMLFormElement.generated.xml' path='docs/HTMLFormElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLFormElement : HTMLElement
{
		public HTMLFormElement() { }
	///<include file='Utils/Docs/HTMLFormElementAcceptCharset/HTMLFormElementAcceptCharset.generated.xml' path='docs/HTMLFormElementAcceptCharset/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString AcceptCharset { get; set; }
	///<include file='Utils/Docs/HTMLFormElementAction/HTMLFormElementAction.generated.xml' path='docs/HTMLFormElementAction/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Action { get; set; }
	///<include file='Utils/Docs/HTMLFormElementAutocomplete/HTMLFormElementAutocomplete.generated.xml' path='docs/HTMLFormElementAutocomplete/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Autocomplete { get; set; }
	///<include file='Utils/Docs/HTMLFormElementEnctype/HTMLFormElementEnctype.generated.xml' path='docs/HTMLFormElementEnctype/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Enctype { get; set; }
	///<include file='Utils/Docs/HTMLFormElementEncoding/HTMLFormElementEncoding.generated.xml' path='docs/HTMLFormElementEncoding/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Encoding { get; set; }
	///<include file='Utils/Docs/HTMLFormElementMethod/HTMLFormElementMethod.generated.xml' path='docs/HTMLFormElementMethod/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Method { get; set; }
	///<include file='Utils/Docs/HTMLFormElementName/HTMLFormElementName.generated.xml' path='docs/HTMLFormElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLFormElementNoValidate/HTMLFormElementNoValidate.generated.xml' path='docs/HTMLFormElementNoValidate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool NoValidate { get; set; }
	///<include file='Utils/Docs/HTMLFormElementTarget/HTMLFormElementTarget.generated.xml' path='docs/HTMLFormElementTarget/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Target { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Rel { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList RelList { get; }
	///<include file='Utils/Docs/HTMLFormElementElements/HTMLFormElementElements.generated.xml' path='docs/HTMLFormElementElements/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormControlsCollection Elements { get; }
	///<include file='Utils/Docs/HTMLFormElementLength/HTMLFormElementLength.generated.xml' path='docs/HTMLFormElementLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	
	
	///<include file='Utils/Docs/HTMLFormElementSubmit/HTMLFormElementSubmit.generated.xml' path='docs/HTMLFormElementSubmit/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Submit() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLFormElementRequestSubmit/HTMLFormElementRequestSubmit.generated.xml' path='docs/HTMLFormElementRequestSubmit/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined RequestSubmit(HTMLElement? submitter) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLFormElementReset/HTMLFormElementReset.generated.xml' path='docs/HTMLFormElementReset/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Reset() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLFormElementCheckValidity/HTMLFormElementCheckValidity.generated.xml' path='docs/HTMLFormElementCheckValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool CheckValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLFormElementReportValidity/HTMLFormElementReportValidity.generated.xml' path='docs/HTMLFormElementReportValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ReportValidity() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLLabelElement/HTMLLabelElement.generated.xml' path='docs/HTMLLabelElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLLabelElement : HTMLElement
{
		public HTMLLabelElement() { }
	///<include file='Utils/Docs/HTMLLabelElementForm/HTMLLabelElementForm.generated.xml' path='docs/HTMLLabelElementForm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormElement? Form { get; }
	///<include file='Utils/Docs/HTMLLabelElementHtmlFor/HTMLLabelElementHtmlFor.generated.xml' path='docs/HTMLLabelElementHtmlFor/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString HtmlFor { get; set; }
	///<include file='Utils/Docs/HTMLLabelElementControl/HTMLLabelElementControl.generated.xml' path='docs/HTMLLabelElementControl/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLElement? Control { get; }
}

///<include file='Utils/Docs/HTMLInputElement/HTMLInputElement.generated.xml' path='docs/HTMLInputElement/*'/>
public partial class HTMLInputElement : HTMLElement
{
		public HTMLInputElement() { }
	///<include file='Utils/Docs/HTMLInputElementAccept/HTMLInputElementAccept.generated.xml' path='docs/HTMLInputElementAccept/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Accept { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Alpha { get; set; }
	///<include file='Utils/Docs/HTMLInputElementAlt/HTMLInputElementAlt.generated.xml' path='docs/HTMLInputElementAlt/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Alt { get; set; }
	///<include file='Utils/Docs/HTMLInputElementAutocomplete/HTMLInputElementAutocomplete.generated.xml' path='docs/HTMLInputElementAutocomplete/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Autocomplete { get; set; }
	///<include file='Utils/Docs/HTMLInputElementDefaultChecked/HTMLInputElementDefaultChecked.generated.xml' path='docs/HTMLInputElementDefaultChecked/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool DefaultChecked { get; set; }
	///<include file='Utils/Docs/HTMLInputElementChecked/HTMLInputElementChecked.generated.xml' path='docs/HTMLInputElementChecked/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Checked { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ColorSpace { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString DirName { get; set; }
	///<include file='Utils/Docs/HTMLInputElementDisabled/HTMLInputElementDisabled.generated.xml' path='docs/HTMLInputElementDisabled/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Disabled { get; set; }
	///<include file='Utils/Docs/HTMLInputElementForm/HTMLInputElementForm.generated.xml' path='docs/HTMLInputElementForm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormElement? Form { get; }
	///<include file='Utils/Docs/HTMLInputElementFiles/HTMLInputElementFiles.generated.xml' path='docs/HTMLInputElementFiles/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public FileList? Files { get; set; }
	///<include file='Utils/Docs/HTMLInputElementFormAction/HTMLInputElementFormAction.generated.xml' path='docs/HTMLInputElementFormAction/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString FormAction { get; set; }
	///<include file='Utils/Docs/HTMLInputElementFormEnctype/HTMLInputElementFormEnctype.generated.xml' path='docs/HTMLInputElementFormEnctype/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FormEnctype { get; set; }
	///<include file='Utils/Docs/HTMLInputElementFormMethod/HTMLInputElementFormMethod.generated.xml' path='docs/HTMLInputElementFormMethod/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FormMethod { get; set; }
	///<include file='Utils/Docs/HTMLInputElementFormNoValidate/HTMLInputElementFormNoValidate.generated.xml' path='docs/HTMLInputElementFormNoValidate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool FormNoValidate { get; set; }
	///<include file='Utils/Docs/HTMLInputElementFormTarget/HTMLInputElementFormTarget.generated.xml' path='docs/HTMLInputElementFormTarget/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FormTarget { get; set; }
	///<include file='Utils/Docs/HTMLInputElementHeight/HTMLInputElementHeight.generated.xml' path='docs/HTMLInputElementHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Height { get; set; }
	///<include file='Utils/Docs/HTMLInputElementIndeterminate/HTMLInputElementIndeterminate.generated.xml' path='docs/HTMLInputElementIndeterminate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Indeterminate { get; set; }
	///<include file='Utils/Docs/HTMLInputElementList/HTMLInputElementList.generated.xml' path='docs/HTMLInputElementList/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLDataListElement? List { get; }
	///<include file='Utils/Docs/HTMLInputElementMax/HTMLInputElementMax.generated.xml' path='docs/HTMLInputElementMax/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Max { get; set; }
	///<include file='Utils/Docs/HTMLInputElementMaxLength/HTMLInputElementMaxLength.generated.xml' path='docs/HTMLInputElementMaxLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long MaxLength { get; set; }
	///<include file='Utils/Docs/HTMLInputElementMin/HTMLInputElementMin.generated.xml' path='docs/HTMLInputElementMin/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Min { get; set; }
	///<include file='Utils/Docs/HTMLInputElementMinLength/HTMLInputElementMinLength.generated.xml' path='docs/HTMLInputElementMinLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long MinLength { get; set; }
	///<include file='Utils/Docs/HTMLInputElementMultiple/HTMLInputElementMultiple.generated.xml' path='docs/HTMLInputElementMultiple/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Multiple { get; set; }
	///<include file='Utils/Docs/HTMLInputElementName/HTMLInputElementName.generated.xml' path='docs/HTMLInputElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLInputElementPattern/HTMLInputElementPattern.generated.xml' path='docs/HTMLInputElementPattern/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Pattern { get; set; }
	///<include file='Utils/Docs/HTMLInputElementPlaceholder/HTMLInputElementPlaceholder.generated.xml' path='docs/HTMLInputElementPlaceholder/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Placeholder { get; set; }
	///<include file='Utils/Docs/HTMLInputElementReadOnly/HTMLInputElementReadOnly.generated.xml' path='docs/HTMLInputElementReadOnly/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ReadOnly { get; set; }
	///<include file='Utils/Docs/HTMLInputElementRequired/HTMLInputElementRequired.generated.xml' path='docs/HTMLInputElementRequired/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Required { get; set; }
	///<include file='Utils/Docs/HTMLInputElementSize/HTMLInputElementSize.generated.xml' path='docs/HTMLInputElementSize/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Size { get; set; }
	///<include file='Utils/Docs/HTMLInputElementSrc/HTMLInputElementSrc.generated.xml' path='docs/HTMLInputElementSrc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Src { get; set; }
	///<include file='Utils/Docs/HTMLInputElementStep/HTMLInputElementStep.generated.xml' path='docs/HTMLInputElementStep/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Step { get; set; }
	///<include file='Utils/Docs/HTMLInputElementType/HTMLInputElementType.generated.xml' path='docs/HTMLInputElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
	///<include file='Utils/Docs/HTMLInputElementDefaultValue/HTMLInputElementDefaultValue.generated.xml' path='docs/HTMLInputElementDefaultValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString DefaultValue { get; set; }
	///<include file='Utils/Docs/HTMLInputElementValue/HTMLInputElementValue.generated.xml' path='docs/HTMLInputElementValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Value { get; set; }
	///<include file='Utils/Docs/HTMLInputElementValueAsDate/HTMLInputElementValueAsDate.generated.xml' path='docs/HTMLInputElementValueAsDate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Object? ValueAsDate { get; set; }
	///<include file='Utils/Docs/HTMLInputElementValueAsNumber/HTMLInputElementValueAsNumber.generated.xml' path='docs/HTMLInputElementValueAsNumber/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public double ValueAsNumber { get; set; }
	///<include file='Utils/Docs/HTMLInputElementWidth/HTMLInputElementWidth.generated.xml' path='docs/HTMLInputElementWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Width { get; set; }
	///<include file='Utils/Docs/HTMLInputElementStepUp/HTMLInputElementStepUp.generated.xml' path='docs/HTMLInputElementStepUp/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined StepUp(long n) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLInputElementStepDown/HTMLInputElementStepDown.generated.xml' path='docs/HTMLInputElementStepDown/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined StepDown(long n) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLInputElementWillValidate/HTMLInputElementWillValidate.generated.xml' path='docs/HTMLInputElementWillValidate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool WillValidate { get; }
	///<include file='Utils/Docs/HTMLInputElementValidity/HTMLInputElementValidity.generated.xml' path='docs/HTMLInputElementValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ValidityState Validity { get; }
	///<include file='Utils/Docs/HTMLInputElementValidationMessage/HTMLInputElementValidationMessage.generated.xml' path='docs/HTMLInputElementValidationMessage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ValidationMessage { get; }
	///<include file='Utils/Docs/HTMLInputElementCheckValidity/HTMLInputElementCheckValidity.generated.xml' path='docs/HTMLInputElementCheckValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool CheckValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLInputElementReportValidity/HTMLInputElementReportValidity.generated.xml' path='docs/HTMLInputElementReportValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ReportValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLInputElementSetCustomValidity/HTMLInputElementSetCustomValidity.generated.xml' path='docs/HTMLInputElementSetCustomValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetCustomValidity(DOMString error) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLInputElementLabels/HTMLInputElementLabels.generated.xml' path='docs/HTMLInputElementLabels/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public NodeList? Labels { get; }
	///<include file='Utils/Docs/HTMLInputElementSelect/HTMLInputElementSelect.generated.xml' path='docs/HTMLInputElementSelect/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Select() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLInputElementSelectionStart/HTMLInputElementSelectionStart.generated.xml' path='docs/HTMLInputElementSelectionStart/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong? SelectionStart { get; set; }
	///<include file='Utils/Docs/HTMLInputElementSelectionEnd/HTMLInputElementSelectionEnd.generated.xml' path='docs/HTMLInputElementSelectionEnd/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong? SelectionEnd { get; set; }
	///<include file='Utils/Docs/HTMLInputElementSelectionDirection/HTMLInputElementSelectionDirection.generated.xml' path='docs/HTMLInputElementSelectionDirection/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString? SelectionDirection { get; set; }
	///<include file='Utils/Docs/HTMLInputElementSetRangeText/HTMLInputElementSetRangeText.generated.xml' path='docs/HTMLInputElementSetRangeText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetRangeText(DOMString replacement) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLInputElementSetRangeText/HTMLInputElementSetRangeText.generated.xml' path='docs/HTMLInputElementSetRangeText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetRangeText(DOMString replacement, ulong start, ulong end, SelectionMode selectionMode) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLInputElementSetSelectionRange/HTMLInputElementSetSelectionRange.generated.xml' path='docs/HTMLInputElementSetSelectionRange/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetSelectionRange(ulong start, ulong end, DOMString direction) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLInputElementShowPicker/HTMLInputElementShowPicker.generated.xml' path='docs/HTMLInputElementShowPicker/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ShowPicker() { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/HTMLButtonElement/HTMLButtonElement.generated.xml' path='docs/HTMLButtonElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLButtonElement : HTMLElement, PopoverInvokerElement
{
		public HTMLButtonElement() { }
	///<include file='Utils/Docs/HTMLButtonElementDisabled/HTMLButtonElementDisabled.generated.xml' path='docs/HTMLButtonElementDisabled/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Disabled { get; set; }
	///<include file='Utils/Docs/HTMLButtonElementForm/HTMLButtonElementForm.generated.xml' path='docs/HTMLButtonElementForm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormElement? Form { get; }
	///<include file='Utils/Docs/HTMLButtonElementFormAction/HTMLButtonElementFormAction.generated.xml' path='docs/HTMLButtonElementFormAction/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString FormAction { get; set; }
	///<include file='Utils/Docs/HTMLButtonElementFormEnctype/HTMLButtonElementFormEnctype.generated.xml' path='docs/HTMLButtonElementFormEnctype/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FormEnctype { get; set; }
	///<include file='Utils/Docs/HTMLButtonElementFormMethod/HTMLButtonElementFormMethod.generated.xml' path='docs/HTMLButtonElementFormMethod/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FormMethod { get; set; }
	///<include file='Utils/Docs/HTMLButtonElementFormNoValidate/HTMLButtonElementFormNoValidate.generated.xml' path='docs/HTMLButtonElementFormNoValidate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool FormNoValidate { get; set; }
	///<include file='Utils/Docs/HTMLButtonElementFormTarget/HTMLButtonElementFormTarget.generated.xml' path='docs/HTMLButtonElementFormTarget/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FormTarget { get; set; }
	///<include file='Utils/Docs/HTMLButtonElementName/HTMLButtonElementName.generated.xml' path='docs/HTMLButtonElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLButtonElementType/HTMLButtonElementType.generated.xml' path='docs/HTMLButtonElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
	///<include file='Utils/Docs/HTMLButtonElementValue/HTMLButtonElementValue.generated.xml' path='docs/HTMLButtonElementValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Value { get; set; }
	///<include file='Utils/Docs/HTMLButtonElementWillValidate/HTMLButtonElementWillValidate.generated.xml' path='docs/HTMLButtonElementWillValidate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool WillValidate { get; }
	///<include file='Utils/Docs/HTMLButtonElementValidity/HTMLButtonElementValidity.generated.xml' path='docs/HTMLButtonElementValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ValidityState Validity { get; }
	///<include file='Utils/Docs/HTMLButtonElementValidationMessage/HTMLButtonElementValidationMessage.generated.xml' path='docs/HTMLButtonElementValidationMessage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ValidationMessage { get; }
	///<include file='Utils/Docs/HTMLButtonElementCheckValidity/HTMLButtonElementCheckValidity.generated.xml' path='docs/HTMLButtonElementCheckValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool CheckValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLButtonElementReportValidity/HTMLButtonElementReportValidity.generated.xml' path='docs/HTMLButtonElementReportValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ReportValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLButtonElementSetCustomValidity/HTMLButtonElementSetCustomValidity.generated.xml' path='docs/HTMLButtonElementSetCustomValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetCustomValidity(DOMString error) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLButtonElementLabels/HTMLButtonElementLabels.generated.xml' path='docs/HTMLButtonElementLabels/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public NodeList Labels { get; }
}


///<include file='Utils/Docs/HTMLSelectElement/HTMLSelectElement.generated.xml' path='docs/HTMLSelectElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLSelectElement : HTMLElement
{
		public HTMLSelectElement() { }
	///<include file='Utils/Docs/HTMLSelectElementAutocomplete/HTMLSelectElementAutocomplete.generated.xml' path='docs/HTMLSelectElementAutocomplete/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Autocomplete { get; set; }
	///<include file='Utils/Docs/HTMLSelectElementDisabled/HTMLSelectElementDisabled.generated.xml' path='docs/HTMLSelectElementDisabled/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Disabled { get; set; }
	///<include file='Utils/Docs/HTMLSelectElementForm/HTMLSelectElementForm.generated.xml' path='docs/HTMLSelectElementForm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormElement? Form { get; }
	///<include file='Utils/Docs/HTMLSelectElementMultiple/HTMLSelectElementMultiple.generated.xml' path='docs/HTMLSelectElementMultiple/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Multiple { get; set; }
	///<include file='Utils/Docs/HTMLSelectElementName/HTMLSelectElementName.generated.xml' path='docs/HTMLSelectElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLSelectElementRequired/HTMLSelectElementRequired.generated.xml' path='docs/HTMLSelectElementRequired/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Required { get; set; }
	///<include file='Utils/Docs/HTMLSelectElementSize/HTMLSelectElementSize.generated.xml' path='docs/HTMLSelectElementSize/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Size { get; set; }
	///<include file='Utils/Docs/HTMLSelectElementType/HTMLSelectElementType.generated.xml' path='docs/HTMLSelectElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; }
	///<include file='Utils/Docs/HTMLSelectElementOptions/HTMLSelectElementOptions.generated.xml' path='docs/HTMLSelectElementOptions/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLOptionsCollection Options { get; }
	///<include file='Utils/Docs/HTMLSelectElementLength/HTMLSelectElementLength.generated.xml' path='docs/HTMLSelectElementLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; set; }
	
	///<include file='Utils/Docs/HTMLSelectElementNamedItem/HTMLSelectElementNamedItem.generated.xml' path='docs/HTMLSelectElementNamedItem/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLOptionElement? NamedItem(DOMString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLSelectElementAdd/HTMLSelectElementAdd.generated.xml' path='docs/HTMLSelectElementAdd/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Add(Union67 element, Union68? before) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLSelectElementRemove/HTMLSelectElementRemove.generated.xml' path='docs/HTMLSelectElementRemove/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Remove() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLSelectElementRemove/HTMLSelectElementRemove.generated.xml' path='docs/HTMLSelectElementRemove/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Remove(long index) { throw new System.NotImplementedException(); }
	
	///<include file='Utils/Docs/HTMLSelectElementSelectedOptions/HTMLSelectElementSelectedOptions.generated.xml' path='docs/HTMLSelectElementSelectedOptions/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLCollection SelectedOptions { get; }
	///<include file='Utils/Docs/HTMLSelectElementSelectedIndex/HTMLSelectElementSelectedIndex.generated.xml' path='docs/HTMLSelectElementSelectedIndex/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long SelectedIndex { get; set; }
	///<include file='Utils/Docs/HTMLSelectElementValue/HTMLSelectElementValue.generated.xml' path='docs/HTMLSelectElementValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Value { get; set; }
	///<include file='Utils/Docs/HTMLSelectElementWillValidate/HTMLSelectElementWillValidate.generated.xml' path='docs/HTMLSelectElementWillValidate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool WillValidate { get; }
	///<include file='Utils/Docs/HTMLSelectElementValidity/HTMLSelectElementValidity.generated.xml' path='docs/HTMLSelectElementValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ValidityState Validity { get; }
	///<include file='Utils/Docs/HTMLSelectElementValidationMessage/HTMLSelectElementValidationMessage.generated.xml' path='docs/HTMLSelectElementValidationMessage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ValidationMessage { get; }
	///<include file='Utils/Docs/HTMLSelectElementCheckValidity/HTMLSelectElementCheckValidity.generated.xml' path='docs/HTMLSelectElementCheckValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool CheckValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLSelectElementReportValidity/HTMLSelectElementReportValidity.generated.xml' path='docs/HTMLSelectElementReportValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ReportValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLSelectElementSetCustomValidity/HTMLSelectElementSetCustomValidity.generated.xml' path='docs/HTMLSelectElementSetCustomValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetCustomValidity(DOMString error) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLSelectElementShowPicker/HTMLSelectElementShowPicker.generated.xml' path='docs/HTMLSelectElementShowPicker/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ShowPicker() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLSelectElementLabels/HTMLSelectElementLabels.generated.xml' path='docs/HTMLSelectElementLabels/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public NodeList Labels { get; }
}

///<include file='Utils/Docs/HTMLDataListElement/HTMLDataListElement.generated.xml' path='docs/HTMLDataListElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLDataListElement : HTMLElement
{
		public HTMLDataListElement() { }
	///<include file='Utils/Docs/HTMLDataListElementOptions/HTMLDataListElementOptions.generated.xml' path='docs/HTMLDataListElementOptions/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLCollection Options { get; }
}

///<include file='Utils/Docs/HTMLOptGroupElement/HTMLOptGroupElement.generated.xml' path='docs/HTMLOptGroupElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLOptGroupElement : HTMLElement
{
		public HTMLOptGroupElement() { }
	///<include file='Utils/Docs/HTMLOptGroupElementDisabled/HTMLOptGroupElementDisabled.generated.xml' path='docs/HTMLOptGroupElementDisabled/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Disabled { get; set; }
	///<include file='Utils/Docs/HTMLOptGroupElementLabel/HTMLOptGroupElementLabel.generated.xml' path='docs/HTMLOptGroupElementLabel/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Label { get; set; }
}

///<include file='Utils/Docs/HTMLOptionElement/HTMLOptionElement.generated.xml' path='docs/HTMLOptionElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLOptionElement : HTMLElement
{
		public HTMLOptionElement() { }
	///<include file='Utils/Docs/HTMLOptionElementDisabled/HTMLOptionElementDisabled.generated.xml' path='docs/HTMLOptionElementDisabled/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Disabled { get; set; }
	///<include file='Utils/Docs/HTMLOptionElementForm/HTMLOptionElementForm.generated.xml' path='docs/HTMLOptionElementForm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormElement? Form { get; }
	///<include file='Utils/Docs/HTMLOptionElementLabel/HTMLOptionElementLabel.generated.xml' path='docs/HTMLOptionElementLabel/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Label { get; set; }
	///<include file='Utils/Docs/HTMLOptionElementDefaultSelected/HTMLOptionElementDefaultSelected.generated.xml' path='docs/HTMLOptionElementDefaultSelected/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool DefaultSelected { get; set; }
	///<include file='Utils/Docs/HTMLOptionElementSelected/HTMLOptionElementSelected.generated.xml' path='docs/HTMLOptionElementSelected/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Selected { get; set; }
	///<include file='Utils/Docs/HTMLOptionElementValue/HTMLOptionElementValue.generated.xml' path='docs/HTMLOptionElementValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Value { get; set; }
	///<include file='Utils/Docs/HTMLOptionElementText/HTMLOptionElementText.generated.xml' path='docs/HTMLOptionElementText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Text { get; set; }
	///<include file='Utils/Docs/HTMLOptionElementIndex/HTMLOptionElementIndex.generated.xml' path='docs/HTMLOptionElementIndex/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long Index { get; }
}

///<include file='Utils/Docs/HTMLTextAreaElement/HTMLTextAreaElement.generated.xml' path='docs/HTMLTextAreaElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTextAreaElement : HTMLElement
{
		public HTMLTextAreaElement() { }
	///<include file='Utils/Docs/HTMLTextAreaElementAutocomplete/HTMLTextAreaElementAutocomplete.generated.xml' path='docs/HTMLTextAreaElementAutocomplete/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Autocomplete { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementCols/HTMLTextAreaElementCols.generated.xml' path='docs/HTMLTextAreaElementCols/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Cols { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString DirName { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementDisabled/HTMLTextAreaElementDisabled.generated.xml' path='docs/HTMLTextAreaElementDisabled/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Disabled { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementForm/HTMLTextAreaElementForm.generated.xml' path='docs/HTMLTextAreaElementForm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormElement? Form { get; }
	///<include file='Utils/Docs/HTMLTextAreaElementMaxLength/HTMLTextAreaElementMaxLength.generated.xml' path='docs/HTMLTextAreaElementMaxLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long MaxLength { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementMinLength/HTMLTextAreaElementMinLength.generated.xml' path='docs/HTMLTextAreaElementMinLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public long MinLength { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementName/HTMLTextAreaElementName.generated.xml' path='docs/HTMLTextAreaElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementPlaceholder/HTMLTextAreaElementPlaceholder.generated.xml' path='docs/HTMLTextAreaElementPlaceholder/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Placeholder { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementReadOnly/HTMLTextAreaElementReadOnly.generated.xml' path='docs/HTMLTextAreaElementReadOnly/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ReadOnly { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementRequired/HTMLTextAreaElementRequired.generated.xml' path='docs/HTMLTextAreaElementRequired/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Required { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementRows/HTMLTextAreaElementRows.generated.xml' path='docs/HTMLTextAreaElementRows/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Rows { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementWrap/HTMLTextAreaElementWrap.generated.xml' path='docs/HTMLTextAreaElementWrap/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Wrap { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementType/HTMLTextAreaElementType.generated.xml' path='docs/HTMLTextAreaElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; }
	///<include file='Utils/Docs/HTMLTextAreaElementDefaultValue/HTMLTextAreaElementDefaultValue.generated.xml' path='docs/HTMLTextAreaElementDefaultValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString DefaultValue { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementValue/HTMLTextAreaElementValue.generated.xml' path='docs/HTMLTextAreaElementValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Value { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementTextLength/HTMLTextAreaElementTextLength.generated.xml' path='docs/HTMLTextAreaElementTextLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong TextLength { get; }
	///<include file='Utils/Docs/HTMLTextAreaElementWillValidate/HTMLTextAreaElementWillValidate.generated.xml' path='docs/HTMLTextAreaElementWillValidate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool WillValidate { get; }
	///<include file='Utils/Docs/HTMLTextAreaElementValidity/HTMLTextAreaElementValidity.generated.xml' path='docs/HTMLTextAreaElementValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ValidityState Validity { get; }
	///<include file='Utils/Docs/HTMLTextAreaElementValidationMessage/HTMLTextAreaElementValidationMessage.generated.xml' path='docs/HTMLTextAreaElementValidationMessage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ValidationMessage { get; }
	///<include file='Utils/Docs/HTMLTextAreaElementCheckValidity/HTMLTextAreaElementCheckValidity.generated.xml' path='docs/HTMLTextAreaElementCheckValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool CheckValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTextAreaElementReportValidity/HTMLTextAreaElementReportValidity.generated.xml' path='docs/HTMLTextAreaElementReportValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ReportValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTextAreaElementSetCustomValidity/HTMLTextAreaElementSetCustomValidity.generated.xml' path='docs/HTMLTextAreaElementSetCustomValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetCustomValidity(DOMString error) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTextAreaElementLabels/HTMLTextAreaElementLabels.generated.xml' path='docs/HTMLTextAreaElementLabels/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public NodeList Labels { get; }
	///<include file='Utils/Docs/HTMLTextAreaElementSelect/HTMLTextAreaElementSelect.generated.xml' path='docs/HTMLTextAreaElementSelect/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Select() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTextAreaElementSelectionStart/HTMLTextAreaElementSelectionStart.generated.xml' path='docs/HTMLTextAreaElementSelectionStart/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong SelectionStart { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementSelectionEnd/HTMLTextAreaElementSelectionEnd.generated.xml' path='docs/HTMLTextAreaElementSelectionEnd/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong SelectionEnd { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementSelectionDirection/HTMLTextAreaElementSelectionDirection.generated.xml' path='docs/HTMLTextAreaElementSelectionDirection/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString SelectionDirection { get; set; }
	///<include file='Utils/Docs/HTMLTextAreaElementSetRangeText/HTMLTextAreaElementSetRangeText.generated.xml' path='docs/HTMLTextAreaElementSetRangeText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetRangeText(DOMString replacement) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTextAreaElementSetRangeText/HTMLTextAreaElementSetRangeText.generated.xml' path='docs/HTMLTextAreaElementSetRangeText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetRangeText(DOMString replacement, ulong start, ulong end, SelectionMode selectionMode) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLTextAreaElementSetSelectionRange/HTMLTextAreaElementSetSelectionRange.generated.xml' path='docs/HTMLTextAreaElementSetSelectionRange/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetSelectionRange(ulong start, ulong end, DOMString direction) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLOutputElement/HTMLOutputElement.generated.xml' path='docs/HTMLOutputElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLOutputElement : HTMLElement
{
		public HTMLOutputElement() { }
	///<include file='Utils/Docs/HTMLOutputElementHtmlFor/HTMLOutputElementHtmlFor.generated.xml' path='docs/HTMLOutputElementHtmlFor/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList HtmlFor { get; }
	///<include file='Utils/Docs/HTMLOutputElementForm/HTMLOutputElementForm.generated.xml' path='docs/HTMLOutputElementForm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormElement? Form { get; }
	///<include file='Utils/Docs/HTMLOutputElementName/HTMLOutputElementName.generated.xml' path='docs/HTMLOutputElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLOutputElementType/HTMLOutputElementType.generated.xml' path='docs/HTMLOutputElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; }
	///<include file='Utils/Docs/HTMLOutputElementDefaultValue/HTMLOutputElementDefaultValue.generated.xml' path='docs/HTMLOutputElementDefaultValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString DefaultValue { get; set; }
	///<include file='Utils/Docs/HTMLOutputElementValue/HTMLOutputElementValue.generated.xml' path='docs/HTMLOutputElementValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Value { get; set; }
	///<include file='Utils/Docs/HTMLOutputElementWillValidate/HTMLOutputElementWillValidate.generated.xml' path='docs/HTMLOutputElementWillValidate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool WillValidate { get; }
	///<include file='Utils/Docs/HTMLOutputElementValidity/HTMLOutputElementValidity.generated.xml' path='docs/HTMLOutputElementValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ValidityState Validity { get; }
	///<include file='Utils/Docs/HTMLOutputElementValidationMessage/HTMLOutputElementValidationMessage.generated.xml' path='docs/HTMLOutputElementValidationMessage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ValidationMessage { get; }
	///<include file='Utils/Docs/HTMLOutputElementCheckValidity/HTMLOutputElementCheckValidity.generated.xml' path='docs/HTMLOutputElementCheckValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool CheckValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLOutputElementReportValidity/HTMLOutputElementReportValidity.generated.xml' path='docs/HTMLOutputElementReportValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ReportValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLOutputElementSetCustomValidity/HTMLOutputElementSetCustomValidity.generated.xml' path='docs/HTMLOutputElementSetCustomValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetCustomValidity(DOMString error) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLOutputElementLabels/HTMLOutputElementLabels.generated.xml' path='docs/HTMLOutputElementLabels/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public NodeList Labels { get; }
}

///<include file='Utils/Docs/HTMLProgressElement/HTMLProgressElement.generated.xml' path='docs/HTMLProgressElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLProgressElement : HTMLElement
{
		public HTMLProgressElement() { }
	///<include file='Utils/Docs/HTMLProgressElementValue/HTMLProgressElementValue.generated.xml' path='docs/HTMLProgressElementValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Value { get; set; }
	///<include file='Utils/Docs/HTMLProgressElementMax/HTMLProgressElementMax.generated.xml' path='docs/HTMLProgressElementMax/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Max { get; set; }
	///<include file='Utils/Docs/HTMLProgressElementPosition/HTMLProgressElementPosition.generated.xml' path='docs/HTMLProgressElementPosition/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Position { get; }
	///<include file='Utils/Docs/HTMLProgressElementLabels/HTMLProgressElementLabels.generated.xml' path='docs/HTMLProgressElementLabels/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public NodeList Labels { get; }
}

///<include file='Utils/Docs/HTMLMeterElement/HTMLMeterElement.generated.xml' path='docs/HTMLMeterElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLMeterElement : HTMLElement
{
		public HTMLMeterElement() { }
	///<include file='Utils/Docs/HTMLMeterElementValue/HTMLMeterElementValue.generated.xml' path='docs/HTMLMeterElementValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Value { get; set; }
	///<include file='Utils/Docs/HTMLMeterElementMin/HTMLMeterElementMin.generated.xml' path='docs/HTMLMeterElementMin/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Min { get; set; }
	///<include file='Utils/Docs/HTMLMeterElementMax/HTMLMeterElementMax.generated.xml' path='docs/HTMLMeterElementMax/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Max { get; set; }
	///<include file='Utils/Docs/HTMLMeterElementLow/HTMLMeterElementLow.generated.xml' path='docs/HTMLMeterElementLow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Low { get; set; }
	///<include file='Utils/Docs/HTMLMeterElementHigh/HTMLMeterElementHigh.generated.xml' path='docs/HTMLMeterElementHigh/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number High { get; set; }
	///<include file='Utils/Docs/HTMLMeterElementOptimum/HTMLMeterElementOptimum.generated.xml' path='docs/HTMLMeterElementOptimum/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Optimum { get; set; }
	///<include file='Utils/Docs/HTMLMeterElementLabels/HTMLMeterElementLabels.generated.xml' path='docs/HTMLMeterElementLabels/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public NodeList Labels { get; }
}

///<include file='Utils/Docs/HTMLFieldSetElement/HTMLFieldSetElement.generated.xml' path='docs/HTMLFieldSetElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLFieldSetElement : HTMLElement
{
		public HTMLFieldSetElement() { }
	///<include file='Utils/Docs/HTMLFieldSetElementDisabled/HTMLFieldSetElementDisabled.generated.xml' path='docs/HTMLFieldSetElementDisabled/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Disabled { get; set; }
	///<include file='Utils/Docs/HTMLFieldSetElementForm/HTMLFieldSetElementForm.generated.xml' path='docs/HTMLFieldSetElementForm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormElement? Form { get; }
	///<include file='Utils/Docs/HTMLFieldSetElementName/HTMLFieldSetElementName.generated.xml' path='docs/HTMLFieldSetElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLFieldSetElementType/HTMLFieldSetElementType.generated.xml' path='docs/HTMLFieldSetElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; }
	///<include file='Utils/Docs/HTMLFieldSetElementElements/HTMLFieldSetElementElements.generated.xml' path='docs/HTMLFieldSetElementElements/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLCollection Elements { get; }
	///<include file='Utils/Docs/HTMLFieldSetElementWillValidate/HTMLFieldSetElementWillValidate.generated.xml' path='docs/HTMLFieldSetElementWillValidate/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool WillValidate { get; }
	///<include file='Utils/Docs/HTMLFieldSetElementValidity/HTMLFieldSetElementValidity.generated.xml' path='docs/HTMLFieldSetElementValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ValidityState Validity { get; }
	///<include file='Utils/Docs/HTMLFieldSetElementValidationMessage/HTMLFieldSetElementValidationMessage.generated.xml' path='docs/HTMLFieldSetElementValidationMessage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ValidationMessage { get; }
	///<include file='Utils/Docs/HTMLFieldSetElementCheckValidity/HTMLFieldSetElementCheckValidity.generated.xml' path='docs/HTMLFieldSetElementCheckValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool CheckValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLFieldSetElementReportValidity/HTMLFieldSetElementReportValidity.generated.xml' path='docs/HTMLFieldSetElementReportValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ReportValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLFieldSetElementSetCustomValidity/HTMLFieldSetElementSetCustomValidity.generated.xml' path='docs/HTMLFieldSetElementSetCustomValidity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined SetCustomValidity(DOMString error) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLLegendElement/HTMLLegendElement.generated.xml' path='docs/HTMLLegendElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLLegendElement : HTMLElement
{
		public HTMLLegendElement() { }
	///<include file='Utils/Docs/HTMLLegendElementForm/HTMLLegendElementForm.generated.xml' path='docs/HTMLLegendElementForm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public HTMLFormElement? Form { get; }
}

///<include file='Utils/Docs/ValidityState/ValidityState.generated.xml' path='docs/ValidityState/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ValidityState
{
	///<include file='Utils/Docs/ValidityStateValueMissing/ValidityStateValueMissing.generated.xml' path='docs/ValidityStateValueMissing/*'/>
	public bool ValueMissing { get; }
	///<include file='Utils/Docs/ValidityStateTypeMismatch/ValidityStateTypeMismatch.generated.xml' path='docs/ValidityStateTypeMismatch/*'/>
	public bool TypeMismatch { get; }
	///<include file='Utils/Docs/ValidityStatePatternMismatch/ValidityStatePatternMismatch.generated.xml' path='docs/ValidityStatePatternMismatch/*'/>
	public bool PatternMismatch { get; }
	///<include file='Utils/Docs/ValidityStateTooLong/ValidityStateTooLong.generated.xml' path='docs/ValidityStateTooLong/*'/>
	public bool TooLong { get; }
	///<include file='Utils/Docs/ValidityStateTooShort/ValidityStateTooShort.generated.xml' path='docs/ValidityStateTooShort/*'/>
	public bool TooShort { get; }
	///<include file='Utils/Docs/ValidityStateRangeUnderflow/ValidityStateRangeUnderflow.generated.xml' path='docs/ValidityStateRangeUnderflow/*'/>
	public bool RangeUnderflow { get; }
	///<include file='Utils/Docs/ValidityStateRangeOverflow/ValidityStateRangeOverflow.generated.xml' path='docs/ValidityStateRangeOverflow/*'/>
	public bool RangeOverflow { get; }
	///<include file='Utils/Docs/ValidityStateStepMismatch/ValidityStateStepMismatch.generated.xml' path='docs/ValidityStateStepMismatch/*'/>
	public bool StepMismatch { get; }
	///<include file='Utils/Docs/ValidityStateBadInput/ValidityStateBadInput.generated.xml' path='docs/ValidityStateBadInput/*'/>
	public bool BadInput { get; }
	///<include file='Utils/Docs/ValidityStateCustomError/ValidityStateCustomError.generated.xml' path='docs/ValidityStateCustomError/*'/>
	public bool CustomError { get; }
	///<include file='Utils/Docs/ValidityStateValid/ValidityStateValid.generated.xml' path='docs/ValidityStateValid/*'/>
	public bool Valid { get; }
}

///<include file='Utils/Docs/SubmitEvent/SubmitEvent.generated.xml' path='docs/SubmitEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SubmitEvent : Event
{
	///<include file='Utils/Docs/SubmitEventSubmitEvent/SubmitEventSubmitEvent.generated.xml' path='docs/SubmitEventSubmitEvent/*'/>
	public SubmitEvent(DOMString type, SubmitEventInit eventInitDict) { }
	///<include file='Utils/Docs/SubmitEventSubmitter/SubmitEventSubmitter.generated.xml' path='docs/SubmitEventSubmitter/*'/>
	public HTMLElement? Submitter { get; }
	public SubmitEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SubmitEventInit : EventInit
{
		public HTMLElement? Submitter;
}

///<include file='Utils/Docs/FormDataEvent/FormDataEvent.generated.xml' path='docs/FormDataEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FormDataEvent : Event
{
	///<include file='Utils/Docs/FormDataEventFormDataEvent/FormDataEventFormDataEvent.generated.xml' path='docs/FormDataEventFormDataEvent/*'/>
	public FormDataEvent(DOMString type, FormDataEventInit eventInitDict) { }
	///<include file='Utils/Docs/FormDataEventFormData/FormDataEventFormData.generated.xml' path='docs/FormDataEventFormData/*'/>
	public FormData FormData { get; }
	public FormDataEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FormDataEventInit : EventInit
{
		public required FormData FormData;
}

///<include file='Utils/Docs/HTMLDetailsElement/HTMLDetailsElement.generated.xml' path='docs/HTMLDetailsElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLDetailsElement : HTMLElement
{
		public HTMLDetailsElement() { }
	///<include file='Utils/Docs/HTMLDetailsElementName/HTMLDetailsElementName.generated.xml' path='docs/HTMLDetailsElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLDetailsElementOpen/HTMLDetailsElementOpen.generated.xml' path='docs/HTMLDetailsElementOpen/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Open { get; set; }
}

///<include file='Utils/Docs/HTMLDialogElement/HTMLDialogElement.generated.xml' path='docs/HTMLDialogElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLDialogElement : HTMLElement
{
		public HTMLDialogElement() { }
	///<include file='Utils/Docs/HTMLDialogElementOpen/HTMLDialogElementOpen.generated.xml' path='docs/HTMLDialogElementOpen/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Open { get; set; }
	///<include file='Utils/Docs/HTMLDialogElementReturnValue/HTMLDialogElementReturnValue.generated.xml' path='docs/HTMLDialogElementReturnValue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ReturnValue { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ClosedBy { get; set; }
	///<include file='Utils/Docs/HTMLDialogElementShow/HTMLDialogElementShow.generated.xml' path='docs/HTMLDialogElementShow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Show() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLDialogElementShowModal/HTMLDialogElementShowModal.generated.xml' path='docs/HTMLDialogElementShowModal/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ShowModal() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLDialogElementClose/HTMLDialogElementClose.generated.xml' path='docs/HTMLDialogElementClose/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Close(DOMString returnValue) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined RequestClose(DOMString returnValue) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLScriptElement/HTMLScriptElement.generated.xml' path='docs/HTMLScriptElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLScriptElement : HTMLElement, HTMLAttributionSrcElementUtils
{
		public HTMLScriptElement() { }
	///<include file='Utils/Docs/HTMLScriptElementSrc/HTMLScriptElementSrc.generated.xml' path='docs/HTMLScriptElementSrc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Src { get; set; }
	///<include file='Utils/Docs/HTMLScriptElementType/HTMLScriptElementType.generated.xml' path='docs/HTMLScriptElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
	///<include file='Utils/Docs/HTMLScriptElementNoModule/HTMLScriptElementNoModule.generated.xml' path='docs/HTMLScriptElementNoModule/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool NoModule { get; set; }
	///<include file='Utils/Docs/HTMLScriptElementAsync/HTMLScriptElementAsync.generated.xml' path='docs/HTMLScriptElementAsync/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Async { get; set; }
	///<include file='Utils/Docs/HTMLScriptElementDefer/HTMLScriptElementDefer.generated.xml' path='docs/HTMLScriptElementDefer/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Defer { get; set; }
	///<include file='Utils/Docs/HTMLScriptElementCrossOrigin/HTMLScriptElementCrossOrigin.generated.xml' path='docs/HTMLScriptElementCrossOrigin/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString? CrossOrigin { get; set; }
	///<include file='Utils/Docs/HTMLScriptElementText/HTMLScriptElementText.generated.xml' path='docs/HTMLScriptElementText/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Text { get; set; }
	///<include file='Utils/Docs/HTMLScriptElementIntegrity/HTMLScriptElementIntegrity.generated.xml' path='docs/HTMLScriptElementIntegrity/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Integrity { get; set; }
	///<include file='Utils/Docs/HTMLScriptElementReferrerPolicy/HTMLScriptElementReferrerPolicy.generated.xml' path='docs/HTMLScriptElementReferrerPolicy/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ReferrerPolicy { get; set; }
	///<include file='Utils/Docs/HTMLScriptElementBlocking/HTMLScriptElementBlocking.generated.xml' path='docs/HTMLScriptElementBlocking/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMTokenList Blocking { get; }
	///<include file='Utils/Docs/HTMLScriptElementFetchPriority/HTMLScriptElementFetchPriority.generated.xml' path='docs/HTMLScriptElementFetchPriority/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FetchPriority { get; set; }
	///<include file='Utils/Docs/HTMLScriptElementSupports/HTMLScriptElementSupports.generated.xml' path='docs/HTMLScriptElementSupports/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public static bool Supports(DOMString type) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLTemplateElement/HTMLTemplateElement.generated.xml' path='docs/HTMLTemplateElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLTemplateElement : HTMLElement
{
		public HTMLTemplateElement() { }
	///<include file='Utils/Docs/HTMLTemplateElementContent/HTMLTemplateElementContent.generated.xml' path='docs/HTMLTemplateElementContent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DocumentFragment Content { get; }
	///<include file='Utils/Docs/HTMLTemplateElementShadowRootMode/HTMLTemplateElementShadowRootMode.generated.xml' path='docs/HTMLTemplateElementShadowRootMode/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ShadowRootMode { get; set; }
	///<include file='Utils/Docs/HTMLTemplateElementShadowRootDelegatesFocus/HTMLTemplateElementShadowRootDelegatesFocus.generated.xml' path='docs/HTMLTemplateElementShadowRootDelegatesFocus/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ShadowRootDelegatesFocus { get; set; }
	///<include file='Utils/Docs/HTMLTemplateElementShadowRootClonable/HTMLTemplateElementShadowRootClonable.generated.xml' path='docs/HTMLTemplateElementShadowRootClonable/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ShadowRootClonable { get; set; }
	///<include file='Utils/Docs/HTMLTemplateElementShadowRootSerializable/HTMLTemplateElementShadowRootSerializable.generated.xml' path='docs/HTMLTemplateElementShadowRootSerializable/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool ShadowRootSerializable { get; set; }
}

///<include file='Utils/Docs/HTMLSlotElement/HTMLSlotElement.generated.xml' path='docs/HTMLSlotElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLSlotElement : HTMLElement
{
		public HTMLSlotElement() { }
	///<include file='Utils/Docs/HTMLSlotElementName/HTMLSlotElementName.generated.xml' path='docs/HTMLSlotElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/HTMLSlotElementAssignedNodes/HTMLSlotElementAssignedNodes.generated.xml' path='docs/HTMLSlotElementAssignedNodes/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public List<Node> AssignedNodes(AssignedNodesOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLSlotElementAssignedElements/HTMLSlotElementAssignedElements.generated.xml' path='docs/HTMLSlotElementAssignedElements/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public List<Element> AssignedElements(AssignedNodesOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLSlotElementAssign/HTMLSlotElementAssign.generated.xml' path='docs/HTMLSlotElementAssign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Assign(params Union69[] nodes) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AssignedNodesOptions
{
		public bool Flatten;
}


///<include file='Utils/Docs/HTMLCanvasElement/HTMLCanvasElement.generated.xml' path='docs/HTMLCanvasElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLCanvasElement : HTMLElement
{
		public HTMLCanvasElement() { }
	///<include file='Utils/Docs/HTMLCanvasElementWidth/HTMLCanvasElementWidth.generated.xml' path='docs/HTMLCanvasElementWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Width { get; set; }
	///<include file='Utils/Docs/HTMLCanvasElementHeight/HTMLCanvasElementHeight.generated.xml' path='docs/HTMLCanvasElementHeight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Height { get; set; }
	///<include file='Utils/Docs/HTMLCanvasElementGetContext/HTMLCanvasElementGetContext.generated.xml' path='docs/HTMLCanvasElementGetContext/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public RenderingContext? GetContext(DOMString contextId, dynamic options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLCanvasElementToDataURL/HTMLCanvasElementToDataURL.generated.xml' path='docs/HTMLCanvasElementToDataURL/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString ToDataURL(DOMString type, dynamic quality) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLCanvasElementToBlob/HTMLCanvasElementToBlob.generated.xml' path='docs/HTMLCanvasElementToBlob/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ToBlob(BlobCallback callback, DOMString type, dynamic quality) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLCanvasElementTransferControlToOffscreen/HTMLCanvasElementTransferControlToOffscreen.generated.xml' path='docs/HTMLCanvasElementTransferControlToOffscreen/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public OffscreenCanvas TransferControlToOffscreen() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CanvasRenderingContext2DSettings
{
		public bool Alpha;
		public bool Desynchronized;
		public PredefinedColorSpace ColorSpace;
		public bool WillReadFrequently;
}

///<include file='Utils/Docs/CanvasRenderingContext2D/CanvasRenderingContext2D.generated.xml' path='docs/CanvasRenderingContext2D/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CanvasRenderingContext2D
{
	///<include file='Utils/Docs/CanvasRenderingContext2DCanvas/CanvasRenderingContext2DCanvas.generated.xml' path='docs/CanvasRenderingContext2DCanvas/*'/>
	public HTMLCanvasElement Canvas { get; }
	///<include file='Utils/Docs/CanvasRenderingContext2DGetContextAttributes/CanvasRenderingContext2DGetContextAttributes.generated.xml' path='docs/CanvasRenderingContext2DGetContextAttributes/*'/>
	public CanvasRenderingContext2DSettings GetContextAttributes() { throw new System.NotImplementedException(); }
}

















///<include file='Utils/Docs/CanvasGradient/CanvasGradient.generated.xml' path='docs/CanvasGradient/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CanvasGradient
{
	///<include file='Utils/Docs/CanvasGradientAddColorStop/CanvasGradientAddColorStop.generated.xml' path='docs/CanvasGradientAddColorStop/*'/>
	public Undefined AddColorStop(Number offset, DOMString color) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CanvasPattern/CanvasPattern.generated.xml' path='docs/CanvasPattern/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CanvasPattern
{
	///<include file='Utils/Docs/CanvasPatternSetTransform/CanvasPatternSetTransform.generated.xml' path='docs/CanvasPatternSetTransform/*'/>
	public Undefined SetTransform(DOMMatrix2DInit transform) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TextMetrics/TextMetrics.generated.xml' path='docs/TextMetrics/*'/>
[To(ToAttribute.Default)]
public partial class TextMetrics
{
	///<include file='Utils/Docs/TextMetricsWidth/TextMetricsWidth.generated.xml' path='docs/TextMetricsWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number Width { get; }
	///<include file='Utils/Docs/TextMetricsActualBoundingBoxLeft/TextMetricsActualBoundingBoxLeft.generated.xml' path='docs/TextMetricsActualBoundingBoxLeft/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number ActualBoundingBoxLeft { get; }
	///<include file='Utils/Docs/TextMetricsActualBoundingBoxRight/TextMetricsActualBoundingBoxRight.generated.xml' path='docs/TextMetricsActualBoundingBoxRight/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number ActualBoundingBoxRight { get; }
	///<include file='Utils/Docs/TextMetricsFontBoundingBoxAscent/TextMetricsFontBoundingBoxAscent.generated.xml' path='docs/TextMetricsFontBoundingBoxAscent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number FontBoundingBoxAscent { get; }
	///<include file='Utils/Docs/TextMetricsFontBoundingBoxDescent/TextMetricsFontBoundingBoxDescent.generated.xml' path='docs/TextMetricsFontBoundingBoxDescent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number FontBoundingBoxDescent { get; }
	///<include file='Utils/Docs/TextMetricsActualBoundingBoxAscent/TextMetricsActualBoundingBoxAscent.generated.xml' path='docs/TextMetricsActualBoundingBoxAscent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number ActualBoundingBoxAscent { get; }
	///<include file='Utils/Docs/TextMetricsActualBoundingBoxDescent/TextMetricsActualBoundingBoxDescent.generated.xml' path='docs/TextMetricsActualBoundingBoxDescent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number ActualBoundingBoxDescent { get; }
	///<include file='Utils/Docs/TextMetricsEmHeightAscent/TextMetricsEmHeightAscent.generated.xml' path='docs/TextMetricsEmHeightAscent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number EmHeightAscent { get; }
	///<include file='Utils/Docs/TextMetricsEmHeightDescent/TextMetricsEmHeightDescent.generated.xml' path='docs/TextMetricsEmHeightDescent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number EmHeightDescent { get; }
	///<include file='Utils/Docs/TextMetricsHangingBaseline/TextMetricsHangingBaseline.generated.xml' path='docs/TextMetricsHangingBaseline/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number HangingBaseline { get; }
	///<include file='Utils/Docs/TextMetricsAlphabeticBaseline/TextMetricsAlphabeticBaseline.generated.xml' path='docs/TextMetricsAlphabeticBaseline/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number AlphabeticBaseline { get; }
	///<include file='Utils/Docs/TextMetricsIdeographicBaseline/TextMetricsIdeographicBaseline.generated.xml' path='docs/TextMetricsIdeographicBaseline/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Number IdeographicBaseline { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageDataSettings
{
		public PredefinedColorSpace ColorSpace;
}

///<include file='Utils/Docs/ImageData/ImageData.generated.xml' path='docs/ImageData/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageData
{
	///<include file='Utils/Docs/ImageDataImageData/ImageDataImageData.generated.xml' path='docs/ImageDataImageData/*'/>
	public ImageData(ulong sw, ulong sh, ImageDataSettings settings) { }
	///<include file='Utils/Docs/ImageDataImageData/ImageDataImageData.generated.xml' path='docs/ImageDataImageData/*'/>
	public ImageData(Unsupported /*Uint8ClampedArray*/ data, ulong sw, ulong sh, ImageDataSettings settings) { }
	///<include file='Utils/Docs/ImageDataWidth/ImageDataWidth.generated.xml' path='docs/ImageDataWidth/*'/>
	public ulong Width { get; }
	///<include file='Utils/Docs/ImageDataHeight/ImageDataHeight.generated.xml' path='docs/ImageDataHeight/*'/>
	public ulong Height { get; }
	///<include file='Utils/Docs/ImageDataData/ImageDataData.generated.xml' path='docs/ImageDataData/*'/>
	public Unsupported /*Uint8ClampedArray*/ Data { get; }
	///<include file='Utils/Docs/ImageDataColorSpace/ImageDataColorSpace.generated.xml' path='docs/ImageDataColorSpace/*'/>
	public PredefinedColorSpace ColorSpace { get; }
	public ImageData() { }
}

///<include file='Utils/Docs/Path2D/Path2D.generated.xml' path='docs/Path2D/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Path2D
{
	///<include file='Utils/Docs/Path2DPath2D/Path2DPath2D.generated.xml' path='docs/Path2DPath2D/*'/>
	public Path2D(Union77 path) { }
	///<include file='Utils/Docs/Path2DAddPath/Path2DAddPath.generated.xml' path='docs/Path2DAddPath/*'/>
	public Undefined AddPath(Path2D path, DOMMatrix2DInit transform) { throw new System.NotImplementedException(); }
	public Path2D() { }
}


///<include file='Utils/Docs/ImageBitmapRenderingContext/ImageBitmapRenderingContext.generated.xml' path='docs/ImageBitmapRenderingContext/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageBitmapRenderingContext
{
	///<include file='Utils/Docs/ImageBitmapRenderingContextCanvas/ImageBitmapRenderingContextCanvas.generated.xml' path='docs/ImageBitmapRenderingContextCanvas/*'/>
	public Union78 Canvas { get; }
	///<include file='Utils/Docs/ImageBitmapRenderingContextTransferFromImageBitmap/ImageBitmapRenderingContextTransferFromImageBitmap.generated.xml' path='docs/ImageBitmapRenderingContextTransferFromImageBitmap/*'/>
	public Undefined TransferFromImageBitmap(ImageBitmap? bitmap) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageBitmapRenderingContextSettings
{
		public bool Alpha;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageEncodeOptions
{
		public DOMString Type;
		public double Quality;
}

///<include file='Utils/Docs/OffscreenCanvas/OffscreenCanvas.generated.xml' path='docs/OffscreenCanvas/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class OffscreenCanvas : EventTarget
{
	///<include file='Utils/Docs/OffscreenCanvasOffscreenCanvas/OffscreenCanvasOffscreenCanvas.generated.xml' path='docs/OffscreenCanvasOffscreenCanvas/*'/>
	public OffscreenCanvas(ulong width, ulong height) { }
	///<include file='Utils/Docs/OffscreenCanvasWidth/OffscreenCanvasWidth.generated.xml' path='docs/OffscreenCanvasWidth/*'/>
	public ulong Width { get; set; }
	///<include file='Utils/Docs/OffscreenCanvasHeight/OffscreenCanvasHeight.generated.xml' path='docs/OffscreenCanvasHeight/*'/>
	public ulong Height { get; set; }
	///<include file='Utils/Docs/OffscreenCanvasGetContext/OffscreenCanvasGetContext.generated.xml' path='docs/OffscreenCanvasGetContext/*'/>
	public OffscreenRenderingContext? GetContext(OffscreenRenderingContextId contextId, dynamic options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/OffscreenCanvasTransferToImageBitmap/OffscreenCanvasTransferToImageBitmap.generated.xml' path='docs/OffscreenCanvasTransferToImageBitmap/*'/>
	public ImageBitmap TransferToImageBitmap() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/OffscreenCanvasConvertToBlob/OffscreenCanvasConvertToBlob.generated.xml' path='docs/OffscreenCanvasConvertToBlob/*'/>
	public Task<Blob> ConvertToBlob(ImageEncodeOptions options) { throw new System.NotImplementedException(); }
		public EventHandler Oncontextlost { get; set; }
		public EventHandler Oncontextrestored { get; set; }
	public OffscreenCanvas() { }
}

///<include file='Utils/Docs/OffscreenCanvasRenderingContext2D/OffscreenCanvasRenderingContext2D.generated.xml' path='docs/OffscreenCanvasRenderingContext2D/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class OffscreenCanvasRenderingContext2D
{
		public OffscreenCanvas Canvas { get; }
}
















///<include file='Utils/Docs/CustomElementRegistry/CustomElementRegistry.generated.xml' path='docs/CustomElementRegistry/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CustomElementRegistry
{
	///<include file='Utils/Docs/CustomElementRegistryDefine/CustomElementRegistryDefine.generated.xml' path='docs/CustomElementRegistryDefine/*'/>
	public Undefined Define(DOMString name, CustomElementConstructor constructor, ElementDefinitionOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CustomElementRegistryGet/CustomElementRegistryGet.generated.xml' path='docs/CustomElementRegistryGet/*'/>
	public Union80 Get(DOMString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CustomElementRegistryGetName/CustomElementRegistryGetName.generated.xml' path='docs/CustomElementRegistryGetName/*'/>
	public DOMString? GetName(CustomElementConstructor constructor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CustomElementRegistryWhenDefined/CustomElementRegistryWhenDefined.generated.xml' path='docs/CustomElementRegistryWhenDefined/*'/>
	public Task<CustomElementConstructor> WhenDefined(DOMString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CustomElementRegistryUpgrade/CustomElementRegistryUpgrade.generated.xml' path='docs/CustomElementRegistryUpgrade/*'/>
	public Undefined Upgrade(Node root) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ElementDefinitionOptions
{
		public DOMString Extends;
}

///<include file='Utils/Docs/ElementInternals/ElementInternals.generated.xml' path='docs/ElementInternals/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ElementInternals
{
	///<include file='Utils/Docs/ElementInternalsShadowRoot/ElementInternalsShadowRoot.generated.xml' path='docs/ElementInternalsShadowRoot/*'/>
	public ShadowRoot? ShadowRoot { get; }
	///<include file='Utils/Docs/ElementInternalsSetFormValue/ElementInternalsSetFormValue.generated.xml' path='docs/ElementInternalsSetFormValue/*'/>
	public Undefined SetFormValue(Union81? value, Union82? state) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementInternalsForm/ElementInternalsForm.generated.xml' path='docs/ElementInternalsForm/*'/>
	public HTMLFormElement? Form { get; }
	///<include file='Utils/Docs/ElementInternalsSetValidity/ElementInternalsSetValidity.generated.xml' path='docs/ElementInternalsSetValidity/*'/>
	public Undefined SetValidity(ValidityStateFlags flags, DOMString message, HTMLElement anchor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementInternalsWillValidate/ElementInternalsWillValidate.generated.xml' path='docs/ElementInternalsWillValidate/*'/>
	public bool WillValidate { get; }
	///<include file='Utils/Docs/ElementInternalsValidity/ElementInternalsValidity.generated.xml' path='docs/ElementInternalsValidity/*'/>
	public ValidityState Validity { get; }
	///<include file='Utils/Docs/ElementInternalsValidationMessage/ElementInternalsValidationMessage.generated.xml' path='docs/ElementInternalsValidationMessage/*'/>
	public DOMString ValidationMessage { get; }
	///<include file='Utils/Docs/ElementInternalsCheckValidity/ElementInternalsCheckValidity.generated.xml' path='docs/ElementInternalsCheckValidity/*'/>
	public bool CheckValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementInternalsReportValidity/ElementInternalsReportValidity.generated.xml' path='docs/ElementInternalsReportValidity/*'/>
	public bool ReportValidity() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementInternalsLabels/ElementInternalsLabels.generated.xml' path='docs/ElementInternalsLabels/*'/>
	public NodeList Labels { get; }
	///<include file='Utils/Docs/ElementInternalsStates/ElementInternalsStates.generated.xml' path='docs/ElementInternalsStates/*'/>
	public CustomStateSet States { get; }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class ValidityStateFlags
{
		public bool ValueMissing;
		public bool TypeMismatch;
		public bool PatternMismatch;
		public bool TooLong;
		public bool TooShort;
		public bool RangeUnderflow;
		public bool RangeOverflow;
		public bool StepMismatch;
		public bool BadInput;
		public bool CustomError;
}

///<include file='Utils/Docs/CustomStateSet/CustomStateSet.generated.xml' path='docs/CustomStateSet/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CustomStateSet
{
	
}

///<include file='Utils/Docs/VisibilityStateEntry/VisibilityStateEntry.generated.xml' path='docs/VisibilityStateEntry/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VisibilityStateEntry : PerformanceEntry
{
		public DOMString Name { get; }
		public DOMString EntryType { get; }
		public DOMHighResTimeStamp StartTime { get; }
		public ulong Duration { get; }
}

///<include file='Utils/Docs/UserActivation/UserActivation.generated.xml' path='docs/UserActivation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class UserActivation
{
	///<include file='Utils/Docs/UserActivationHasBeenActive/UserActivationHasBeenActive.generated.xml' path='docs/UserActivationHasBeenActive/*'/>
	public bool HasBeenActive { get; }
	///<include file='Utils/Docs/UserActivationIsActive/UserActivationIsActive.generated.xml' path='docs/UserActivationIsActive/*'/>
	public bool IsActive { get; }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorUserActivation/NavigatorUserActivation.generated.xml' path='docs/NavigatorUserActivation/*'/>
	public UserActivation UserActivation { get; }
}

///<include file='Utils/Docs/ToggleEvent/ToggleEvent.generated.xml' path='docs/ToggleEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ToggleEvent : Event
{
	///<include file='Utils/Docs/ToggleEventToggleEvent/ToggleEventToggleEvent.generated.xml' path='docs/ToggleEventToggleEvent/*'/>
	public ToggleEvent(DOMString type, ToggleEventInit eventInitDict) { }
	///<include file='Utils/Docs/ToggleEventOldState/ToggleEventOldState.generated.xml' path='docs/ToggleEventOldState/*'/>
	public DOMString OldState { get; }
	///<include file='Utils/Docs/ToggleEventNewState/ToggleEventNewState.generated.xml' path='docs/ToggleEventNewState/*'/>
	public DOMString NewState { get; }
	public ToggleEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ToggleEventInit : EventInit
{
		public DOMString OldState;
		public DOMString NewState;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FocusOptions
{
		public bool PreventScroll;
		public bool FocusVisible;
}

///<include file='Utils/Docs/CloseWatcher/CloseWatcher.generated.xml' path='docs/CloseWatcher/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CloseWatcher : EventTarget
{
	///<include file='Utils/Docs/CloseWatcherCloseWatcher/CloseWatcherCloseWatcher.generated.xml' path='docs/CloseWatcherCloseWatcher/*'/>
	public CloseWatcher(CloseWatcherOptions options) { }
	///<include file='Utils/Docs/CloseWatcherRequestClose/CloseWatcherRequestClose.generated.xml' path='docs/CloseWatcherRequestClose/*'/>
	public Undefined RequestClose() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CloseWatcherClose/CloseWatcherClose.generated.xml' path='docs/CloseWatcherClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CloseWatcherDestroy/CloseWatcherDestroy.generated.xml' path='docs/CloseWatcherDestroy/*'/>
	public Undefined Destroy() { throw new System.NotImplementedException(); }
		public EventHandler Oncancel { get; set; }
		public EventHandler Onclose { get; set; }
	public CloseWatcher() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CloseWatcherOptions
{
		public AbortSignal Signal;
}

///<include file='Utils/Docs/DataTransfer/DataTransfer.generated.xml' path='docs/DataTransfer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DataTransfer
{
	///<include file='Utils/Docs/DataTransferDataTransfer/DataTransferDataTransfer.generated.xml' path='docs/DataTransferDataTransfer/*'/>
	public DataTransfer() { }
	///<include file='Utils/Docs/DataTransferDropEffect/DataTransferDropEffect.generated.xml' path='docs/DataTransferDropEffect/*'/>
	public DOMString DropEffect { get; set; }
	///<include file='Utils/Docs/DataTransferEffectAllowed/DataTransferEffectAllowed.generated.xml' path='docs/DataTransferEffectAllowed/*'/>
	public DOMString EffectAllowed { get; set; }
	///<include file='Utils/Docs/DataTransferItems/DataTransferItems.generated.xml' path='docs/DataTransferItems/*'/>
	public DataTransferItemList Items { get; }
	///<include file='Utils/Docs/DataTransferSetDragImage/DataTransferSetDragImage.generated.xml' path='docs/DataTransferSetDragImage/*'/>
	public Undefined SetDragImage(Element image, long x, long y) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DataTransferTypes/DataTransferTypes.generated.xml' path='docs/DataTransferTypes/*'/>
	public DOMString[] Types { get; }
	///<include file='Utils/Docs/DataTransferGetData/DataTransferGetData.generated.xml' path='docs/DataTransferGetData/*'/>
	public DOMString GetData(DOMString format) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DataTransferSetData/DataTransferSetData.generated.xml' path='docs/DataTransferSetData/*'/>
	public Undefined SetData(DOMString format, DOMString data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DataTransferClearData/DataTransferClearData.generated.xml' path='docs/DataTransferClearData/*'/>
	public Undefined ClearData(DOMString format) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DataTransferFiles/DataTransferFiles.generated.xml' path='docs/DataTransferFiles/*'/>
	public FileList Files { get; }
}

///<include file='Utils/Docs/DataTransferItemList/DataTransferItemList.generated.xml' path='docs/DataTransferItemList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DataTransferItemList
{
	///<include file='Utils/Docs/DataTransferItemListLength/DataTransferItemListLength.generated.xml' path='docs/DataTransferItemListLength/*'/>
	public ulong Length { get; }
	
	///<include file='Utils/Docs/DataTransferItemListAdd/DataTransferItemListAdd.generated.xml' path='docs/DataTransferItemListAdd/*'/>
	public DataTransferItem? Add(DOMString data, DOMString type) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DataTransferItemListAdd/DataTransferItemListAdd.generated.xml' path='docs/DataTransferItemListAdd/*'/>
	public DataTransferItem? Add(File data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DataTransferItemListRemove/DataTransferItemListRemove.generated.xml' path='docs/DataTransferItemListRemove/*'/>
	public Undefined Remove(ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DataTransferItemListClear/DataTransferItemListClear.generated.xml' path='docs/DataTransferItemListClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/DataTransferItem/DataTransferItem.generated.xml' path='docs/DataTransferItem/*'/>
public partial class DataTransferItem
{
	///<include file='Utils/Docs/DataTransferItemKind/DataTransferItemKind.generated.xml' path='docs/DataTransferItemKind/*'/>
	public DOMString Kind { get; }
	///<include file='Utils/Docs/DataTransferItemType/DataTransferItemType.generated.xml' path='docs/DataTransferItemType/*'/>
	public DOMString Type { get; }
	///<include file='Utils/Docs/DataTransferItemGetAsString/DataTransferItemGetAsString.generated.xml' path='docs/DataTransferItemGetAsString/*'/>
	public Undefined GetAsString(FunctionStringCallback? callback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DataTransferItemGetAsFile/DataTransferItemGetAsFile.generated.xml' path='docs/DataTransferItemGetAsFile/*'/>
	public File? GetAsFile() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/DragEvent/DragEvent.generated.xml' path='docs/DragEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DragEvent : MouseEvent
{
	///<include file='Utils/Docs/DragEventDragEvent/DragEventDragEvent.generated.xml' path='docs/DragEventDragEvent/*'/>
	public DragEvent(DOMString type, DragEventInit eventInitDict) { }
	///<include file='Utils/Docs/DragEventDataTransfer/DragEventDataTransfer.generated.xml' path='docs/DragEventDataTransfer/*'/>
	public DataTransfer? DataTransfer { get; }
	public DragEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DragEventInit : MouseEventInit
{
		public DataTransfer? DataTransfer;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window : EventTarget
{
	///<include file='Utils/Docs/WindowWindow/WindowWindow.generated.xml' path='docs/WindowWindow/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public WindowProxy _window { get; }
	///<include file='Utils/Docs/WindowSelf/WindowSelf.generated.xml' path='docs/WindowSelf/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public WindowProxy Self { get; }
	///<include file='Utils/Docs/WindowDocument/WindowDocument.generated.xml' path='docs/WindowDocument/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Document Document { get; }
	///<include file='Utils/Docs/WindowName/WindowName.generated.xml' path='docs/WindowName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/WindowLocation/WindowLocation.generated.xml' path='docs/WindowLocation/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Location Location { get; }
	///<include file='Utils/Docs/WindowHistory/WindowHistory.generated.xml' path='docs/WindowHistory/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public History History { get; }
	///<include file='Utils/Docs/WindowNavigation/WindowNavigation.generated.xml' path='docs/WindowNavigation/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Navigation Navigation { get; }
	///<include file='Utils/Docs/WindowCustomElements/WindowCustomElements.generated.xml' path='docs/WindowCustomElements/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public CustomElementRegistry CustomElements { get; }
	///<include file='Utils/Docs/WindowLocationbar/WindowLocationbar.generated.xml' path='docs/WindowLocationbar/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public BarProp Locationbar { get; }
	///<include file='Utils/Docs/WindowMenubar/WindowMenubar.generated.xml' path='docs/WindowMenubar/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public BarProp Menubar { get; }
	///<include file='Utils/Docs/WindowPersonalbar/WindowPersonalbar.generated.xml' path='docs/WindowPersonalbar/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public BarProp Personalbar { get; }
	///<include file='Utils/Docs/WindowScrollbars/WindowScrollbars.generated.xml' path='docs/WindowScrollbars/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public BarProp Scrollbars { get; }
	///<include file='Utils/Docs/WindowStatusbar/WindowStatusbar.generated.xml' path='docs/WindowStatusbar/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public BarProp Statusbar { get; }
	///<include file='Utils/Docs/WindowToolbar/WindowToolbar.generated.xml' path='docs/WindowToolbar/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public BarProp Toolbar { get; }
	///<include file='Utils/Docs/WindowStatus/WindowStatus.generated.xml' path='docs/WindowStatus/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Status { get; set; }
	///<include file='Utils/Docs/WindowClose/WindowClose.generated.xml' path='docs/WindowClose/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowClosed/WindowClosed.generated.xml' path='docs/WindowClosed/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Closed { get; }
	///<include file='Utils/Docs/WindowStop/WindowStop.generated.xml' path='docs/WindowStop/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Stop() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowFocus/WindowFocus.generated.xml' path='docs/WindowFocus/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Focus() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowBlur/WindowBlur.generated.xml' path='docs/WindowBlur/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Blur() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowFrames/WindowFrames.generated.xml' path='docs/WindowFrames/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public WindowProxy Frames { get; }
	///<include file='Utils/Docs/WindowLength/WindowLength.generated.xml' path='docs/WindowLength/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Length { get; }
	///<include file='Utils/Docs/WindowTop/WindowTop.generated.xml' path='docs/WindowTop/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public WindowProxy? Top { get; }
	///<include file='Utils/Docs/WindowOpener/WindowOpener.generated.xml' path='docs/WindowOpener/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public dynamic Opener { get; set; }
	///<include file='Utils/Docs/WindowParent/WindowParent.generated.xml' path='docs/WindowParent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public WindowProxy? Parent { get; }
	///<include file='Utils/Docs/WindowFrameElement/WindowFrameElement.generated.xml' path='docs/WindowFrameElement/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Element? FrameElement { get; }
	///<include file='Utils/Docs/WindowOpen/WindowOpen.generated.xml' path='docs/WindowOpen/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public WindowProxy? Open(USVString url, DOMString target, DOMString features) { throw new System.NotImplementedException(); }
	
	///<include file='Utils/Docs/WindowNavigator/WindowNavigator.generated.xml' path='docs/WindowNavigator/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Navigator Navigator { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Navigator ClientInformation { get; }
	///<include file='Utils/Docs/WindowOriginAgentCluster/WindowOriginAgentCluster.generated.xml' path='docs/WindowOriginAgentCluster/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool OriginAgentCluster { get; }
	///<include file='Utils/Docs/WindowAlert/WindowAlert.generated.xml' path='docs/WindowAlert/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Alert() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowAlert/WindowAlert.generated.xml' path='docs/WindowAlert/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Alert(DOMString message) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowConfirm/WindowConfirm.generated.xml' path='docs/WindowConfirm/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool Confirm(DOMString message) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowPrompt/WindowPrompt.generated.xml' path='docs/WindowPrompt/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString? Prompt(DOMString message, DOMString default_) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowPrint/WindowPrint.generated.xml' path='docs/WindowPrint/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Print() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowPostMessage/WindowPostMessage.generated.xml' path='docs/WindowPostMessage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined PostMessage(dynamic message, USVString targetOrigin, List<Object> transfer) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowPostMessage/WindowPostMessage.generated.xml' path='docs/WindowPostMessage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined PostMessage(dynamic message, WindowPostMessageOptions options) { throw new System.NotImplementedException(); }
}



[To(ToAttribute.FirstCharToLowerCase)]
public partial class WindowPostMessageOptions : StructuredSerializeOptions
{
		public USVString TargetOrigin;
}

///<include file='Utils/Docs/BarProp/BarProp.generated.xml' path='docs/BarProp/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BarProp
{
	///<include file='Utils/Docs/BarPropVisible/BarPropVisible.generated.xml' path='docs/BarPropVisible/*'/>
	public bool Visible { get; }
}

///<include file='Utils/Docs/Location/Location.generated.xml' path='docs/Location/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Location
{
	///<include file='Utils/Docs/LocationHref/LocationHref.generated.xml' path='docs/LocationHref/*'/>
	public USVString Href { get; set; }
	///<include file='Utils/Docs/LocationOrigin/LocationOrigin.generated.xml' path='docs/LocationOrigin/*'/>
	public USVString Origin { get; }
	///<include file='Utils/Docs/LocationProtocol/LocationProtocol.generated.xml' path='docs/LocationProtocol/*'/>
	public USVString Protocol { get; set; }
	///<include file='Utils/Docs/LocationHost/LocationHost.generated.xml' path='docs/LocationHost/*'/>
	public USVString Host { get; set; }
	///<include file='Utils/Docs/LocationHostname/LocationHostname.generated.xml' path='docs/LocationHostname/*'/>
	public USVString Hostname { get; set; }
	///<include file='Utils/Docs/LocationPort/LocationPort.generated.xml' path='docs/LocationPort/*'/>
	public USVString Port { get; set; }
	///<include file='Utils/Docs/LocationPathname/LocationPathname.generated.xml' path='docs/LocationPathname/*'/>
	public USVString Pathname { get; set; }
	///<include file='Utils/Docs/LocationSearch/LocationSearch.generated.xml' path='docs/LocationSearch/*'/>
	public USVString Search { get; set; }
	///<include file='Utils/Docs/LocationHash/LocationHash.generated.xml' path='docs/LocationHash/*'/>
	public USVString Hash { get; set; }
	///<include file='Utils/Docs/LocationAssign/LocationAssign.generated.xml' path='docs/LocationAssign/*'/>
	public Undefined Assign(USVString url) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/LocationReplace/LocationReplace.generated.xml' path='docs/LocationReplace/*'/>
	public Undefined Replace(USVString url) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/LocationReload/LocationReload.generated.xml' path='docs/LocationReload/*'/>
	public Undefined Reload() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/LocationAncestorOrigins/LocationAncestorOrigins.generated.xml' path='docs/LocationAncestorOrigins/*'/>
	public DOMStringList AncestorOrigins { get; }
}

///<include file='Utils/Docs/History/History.generated.xml' path='docs/History/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class History
{
	///<include file='Utils/Docs/HistoryLength/HistoryLength.generated.xml' path='docs/HistoryLength/*'/>
	public ulong Length { get; }
	///<include file='Utils/Docs/HistoryScrollRestoration/HistoryScrollRestoration.generated.xml' path='docs/HistoryScrollRestoration/*'/>
	public ScrollRestoration ScrollRestoration { get; set; }
	///<include file='Utils/Docs/HistoryState/HistoryState.generated.xml' path='docs/HistoryState/*'/>
	public dynamic State { get; }
	///<include file='Utils/Docs/HistoryGo/HistoryGo.generated.xml' path='docs/HistoryGo/*'/>
	public Undefined Go(long delta) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HistoryBack/HistoryBack.generated.xml' path='docs/HistoryBack/*'/>
	public Undefined Back() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HistoryForward/HistoryForward.generated.xml' path='docs/HistoryForward/*'/>
	public Undefined Forward() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HistoryPushState/HistoryPushState.generated.xml' path='docs/HistoryPushState/*'/>
	public Undefined PushState(dynamic data, DOMString unused, USVString? url) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HistoryReplaceState/HistoryReplaceState.generated.xml' path='docs/HistoryReplaceState/*'/>
	public Undefined ReplaceState(dynamic data, DOMString unused, USVString? url) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigation/Navigation.generated.xml' path='docs/Navigation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Navigation : EventTarget
{
	///<include file='Utils/Docs/NavigationEntries/NavigationEntries.generated.xml' path='docs/NavigationEntries/*'/>
	public List<NavigationHistoryEntry> Entries() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigationCurrentEntry/NavigationCurrentEntry.generated.xml' path='docs/NavigationCurrentEntry/*'/>
	public NavigationHistoryEntry? CurrentEntry { get; }
	///<include file='Utils/Docs/NavigationUpdateCurrentEntry/NavigationUpdateCurrentEntry.generated.xml' path='docs/NavigationUpdateCurrentEntry/*'/>
	public Undefined UpdateCurrentEntry(NavigationUpdateCurrentEntryOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigationTransition/NavigationTransition.generated.xml' path='docs/NavigationTransition/*'/>
	public NavigationTransition? Transition { get; }
	///<include file='Utils/Docs/NavigationActivation/NavigationActivation.generated.xml' path='docs/NavigationActivation/*'/>
	public NavigationActivation? Activation { get; }
	///<include file='Utils/Docs/NavigationCanGoBack/NavigationCanGoBack.generated.xml' path='docs/NavigationCanGoBack/*'/>
	public bool CanGoBack { get; }
	///<include file='Utils/Docs/NavigationCanGoForward/NavigationCanGoForward.generated.xml' path='docs/NavigationCanGoForward/*'/>
	public bool CanGoForward { get; }
	///<include file='Utils/Docs/NavigationNavigate/NavigationNavigate.generated.xml' path='docs/NavigationNavigate/*'/>
	public NavigationResult Navigate(USVString url, NavigationNavigateOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigationReload/NavigationReload.generated.xml' path='docs/NavigationReload/*'/>
	public NavigationResult Reload(NavigationReloadOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigationTraverseTo/NavigationTraverseTo.generated.xml' path='docs/NavigationTraverseTo/*'/>
	public NavigationResult TraverseTo(DOMString key, NavigationOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigationBack/NavigationBack.generated.xml' path='docs/NavigationBack/*'/>
	public NavigationResult Back(NavigationOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigationForward/NavigationForward.generated.xml' path='docs/NavigationForward/*'/>
	public NavigationResult Forward(NavigationOptions options) { throw new System.NotImplementedException(); }
		public EventHandler Onnavigate { get; set; }
		public EventHandler Onnavigatesuccess { get; set; }
		public EventHandler Onnavigateerror { get; set; }
		public EventHandler Oncurrententrychange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationUpdateCurrentEntryOptions
{
		public required dynamic State;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationOptions
{
		public dynamic Info;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationNavigateOptions : NavigationOptions
{
		public dynamic State;
		public NavigationHistoryBehavior History;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationReloadOptions : NavigationOptions
{
		public dynamic State;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationResult
{
		public Task<NavigationHistoryEntry> Committed;
		public Task<NavigationHistoryEntry> Finished;
}

///<include file='Utils/Docs/NavigationHistoryEntry/NavigationHistoryEntry.generated.xml' path='docs/NavigationHistoryEntry/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationHistoryEntry : EventTarget
{
	///<include file='Utils/Docs/NavigationHistoryEntryUrl/NavigationHistoryEntryUrl.generated.xml' path='docs/NavigationHistoryEntryUrl/*'/>
	public USVString? Url { get; }
	///<include file='Utils/Docs/NavigationHistoryEntryKey/NavigationHistoryEntryKey.generated.xml' path='docs/NavigationHistoryEntryKey/*'/>
	public DOMString Key { get; }
	///<include file='Utils/Docs/NavigationHistoryEntryId/NavigationHistoryEntryId.generated.xml' path='docs/NavigationHistoryEntryId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/NavigationHistoryEntryIndex/NavigationHistoryEntryIndex.generated.xml' path='docs/NavigationHistoryEntryIndex/*'/>
	public long Index { get; }
	///<include file='Utils/Docs/NavigationHistoryEntrySameDocument/NavigationHistoryEntrySameDocument.generated.xml' path='docs/NavigationHistoryEntrySameDocument/*'/>
	public bool SameDocument { get; }
	///<include file='Utils/Docs/NavigationHistoryEntryGetState/NavigationHistoryEntryGetState.generated.xml' path='docs/NavigationHistoryEntryGetState/*'/>
	public dynamic GetState() { throw new System.NotImplementedException(); }
		public EventHandler Ondispose { get; set; }
}

///<include file='Utils/Docs/NavigationTransition/NavigationTransition.generated.xml' path='docs/NavigationTransition/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationTransition
{
	///<include file='Utils/Docs/NavigationTransitionNavigationType/NavigationTransitionNavigationType.generated.xml' path='docs/NavigationTransitionNavigationType/*'/>
	public NavigationType NavigationType { get; }
	///<include file='Utils/Docs/NavigationTransitionFrom/NavigationTransitionFrom.generated.xml' path='docs/NavigationTransitionFrom/*'/>
	public NavigationHistoryEntry From { get; }
	///<include file='Utils/Docs/NavigationTransitionFinished/NavigationTransitionFinished.generated.xml' path='docs/NavigationTransitionFinished/*'/>
	public Task<Undefined> Finished { get; }
}

///<include file='Utils/Docs/NavigationActivation/NavigationActivation.generated.xml' path='docs/NavigationActivation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationActivation
{
	///<include file='Utils/Docs/NavigationActivationFrom/NavigationActivationFrom.generated.xml' path='docs/NavigationActivationFrom/*'/>
	public NavigationHistoryEntry? From { get; }
	///<include file='Utils/Docs/NavigationActivationEntry/NavigationActivationEntry.generated.xml' path='docs/NavigationActivationEntry/*'/>
	public NavigationHistoryEntry Entry { get; }
	///<include file='Utils/Docs/NavigationActivationNavigationType/NavigationActivationNavigationType.generated.xml' path='docs/NavigationActivationNavigationType/*'/>
	public NavigationType NavigationType { get; }
}

///<include file='Utils/Docs/NavigateEvent/NavigateEvent.generated.xml' path='docs/NavigateEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigateEvent : Event
{
	///<include file='Utils/Docs/NavigateEventNavigateEvent/NavigateEventNavigateEvent.generated.xml' path='docs/NavigateEventNavigateEvent/*'/>
	public NavigateEvent(DOMString type, NavigateEventInit eventInitDict) { }
	///<include file='Utils/Docs/NavigateEventNavigationType/NavigateEventNavigationType.generated.xml' path='docs/NavigateEventNavigationType/*'/>
	public NavigationType NavigationType { get; }
	///<include file='Utils/Docs/NavigateEventDestination/NavigateEventDestination.generated.xml' path='docs/NavigateEventDestination/*'/>
	public NavigationDestination Destination { get; }
	///<include file='Utils/Docs/NavigateEventCanIntercept/NavigateEventCanIntercept.generated.xml' path='docs/NavigateEventCanIntercept/*'/>
	public bool CanIntercept { get; }
	///<include file='Utils/Docs/NavigateEventUserInitiated/NavigateEventUserInitiated.generated.xml' path='docs/NavigateEventUserInitiated/*'/>
	public bool UserInitiated { get; }
	///<include file='Utils/Docs/NavigateEventHashChange/NavigateEventHashChange.generated.xml' path='docs/NavigateEventHashChange/*'/>
	public bool HashChange { get; }
	///<include file='Utils/Docs/NavigateEventSignal/NavigateEventSignal.generated.xml' path='docs/NavigateEventSignal/*'/>
	public AbortSignal Signal { get; }
	///<include file='Utils/Docs/NavigateEventFormData/NavigateEventFormData.generated.xml' path='docs/NavigateEventFormData/*'/>
	public FormData? FormData { get; }
	///<include file='Utils/Docs/NavigateEventDownloadRequest/NavigateEventDownloadRequest.generated.xml' path='docs/NavigateEventDownloadRequest/*'/>
	public DOMString? DownloadRequest { get; }
	///<include file='Utils/Docs/NavigateEventInfo/NavigateEventInfo.generated.xml' path='docs/NavigateEventInfo/*'/>
	public dynamic Info { get; }
	///<include file='Utils/Docs/NavigateEventHasUAVisualTransition/NavigateEventHasUAVisualTransition.generated.xml' path='docs/NavigateEventHasUAVisualTransition/*'/>
	public bool HasUAVisualTransition { get; }
	///<include file='Utils/Docs/NavigateEventIntercept/NavigateEventIntercept.generated.xml' path='docs/NavigateEventIntercept/*'/>
	public Undefined Intercept(NavigationInterceptOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigateEventScroll/NavigateEventScroll.generated.xml' path='docs/NavigateEventScroll/*'/>
	public Undefined Scroll() { throw new System.NotImplementedException(); }
	public NavigateEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigateEventInit : EventInit
{
		public NavigationType NavigationType;
		public required NavigationDestination Destination;
		public bool CanIntercept;
		public bool UserInitiated;
		public bool HashChange;
		public required AbortSignal Signal;
		public FormData? FormData;
		public DOMString? DownloadRequest;
		public dynamic Info;
		public bool HasUAVisualTransition;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationInterceptOptions
{
		public NavigationInterceptHandler Handler;
		public NavigationFocusReset FocusReset;
		public NavigationScrollBehavior Scroll;
}

///<include file='Utils/Docs/NavigationDestination/NavigationDestination.generated.xml' path='docs/NavigationDestination/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationDestination
{
	///<include file='Utils/Docs/NavigationDestinationUrl/NavigationDestinationUrl.generated.xml' path='docs/NavigationDestinationUrl/*'/>
	public USVString Url { get; }
	///<include file='Utils/Docs/NavigationDestinationKey/NavigationDestinationKey.generated.xml' path='docs/NavigationDestinationKey/*'/>
	public DOMString Key { get; }
	///<include file='Utils/Docs/NavigationDestinationId/NavigationDestinationId.generated.xml' path='docs/NavigationDestinationId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/NavigationDestinationIndex/NavigationDestinationIndex.generated.xml' path='docs/NavigationDestinationIndex/*'/>
	public long Index { get; }
	///<include file='Utils/Docs/NavigationDestinationSameDocument/NavigationDestinationSameDocument.generated.xml' path='docs/NavigationDestinationSameDocument/*'/>
	public bool SameDocument { get; }
	///<include file='Utils/Docs/NavigationDestinationGetState/NavigationDestinationGetState.generated.xml' path='docs/NavigationDestinationGetState/*'/>
	public dynamic GetState() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/NavigationCurrentEntryChangeEvent/NavigationCurrentEntryChangeEvent.generated.xml' path='docs/NavigationCurrentEntryChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationCurrentEntryChangeEvent : Event
{
	///<include file='Utils/Docs/NavigationCurrentEntryChangeEventNavigationCurrentEntryChang/NavigationCurrentEntryChangeEventNavigationCurrentEntryChang.generated.xml' path='docs/NavigationCurrentEntryChangeEventNavigationCurrentEntryChang/*'/>
	public NavigationCurrentEntryChangeEvent(DOMString type, NavigationCurrentEntryChangeEventInit eventInitDict) { }
	///<include file='Utils/Docs/NavigationCurrentEntryChangeEventNavigationType/NavigationCurrentEntryChangeEventNavigationType.generated.xml' path='docs/NavigationCurrentEntryChangeEventNavigationType/*'/>
	public NavigationType? NavigationType { get; }
	///<include file='Utils/Docs/NavigationCurrentEntryChangeEventFrom/NavigationCurrentEntryChangeEventFrom.generated.xml' path='docs/NavigationCurrentEntryChangeEventFrom/*'/>
	public NavigationHistoryEntry From { get; }
	public NavigationCurrentEntryChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationCurrentEntryChangeEventInit : EventInit
{
		public NavigationType? NavigationType;
		public required NavigationHistoryEntry From;
}

///<include file='Utils/Docs/PopStateEvent/PopStateEvent.generated.xml' path='docs/PopStateEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PopStateEvent : Event
{
	///<include file='Utils/Docs/PopStateEventPopStateEvent/PopStateEventPopStateEvent.generated.xml' path='docs/PopStateEventPopStateEvent/*'/>
	public PopStateEvent(DOMString type, PopStateEventInit eventInitDict) { }
	///<include file='Utils/Docs/PopStateEventState/PopStateEventState.generated.xml' path='docs/PopStateEventState/*'/>
	public dynamic State { get; }
	///<include file='Utils/Docs/PopStateEventHasUAVisualTransition/PopStateEventHasUAVisualTransition.generated.xml' path='docs/PopStateEventHasUAVisualTransition/*'/>
	public bool HasUAVisualTransition { get; }
	public PopStateEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PopStateEventInit : EventInit
{
		public dynamic State;
		public bool HasUAVisualTransition;
}

///<include file='Utils/Docs/HashChangeEvent/HashChangeEvent.generated.xml' path='docs/HashChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class HashChangeEvent : Event
{
	///<include file='Utils/Docs/HashChangeEventHashChangeEvent/HashChangeEventHashChangeEvent.generated.xml' path='docs/HashChangeEventHashChangeEvent/*'/>
	public HashChangeEvent(DOMString type, HashChangeEventInit eventInitDict) { }
	///<include file='Utils/Docs/HashChangeEventOldURL/HashChangeEventOldURL.generated.xml' path='docs/HashChangeEventOldURL/*'/>
	public USVString OldURL { get; }
	///<include file='Utils/Docs/HashChangeEventNewURL/HashChangeEventNewURL.generated.xml' path='docs/HashChangeEventNewURL/*'/>
	public USVString NewURL { get; }
	public HashChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HashChangeEventInit : EventInit
{
		public USVString OldURL;
		public USVString NewURL;
}

///<include file='Utils/Docs/PageSwapEvent/PageSwapEvent.generated.xml' path='docs/PageSwapEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PageSwapEvent : Event
{
	///<include file='Utils/Docs/PageSwapEventPageSwapEvent/PageSwapEventPageSwapEvent.generated.xml' path='docs/PageSwapEventPageSwapEvent/*'/>
	public PageSwapEvent(DOMString type, PageSwapEventInit eventInitDict) { }
	///<include file='Utils/Docs/PageSwapEventActivation/PageSwapEventActivation.generated.xml' path='docs/PageSwapEventActivation/*'/>
	public NavigationActivation? Activation { get; }
	///<include file='Utils/Docs/PageSwapEventViewTransition/PageSwapEventViewTransition.generated.xml' path='docs/PageSwapEventViewTransition/*'/>
	public ViewTransition? ViewTransition { get; }
	public PageSwapEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PageSwapEventInit : EventInit
{
		public NavigationActivation? Activation;
		public ViewTransition? ViewTransition;
}

///<include file='Utils/Docs/PageRevealEvent/PageRevealEvent.generated.xml' path='docs/PageRevealEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PageRevealEvent : Event
{
	///<include file='Utils/Docs/PageRevealEventPageRevealEvent/PageRevealEventPageRevealEvent.generated.xml' path='docs/PageRevealEventPageRevealEvent/*'/>
	public PageRevealEvent(DOMString type, PageRevealEventInit eventInitDict) { }
	///<include file='Utils/Docs/PageRevealEventViewTransition/PageRevealEventViewTransition.generated.xml' path='docs/PageRevealEventViewTransition/*'/>
	public ViewTransition? ViewTransition { get; }
	public PageRevealEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PageRevealEventInit : EventInit
{
		public ViewTransition? ViewTransition;
}

///<include file='Utils/Docs/PageTransitionEvent/PageTransitionEvent.generated.xml' path='docs/PageTransitionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PageTransitionEvent : Event
{
	///<include file='Utils/Docs/PageTransitionEventPageTransitionEvent/PageTransitionEventPageTransitionEvent.generated.xml' path='docs/PageTransitionEventPageTransitionEvent/*'/>
	public PageTransitionEvent(DOMString type, PageTransitionEventInit eventInitDict) { }
	///<include file='Utils/Docs/PageTransitionEventPersisted/PageTransitionEventPersisted.generated.xml' path='docs/PageTransitionEventPersisted/*'/>
	public bool Persisted { get; }
	public PageTransitionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PageTransitionEventInit : EventInit
{
		public bool Persisted;
}

///<include file='Utils/Docs/BeforeUnloadEvent/BeforeUnloadEvent.generated.xml' path='docs/BeforeUnloadEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BeforeUnloadEvent : Event
{
	///<include file='Utils/Docs/BeforeUnloadEventReturnValue/BeforeUnloadEventReturnValue.generated.xml' path='docs/BeforeUnloadEventReturnValue/*'/>
	public DOMString ReturnValue { get; set; }
}

///<include file='Utils/Docs/NotRestoredReasonDetails/NotRestoredReasonDetails.generated.xml' path='docs/NotRestoredReasonDetails/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NotRestoredReasonDetails
{
	///<include file='Utils/Docs/NotRestoredReasonDetailsReason/NotRestoredReasonDetailsReason.generated.xml' path='docs/NotRestoredReasonDetailsReason/*'/>
	public DOMString Reason { get; }
	///<include file='Utils/Docs/NotRestoredReasonDetailsToJSON/NotRestoredReasonDetailsToJSON.generated.xml' path='docs/NotRestoredReasonDetailsToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/NotRestoredReasons/NotRestoredReasons.generated.xml' path='docs/NotRestoredReasons/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NotRestoredReasons
{
	///<include file='Utils/Docs/NotRestoredReasonsSrc/NotRestoredReasonsSrc.generated.xml' path='docs/NotRestoredReasonsSrc/*'/>
	public DOMString? Src { get; }
	///<include file='Utils/Docs/NotRestoredReasonsId/NotRestoredReasonsId.generated.xml' path='docs/NotRestoredReasonsId/*'/>
	public DOMString? Id { get; }
	///<include file='Utils/Docs/NotRestoredReasonsName/NotRestoredReasonsName.generated.xml' path='docs/NotRestoredReasonsName/*'/>
	public DOMString? Name { get; }
	///<include file='Utils/Docs/NotRestoredReasonsUrl/NotRestoredReasonsUrl.generated.xml' path='docs/NotRestoredReasonsUrl/*'/>
	public DOMString? Url { get; }
	///<include file='Utils/Docs/NotRestoredReasonsReasons/NotRestoredReasonsReasons.generated.xml' path='docs/NotRestoredReasonsReasons/*'/>
	public NotRestoredReasonDetails[]? Reasons { get; }
	///<include file='Utils/Docs/NotRestoredReasonsChildren/NotRestoredReasonsChildren.generated.xml' path='docs/NotRestoredReasonsChildren/*'/>
	public NotRestoredReasons[]? Children { get; }
	///<include file='Utils/Docs/NotRestoredReasonsToJSON/NotRestoredReasonsToJSON.generated.xml' path='docs/NotRestoredReasonsToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ErrorEvent/ErrorEvent.generated.xml' path='docs/ErrorEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ErrorEvent : Event
{
	///<include file='Utils/Docs/ErrorEventErrorEvent/ErrorEventErrorEvent.generated.xml' path='docs/ErrorEventErrorEvent/*'/>
	public ErrorEvent(DOMString type, ErrorEventInit eventInitDict) { }
	///<include file='Utils/Docs/ErrorEventMessage/ErrorEventMessage.generated.xml' path='docs/ErrorEventMessage/*'/>
	public DOMString Message { get; }
	///<include file='Utils/Docs/ErrorEventFilename/ErrorEventFilename.generated.xml' path='docs/ErrorEventFilename/*'/>
	public USVString Filename { get; }
	///<include file='Utils/Docs/ErrorEventLineno/ErrorEventLineno.generated.xml' path='docs/ErrorEventLineno/*'/>
	public ulong Lineno { get; }
	///<include file='Utils/Docs/ErrorEventColno/ErrorEventColno.generated.xml' path='docs/ErrorEventColno/*'/>
	public ulong Colno { get; }
	///<include file='Utils/Docs/ErrorEventError/ErrorEventError.generated.xml' path='docs/ErrorEventError/*'/>
	public dynamic Error { get; }
	public ErrorEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ErrorEventInit : EventInit
{
		public DOMString Message;
		public USVString Filename;
		public ulong Lineno;
		public ulong Colno;
		public dynamic Error;
}

///<include file='Utils/Docs/PromiseRejectionEvent/PromiseRejectionEvent.generated.xml' path='docs/PromiseRejectionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PromiseRejectionEvent : Event
{
	///<include file='Utils/Docs/PromiseRejectionEventPromiseRejectionEvent/PromiseRejectionEventPromiseRejectionEvent.generated.xml' path='docs/PromiseRejectionEventPromiseRejectionEvent/*'/>
	public PromiseRejectionEvent(DOMString type, PromiseRejectionEventInit eventInitDict) { }
	///<include file='Utils/Docs/PromiseRejectionEventPromise/PromiseRejectionEventPromise.generated.xml' path='docs/PromiseRejectionEventPromise/*'/>
	public Object Promise { get; }
	///<include file='Utils/Docs/PromiseRejectionEventReason/PromiseRejectionEventReason.generated.xml' path='docs/PromiseRejectionEventReason/*'/>
	public dynamic Reason { get; }
	public PromiseRejectionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PromiseRejectionEventInit : EventInit
{
		public required Object Promise;
		public dynamic Reason;
}

///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
public partial class Element
{
	///<include file='Utils/Docs/ElementSetHTMLUnsafe/ElementSetHTMLUnsafe.generated.xml' path='docs/ElementSetHTMLUnsafe/*'/>
	public Undefined SetHTMLUnsafe(Union85 html) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementGetHTML/ElementGetHTML.generated.xml' path='docs/ElementGetHTML/*'/>
	public DOMString GetHTML(GetHTMLOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementInnerHTML/ElementInnerHTML.generated.xml' path='docs/ElementInnerHTML/*'/>
	public Union86 InnerHTML { get; set; }
	///<include file='Utils/Docs/ElementOuterHTML/ElementOuterHTML.generated.xml' path='docs/ElementOuterHTML/*'/>
	public Union87 OuterHTML { get; set; }
	///<include file='Utils/Docs/ElementInsertAdjacentHTML/ElementInsertAdjacentHTML.generated.xml' path='docs/ElementInsertAdjacentHTML/*'/>
	public Undefined InsertAdjacentHTML(DOMString position, Union88 string_) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ShadowRoot/ShadowRoot.generated.xml' path='docs/ShadowRoot/*'/>
public partial class ShadowRoot
{
	///<include file='Utils/Docs/ShadowRootSetHTMLUnsafe/ShadowRootSetHTMLUnsafe.generated.xml' path='docs/ShadowRootSetHTMLUnsafe/*'/>
	public Undefined SetHTMLUnsafe(Union89 html) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ShadowRootGetHTML/ShadowRootGetHTML.generated.xml' path='docs/ShadowRootGetHTML/*'/>
	public DOMString GetHTML(GetHTMLOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ShadowRootInnerHTML/ShadowRootInnerHTML.generated.xml' path='docs/ShadowRootInnerHTML/*'/>
	public Union90 InnerHTML { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GetHTMLOptions
{
		public bool SerializableShadowRoots;
		public List<ShadowRoot> ShadowRoots;
}

///<include file='Utils/Docs/DOMParser/DOMParser.generated.xml' path='docs/DOMParser/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMParser
{
	///<include file='Utils/Docs/DOMParserDOMParser/DOMParserDOMParser.generated.xml' path='docs/DOMParserDOMParser/*'/>
	public DOMParser() { }
	///<include file='Utils/Docs/DOMParserParseFromString/DOMParserParseFromString.generated.xml' path='docs/DOMParserParseFromString/*'/>
	public Document ParseFromString(Union91 string_, DOMParserSupportedType type) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Range/Range.generated.xml' path='docs/Range/*'/>
public partial class Range
{
	///<include file='Utils/Docs/RangeCreateContextualFragment/RangeCreateContextualFragment.generated.xml' path='docs/RangeCreateContextualFragment/*'/>
	public DocumentFragment CreateContextualFragment(Union92 string_) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
}








///<include file='Utils/Docs/PluginArray/PluginArray.generated.xml' path='docs/PluginArray/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PluginArray
{
		public Undefined Refresh() { throw new System.NotImplementedException(); }
		public ulong Length { get; }
	
	
}

///<include file='Utils/Docs/MimeTypeArray/MimeTypeArray.generated.xml' path='docs/MimeTypeArray/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MimeTypeArray
{
		public ulong Length { get; }
	
	
}

///<include file='Utils/Docs/Plugin/Plugin.generated.xml' path='docs/Plugin/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Plugin
{
		public DOMString Name { get; }
		public DOMString Description { get; }
		public DOMString Filename { get; }
		public ulong Length { get; }
	
	
}

///<include file='Utils/Docs/MimeType/MimeType.generated.xml' path='docs/MimeType/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MimeType
{
		public DOMString Type { get; }
		public DOMString Description { get; }
		public DOMString Suffixes { get; }
		public Plugin EnabledPlugin { get; }
}

///<include file='Utils/Docs/ImageBitmap/ImageBitmap.generated.xml' path='docs/ImageBitmap/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageBitmap
{
	///<include file='Utils/Docs/ImageBitmapWidth/ImageBitmapWidth.generated.xml' path='docs/ImageBitmapWidth/*'/>
	public ulong Width { get; }
	///<include file='Utils/Docs/ImageBitmapHeight/ImageBitmapHeight.generated.xml' path='docs/ImageBitmapHeight/*'/>
	public ulong Height { get; }
	///<include file='Utils/Docs/ImageBitmapClose/ImageBitmapClose.generated.xml' path='docs/ImageBitmapClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageBitmapOptions
{
		public ImageOrientation ImageOrientation;
		public PremultiplyAlpha PremultiplyAlpha;
		public ColorSpaceConversion ColorSpaceConversion;
		public ulong ResizeWidth;
		public ulong ResizeHeight;
		public ResizeQuality ResizeQuality;
}

///<include file='Utils/Docs/MessageEvent/MessageEvent.generated.xml' path='docs/MessageEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MessageEvent : Event
{
	///<include file='Utils/Docs/MessageEventMessageEvent/MessageEventMessageEvent.generated.xml' path='docs/MessageEventMessageEvent/*'/>
	public MessageEvent(DOMString type, MessageEventInit eventInitDict) { }
	///<include file='Utils/Docs/MessageEventData/MessageEventData.generated.xml' path='docs/MessageEventData/*'/>
	public dynamic Data { get; }
	///<include file='Utils/Docs/MessageEventOrigin/MessageEventOrigin.generated.xml' path='docs/MessageEventOrigin/*'/>
	public USVString Origin { get; }
	///<include file='Utils/Docs/MessageEventLastEventId/MessageEventLastEventId.generated.xml' path='docs/MessageEventLastEventId/*'/>
	public DOMString LastEventId { get; }
	///<include file='Utils/Docs/MessageEventSource/MessageEventSource.generated.xml' path='docs/MessageEventSource/*'/>
	public MessageEventSource? Source { get; }
	///<include file='Utils/Docs/MessageEventPorts/MessageEventPorts.generated.xml' path='docs/MessageEventPorts/*'/>
	public MessagePort[] Ports { get; }
		public Undefined InitMessageEvent(DOMString type, bool bubbles, bool cancelable, dynamic data, USVString origin, DOMString lastEventId, MessageEventSource? source, List<MessagePort> ports) { throw new System.NotImplementedException(); }
	public MessageEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MessageEventInit : EventInit
{
		public dynamic Data;
		public USVString Origin;
		public DOMString LastEventId;
		public MessageEventSource? Source;
		public List<MessagePort> Ports;
}


///<include file='Utils/Docs/EventSource/EventSource.generated.xml' path='docs/EventSource/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EventSource : EventTarget
{
	///<include file='Utils/Docs/EventSourceEventSource/EventSourceEventSource.generated.xml' path='docs/EventSourceEventSource/*'/>
	public EventSource(USVString url, EventSourceInit eventSourceInitDict) { }
	///<include file='Utils/Docs/EventSourceUrl/EventSourceUrl.generated.xml' path='docs/EventSourceUrl/*'/>
	public USVString Url { get; }
	///<include file='Utils/Docs/EventSourceWithCredentials/EventSourceWithCredentials.generated.xml' path='docs/EventSourceWithCredentials/*'/>
	public bool WithCredentials { get; }
		public const ushort CONNECTING = 0;
		public const ushort OPEN = 1;
		public const ushort CLOSED = 2;
	///<include file='Utils/Docs/EventSourceReadyState/EventSourceReadyState.generated.xml' path='docs/EventSourceReadyState/*'/>
	public ushort ReadyState { get; }
		public EventHandler Onopen { get; set; }
		public EventHandler Onmessage { get; set; }
		public EventHandler Onerror { get; set; }
	///<include file='Utils/Docs/EventSourceClose/EventSourceClose.generated.xml' path='docs/EventSourceClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	public EventSource() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EventSourceInit
{
		public bool WithCredentials;
}

///<include file='Utils/Docs/MessageChannel/MessageChannel.generated.xml' path='docs/MessageChannel/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MessageChannel
{
	///<include file='Utils/Docs/MessageChannelMessageChannel/MessageChannelMessageChannel.generated.xml' path='docs/MessageChannelMessageChannel/*'/>
	public MessageChannel() { }
	///<include file='Utils/Docs/MessageChannelPort1/MessageChannelPort1.generated.xml' path='docs/MessageChannelPort1/*'/>
	public MessagePort Port1 { get; }
	///<include file='Utils/Docs/MessageChannelPort2/MessageChannelPort2.generated.xml' path='docs/MessageChannelPort2/*'/>
	public MessagePort Port2 { get; }
}

///<include file='Utils/Docs/MessagePort/MessagePort.generated.xml' path='docs/MessagePort/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MessagePort : EventTarget, MessageEventTarget
{
	///<include file='Utils/Docs/MessagePortPostMessage/MessagePortPostMessage.generated.xml' path='docs/MessagePortPostMessage/*'/>
	public Undefined PostMessage(dynamic message, List<Object> transfer) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MessagePortPostMessage/MessagePortPostMessage.generated.xml' path='docs/MessagePortPostMessage/*'/>
	public Undefined PostMessage(dynamic message, StructuredSerializeOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MessagePortStart/MessagePortStart.generated.xml' path='docs/MessagePortStart/*'/>
	public Undefined Start() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MessagePortClose/MessagePortClose.generated.xml' path='docs/MessagePortClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
		public EventHandler Onclose { get; set; }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class StructuredSerializeOptions
{
		public List<Object> Transfer;
}

///<include file='Utils/Docs/BroadcastChannel/BroadcastChannel.generated.xml' path='docs/BroadcastChannel/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BroadcastChannel : EventTarget
{
	///<include file='Utils/Docs/BroadcastChannelBroadcastChannel/BroadcastChannelBroadcastChannel.generated.xml' path='docs/BroadcastChannelBroadcastChannel/*'/>
	public BroadcastChannel(DOMString name) { }
	///<include file='Utils/Docs/BroadcastChannelName/BroadcastChannelName.generated.xml' path='docs/BroadcastChannelName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/BroadcastChannelPostMessage/BroadcastChannelPostMessage.generated.xml' path='docs/BroadcastChannelPostMessage/*'/>
	public Undefined PostMessage(dynamic message) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BroadcastChannelClose/BroadcastChannelClose.generated.xml' path='docs/BroadcastChannelClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
		public EventHandler Onmessage { get; set; }
		public EventHandler Onmessageerror { get; set; }
	public BroadcastChannel() { }
}

///<include file='Utils/Docs/WorkerGlobalScope/WorkerGlobalScope.generated.xml' path='docs/WorkerGlobalScope/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WorkerGlobalScope : EventTarget, FontFaceSource, WindowOrWorkerGlobalScope
{
	///<include file='Utils/Docs/WorkerGlobalScopeSelf/WorkerGlobalScopeSelf.generated.xml' path='docs/WorkerGlobalScopeSelf/*'/>
	public WorkerGlobalScope Self { get; }
	///<include file='Utils/Docs/WorkerGlobalScopeLocation/WorkerGlobalScopeLocation.generated.xml' path='docs/WorkerGlobalScopeLocation/*'/>
	public WorkerLocation Location { get; }
	///<include file='Utils/Docs/WorkerGlobalScopeNavigator/WorkerGlobalScopeNavigator.generated.xml' path='docs/WorkerGlobalScopeNavigator/*'/>
	public WorkerNavigator Navigator { get; }
	///<include file='Utils/Docs/WorkerGlobalScopeImportScripts/WorkerGlobalScopeImportScripts.generated.xml' path='docs/WorkerGlobalScopeImportScripts/*'/>
	public Undefined ImportScripts(params Union95[] urls) { throw new System.NotImplementedException(); }
		public OnErrorEventHandler Onerror { get; set; }
		public EventHandler Onlanguagechange { get; set; }
		public EventHandler Onoffline { get; set; }
		public EventHandler Ononline { get; set; }
		public EventHandler Onrejectionhandled { get; set; }
		public EventHandler Onunhandledrejection { get; set; }
}

///<include file='Utils/Docs/DedicatedWorkerGlobalScope/DedicatedWorkerGlobalScope.generated.xml' path='docs/DedicatedWorkerGlobalScope/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DedicatedWorkerGlobalScope : WorkerGlobalScope, AnimationFrameProvider, MessageEventTarget
{
	///<include file='Utils/Docs/DedicatedWorkerGlobalScopeName/DedicatedWorkerGlobalScopeName.generated.xml' path='docs/DedicatedWorkerGlobalScopeName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/DedicatedWorkerGlobalScopePostMessage/DedicatedWorkerGlobalScopePostMessage.generated.xml' path='docs/DedicatedWorkerGlobalScopePostMessage/*'/>
	public Undefined PostMessage(dynamic message, List<Object> transfer) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DedicatedWorkerGlobalScopePostMessage/DedicatedWorkerGlobalScopePostMessage.generated.xml' path='docs/DedicatedWorkerGlobalScopePostMessage/*'/>
	public Undefined PostMessage(dynamic message, StructuredSerializeOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DedicatedWorkerGlobalScopeClose/DedicatedWorkerGlobalScopeClose.generated.xml' path='docs/DedicatedWorkerGlobalScopeClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/SharedWorkerGlobalScope/SharedWorkerGlobalScope.generated.xml' path='docs/SharedWorkerGlobalScope/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedWorkerGlobalScope : WorkerGlobalScope
{
	///<include file='Utils/Docs/SharedWorkerGlobalScopeName/SharedWorkerGlobalScopeName.generated.xml' path='docs/SharedWorkerGlobalScopeName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/SharedWorkerGlobalScopeClose/SharedWorkerGlobalScopeClose.generated.xml' path='docs/SharedWorkerGlobalScopeClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
		public EventHandler Onconnect { get; set; }
}

///<include file='Utils/Docs/Worker/Worker.generated.xml' path='docs/Worker/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Worker : EventTarget, AbstractWorker, MessageEventTarget
{
	///<include file='Utils/Docs/WorkerWorker/WorkerWorker.generated.xml' path='docs/WorkerWorker/*'/>
	public Worker(Union96 scriptURL, WorkerOptions options) { }
	///<include file='Utils/Docs/WorkerTerminate/WorkerTerminate.generated.xml' path='docs/WorkerTerminate/*'/>
	public Undefined Terminate() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WorkerPostMessage/WorkerPostMessage.generated.xml' path='docs/WorkerPostMessage/*'/>
	public Undefined PostMessage(dynamic message, List<Object> transfer) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WorkerPostMessage/WorkerPostMessage.generated.xml' path='docs/WorkerPostMessage/*'/>
	public Undefined PostMessage(dynamic message, StructuredSerializeOptions options) { throw new System.NotImplementedException(); }
	public Worker() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WorkerOptions
{
		public WorkerType Type;
		public RequestCredentials Credentials;
		public DOMString Name;
}

///<include file='Utils/Docs/SharedWorker/SharedWorker.generated.xml' path='docs/SharedWorker/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedWorker : EventTarget, AbstractWorker
{
	///<include file='Utils/Docs/SharedWorkerSharedWorker/SharedWorkerSharedWorker.generated.xml' path='docs/SharedWorkerSharedWorker/*'/>
	public SharedWorker(Union97 scriptURL, Union98 options) { }
	///<include file='Utils/Docs/SharedWorkerPort/SharedWorkerPort.generated.xml' path='docs/SharedWorkerPort/*'/>
	public MessagePort Port { get; }
	public SharedWorker() { }
}


///<include file='Utils/Docs/WorkerNavigator/WorkerNavigator.generated.xml' path='docs/WorkerNavigator/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WorkerNavigator
{
}





///<include file='Utils/Docs/WorkerLocation/WorkerLocation.generated.xml' path='docs/WorkerLocation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WorkerLocation
{
	///<include file='Utils/Docs/WorkerLocationHref/WorkerLocationHref.generated.xml' path='docs/WorkerLocationHref/*'/>
	public USVString Href { get; }
	///<include file='Utils/Docs/WorkerLocationOrigin/WorkerLocationOrigin.generated.xml' path='docs/WorkerLocationOrigin/*'/>
	public USVString Origin { get; }
	///<include file='Utils/Docs/WorkerLocationProtocol/WorkerLocationProtocol.generated.xml' path='docs/WorkerLocationProtocol/*'/>
	public USVString Protocol { get; }
	///<include file='Utils/Docs/WorkerLocationHost/WorkerLocationHost.generated.xml' path='docs/WorkerLocationHost/*'/>
	public USVString Host { get; }
	///<include file='Utils/Docs/WorkerLocationHostname/WorkerLocationHostname.generated.xml' path='docs/WorkerLocationHostname/*'/>
	public USVString Hostname { get; }
	///<include file='Utils/Docs/WorkerLocationPort/WorkerLocationPort.generated.xml' path='docs/WorkerLocationPort/*'/>
	public USVString Port { get; }
	///<include file='Utils/Docs/WorkerLocationPathname/WorkerLocationPathname.generated.xml' path='docs/WorkerLocationPathname/*'/>
	public USVString Pathname { get; }
	///<include file='Utils/Docs/WorkerLocationSearch/WorkerLocationSearch.generated.xml' path='docs/WorkerLocationSearch/*'/>
	public USVString Search { get; }
	///<include file='Utils/Docs/WorkerLocationHash/WorkerLocationHash.generated.xml' path='docs/WorkerLocationHash/*'/>
	public USVString Hash { get; }
}

///<include file='Utils/Docs/WorkletGlobalScope/WorkletGlobalScope.generated.xml' path='docs/WorkletGlobalScope/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WorkletGlobalScope
{
}

///<include file='Utils/Docs/Worklet/Worklet.generated.xml' path='docs/Worklet/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Worklet
{
	///<include file='Utils/Docs/WorkletAddModule/WorkletAddModule.generated.xml' path='docs/WorkletAddModule/*'/>
	public Task<Undefined> AddModule(USVString moduleURL, WorkletOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WorkletOptions
{
		public RequestCredentials Credentials;
}

///<include file='Utils/Docs/Storage/Storage.generated.xml' path='docs/Storage/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Storage
{
	///<include file='Utils/Docs/StorageLength/StorageLength.generated.xml' path='docs/StorageLength/*'/>
	public ulong Length { get; }
	///<include file='Utils/Docs/StorageKey/StorageKey.generated.xml' path='docs/StorageKey/*'/>
	public DOMString? Key(ulong index) { throw new System.NotImplementedException(); }
	
	
	
	///<include file='Utils/Docs/StorageClear/StorageClear.generated.xml' path='docs/StorageClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/StorageEvent/StorageEvent.generated.xml' path='docs/StorageEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class StorageEvent : Event
{
	///<include file='Utils/Docs/StorageEventStorageEvent/StorageEventStorageEvent.generated.xml' path='docs/StorageEventStorageEvent/*'/>
	public StorageEvent(DOMString type, StorageEventInit eventInitDict) { }
	///<include file='Utils/Docs/StorageEventKey/StorageEventKey.generated.xml' path='docs/StorageEventKey/*'/>
	public DOMString? Key { get; }
	///<include file='Utils/Docs/StorageEventOldValue/StorageEventOldValue.generated.xml' path='docs/StorageEventOldValue/*'/>
	public DOMString? OldValue { get; }
	///<include file='Utils/Docs/StorageEventNewValue/StorageEventNewValue.generated.xml' path='docs/StorageEventNewValue/*'/>
	public DOMString? NewValue { get; }
	///<include file='Utils/Docs/StorageEventUrl/StorageEventUrl.generated.xml' path='docs/StorageEventUrl/*'/>
	public USVString Url { get; }
	///<include file='Utils/Docs/StorageEventStorageArea/StorageEventStorageArea.generated.xml' path='docs/StorageEventStorageArea/*'/>
	public Storage? StorageArea { get; }
	///<include file='Utils/Docs/StorageEventInitStorageEvent/StorageEventInitStorageEvent.generated.xml' path='docs/StorageEventInitStorageEvent/*'/>
	public Undefined InitStorageEvent(DOMString type, bool bubbles, bool cancelable, DOMString? key, DOMString? oldValue, DOMString? newValue, USVString url, Storage? storageArea) { throw new System.NotImplementedException(); }
	public StorageEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StorageEventInit : EventInit
{
		public DOMString? Key;
		public DOMString? OldValue;
		public DOMString? NewValue;
		public USVString Url;
		public Storage? StorageArea;
}

///<include file='Utils/Docs/HTMLMarqueeElement/HTMLMarqueeElement.generated.xml' path='docs/HTMLMarqueeElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLMarqueeElement : HTMLElement
{
		public HTMLMarqueeElement() { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Behavior { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString BgColor { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Direction { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Height { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Hspace { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public long Loop { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong ScrollAmount { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong ScrollDelay { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool TrueSpeed { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Vspace { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Width { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Start() { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined Stop() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLFrameSetElement/HTMLFrameSetElement.generated.xml' path='docs/HTMLFrameSetElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLFrameSetElement : HTMLElement, WindowEventHandlers
{
		public HTMLFrameSetElement() { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Cols { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Rows { get; set; }
}


[To(ToAttribute.Default)]
public partial class HTMLFrameElement : HTMLElement
{
		public HTMLFrameElement() { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Scrolling { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Src { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FrameBorder { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public USVString LongDesc { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool NoResize { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Document? ContentDocument { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public WindowProxy? ContentWindow { get; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString MarginHeight { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString MarginWidth { get; set; }
}

///<include file='Utils/Docs/HTMLAnchorElement/HTMLAnchorElement.generated.xml' path='docs/HTMLAnchorElement/*'/>
public partial class HTMLAnchorElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Coords { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Charset { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Rev { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Shape { get; set; }
}

///<include file='Utils/Docs/HTMLAreaElement/HTMLAreaElement.generated.xml' path='docs/HTMLAreaElement/*'/>
public partial class HTMLAreaElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool NoHref { get; set; }
}

///<include file='Utils/Docs/HTMLBodyElement/HTMLBodyElement.generated.xml' path='docs/HTMLBodyElement/*'/>
public partial class HTMLBodyElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Text { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Link { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString VLink { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ALink { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString BgColor { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Background { get; set; }
}

///<include file='Utils/Docs/HTMLBRElement/HTMLBRElement.generated.xml' path='docs/HTMLBRElement/*'/>
public partial class HTMLBRElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Clear { get; set; }
}

///<include file='Utils/Docs/HTMLTableCaptionElement/HTMLTableCaptionElement.generated.xml' path='docs/HTMLTableCaptionElement/*'/>
public partial class HTMLTableCaptionElement
{
	///<include file='Utils/Docs/HTMLTableCaptionElementAlign/HTMLTableCaptionElementAlign.generated.xml' path='docs/HTMLTableCaptionElementAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
}

///<include file='Utils/Docs/HTMLTableColElement/HTMLTableColElement.generated.xml' path='docs/HTMLTableColElement/*'/>
public partial class HTMLTableColElement
{
	///<include file='Utils/Docs/HTMLTableColElementAlign/HTMLTableColElementAlign.generated.xml' path='docs/HTMLTableColElementAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
	///<include file='Utils/Docs/HTMLTableColElementCh/HTMLTableColElementCh.generated.xml' path='docs/HTMLTableColElementCh/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Ch { get; set; }
	///<include file='Utils/Docs/HTMLTableColElementChOff/HTMLTableColElementChOff.generated.xml' path='docs/HTMLTableColElementChOff/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ChOff { get; set; }
	///<include file='Utils/Docs/HTMLTableColElementVAlign/HTMLTableColElementVAlign.generated.xml' path='docs/HTMLTableColElementVAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString VAlign { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Width { get; set; }
}

[To(ToAttribute.Default)]
public partial class HTMLDirectoryElement : HTMLElement
{
		public HTMLDirectoryElement() { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Compact { get; set; }
}

///<include file='Utils/Docs/HTMLDivElement/HTMLDivElement.generated.xml' path='docs/HTMLDivElement/*'/>
public partial class HTMLDivElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
}

///<include file='Utils/Docs/HTMLDListElement/HTMLDListElement.generated.xml' path='docs/HTMLDListElement/*'/>
public partial class HTMLDListElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Compact { get; set; }
}

///<include file='Utils/Docs/HTMLEmbedElement/HTMLEmbedElement.generated.xml' path='docs/HTMLEmbedElement/*'/>
public partial class HTMLEmbedElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
}

///<include file='Utils/Docs/HTMLFontElement/HTMLFontElement.generated.xml' path='docs/HTMLFontElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLFontElement : HTMLElement
{
		public HTMLFontElement() { }
	///<include file='Utils/Docs/HTMLFontElementColor/HTMLFontElementColor.generated.xml' path='docs/HTMLFontElementColor/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Color { get; set; }
	///<include file='Utils/Docs/HTMLFontElementFace/HTMLFontElementFace.generated.xml' path='docs/HTMLFontElementFace/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Face { get; set; }
	///<include file='Utils/Docs/HTMLFontElementSize/HTMLFontElementSize.generated.xml' path='docs/HTMLFontElementSize/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Size { get; set; }
}

///<include file='Utils/Docs/HTMLHeadingElement/HTMLHeadingElement.generated.xml' path='docs/HTMLHeadingElement/*'/>
public partial class HTMLHeadingElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
}

///<include file='Utils/Docs/HTMLHRElement/HTMLHRElement.generated.xml' path='docs/HTMLHRElement/*'/>
public partial class HTMLHRElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Color { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool NoShade { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Size { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Width { get; set; }
}

///<include file='Utils/Docs/HTMLHtmlElement/HTMLHtmlElement.generated.xml' path='docs/HTMLHtmlElement/*'/>
public partial class HTMLHtmlElement
{
	///<include file='Utils/Docs/HTMLHtmlElementVersion/HTMLHtmlElementVersion.generated.xml' path='docs/HTMLHtmlElementVersion/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Version { get; set; }
}

///<include file='Utils/Docs/HTMLIFrameElement/HTMLIFrameElement.generated.xml' path='docs/HTMLIFrameElement/*'/>
public partial class HTMLIFrameElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Scrolling { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString FrameBorder { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public USVString LongDesc { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString MarginHeight { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString MarginWidth { get; set; }
}

///<include file='Utils/Docs/HTMLImageElement/HTMLImageElement.generated.xml' path='docs/HTMLImageElement/*'/>
public partial class HTMLImageElement
{
	///<include file='Utils/Docs/HTMLImageElementName/HTMLImageElementName.generated.xml' path='docs/HTMLImageElementName/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Lowsrc { get; set; }
	///<include file='Utils/Docs/HTMLImageElementAlign/HTMLImageElementAlign.generated.xml' path='docs/HTMLImageElementAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
	///<include file='Utils/Docs/HTMLImageElementHspace/HTMLImageElementHspace.generated.xml' path='docs/HTMLImageElementHspace/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Hspace { get; set; }
	///<include file='Utils/Docs/HTMLImageElementVspace/HTMLImageElementVspace.generated.xml' path='docs/HTMLImageElementVspace/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Vspace { get; set; }
	///<include file='Utils/Docs/HTMLImageElementLongDesc/HTMLImageElementLongDesc.generated.xml' path='docs/HTMLImageElementLongDesc/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public USVString LongDesc { get; set; }
	///<include file='Utils/Docs/HTMLImageElementBorder/HTMLImageElementBorder.generated.xml' path='docs/HTMLImageElementBorder/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Border { get; set; }
}

///<include file='Utils/Docs/HTMLInputElement/HTMLInputElement.generated.xml' path='docs/HTMLInputElement/*'/>
public partial class HTMLInputElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString UseMap { get; set; }
}

///<include file='Utils/Docs/HTMLLegendElement/HTMLLegendElement.generated.xml' path='docs/HTMLLegendElement/*'/>
public partial class HTMLLegendElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
}

///<include file='Utils/Docs/HTMLLIElement/HTMLLIElement.generated.xml' path='docs/HTMLLIElement/*'/>
public partial class HTMLLIElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
}

///<include file='Utils/Docs/HTMLLinkElement/HTMLLinkElement.generated.xml' path='docs/HTMLLinkElement/*'/>
public partial class HTMLLinkElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Charset { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Rev { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Target { get; set; }
}

///<include file='Utils/Docs/HTMLMenuElement/HTMLMenuElement.generated.xml' path='docs/HTMLMenuElement/*'/>
public partial class HTMLMenuElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Compact { get; set; }
}

///<include file='Utils/Docs/HTMLMetaElement/HTMLMetaElement.generated.xml' path='docs/HTMLMetaElement/*'/>
public partial class HTMLMetaElement
{
	///<include file='Utils/Docs/HTMLMetaElementScheme/HTMLMetaElementScheme.generated.xml' path='docs/HTMLMetaElementScheme/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Scheme { get; set; }
}

///<include file='Utils/Docs/HTMLObjectElement/HTMLObjectElement.generated.xml' path='docs/HTMLObjectElement/*'/>
public partial class HTMLObjectElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Archive { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Code { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Declare { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Hspace { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Standby { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong Vspace { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString CodeBase { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString CodeType { get; set; }
	///<include file='Utils/Docs/HTMLObjectElementUseMap/HTMLObjectElementUseMap.generated.xml' path='docs/HTMLObjectElementUseMap/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString UseMap { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Border { get; set; }
}

///<include file='Utils/Docs/HTMLOListElement/HTMLOListElement.generated.xml' path='docs/HTMLOListElement/*'/>
public partial class HTMLOListElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Compact { get; set; }
}

///<include file='Utils/Docs/HTMLParagraphElement/HTMLParagraphElement.generated.xml' path='docs/HTMLParagraphElement/*'/>
public partial class HTMLParagraphElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
}

///<include file='Utils/Docs/HTMLParamElement/HTMLParamElement.generated.xml' path='docs/HTMLParamElement/*'/>
[To(ToAttribute.Default)]
public partial class HTMLParamElement : HTMLElement
{
		public HTMLParamElement() { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Name { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Value { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ValueType { get; set; }
}

///<include file='Utils/Docs/HTMLPreElement/HTMLPreElement.generated.xml' path='docs/HTMLPreElement/*'/>
public partial class HTMLPreElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public long Width { get; set; }
}

///<include file='Utils/Docs/HTMLStyleElement/HTMLStyleElement.generated.xml' path='docs/HTMLStyleElement/*'/>
public partial class HTMLStyleElement
{
	///<include file='Utils/Docs/HTMLStyleElementType/HTMLStyleElementType.generated.xml' path='docs/HTMLStyleElementType/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
}

///<include file='Utils/Docs/HTMLScriptElement/HTMLScriptElement.generated.xml' path='docs/HTMLScriptElement/*'/>
public partial class HTMLScriptElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Charset { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Event { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString HtmlFor { get; set; }
}

///<include file='Utils/Docs/HTMLTableElement/HTMLTableElement.generated.xml' path='docs/HTMLTableElement/*'/>
public partial class HTMLTableElement
{
	///<include file='Utils/Docs/HTMLTableElementAlign/HTMLTableElementAlign.generated.xml' path='docs/HTMLTableElementAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
	///<include file='Utils/Docs/HTMLTableElementBorder/HTMLTableElementBorder.generated.xml' path='docs/HTMLTableElementBorder/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Border { get; set; }
	///<include file='Utils/Docs/HTMLTableElementFrame/HTMLTableElementFrame.generated.xml' path='docs/HTMLTableElementFrame/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Frame { get; set; }
	///<include file='Utils/Docs/HTMLTableElementRules/HTMLTableElementRules.generated.xml' path='docs/HTMLTableElementRules/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Rules { get; set; }
	///<include file='Utils/Docs/HTMLTableElementSummary/HTMLTableElementSummary.generated.xml' path='docs/HTMLTableElementSummary/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Summary { get; set; }
	///<include file='Utils/Docs/HTMLTableElementWidth/HTMLTableElementWidth.generated.xml' path='docs/HTMLTableElementWidth/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Width { get; set; }
	///<include file='Utils/Docs/HTMLTableElementBgColor/HTMLTableElementBgColor.generated.xml' path='docs/HTMLTableElementBgColor/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString BgColor { get; set; }
	///<include file='Utils/Docs/HTMLTableElementCellPadding/HTMLTableElementCellPadding.generated.xml' path='docs/HTMLTableElementCellPadding/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString CellPadding { get; set; }
	///<include file='Utils/Docs/HTMLTableElementCellSpacing/HTMLTableElementCellSpacing.generated.xml' path='docs/HTMLTableElementCellSpacing/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString CellSpacing { get; set; }
}

///<include file='Utils/Docs/HTMLTableSectionElement/HTMLTableSectionElement.generated.xml' path='docs/HTMLTableSectionElement/*'/>
public partial class HTMLTableSectionElement
{
	///<include file='Utils/Docs/HTMLTableSectionElementAlign/HTMLTableSectionElementAlign.generated.xml' path='docs/HTMLTableSectionElementAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
	///<include file='Utils/Docs/HTMLTableSectionElementCh/HTMLTableSectionElementCh.generated.xml' path='docs/HTMLTableSectionElementCh/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Ch { get; set; }
	///<include file='Utils/Docs/HTMLTableSectionElementChOff/HTMLTableSectionElementChOff.generated.xml' path='docs/HTMLTableSectionElementChOff/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ChOff { get; set; }
	///<include file='Utils/Docs/HTMLTableSectionElementVAlign/HTMLTableSectionElementVAlign.generated.xml' path='docs/HTMLTableSectionElementVAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString VAlign { get; set; }
}

///<include file='Utils/Docs/HTMLTableCellElement/HTMLTableCellElement.generated.xml' path='docs/HTMLTableCellElement/*'/>
public partial class HTMLTableCellElement
{
	///<include file='Utils/Docs/HTMLTableCellElementAlign/HTMLTableCellElementAlign.generated.xml' path='docs/HTMLTableCellElementAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Axis { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Height { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Width { get; set; }
	///<include file='Utils/Docs/HTMLTableCellElementCh/HTMLTableCellElementCh.generated.xml' path='docs/HTMLTableCellElementCh/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Ch { get; set; }
	///<include file='Utils/Docs/HTMLTableCellElementChOff/HTMLTableCellElementChOff.generated.xml' path='docs/HTMLTableCellElementChOff/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ChOff { get; set; }
	///<include file='Utils/Docs/HTMLTableCellElementNoWrap/HTMLTableCellElementNoWrap.generated.xml' path='docs/HTMLTableCellElementNoWrap/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool NoWrap { get; set; }
	///<include file='Utils/Docs/HTMLTableCellElementVAlign/HTMLTableCellElementVAlign.generated.xml' path='docs/HTMLTableCellElementVAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString VAlign { get; set; }
	///<include file='Utils/Docs/HTMLTableCellElementBgColor/HTMLTableCellElementBgColor.generated.xml' path='docs/HTMLTableCellElementBgColor/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString BgColor { get; set; }
}

///<include file='Utils/Docs/HTMLTableRowElement/HTMLTableRowElement.generated.xml' path='docs/HTMLTableRowElement/*'/>
public partial class HTMLTableRowElement
{
	///<include file='Utils/Docs/HTMLTableRowElementAlign/HTMLTableRowElementAlign.generated.xml' path='docs/HTMLTableRowElementAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Align { get; set; }
	///<include file='Utils/Docs/HTMLTableRowElementCh/HTMLTableRowElementCh.generated.xml' path='docs/HTMLTableRowElementCh/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Ch { get; set; }
	///<include file='Utils/Docs/HTMLTableRowElementChOff/HTMLTableRowElementChOff.generated.xml' path='docs/HTMLTableRowElementChOff/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ChOff { get; set; }
	///<include file='Utils/Docs/HTMLTableRowElementVAlign/HTMLTableRowElementVAlign.generated.xml' path='docs/HTMLTableRowElementVAlign/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString VAlign { get; set; }
	///<include file='Utils/Docs/HTMLTableRowElementBgColor/HTMLTableRowElementBgColor.generated.xml' path='docs/HTMLTableRowElementBgColor/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString BgColor { get; set; }
}

///<include file='Utils/Docs/HTMLUListElement/HTMLUListElement.generated.xml' path='docs/HTMLUListElement/*'/>
public partial class HTMLUListElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool Compact { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Type { get; set; }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentFgColor/DocumentFgColor.generated.xml' path='docs/DocumentFgColor/*'/>
	public DOMString FgColor { get; set; }
	///<include file='Utils/Docs/DocumentLinkColor/DocumentLinkColor.generated.xml' path='docs/DocumentLinkColor/*'/>
	public DOMString LinkColor { get; set; }
	///<include file='Utils/Docs/DocumentVlinkColor/DocumentVlinkColor.generated.xml' path='docs/DocumentVlinkColor/*'/>
	public DOMString VlinkColor { get; set; }
	///<include file='Utils/Docs/DocumentAlinkColor/DocumentAlinkColor.generated.xml' path='docs/DocumentAlinkColor/*'/>
	public DOMString AlinkColor { get; set; }
	///<include file='Utils/Docs/DocumentBgColor/DocumentBgColor.generated.xml' path='docs/DocumentBgColor/*'/>
	public DOMString BgColor { get; set; }
	///<include file='Utils/Docs/DocumentAnchors/DocumentAnchors.generated.xml' path='docs/DocumentAnchors/*'/>
	public HTMLCollection Anchors { get; }
	///<include file='Utils/Docs/DocumentApplets/DocumentApplets.generated.xml' path='docs/DocumentApplets/*'/>
	public HTMLCollection Applets { get; }
	///<include file='Utils/Docs/DocumentClear/DocumentClear.generated.xml' path='docs/DocumentClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
		public Undefined CaptureEvents() { throw new System.NotImplementedException(); }
		public Undefined ReleaseEvents() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentAll/DocumentAll.generated.xml' path='docs/DocumentAll/*'/>
	public HTMLAllCollection All { get; }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowCaptureEvents/WindowCaptureEvents.generated.xml' path='docs/WindowCaptureEvents/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined CaptureEvents() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowReleaseEvents/WindowReleaseEvents.generated.xml' path='docs/WindowReleaseEvents/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined ReleaseEvents() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowExternal/WindowExternal.generated.xml' path='docs/WindowExternal/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public External External { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class External
{
		public Undefined AddSearchProvider() { throw new System.NotImplementedException(); }
		public Undefined IsSearchProviderInstalled() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdleOptions
{
		public ulong Threshold;
		public AbortSignal Signal;
}

///<include file='Utils/Docs/IdleDetector/IdleDetector.generated.xml' path='docs/IdleDetector/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdleDetector : EventTarget
{
	///<include file='Utils/Docs/IdleDetectorIdleDetector/IdleDetectorIdleDetector.generated.xml' path='docs/IdleDetectorIdleDetector/*'/>
	public IdleDetector() { }
	///<include file='Utils/Docs/IdleDetectorUserState/IdleDetectorUserState.generated.xml' path='docs/IdleDetectorUserState/*'/>
	public UserIdleState? UserState { get; }
	///<include file='Utils/Docs/IdleDetectorScreenState/IdleDetectorScreenState.generated.xml' path='docs/IdleDetectorScreenState/*'/>
	public ScreenIdleState? ScreenState { get; }
		public EventHandler Onchange { get; set; }
	///<include file='Utils/Docs/IdleDetectorRequestPermission/IdleDetectorRequestPermission.generated.xml' path='docs/IdleDetectorRequestPermission/*'/>
	public static Task<PermissionState> RequestPermission() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IdleDetectorStart/IdleDetectorStart.generated.xml' path='docs/IdleDetectorStart/*'/>
	public Task<Undefined> Start(IdleOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ImageCapture/ImageCapture.generated.xml' path='docs/ImageCapture/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageCapture
{
	///<include file='Utils/Docs/ImageCaptureImageCapture/ImageCaptureImageCapture.generated.xml' path='docs/ImageCaptureImageCapture/*'/>
	public ImageCapture(MediaStreamTrack videoTrack) { }
	///<include file='Utils/Docs/ImageCaptureTakePhoto/ImageCaptureTakePhoto.generated.xml' path='docs/ImageCaptureTakePhoto/*'/>
	public Task<Blob> TakePhoto(PhotoSettings photoSettings) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ImageCaptureGetPhotoCapabilities/ImageCaptureGetPhotoCapabilities.generated.xml' path='docs/ImageCaptureGetPhotoCapabilities/*'/>
	public Task<PhotoCapabilities> GetPhotoCapabilities() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ImageCaptureGetPhotoSettings/ImageCaptureGetPhotoSettings.generated.xml' path='docs/ImageCaptureGetPhotoSettings/*'/>
	public Task<PhotoSettings> GetPhotoSettings() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ImageCaptureGrabFrame/ImageCaptureGrabFrame.generated.xml' path='docs/ImageCaptureGrabFrame/*'/>
	public Task<ImageBitmap> GrabFrame() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ImageCaptureTrack/ImageCaptureTrack.generated.xml' path='docs/ImageCaptureTrack/*'/>
	public MediaStreamTrack Track { get; }
	public ImageCapture() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PhotoCapabilities
{
		public RedEyeReduction RedEyeReduction;
		public MediaSettingsRange ImageHeight;
		public MediaSettingsRange ImageWidth;
		public List<FillLightMode> FillLightMode;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PhotoSettings
{
		public FillLightMode FillLightMode;
		public Number ImageHeight;
		public Number ImageWidth;
		public bool RedEyeReduction;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaSettingsRange
{
		public Number Max;
		public Number Min;
		public Number Step;
}

///<include file='Utils/Docs/MediaTrackSupportedConstraints/MediaTrackSupportedConstraints.generated.xml' path='docs/MediaTrackSupportedConstraints/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaTrackSupportedConstraints
{
		public bool WhiteBalanceMode;
		public bool ExposureMode;
		public bool FocusMode;
		public bool PointsOfInterest;
		public bool ExposureCompensation;
		public bool ExposureTime;
		public bool ColorTemperature;
		public bool Iso;
		public bool Brightness;
		public bool Contrast;
		public bool Pan;
		public bool Saturation;
		public bool Sharpness;
		public bool FocusDistance;
		public bool Tilt;
		public bool Zoom;
		public bool Torch;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaTrackCapabilities
{
		public List<DOMString> WhiteBalanceMode;
		public List<DOMString> ExposureMode;
		public List<DOMString> FocusMode;
		public MediaSettingsRange ExposureCompensation;
		public MediaSettingsRange ExposureTime;
		public MediaSettingsRange ColorTemperature;
		public MediaSettingsRange Iso;
		public MediaSettingsRange Brightness;
		public MediaSettingsRange Contrast;
		public MediaSettingsRange Saturation;
		public MediaSettingsRange Sharpness;
		public MediaSettingsRange FocusDistance;
		public MediaSettingsRange Pan;
		public MediaSettingsRange Tilt;
		public MediaSettingsRange Zoom;
		public List<bool> Torch;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaTrackConstraintSet
{
		public ConstrainDOMString WhiteBalanceMode;
		public ConstrainDOMString ExposureMode;
		public ConstrainDOMString FocusMode;
		public ConstrainPoint2D PointsOfInterest;
		public ConstrainDouble ExposureCompensation;
		public ConstrainDouble ExposureTime;
		public ConstrainDouble ColorTemperature;
		public ConstrainDouble Iso;
		public ConstrainDouble Brightness;
		public ConstrainDouble Contrast;
		public ConstrainDouble Saturation;
		public ConstrainDouble Sharpness;
		public ConstrainDouble FocusDistance;
		public Union99 Pan;
		public Union100 Tilt;
		public Union101 Zoom;
		public ConstrainBoolean Torch;
}

///<include file='Utils/Docs/MediaTrackSettings/MediaTrackSettings.generated.xml' path='docs/MediaTrackSettings/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaTrackSettings
{
		public DOMString WhiteBalanceMode;
		public DOMString ExposureMode;
		public DOMString FocusMode;
		public List<Point2D> PointsOfInterest;
		public Number ExposureCompensation;
		public Number ExposureTime;
		public Number ColorTemperature;
		public Number Iso;
		public Number Brightness;
		public Number Contrast;
		public Number Saturation;
		public Number Sharpness;
		public Number FocusDistance;
		public Number Pan;
		public Number Tilt;
		public Number Zoom;
		public bool Torch;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ConstrainPoint2DParameters
{
		public List<Point2D> Exact;
		public List<Point2D> Ideal;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class Point2D
{
		public Number X;
		public Number Y;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageResource
{
		public required USVString Src;
		public DOMString Sizes;
		public DOMString Type;
		public DOMString Label;
}

///<include file='Utils/Docs/IDBRequest/IDBRequest.generated.xml' path='docs/IDBRequest/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBRequest : EventTarget
{
	///<include file='Utils/Docs/IDBRequestResult/IDBRequestResult.generated.xml' path='docs/IDBRequestResult/*'/>
	public dynamic Result { get; }
	///<include file='Utils/Docs/IDBRequestError/IDBRequestError.generated.xml' path='docs/IDBRequestError/*'/>
	public DOMException? Error { get; }
	///<include file='Utils/Docs/IDBRequestSource/IDBRequestSource.generated.xml' path='docs/IDBRequestSource/*'/>
	public Union103? Source { get; }
	///<include file='Utils/Docs/IDBRequestTransaction/IDBRequestTransaction.generated.xml' path='docs/IDBRequestTransaction/*'/>
	public IDBTransaction? Transaction { get; }
	///<include file='Utils/Docs/IDBRequestReadyState/IDBRequestReadyState.generated.xml' path='docs/IDBRequestReadyState/*'/>
	public IDBRequestReadyState ReadyState { get; }
		public EventHandler Onsuccess { get; set; }
		public EventHandler Onerror { get; set; }
}

///<include file='Utils/Docs/IDBOpenDBRequest/IDBOpenDBRequest.generated.xml' path='docs/IDBOpenDBRequest/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBOpenDBRequest : IDBRequest
{
		public EventHandler Onblocked { get; set; }
		public EventHandler Onupgradeneeded { get; set; }
}

///<include file='Utils/Docs/IDBVersionChangeEvent/IDBVersionChangeEvent.generated.xml' path='docs/IDBVersionChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBVersionChangeEvent : Event
{
	///<include file='Utils/Docs/IDBVersionChangeEventIDBVersionChangeEvent/IDBVersionChangeEventIDBVersionChangeEvent.generated.xml' path='docs/IDBVersionChangeEventIDBVersionChangeEvent/*'/>
	public IDBVersionChangeEvent(DOMString type, IDBVersionChangeEventInit eventInitDict) { }
	///<include file='Utils/Docs/IDBVersionChangeEventOldVersion/IDBVersionChangeEventOldVersion.generated.xml' path='docs/IDBVersionChangeEventOldVersion/*'/>
	public ulong OldVersion { get; }
	///<include file='Utils/Docs/IDBVersionChangeEventNewVersion/IDBVersionChangeEventNewVersion.generated.xml' path='docs/IDBVersionChangeEventNewVersion/*'/>
	public ulong? NewVersion { get; }
	public IDBVersionChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBVersionChangeEventInit : EventInit
{
		public ulong OldVersion;
		public ulong? NewVersion;
}

///<include file='Utils/Docs/IDBFactory/IDBFactory.generated.xml' path='docs/IDBFactory/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBFactory
{
	///<include file='Utils/Docs/IDBFactoryOpen/IDBFactoryOpen.generated.xml' path='docs/IDBFactoryOpen/*'/>
	public IDBOpenDBRequest Open(DOMString name, ulong version) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBFactoryDeleteDatabase/IDBFactoryDeleteDatabase.generated.xml' path='docs/IDBFactoryDeleteDatabase/*'/>
	public IDBOpenDBRequest DeleteDatabase(DOMString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBFactoryDatabases/IDBFactoryDatabases.generated.xml' path='docs/IDBFactoryDatabases/*'/>
	public Task<List<IDBDatabaseInfo>> Databases() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBFactoryCmp/IDBFactoryCmp.generated.xml' path='docs/IDBFactoryCmp/*'/>
	public Number Cmp(dynamic first, dynamic second) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBDatabaseInfo
{
		public DOMString Name;
		public ulong Version;
}

///<include file='Utils/Docs/IDBDatabase/IDBDatabase.generated.xml' path='docs/IDBDatabase/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBDatabase : EventTarget
{
	///<include file='Utils/Docs/IDBDatabaseName/IDBDatabaseName.generated.xml' path='docs/IDBDatabaseName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/IDBDatabaseVersion/IDBDatabaseVersion.generated.xml' path='docs/IDBDatabaseVersion/*'/>
	public ulong Version { get; }
	///<include file='Utils/Docs/IDBDatabaseObjectStoreNames/IDBDatabaseObjectStoreNames.generated.xml' path='docs/IDBDatabaseObjectStoreNames/*'/>
	public DOMStringList ObjectStoreNames { get; }
	///<include file='Utils/Docs/IDBDatabaseTransaction/IDBDatabaseTransaction.generated.xml' path='docs/IDBDatabaseTransaction/*'/>
	public IDBTransaction Transaction(Union104 storeNames, IDBTransactionMode mode, IDBTransactionOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBDatabaseClose/IDBDatabaseClose.generated.xml' path='docs/IDBDatabaseClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBDatabaseCreateObjectStore/IDBDatabaseCreateObjectStore.generated.xml' path='docs/IDBDatabaseCreateObjectStore/*'/>
	public IDBObjectStore CreateObjectStore(DOMString name, IDBObjectStoreParameters options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBDatabaseDeleteObjectStore/IDBDatabaseDeleteObjectStore.generated.xml' path='docs/IDBDatabaseDeleteObjectStore/*'/>
	public Undefined DeleteObjectStore(DOMString name) { throw new System.NotImplementedException(); }
		public EventHandler Onabort { get; set; }
		public EventHandler Onclose { get; set; }
		public EventHandler Onerror { get; set; }
		public EventHandler Onversionchange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBTransactionOptions
{
		public IDBTransactionDurability Durability;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBObjectStoreParameters
{
		public Union105? KeyPath;
		public bool AutoIncrement;
}

///<include file='Utils/Docs/IDBObjectStore/IDBObjectStore.generated.xml' path='docs/IDBObjectStore/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBObjectStore
{
	///<include file='Utils/Docs/IDBObjectStoreName/IDBObjectStoreName.generated.xml' path='docs/IDBObjectStoreName/*'/>
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/IDBObjectStoreKeyPath/IDBObjectStoreKeyPath.generated.xml' path='docs/IDBObjectStoreKeyPath/*'/>
	public dynamic KeyPath { get; }
	///<include file='Utils/Docs/IDBObjectStoreIndexNames/IDBObjectStoreIndexNames.generated.xml' path='docs/IDBObjectStoreIndexNames/*'/>
	public DOMStringList IndexNames { get; }
	///<include file='Utils/Docs/IDBObjectStoreTransaction/IDBObjectStoreTransaction.generated.xml' path='docs/IDBObjectStoreTransaction/*'/>
	public IDBTransaction Transaction { get; }
	///<include file='Utils/Docs/IDBObjectStoreAutoIncrement/IDBObjectStoreAutoIncrement.generated.xml' path='docs/IDBObjectStoreAutoIncrement/*'/>
	public bool AutoIncrement { get; }
	///<include file='Utils/Docs/IDBObjectStorePut/IDBObjectStorePut.generated.xml' path='docs/IDBObjectStorePut/*'/>
	public IDBRequest Put(dynamic value, dynamic key) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreAdd/IDBObjectStoreAdd.generated.xml' path='docs/IDBObjectStoreAdd/*'/>
	public IDBRequest Add(dynamic value, dynamic key) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreDelete/IDBObjectStoreDelete.generated.xml' path='docs/IDBObjectStoreDelete/*'/>
	public IDBRequest Delete(dynamic query) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreClear/IDBObjectStoreClear.generated.xml' path='docs/IDBObjectStoreClear/*'/>
	public IDBRequest Clear() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreGet/IDBObjectStoreGet.generated.xml' path='docs/IDBObjectStoreGet/*'/>
	public IDBRequest Get(dynamic query) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreGetKey/IDBObjectStoreGetKey.generated.xml' path='docs/IDBObjectStoreGetKey/*'/>
	public IDBRequest GetKey(dynamic query) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreGetAll/IDBObjectStoreGetAll.generated.xml' path='docs/IDBObjectStoreGetAll/*'/>
	public IDBRequest GetAll(dynamic query, ulong count) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreGetAllKeys/IDBObjectStoreGetAllKeys.generated.xml' path='docs/IDBObjectStoreGetAllKeys/*'/>
	public IDBRequest GetAllKeys(dynamic query, ulong count) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreCount/IDBObjectStoreCount.generated.xml' path='docs/IDBObjectStoreCount/*'/>
	public IDBRequest Count(dynamic query) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreOpenCursor/IDBObjectStoreOpenCursor.generated.xml' path='docs/IDBObjectStoreOpenCursor/*'/>
	public IDBRequest OpenCursor(dynamic query, IDBCursorDirection direction) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreOpenKeyCursor/IDBObjectStoreOpenKeyCursor.generated.xml' path='docs/IDBObjectStoreOpenKeyCursor/*'/>
	public IDBRequest OpenKeyCursor(dynamic query, IDBCursorDirection direction) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreIndex/IDBObjectStoreIndex.generated.xml' path='docs/IDBObjectStoreIndex/*'/>
	public IDBIndex Index(DOMString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreCreateIndex/IDBObjectStoreCreateIndex.generated.xml' path='docs/IDBObjectStoreCreateIndex/*'/>
	public IDBIndex CreateIndex(DOMString name, Union106 keyPath, IDBIndexParameters options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBObjectStoreDeleteIndex/IDBObjectStoreDeleteIndex.generated.xml' path='docs/IDBObjectStoreDeleteIndex/*'/>
	public Undefined DeleteIndex(DOMString name) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBIndexParameters
{
		public bool Unique;
		public bool MultiEntry;
}

///<include file='Utils/Docs/IDBIndex/IDBIndex.generated.xml' path='docs/IDBIndex/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBIndex
{
	///<include file='Utils/Docs/IDBIndexName/IDBIndexName.generated.xml' path='docs/IDBIndexName/*'/>
	public DOMString Name { get; set; }
	///<include file='Utils/Docs/IDBIndexObjectStore/IDBIndexObjectStore.generated.xml' path='docs/IDBIndexObjectStore/*'/>
	public IDBObjectStore ObjectStore { get; }
	///<include file='Utils/Docs/IDBIndexKeyPath/IDBIndexKeyPath.generated.xml' path='docs/IDBIndexKeyPath/*'/>
	public dynamic KeyPath { get; }
	///<include file='Utils/Docs/IDBIndexMultiEntry/IDBIndexMultiEntry.generated.xml' path='docs/IDBIndexMultiEntry/*'/>
	public bool MultiEntry { get; }
	///<include file='Utils/Docs/IDBIndexUnique/IDBIndexUnique.generated.xml' path='docs/IDBIndexUnique/*'/>
	public bool Unique { get; }
	///<include file='Utils/Docs/IDBIndexGet/IDBIndexGet.generated.xml' path='docs/IDBIndexGet/*'/>
	public IDBRequest Get(dynamic query) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBIndexGetKey/IDBIndexGetKey.generated.xml' path='docs/IDBIndexGetKey/*'/>
	public IDBRequest GetKey(dynamic query) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBIndexGetAll/IDBIndexGetAll.generated.xml' path='docs/IDBIndexGetAll/*'/>
	public IDBRequest GetAll(dynamic query, ulong count) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBIndexGetAllKeys/IDBIndexGetAllKeys.generated.xml' path='docs/IDBIndexGetAllKeys/*'/>
	public IDBRequest GetAllKeys(dynamic query, ulong count) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBIndexCount/IDBIndexCount.generated.xml' path='docs/IDBIndexCount/*'/>
	public IDBRequest Count(dynamic query) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBIndexOpenCursor/IDBIndexOpenCursor.generated.xml' path='docs/IDBIndexOpenCursor/*'/>
	public IDBRequest OpenCursor(dynamic query, IDBCursorDirection direction) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBIndexOpenKeyCursor/IDBIndexOpenKeyCursor.generated.xml' path='docs/IDBIndexOpenKeyCursor/*'/>
	public IDBRequest OpenKeyCursor(dynamic query, IDBCursorDirection direction) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/IDBKeyRange/IDBKeyRange.generated.xml' path='docs/IDBKeyRange/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBKeyRange
{
	///<include file='Utils/Docs/IDBKeyRangeLower/IDBKeyRangeLower.generated.xml' path='docs/IDBKeyRangeLower/*'/>
	public dynamic Lower { get; }
	///<include file='Utils/Docs/IDBKeyRangeUpper/IDBKeyRangeUpper.generated.xml' path='docs/IDBKeyRangeUpper/*'/>
	public dynamic Upper { get; }
	///<include file='Utils/Docs/IDBKeyRangeLowerOpen/IDBKeyRangeLowerOpen.generated.xml' path='docs/IDBKeyRangeLowerOpen/*'/>
	public bool LowerOpen { get; }
	///<include file='Utils/Docs/IDBKeyRangeUpperOpen/IDBKeyRangeUpperOpen.generated.xml' path='docs/IDBKeyRangeUpperOpen/*'/>
	public bool UpperOpen { get; }
	///<include file='Utils/Docs/IDBKeyRangeOnly/IDBKeyRangeOnly.generated.xml' path='docs/IDBKeyRangeOnly/*'/>
	public static IDBKeyRange Only(dynamic value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBKeyRangeLowerBound/IDBKeyRangeLowerBound.generated.xml' path='docs/IDBKeyRangeLowerBound/*'/>
	public static IDBKeyRange LowerBound(dynamic lower, bool open) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBKeyRangeUpperBound/IDBKeyRangeUpperBound.generated.xml' path='docs/IDBKeyRangeUpperBound/*'/>
	public static IDBKeyRange UpperBound(dynamic upper, bool open) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBKeyRangeBound/IDBKeyRangeBound.generated.xml' path='docs/IDBKeyRangeBound/*'/>
	public static IDBKeyRange Bound(dynamic lower, dynamic upper, bool lowerOpen, bool upperOpen) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBKeyRangeIncludes/IDBKeyRangeIncludes.generated.xml' path='docs/IDBKeyRangeIncludes/*'/>
	public bool Includes(dynamic key) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/IDBCursor/IDBCursor.generated.xml' path='docs/IDBCursor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBCursor
{
	///<include file='Utils/Docs/IDBCursorSource/IDBCursorSource.generated.xml' path='docs/IDBCursorSource/*'/>
	public Union107 Source { get; }
	///<include file='Utils/Docs/IDBCursorDirection/IDBCursorDirection.generated.xml' path='docs/IDBCursorDirection/*'/>
	public IDBCursorDirection Direction { get; }
	///<include file='Utils/Docs/IDBCursorKey/IDBCursorKey.generated.xml' path='docs/IDBCursorKey/*'/>
	public dynamic Key { get; }
	///<include file='Utils/Docs/IDBCursorPrimaryKey/IDBCursorPrimaryKey.generated.xml' path='docs/IDBCursorPrimaryKey/*'/>
	public dynamic PrimaryKey { get; }
	///<include file='Utils/Docs/IDBCursorRequest/IDBCursorRequest.generated.xml' path='docs/IDBCursorRequest/*'/>
	public IDBRequest Request { get; }
	///<include file='Utils/Docs/IDBCursorAdvance/IDBCursorAdvance.generated.xml' path='docs/IDBCursorAdvance/*'/>
	public Undefined Advance(ulong count) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBCursorContinue/IDBCursorContinue.generated.xml' path='docs/IDBCursorContinue/*'/>
	public Undefined Continue(dynamic key) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBCursorContinuePrimaryKey/IDBCursorContinuePrimaryKey.generated.xml' path='docs/IDBCursorContinuePrimaryKey/*'/>
	public Undefined ContinuePrimaryKey(dynamic key, dynamic primaryKey) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBCursorUpdate/IDBCursorUpdate.generated.xml' path='docs/IDBCursorUpdate/*'/>
	public IDBRequest Update(dynamic value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBCursorDelete/IDBCursorDelete.generated.xml' path='docs/IDBCursorDelete/*'/>
	public IDBRequest Delete() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/IDBCursorWithValue/IDBCursorWithValue.generated.xml' path='docs/IDBCursorWithValue/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBCursorWithValue : IDBCursor
{
	///<include file='Utils/Docs/IDBCursorWithValueValue/IDBCursorWithValueValue.generated.xml' path='docs/IDBCursorWithValueValue/*'/>
	public dynamic Value { get; }
}

///<include file='Utils/Docs/IDBTransaction/IDBTransaction.generated.xml' path='docs/IDBTransaction/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IDBTransaction : EventTarget
{
	///<include file='Utils/Docs/IDBTransactionObjectStoreNames/IDBTransactionObjectStoreNames.generated.xml' path='docs/IDBTransactionObjectStoreNames/*'/>
	public DOMStringList ObjectStoreNames { get; }
	///<include file='Utils/Docs/IDBTransactionMode/IDBTransactionMode.generated.xml' path='docs/IDBTransactionMode/*'/>
	public IDBTransactionMode Mode { get; }
	///<include file='Utils/Docs/IDBTransactionDurability/IDBTransactionDurability.generated.xml' path='docs/IDBTransactionDurability/*'/>
	public IDBTransactionDurability Durability { get; }
	///<include file='Utils/Docs/IDBTransactionDb/IDBTransactionDb.generated.xml' path='docs/IDBTransactionDb/*'/>
	public IDBDatabase Db { get; }
	///<include file='Utils/Docs/IDBTransactionError/IDBTransactionError.generated.xml' path='docs/IDBTransactionError/*'/>
	public DOMException? Error { get; }
	///<include file='Utils/Docs/IDBTransactionObjectStore/IDBTransactionObjectStore.generated.xml' path='docs/IDBTransactionObjectStore/*'/>
	public IDBObjectStore ObjectStore(DOMString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBTransactionCommit/IDBTransactionCommit.generated.xml' path='docs/IDBTransactionCommit/*'/>
	public Undefined Commit() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IDBTransactionAbort/IDBTransactionAbort.generated.xml' path='docs/IDBTransactionAbort/*'/>
	public Undefined Abort() { throw new System.NotImplementedException(); }
		public EventHandler Onabort { get; set; }
		public EventHandler Oncomplete { get; set; }
		public EventHandler Onerror { get; set; }
}

///<include file='Utils/Docs/Ink/Ink.generated.xml' path='docs/Ink/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Ink
{
	///<include file='Utils/Docs/InkRequestPresenter/InkRequestPresenter.generated.xml' path='docs/InkRequestPresenter/*'/>
	public Task<DelegatedInkTrailPresenter> RequestPresenter(InkPresenterParam param) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class InkPresenterParam
{
		public Element? PresentationArea;
}

///<include file='Utils/Docs/DelegatedInkTrailPresenter/DelegatedInkTrailPresenter.generated.xml' path='docs/DelegatedInkTrailPresenter/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DelegatedInkTrailPresenter
{
	///<include file='Utils/Docs/DelegatedInkTrailPresenterPresentationArea/DelegatedInkTrailPresenterPresentationArea.generated.xml' path='docs/DelegatedInkTrailPresenterPresentationArea/*'/>
	public Element? PresentationArea { get; }
	///<include file='Utils/Docs/DelegatedInkTrailPresenterUpdateInkTrailStartPoint/DelegatedInkTrailPresenterUpdateInkTrailStartPoint.generated.xml' path='docs/DelegatedInkTrailPresenterUpdateInkTrailStartPoint/*'/>
	public Undefined UpdateInkTrailStartPoint(PointerEvent event_, InkTrailStyle style) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class InkTrailStyle
{
		public required DOMString Color;
		public required double Diameter;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorInk/NavigatorInk.generated.xml' path='docs/NavigatorInk/*'/>
	public Ink Ink { get; }
}

///<include file='Utils/Docs/InputDeviceCapabilities/InputDeviceCapabilities.generated.xml' path='docs/InputDeviceCapabilities/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class InputDeviceCapabilities
{
	///<include file='Utils/Docs/InputDeviceCapabilitiesInputDeviceCapabilities/InputDeviceCapabilitiesInputDeviceCapabilities.generated.xml' path='docs/InputDeviceCapabilitiesInputDeviceCapabilities/*'/>
	public InputDeviceCapabilities(InputDeviceCapabilitiesInit deviceInitDict) { }
	///<include file='Utils/Docs/InputDeviceCapabilitiesFiresTouchEvents/InputDeviceCapabilitiesFiresTouchEvents.generated.xml' path='docs/InputDeviceCapabilitiesFiresTouchEvents/*'/>
	public bool FiresTouchEvents { get; }
		public bool PointerMovementScrolls { get; }
	public InputDeviceCapabilities() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class InputDeviceCapabilitiesInit
{
		public bool FiresTouchEvents;
		public bool PointerMovementScrolls;
}

///<include file='Utils/Docs/UIEvent/UIEvent.generated.xml' path='docs/UIEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class UIEvent
{
	///<include file='Utils/Docs/UIEventSourceCapabilities/UIEventSourceCapabilities.generated.xml' path='docs/UIEventSourceCapabilities/*'/>
	public InputDeviceCapabilities? SourceCapabilities { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class UIEventInit
{
		public InputDeviceCapabilities? SourceCapabilities;
}

///<include file='Utils/Docs/InputEvent/InputEvent.generated.xml' path='docs/InputEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class InputEvent
{
	///<include file='Utils/Docs/InputEventDataTransfer/InputEventDataTransfer.generated.xml' path='docs/InputEventDataTransfer/*'/>
	public DataTransfer? DataTransfer { get; }
	///<include file='Utils/Docs/InputEventGetTargetRanges/InputEventGetTargetRanges.generated.xml' path='docs/InputEventGetTargetRanges/*'/>
	public List<StaticRange> GetTargetRanges() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class InputEventInit
{
		public DataTransfer? DataTransfer;
		public List<StaticRange> TargetRanges;
}

///<include file='Utils/Docs/IntersectionObserver/IntersectionObserver.generated.xml' path='docs/IntersectionObserver/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IntersectionObserver
{
	///<include file='Utils/Docs/IntersectionObserverIntersectionObserver/IntersectionObserverIntersectionObserver.generated.xml' path='docs/IntersectionObserverIntersectionObserver/*'/>
	public IntersectionObserver(IntersectionObserverCallback callback, IntersectionObserverInit options) { }
	///<include file='Utils/Docs/IntersectionObserverRoot/IntersectionObserverRoot.generated.xml' path='docs/IntersectionObserverRoot/*'/>
	public Union108? Root { get; }
	///<include file='Utils/Docs/IntersectionObserverRootMargin/IntersectionObserverRootMargin.generated.xml' path='docs/IntersectionObserverRootMargin/*'/>
	public DOMString RootMargin { get; }
		public DOMString ScrollMargin { get; }
	///<include file='Utils/Docs/IntersectionObserverThresholds/IntersectionObserverThresholds.generated.xml' path='docs/IntersectionObserverThresholds/*'/>
	public Number[] Thresholds { get; }
		public long Delay { get; }
		public bool TrackVisibility { get; }
	///<include file='Utils/Docs/IntersectionObserverObserve/IntersectionObserverObserve.generated.xml' path='docs/IntersectionObserverObserve/*'/>
	public Undefined Observe(Element target) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IntersectionObserverUnobserve/IntersectionObserverUnobserve.generated.xml' path='docs/IntersectionObserverUnobserve/*'/>
	public Undefined Unobserve(Element target) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IntersectionObserverDisconnect/IntersectionObserverDisconnect.generated.xml' path='docs/IntersectionObserverDisconnect/*'/>
	public Undefined Disconnect() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IntersectionObserverTakeRecords/IntersectionObserverTakeRecords.generated.xml' path='docs/IntersectionObserverTakeRecords/*'/>
	public List<IntersectionObserverEntry> TakeRecords() { throw new System.NotImplementedException(); }
	public IntersectionObserver() { }
}

///<include file='Utils/Docs/IntersectionObserverEntry/IntersectionObserverEntry.generated.xml' path='docs/IntersectionObserverEntry/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IntersectionObserverEntry
{
		public IntersectionObserverEntry(IntersectionObserverEntryInit intersectionObserverEntryInit) { }
	///<include file='Utils/Docs/IntersectionObserverEntryTime/IntersectionObserverEntryTime.generated.xml' path='docs/IntersectionObserverEntryTime/*'/>
	public DOMHighResTimeStamp Time { get; }
	///<include file='Utils/Docs/IntersectionObserverEntryRootBounds/IntersectionObserverEntryRootBounds.generated.xml' path='docs/IntersectionObserverEntryRootBounds/*'/>
	public DOMRectReadOnly? RootBounds { get; }
	///<include file='Utils/Docs/IntersectionObserverEntryBoundingClientRect/IntersectionObserverEntryBoundingClientRect.generated.xml' path='docs/IntersectionObserverEntryBoundingClientRect/*'/>
	public DOMRectReadOnly BoundingClientRect { get; }
	///<include file='Utils/Docs/IntersectionObserverEntryIntersectionRect/IntersectionObserverEntryIntersectionRect.generated.xml' path='docs/IntersectionObserverEntryIntersectionRect/*'/>
	public DOMRectReadOnly IntersectionRect { get; }
	///<include file='Utils/Docs/IntersectionObserverEntryIsIntersecting/IntersectionObserverEntryIsIntersecting.generated.xml' path='docs/IntersectionObserverEntryIsIntersecting/*'/>
	public bool IsIntersecting { get; }
		public bool IsVisible { get; }
	///<include file='Utils/Docs/IntersectionObserverEntryIntersectionRatio/IntersectionObserverEntryIntersectionRatio.generated.xml' path='docs/IntersectionObserverEntryIntersectionRatio/*'/>
	public Number IntersectionRatio { get; }
	///<include file='Utils/Docs/IntersectionObserverEntryTarget/IntersectionObserverEntryTarget.generated.xml' path='docs/IntersectionObserverEntryTarget/*'/>
	public Element Target { get; }
	public IntersectionObserverEntry() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IntersectionObserverEntryInit
{
		public required DOMHighResTimeStamp Time;
		public required DOMRectInit? RootBounds;
		public required DOMRectInit BoundingClientRect;
		public required DOMRectInit IntersectionRect;
		public required bool IsIntersecting;
		public required bool IsVisible;
		public required Number IntersectionRatio;
		public required Element Target;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IntersectionObserverInit
{
		public Union109? Root;
		public DOMString RootMargin;
		public DOMString ScrollMargin;
		public Union110 Threshold;
		public long Delay;
		public bool TrackVisibility;
}

///<include file='Utils/Docs/InterventionReportBody/InterventionReportBody.generated.xml' path='docs/InterventionReportBody/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class InterventionReportBody : ReportBody
{
	///<include file='Utils/Docs/InterventionReportBodyToJSON/InterventionReportBodyToJSON.generated.xml' path='docs/InterventionReportBodyToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/InterventionReportBodyId/InterventionReportBodyId.generated.xml' path='docs/InterventionReportBodyId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/InterventionReportBodyMessage/InterventionReportBodyMessage.generated.xml' path='docs/InterventionReportBodyMessage/*'/>
	public DOMString Message { get; }
	///<include file='Utils/Docs/InterventionReportBodySourceFile/InterventionReportBodySourceFile.generated.xml' path='docs/InterventionReportBodySourceFile/*'/>
	public DOMString? SourceFile { get; }
	///<include file='Utils/Docs/InterventionReportBodyLineNumber/InterventionReportBodyLineNumber.generated.xml' path='docs/InterventionReportBodyLineNumber/*'/>
	public ulong? LineNumber { get; }
	///<include file='Utils/Docs/InterventionReportBodyColumnNumber/InterventionReportBodyColumnNumber.generated.xml' path='docs/InterventionReportBodyColumnNumber/*'/>
	public ulong? ColumnNumber { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IsInputPendingOptions
{
		public bool IncludeContinuous;
}

///<include file='Utils/Docs/Scheduling/Scheduling.generated.xml' path='docs/Scheduling/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Scheduling
{
	///<include file='Utils/Docs/SchedulingIsInputPending/SchedulingIsInputPending.generated.xml' path='docs/SchedulingIsInputPending/*'/>
	public bool IsInputPending(IsInputPendingOptions isInputPendingOptions) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorScheduling/NavigatorScheduling.generated.xml' path='docs/NavigatorScheduling/*'/>
	public Scheduling Scheduling { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Profiler : EventTarget
{
		public DOMHighResTimeStamp SampleInterval { get; }
		public bool Stopped { get; }
		public Profiler(ProfilerInitOptions options) { }
		public Task<ProfilerTrace> Stop() { throw new System.NotImplementedException(); }
	public Profiler() { }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProfilerTrace
{
		public required List<ProfilerResource> Resources;
		public required List<ProfilerFrame> Frames;
		public required List<ProfilerStack> Stacks;
		public required List<ProfilerSample> Samples;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProfilerSample
{
		public required DOMHighResTimeStamp Timestamp;
		public ulong StackId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProfilerStack
{
		public ulong ParentId;
		public required ulong FrameId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProfilerFrame
{
		public required DOMString Name;
		public ulong ResourceId;
		public ulong Line;
		public ulong Column;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProfilerInitOptions
{
		public required DOMHighResTimeStamp SampleInterval;
		public required ulong MaxBufferSize;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorKeyboard/NavigatorKeyboard.generated.xml' path='docs/NavigatorKeyboard/*'/>
	public Keyboard Keyboard { get; }
}

///<include file='Utils/Docs/Keyboard/Keyboard.generated.xml' path='docs/Keyboard/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Keyboard : EventTarget
{
	///<include file='Utils/Docs/KeyboardLock/KeyboardLock.generated.xml' path='docs/KeyboardLock/*'/>
	public Task<Undefined> Lock(List<DOMString> keyCodes) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/KeyboardUnlock/KeyboardUnlock.generated.xml' path='docs/KeyboardUnlock/*'/>
	public Undefined Unlock() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/KeyboardLayoutMap/KeyboardLayoutMap.generated.xml' path='docs/KeyboardLayoutMap/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class KeyboardLayoutMap
{
	
}

///<include file='Utils/Docs/Keyboard/Keyboard.generated.xml' path='docs/Keyboard/*'/>
public partial class Keyboard
{
	///<include file='Utils/Docs/KeyboardGetLayoutMap/KeyboardGetLayoutMap.generated.xml' path='docs/KeyboardGetLayoutMap/*'/>
	public Task<KeyboardLayoutMap> GetLayoutMap() { throw new System.NotImplementedException(); }
		public EventHandler Onlayoutchange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class KHR_parallel_shader_compile
{
		public const GLenum COMPLETION_STATUS_KHR = 0x91B1;
}

///<include file='Utils/Docs/LargestContentfulPaint/LargestContentfulPaint.generated.xml' path='docs/LargestContentfulPaint/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class LargestContentfulPaint : PerformanceEntry
{
	///<include file='Utils/Docs/LargestContentfulPaintRenderTime/LargestContentfulPaintRenderTime.generated.xml' path='docs/LargestContentfulPaintRenderTime/*'/>
	public DOMHighResTimeStamp RenderTime { get; }
	///<include file='Utils/Docs/LargestContentfulPaintLoadTime/LargestContentfulPaintLoadTime.generated.xml' path='docs/LargestContentfulPaintLoadTime/*'/>
	public DOMHighResTimeStamp LoadTime { get; }
	///<include file='Utils/Docs/LargestContentfulPaintSize/LargestContentfulPaintSize.generated.xml' path='docs/LargestContentfulPaintSize/*'/>
	public ulong Size { get; }
	///<include file='Utils/Docs/LargestContentfulPaintId/LargestContentfulPaintId.generated.xml' path='docs/LargestContentfulPaintId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/LargestContentfulPaintUrl/LargestContentfulPaintUrl.generated.xml' path='docs/LargestContentfulPaintUrl/*'/>
	public DOMString Url { get; }
	///<include file='Utils/Docs/LargestContentfulPaintElement/LargestContentfulPaintElement.generated.xml' path='docs/LargestContentfulPaintElement/*'/>
	public Element? Element { get; }
	///<include file='Utils/Docs/LargestContentfulPaintToJSON/LargestContentfulPaintToJSON.generated.xml' path='docs/LargestContentfulPaintToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/LayoutShift/LayoutShift.generated.xml' path='docs/LayoutShift/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class LayoutShift : PerformanceEntry
{
	///<include file='Utils/Docs/LayoutShiftValue/LayoutShiftValue.generated.xml' path='docs/LayoutShiftValue/*'/>
	public Number Value { get; }
	///<include file='Utils/Docs/LayoutShiftHadRecentInput/LayoutShiftHadRecentInput.generated.xml' path='docs/LayoutShiftHadRecentInput/*'/>
	public bool HadRecentInput { get; }
	///<include file='Utils/Docs/LayoutShiftLastInputTime/LayoutShiftLastInputTime.generated.xml' path='docs/LayoutShiftLastInputTime/*'/>
	public DOMHighResTimeStamp LastInputTime { get; }
	///<include file='Utils/Docs/LayoutShiftSources/LayoutShiftSources.generated.xml' path='docs/LayoutShiftSources/*'/>
	public LayoutShiftAttribution[] Sources { get; }
	///<include file='Utils/Docs/LayoutShiftToJSON/LayoutShiftToJSON.generated.xml' path='docs/LayoutShiftToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/LayoutShiftAttribution/LayoutShiftAttribution.generated.xml' path='docs/LayoutShiftAttribution/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class LayoutShiftAttribution
{
	///<include file='Utils/Docs/LayoutShiftAttributionNode/LayoutShiftAttributionNode.generated.xml' path='docs/LayoutShiftAttributionNode/*'/>
	public Node? Node { get; }
	///<include file='Utils/Docs/LayoutShiftAttributionPreviousRect/LayoutShiftAttributionPreviousRect.generated.xml' path='docs/LayoutShiftAttributionPreviousRect/*'/>
	public DOMRectReadOnly PreviousRect { get; }
	///<include file='Utils/Docs/LayoutShiftAttributionCurrentRect/LayoutShiftAttributionCurrentRect.generated.xml' path='docs/LayoutShiftAttributionCurrentRect/*'/>
	public DOMRectReadOnly CurrentRect { get; }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowQueryLocalFonts/WindowQueryLocalFonts.generated.xml' path='docs/WindowQueryLocalFonts/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<List<FontData>> QueryLocalFonts(QueryOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class QueryOptions
{
		public List<DOMString> PostscriptNames;
}

///<include file='Utils/Docs/FontData/FontData.generated.xml' path='docs/FontData/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FontData
{
	///<include file='Utils/Docs/FontDataBlob/FontDataBlob.generated.xml' path='docs/FontDataBlob/*'/>
	public Task<Blob> Blob() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FontDataPostscriptName/FontDataPostscriptName.generated.xml' path='docs/FontDataPostscriptName/*'/>
	public USVString PostscriptName { get; }
	///<include file='Utils/Docs/FontDataFullName/FontDataFullName.generated.xml' path='docs/FontDataFullName/*'/>
	public USVString FullName { get; }
	///<include file='Utils/Docs/FontDataFamily/FontDataFamily.generated.xml' path='docs/FontDataFamily/*'/>
	public USVString Family { get; }
	///<include file='Utils/Docs/FontDataStyle/FontDataStyle.generated.xml' path='docs/FontDataStyle/*'/>
	public USVString Style { get; }
}

///<include file='Utils/Docs/NavigatorLogin/NavigatorLogin.generated.xml' path='docs/NavigatorLogin/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigatorLogin
{
	///<include file='Utils/Docs/NavigatorLoginSetStatus/NavigatorLoginSetStatus.generated.xml' path='docs/NavigatorLoginSetStatus/*'/>
	public Task<Undefined> SetStatus(LoginStatus status) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorLogin/NavigatorLogin.generated.xml' path='docs/NavigatorLogin/*'/>
	public NavigatorLogin Login { get; }
}

///<include file='Utils/Docs/PerformanceLongAnimationFrameTiming/PerformanceLongAnimationFrameTiming.generated.xml' path='docs/PerformanceLongAnimationFrameTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceLongAnimationFrameTiming : PerformanceEntry, PaintTimingMixin
{
		public DOMHighResTimeStamp StartTime { get; }
		public DOMHighResTimeStamp Duration { get; }
		public DOMString Name { get; }
		public DOMString EntryType { get; }
	///<include file='Utils/Docs/PerformanceLongAnimationFrameTimingRenderStart/PerformanceLongAnimationFrameTimingRenderStart.generated.xml' path='docs/PerformanceLongAnimationFrameTimingRenderStart/*'/>
	public DOMHighResTimeStamp RenderStart { get; }
	///<include file='Utils/Docs/PerformanceLongAnimationFrameTimingStyleAndLayoutStart/PerformanceLongAnimationFrameTimingStyleAndLayoutStart.generated.xml' path='docs/PerformanceLongAnimationFrameTimingStyleAndLayoutStart/*'/>
	public DOMHighResTimeStamp StyleAndLayoutStart { get; }
	///<include file='Utils/Docs/PerformanceLongAnimationFrameTimingBlockingDuration/PerformanceLongAnimationFrameTimingBlockingDuration.generated.xml' path='docs/PerformanceLongAnimationFrameTimingBlockingDuration/*'/>
	public DOMHighResTimeStamp BlockingDuration { get; }
	///<include file='Utils/Docs/PerformanceLongAnimationFrameTimingFirstUIEventTimestamp/PerformanceLongAnimationFrameTimingFirstUIEventTimestamp.generated.xml' path='docs/PerformanceLongAnimationFrameTimingFirstUIEventTimestamp/*'/>
	public DOMHighResTimeStamp FirstUIEventTimestamp { get; }
	///<include file='Utils/Docs/PerformanceLongAnimationFrameTimingScripts/PerformanceLongAnimationFrameTimingScripts.generated.xml' path='docs/PerformanceLongAnimationFrameTimingScripts/*'/>
	public PerformanceScriptTiming[] Scripts { get; }
	///<include file='Utils/Docs/PerformanceLongAnimationFrameTimingToJSON/PerformanceLongAnimationFrameTimingToJSON.generated.xml' path='docs/PerformanceLongAnimationFrameTimingToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/PerformanceScriptTiming/PerformanceScriptTiming.generated.xml' path='docs/PerformanceScriptTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceScriptTiming : PerformanceEntry
{
		public DOMHighResTimeStamp StartTime { get; }
		public DOMHighResTimeStamp Duration { get; }
		public DOMString Name { get; }
		public DOMString EntryType { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingInvokerType/PerformanceScriptTimingInvokerType.generated.xml' path='docs/PerformanceScriptTimingInvokerType/*'/>
	public ScriptInvokerType InvokerType { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingInvoker/PerformanceScriptTimingInvoker.generated.xml' path='docs/PerformanceScriptTimingInvoker/*'/>
	public DOMString Invoker { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingExecutionStart/PerformanceScriptTimingExecutionStart.generated.xml' path='docs/PerformanceScriptTimingExecutionStart/*'/>
	public DOMHighResTimeStamp ExecutionStart { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingSourceURL/PerformanceScriptTimingSourceURL.generated.xml' path='docs/PerformanceScriptTimingSourceURL/*'/>
	public DOMString SourceURL { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingSourceFunctionName/PerformanceScriptTimingSourceFunctionName.generated.xml' path='docs/PerformanceScriptTimingSourceFunctionName/*'/>
	public DOMString SourceFunctionName { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingSourceCharPosition/PerformanceScriptTimingSourceCharPosition.generated.xml' path='docs/PerformanceScriptTimingSourceCharPosition/*'/>
	public long SourceCharPosition { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingPauseDuration/PerformanceScriptTimingPauseDuration.generated.xml' path='docs/PerformanceScriptTimingPauseDuration/*'/>
	public DOMHighResTimeStamp PauseDuration { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingForcedStyleAndLayoutDuration/PerformanceScriptTimingForcedStyleAndLayoutDuration.generated.xml' path='docs/PerformanceScriptTimingForcedStyleAndLayoutDuration/*'/>
	public DOMHighResTimeStamp ForcedStyleAndLayoutDuration { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingWindow/PerformanceScriptTimingWindow.generated.xml' path='docs/PerformanceScriptTimingWindow/*'/>
	public Window? _window { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingWindowAttribution/PerformanceScriptTimingWindowAttribution.generated.xml' path='docs/PerformanceScriptTimingWindowAttribution/*'/>
	public ScriptWindowAttribution WindowAttribution { get; }
	///<include file='Utils/Docs/PerformanceScriptTimingToJSON/PerformanceScriptTimingToJSON.generated.xml' path='docs/PerformanceScriptTimingToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PerformanceLongTaskTiming/PerformanceLongTaskTiming.generated.xml' path='docs/PerformanceLongTaskTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceLongTaskTiming : PerformanceEntry
{
		public DOMHighResTimeStamp StartTime { get; }
		public DOMHighResTimeStamp Duration { get; }
		public DOMString Name { get; }
		public DOMString EntryType { get; }
	///<include file='Utils/Docs/PerformanceLongTaskTimingAttribution/PerformanceLongTaskTimingAttribution.generated.xml' path='docs/PerformanceLongTaskTimingAttribution/*'/>
	public TaskAttributionTiming[] Attribution { get; }
	///<include file='Utils/Docs/PerformanceLongTaskTimingToJSON/PerformanceLongTaskTimingToJSON.generated.xml' path='docs/PerformanceLongTaskTimingToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TaskAttributionTiming/TaskAttributionTiming.generated.xml' path='docs/TaskAttributionTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TaskAttributionTiming : PerformanceEntry
{
		public DOMHighResTimeStamp StartTime { get; }
		public DOMHighResTimeStamp Duration { get; }
		public DOMString Name { get; }
		public DOMString EntryType { get; }
	///<include file='Utils/Docs/TaskAttributionTimingContainerType/TaskAttributionTimingContainerType.generated.xml' path='docs/TaskAttributionTimingContainerType/*'/>
	public DOMString ContainerType { get; }
	///<include file='Utils/Docs/TaskAttributionTimingContainerSrc/TaskAttributionTimingContainerSrc.generated.xml' path='docs/TaskAttributionTimingContainerSrc/*'/>
	public DOMString ContainerSrc { get; }
	///<include file='Utils/Docs/TaskAttributionTimingContainerId/TaskAttributionTimingContainerId.generated.xml' path='docs/TaskAttributionTimingContainerId/*'/>
	public DOMString ContainerId { get; }
	///<include file='Utils/Docs/TaskAttributionTimingContainerName/TaskAttributionTimingContainerName.generated.xml' path='docs/TaskAttributionTimingContainerName/*'/>
	public DOMString ContainerName { get; }
	///<include file='Utils/Docs/TaskAttributionTimingToJSON/TaskAttributionTimingToJSON.generated.xml' path='docs/TaskAttributionTimingToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Magnetometer/Magnetometer.generated.xml' path='docs/Magnetometer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Magnetometer : Sensor
{
	///<include file='Utils/Docs/MagnetometerMagnetometer/MagnetometerMagnetometer.generated.xml' path='docs/MagnetometerMagnetometer/*'/>
	public Magnetometer(MagnetometerSensorOptions sensorOptions) { }
	///<include file='Utils/Docs/MagnetometerX/MagnetometerX.generated.xml' path='docs/MagnetometerX/*'/>
	public Number? X { get; }
	///<include file='Utils/Docs/MagnetometerY/MagnetometerY.generated.xml' path='docs/MagnetometerY/*'/>
	public Number? Y { get; }
	///<include file='Utils/Docs/MagnetometerZ/MagnetometerZ.generated.xml' path='docs/MagnetometerZ/*'/>
	public Number? Z { get; }
	public Magnetometer() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MagnetometerSensorOptions : SensorOptions
{
		public MagnetometerLocalCoordinateSystem ReferenceFrame;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class UncalibratedMagnetometer : Sensor
{
		public UncalibratedMagnetometer(MagnetometerSensorOptions sensorOptions) { }
		public Number? X { get; }
		public Number? Y { get; }
		public Number? Z { get; }
		public Number? XBias { get; }
		public Number? YBias { get; }
		public Number? ZBias { get; }
	public UncalibratedMagnetometer() { }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public NavigatorManagedData Managed { get; }
}

public partial class NavigatorManagedData : EventTarget
{
		public Task<Dictionary<DOMString, Object>> GetManagedConfiguration(List<DOMString> keys) { throw new System.NotImplementedException(); }
		public EventHandler Onmanagedconfigurationchange { get; set; }
}

///<include file='Utils/Docs/BeforeInstallPromptEvent/BeforeInstallPromptEvent.generated.xml' path='docs/BeforeInstallPromptEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BeforeInstallPromptEvent : Event
{
	///<include file='Utils/Docs/BeforeInstallPromptEventBeforeInstallPromptEvent/BeforeInstallPromptEventBeforeInstallPromptEvent.generated.xml' path='docs/BeforeInstallPromptEventBeforeInstallPromptEvent/*'/>
	public BeforeInstallPromptEvent(DOMString type, EventInit eventInitDict) { }
	///<include file='Utils/Docs/BeforeInstallPromptEventPrompt/BeforeInstallPromptEventPrompt.generated.xml' path='docs/BeforeInstallPromptEventPrompt/*'/>
	public Task<PromptResponseObject> Prompt() { throw new System.NotImplementedException(); }
	public BeforeInstallPromptEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PromptResponseObject
{
		public AppBannerPromptOutcome UserChoice;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onappinstalled { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onbeforeinstallprompt { get; set; }
}

///<include file='Utils/Docs/MathMLElement/MathMLElement.generated.xml' path='docs/MathMLElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MathMLElement : Element, ElementCSSInlineStyle, GlobalEventHandlers, HTMLOrSVGElement
{
}



[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaConfiguration
{
		public VideoConfiguration Video;
		public AudioConfiguration Audio;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaDecodingConfiguration : MediaConfiguration
{
		public required MediaDecodingType Type;
		public MediaCapabilitiesKeySystemConfiguration KeySystemConfiguration;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaEncodingConfiguration : MediaConfiguration
{
		public required MediaEncodingType Type;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoConfiguration
{
		public required DOMString ContentType;
		public required ulong Width;
		public required ulong Height;
		public required ulong Bitrate;
		public required Number Framerate;
		public bool HasAlphaChannel;
		public HdrMetadataType HdrMetadataType;
		public ColorGamut ColorGamut;
		public TransferFunction TransferFunction;
		public DOMString ScalabilityMode;
		public bool SpatialScalability;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioConfiguration
{
		public required DOMString ContentType;
		public DOMString Channels;
		public ulong Bitrate;
		public ulong Samplerate;
		public bool SpatialRendering;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaCapabilitiesKeySystemConfiguration
{
		public required DOMString KeySystem;
		public DOMString InitDataType;
		public MediaKeysRequirement DistinctiveIdentifier;
		public MediaKeysRequirement PersistentState;
		public List<DOMString> SessionTypes;
		public KeySystemTrackConfiguration Audio;
		public KeySystemTrackConfiguration Video;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class KeySystemTrackConfiguration
{
		public DOMString Robustness;
		public DOMString? EncryptionScheme;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaCapabilitiesInfo
{
		public required bool Supported;
		public required bool Smooth;
		public required bool PowerEfficient;
}

///<include file='Utils/Docs/MediaCapabilitiesDecodingInfo/MediaCapabilitiesDecodingInfo.generated.xml' path='docs/MediaCapabilitiesDecodingInfo/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaCapabilitiesDecodingInfo : MediaCapabilitiesInfo
{
		public required MediaKeySystemAccess KeySystemAccess;
		public MediaDecodingConfiguration Configuration;
}

///<include file='Utils/Docs/MediaCapabilitiesEncodingInfo/MediaCapabilitiesEncodingInfo.generated.xml' path='docs/MediaCapabilitiesEncodingInfo/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaCapabilitiesEncodingInfo : MediaCapabilitiesInfo
{
		public MediaEncodingConfiguration Configuration;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorMediaCapabilities/NavigatorMediaCapabilities.generated.xml' path='docs/NavigatorMediaCapabilities/*'/>
	public MediaCapabilities MediaCapabilities { get; }
}

///<include file='Utils/Docs/WorkerNavigator/WorkerNavigator.generated.xml' path='docs/WorkerNavigator/*'/>
public partial class WorkerNavigator
{
	///<include file='Utils/Docs/WorkerNavigatorMediaCapabilities/WorkerNavigatorMediaCapabilities.generated.xml' path='docs/WorkerNavigatorMediaCapabilities/*'/>
	public MediaCapabilities MediaCapabilities { get; }
}

///<include file='Utils/Docs/MediaCapabilities/MediaCapabilities.generated.xml' path='docs/MediaCapabilities/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaCapabilities
{
	///<include file='Utils/Docs/MediaCapabilitiesDecodingInfo/MediaCapabilitiesDecodingInfo.generated.xml' path='docs/MediaCapabilitiesDecodingInfo/*'/>
	public Task<MediaCapabilitiesDecodingInfo> DecodingInfo(MediaDecodingConfiguration configuration) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaCapabilitiesEncodingInfo/MediaCapabilitiesEncodingInfo.generated.xml' path='docs/MediaCapabilitiesEncodingInfo/*'/>
	public Task<MediaCapabilitiesEncodingInfo> EncodingInfo(MediaEncodingConfiguration configuration) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLVideoElement/HTMLVideoElement.generated.xml' path='docs/HTMLVideoElement/*'/>
public partial class HTMLVideoElement
{
	///<include file='Utils/Docs/HTMLVideoElementGetVideoPlaybackQuality/HTMLVideoElementGetVideoPlaybackQuality.generated.xml' path='docs/HTMLVideoElementGetVideoPlaybackQuality/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public VideoPlaybackQuality GetVideoPlaybackQuality() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/VideoPlaybackQuality/VideoPlaybackQuality.generated.xml' path='docs/VideoPlaybackQuality/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoPlaybackQuality
{
	///<include file='Utils/Docs/VideoPlaybackQualityCreationTime/VideoPlaybackQualityCreationTime.generated.xml' path='docs/VideoPlaybackQualityCreationTime/*'/>
	public DOMHighResTimeStamp CreationTime { get; }
	///<include file='Utils/Docs/VideoPlaybackQualityDroppedVideoFrames/VideoPlaybackQualityDroppedVideoFrames.generated.xml' path='docs/VideoPlaybackQualityDroppedVideoFrames/*'/>
	public ulong DroppedVideoFrames { get; }
	///<include file='Utils/Docs/VideoPlaybackQualityTotalVideoFrames/VideoPlaybackQualityTotalVideoFrames.generated.xml' path='docs/VideoPlaybackQualityTotalVideoFrames/*'/>
	public ulong TotalVideoFrames { get; }
	///<include file='Utils/Docs/VideoPlaybackQualityCorruptedVideoFrames/VideoPlaybackQualityCorruptedVideoFrames.generated.xml' path='docs/VideoPlaybackQualityCorruptedVideoFrames/*'/>
	public ulong CorruptedVideoFrames { get; }
}

///<include file='Utils/Docs/MediaSource/MediaSource.generated.xml' path='docs/MediaSource/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaSource : EventTarget
{
	///<include file='Utils/Docs/MediaSourceMediaSource/MediaSourceMediaSource.generated.xml' path='docs/MediaSourceMediaSource/*'/>
	public MediaSource() { }
	///<include file='Utils/Docs/MediaSourceHandle/MediaSourceHandle.generated.xml' path='docs/MediaSourceHandle/*'/>
	public MediaSourceHandle Handle { get; }
	///<include file='Utils/Docs/MediaSourceSourceBuffers/MediaSourceSourceBuffers.generated.xml' path='docs/MediaSourceSourceBuffers/*'/>
	public SourceBufferList SourceBuffers { get; }
	///<include file='Utils/Docs/MediaSourceActiveSourceBuffers/MediaSourceActiveSourceBuffers.generated.xml' path='docs/MediaSourceActiveSourceBuffers/*'/>
	public SourceBufferList ActiveSourceBuffers { get; }
	///<include file='Utils/Docs/MediaSourceReadyState/MediaSourceReadyState.generated.xml' path='docs/MediaSourceReadyState/*'/>
	public ReadyState ReadyState { get; }
	///<include file='Utils/Docs/MediaSourceDuration/MediaSourceDuration.generated.xml' path='docs/MediaSourceDuration/*'/>
	public double Duration { get; set; }
		public EventHandler Onsourceopen { get; set; }
		public EventHandler Onsourceended { get; set; }
		public EventHandler Onsourceclose { get; set; }
	///<include file='Utils/Docs/MediaSourceCanConstructInDedicatedWorker/MediaSourceCanConstructInDedicatedWorker.generated.xml' path='docs/MediaSourceCanConstructInDedicatedWorker/*'/>
	public static bool CanConstructInDedicatedWorker { get; }
	///<include file='Utils/Docs/MediaSourceAddSourceBuffer/MediaSourceAddSourceBuffer.generated.xml' path='docs/MediaSourceAddSourceBuffer/*'/>
	public SourceBuffer AddSourceBuffer(DOMString type) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaSourceRemoveSourceBuffer/MediaSourceRemoveSourceBuffer.generated.xml' path='docs/MediaSourceRemoveSourceBuffer/*'/>
	public Undefined RemoveSourceBuffer(SourceBuffer sourceBuffer) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaSourceEndOfStream/MediaSourceEndOfStream.generated.xml' path='docs/MediaSourceEndOfStream/*'/>
	public Undefined EndOfStream(EndOfStreamError error) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaSourceSetLiveSeekableRange/MediaSourceSetLiveSeekableRange.generated.xml' path='docs/MediaSourceSetLiveSeekableRange/*'/>
	public Undefined SetLiveSeekableRange(Number start, Number end) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaSourceClearLiveSeekableRange/MediaSourceClearLiveSeekableRange.generated.xml' path='docs/MediaSourceClearLiveSeekableRange/*'/>
	public Undefined ClearLiveSeekableRange() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaSourceIsTypeSupported/MediaSourceIsTypeSupported.generated.xml' path='docs/MediaSourceIsTypeSupported/*'/>
	public static bool IsTypeSupported(DOMString type) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaSourceHandle/MediaSourceHandle.generated.xml' path='docs/MediaSourceHandle/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaSourceHandle
{
}

///<include file='Utils/Docs/SourceBuffer/SourceBuffer.generated.xml' path='docs/SourceBuffer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SourceBuffer : EventTarget
{
	///<include file='Utils/Docs/SourceBufferMode/SourceBufferMode.generated.xml' path='docs/SourceBufferMode/*'/>
	public AppendMode Mode { get; set; }
	///<include file='Utils/Docs/SourceBufferUpdating/SourceBufferUpdating.generated.xml' path='docs/SourceBufferUpdating/*'/>
	public bool Updating { get; }
	///<include file='Utils/Docs/SourceBufferBuffered/SourceBufferBuffered.generated.xml' path='docs/SourceBufferBuffered/*'/>
	public TimeRanges Buffered { get; }
	///<include file='Utils/Docs/SourceBufferTimestampOffset/SourceBufferTimestampOffset.generated.xml' path='docs/SourceBufferTimestampOffset/*'/>
	public Number TimestampOffset { get; set; }
	///<include file='Utils/Docs/SourceBufferAudioTracks/SourceBufferAudioTracks.generated.xml' path='docs/SourceBufferAudioTracks/*'/>
	public AudioTrackList AudioTracks { get; }
	///<include file='Utils/Docs/SourceBufferVideoTracks/SourceBufferVideoTracks.generated.xml' path='docs/SourceBufferVideoTracks/*'/>
	public VideoTrackList VideoTracks { get; }
	///<include file='Utils/Docs/SourceBufferTextTracks/SourceBufferTextTracks.generated.xml' path='docs/SourceBufferTextTracks/*'/>
	public TextTrackList TextTracks { get; }
	///<include file='Utils/Docs/SourceBufferAppendWindowStart/SourceBufferAppendWindowStart.generated.xml' path='docs/SourceBufferAppendWindowStart/*'/>
	public Number AppendWindowStart { get; set; }
	///<include file='Utils/Docs/SourceBufferAppendWindowEnd/SourceBufferAppendWindowEnd.generated.xml' path='docs/SourceBufferAppendWindowEnd/*'/>
	public double AppendWindowEnd { get; set; }
		public EventHandler Onupdatestart { get; set; }
		public EventHandler Onupdate { get; set; }
		public EventHandler Onupdateend { get; set; }
		public EventHandler Onerror { get; set; }
		public EventHandler Onabort { get; set; }
	///<include file='Utils/Docs/SourceBufferAppendBuffer/SourceBufferAppendBuffer.generated.xml' path='docs/SourceBufferAppendBuffer/*'/>
	public Undefined AppendBuffer(BufferSource data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SourceBufferAbort/SourceBufferAbort.generated.xml' path='docs/SourceBufferAbort/*'/>
	public Undefined Abort() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SourceBufferChangeType/SourceBufferChangeType.generated.xml' path='docs/SourceBufferChangeType/*'/>
	public Undefined ChangeType(DOMString type) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SourceBufferRemove/SourceBufferRemove.generated.xml' path='docs/SourceBufferRemove/*'/>
	public Undefined Remove(Number start, double end) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SourceBufferList/SourceBufferList.generated.xml' path='docs/SourceBufferList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SourceBufferList : EventTarget
{
	///<include file='Utils/Docs/SourceBufferListLength/SourceBufferListLength.generated.xml' path='docs/SourceBufferListLength/*'/>
	public ulong Length { get; }
		public EventHandler Onaddsourcebuffer { get; set; }
		public EventHandler Onremovesourcebuffer { get; set; }
	
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ManagedMediaSource : MediaSource
{
		public ManagedMediaSource() { }
		public bool Streaming { get; }
		public EventHandler Onstartstreaming { get; set; }
		public EventHandler Onendstreaming { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BufferedChangeEvent : Event
{
		public BufferedChangeEvent(DOMString type, BufferedChangeEventInit eventInitDict) { }
		public TimeRanges AddedRanges { get; }
		public TimeRanges RemovedRanges { get; }
	public BufferedChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BufferedChangeEventInit : EventInit
{
		public TimeRanges AddedRanges;
		public TimeRanges RemovedRanges;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ManagedSourceBuffer : SourceBuffer
{
		public EventHandler Onbufferedchange { get; set; }
}

///<include file='Utils/Docs/AudioTrack/AudioTrack.generated.xml' path='docs/AudioTrack/*'/>
public partial class AudioTrack
{
	///<include file='Utils/Docs/AudioTrackSourceBuffer/AudioTrackSourceBuffer.generated.xml' path='docs/AudioTrackSourceBuffer/*'/>
	public SourceBuffer? SourceBuffer { get; }
}

///<include file='Utils/Docs/VideoTrack/VideoTrack.generated.xml' path='docs/VideoTrack/*'/>
public partial class VideoTrack
{
	///<include file='Utils/Docs/VideoTrackSourceBuffer/VideoTrackSourceBuffer.generated.xml' path='docs/VideoTrackSourceBuffer/*'/>
	public SourceBuffer? SourceBuffer { get; }
}

///<include file='Utils/Docs/TextTrack/TextTrack.generated.xml' path='docs/TextTrack/*'/>
public partial class TextTrack
{
	///<include file='Utils/Docs/TextTrackSourceBuffer/TextTrackSourceBuffer.generated.xml' path='docs/TextTrackSourceBuffer/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public SourceBuffer? SourceBuffer { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MockCapturePromptResultConfiguration
{
		public MockCapturePromptResult GetUserMedia;
		public MockCapturePromptResult GetDisplayMedia;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MockCaptureDeviceConfiguration
{
		public DOMString Label;
		public DOMString DeviceId;
		public DOMString GroupId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MockCameraConfiguration : MockCaptureDeviceConfiguration
{
		public Number DefaultFrameRate;
		public DOMString FacingMode;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MockMicrophoneConfiguration : MockCaptureDeviceConfiguration
{
		public ulong DefaultSampleRate;
}

///<include file='Utils/Docs/HTMLMediaElement/HTMLMediaElement.generated.xml' path='docs/HTMLMediaElement/*'/>
public partial class HTMLMediaElement
{
	///<include file='Utils/Docs/HTMLMediaElementCaptureStream/HTMLMediaElementCaptureStream.generated.xml' path='docs/HTMLMediaElementCaptureStream/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public MediaStream CaptureStream() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLCanvasElement/HTMLCanvasElement.generated.xml' path='docs/HTMLCanvasElement/*'/>
public partial class HTMLCanvasElement
{
	///<include file='Utils/Docs/HTMLCanvasElementCaptureStream/HTMLCanvasElementCaptureStream.generated.xml' path='docs/HTMLCanvasElementCaptureStream/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public MediaStream CaptureStream(Number frameRequestRate) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CanvasCaptureMediaStreamTrack/CanvasCaptureMediaStreamTrack.generated.xml' path='docs/CanvasCaptureMediaStreamTrack/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CanvasCaptureMediaStreamTrack : MediaStreamTrack
{
	///<include file='Utils/Docs/CanvasCaptureMediaStreamTrackCanvas/CanvasCaptureMediaStreamTrackCanvas.generated.xml' path='docs/CanvasCaptureMediaStreamTrackCanvas/*'/>
	public HTMLCanvasElement Canvas { get; }
	///<include file='Utils/Docs/CanvasCaptureMediaStreamTrackRequestFrame/CanvasCaptureMediaStreamTrackRequestFrame.generated.xml' path='docs/CanvasCaptureMediaStreamTrackRequestFrame/*'/>
	public Undefined RequestFrame() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaDevices/MediaDevices.generated.xml' path='docs/MediaDevices/*'/>
public partial class MediaDevices
{
		public Undefined SetSupportedCaptureActions(List<DOMString> actions) { throw new System.NotImplementedException(); }
		public EventHandler Oncaptureaction { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CaptureActionEvent : Event
{
		public CaptureActionEvent(CaptureActionEventInit init) { }
		public CaptureAction Action { get; }
	public CaptureActionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CaptureActionEventInit : EventInit
{
		public DOMString Action;
}

///<include file='Utils/Docs/MediaStreamTrack/MediaStreamTrack.generated.xml' path='docs/MediaStreamTrack/*'/>
public partial class MediaStreamTrack
{
		public List<DOMString> GetSupportedCaptureActions() { throw new System.NotImplementedException(); }
		public Task<Undefined> SendCaptureAction(CaptureAction action) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CropTarget
{
		public static Task<CropTarget> FromElement(Element element) { throw new System.NotImplementedException(); }
}

public partial class BrowserCaptureMediaStreamTrack : MediaStreamTrack
{
		public Task<Undefined> CropTo(CropTarget? cropTarget) { throw new System.NotImplementedException(); }
		public BrowserCaptureMediaStreamTrack Clone() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaStream/MediaStream.generated.xml' path='docs/MediaStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStream : EventTarget
{
	///<include file='Utils/Docs/MediaStreamMediaStream/MediaStreamMediaStream.generated.xml' path='docs/MediaStreamMediaStream/*'/>
	public MediaStream() { }
	///<include file='Utils/Docs/MediaStreamMediaStream/MediaStreamMediaStream.generated.xml' path='docs/MediaStreamMediaStream/*'/>
	public MediaStream(MediaStream stream) { }
	///<include file='Utils/Docs/MediaStreamMediaStream/MediaStreamMediaStream.generated.xml' path='docs/MediaStreamMediaStream/*'/>
	public MediaStream(List<MediaStreamTrack> tracks) { }
	///<include file='Utils/Docs/MediaStreamId/MediaStreamId.generated.xml' path='docs/MediaStreamId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/MediaStreamGetAudioTracks/MediaStreamGetAudioTracks.generated.xml' path='docs/MediaStreamGetAudioTracks/*'/>
	public List<MediaStreamTrack> GetAudioTracks() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamGetVideoTracks/MediaStreamGetVideoTracks.generated.xml' path='docs/MediaStreamGetVideoTracks/*'/>
	public List<MediaStreamTrack> GetVideoTracks() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamGetTracks/MediaStreamGetTracks.generated.xml' path='docs/MediaStreamGetTracks/*'/>
	public List<MediaStreamTrack> GetTracks() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamGetTrackById/MediaStreamGetTrackById.generated.xml' path='docs/MediaStreamGetTrackById/*'/>
	public MediaStreamTrack? GetTrackById(DOMString trackId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamAddTrack/MediaStreamAddTrack.generated.xml' path='docs/MediaStreamAddTrack/*'/>
	public Undefined AddTrack(MediaStreamTrack track) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamRemoveTrack/MediaStreamRemoveTrack.generated.xml' path='docs/MediaStreamRemoveTrack/*'/>
	public Undefined RemoveTrack(MediaStreamTrack track) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamClone/MediaStreamClone.generated.xml' path='docs/MediaStreamClone/*'/>
	public MediaStream Clone() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamActive/MediaStreamActive.generated.xml' path='docs/MediaStreamActive/*'/>
	public bool Active { get; }
		public EventHandler Onaddtrack { get; set; }
		public EventHandler Onremovetrack { get; set; }
}

///<include file='Utils/Docs/MediaStreamTrack/MediaStreamTrack.generated.xml' path='docs/MediaStreamTrack/*'/>
public partial class MediaStreamTrack : EventTarget
{
	///<include file='Utils/Docs/MediaStreamTrackKind/MediaStreamTrackKind.generated.xml' path='docs/MediaStreamTrackKind/*'/>
	public DOMString Kind { get; }
	///<include file='Utils/Docs/MediaStreamTrackId/MediaStreamTrackId.generated.xml' path='docs/MediaStreamTrackId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/MediaStreamTrackLabel/MediaStreamTrackLabel.generated.xml' path='docs/MediaStreamTrackLabel/*'/>
	public DOMString Label { get; }
	///<include file='Utils/Docs/MediaStreamTrackEnabled/MediaStreamTrackEnabled.generated.xml' path='docs/MediaStreamTrackEnabled/*'/>
	public bool Enabled { get; set; }
	///<include file='Utils/Docs/MediaStreamTrackMuted/MediaStreamTrackMuted.generated.xml' path='docs/MediaStreamTrackMuted/*'/>
	public bool Muted { get; }
		public EventHandler Onmute { get; set; }
		public EventHandler Onunmute { get; set; }
	///<include file='Utils/Docs/MediaStreamTrackReadyState/MediaStreamTrackReadyState.generated.xml' path='docs/MediaStreamTrackReadyState/*'/>
	public MediaStreamTrackState ReadyState { get; }
		public EventHandler Onended { get; set; }
	///<include file='Utils/Docs/MediaStreamTrackClone/MediaStreamTrackClone.generated.xml' path='docs/MediaStreamTrackClone/*'/>
	public MediaStreamTrack Clone() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamTrackStop/MediaStreamTrackStop.generated.xml' path='docs/MediaStreamTrackStop/*'/>
	public Undefined Stop() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamTrackGetCapabilities/MediaStreamTrackGetCapabilities.generated.xml' path='docs/MediaStreamTrackGetCapabilities/*'/>
	public MediaTrackCapabilities GetCapabilities() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamTrackGetConstraints/MediaStreamTrackGetConstraints.generated.xml' path='docs/MediaStreamTrackGetConstraints/*'/>
	public MediaTrackConstraints GetConstraints() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamTrackGetSettings/MediaStreamTrackGetSettings.generated.xml' path='docs/MediaStreamTrackGetSettings/*'/>
	public MediaTrackSettings GetSettings() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaStreamTrackApplyConstraints/MediaStreamTrackApplyConstraints.generated.xml' path='docs/MediaStreamTrackApplyConstraints/*'/>
	public Task<Undefined> ApplyConstraints(MediaTrackConstraints constraints) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaTrackSupportedConstraints/MediaTrackSupportedConstraints.generated.xml' path='docs/MediaTrackSupportedConstraints/*'/>
public partial class MediaTrackSupportedConstraints
{
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsWidth/MediaTrackSupportedConstraintsWidth.generated.xml' path='docs/MediaTrackSupportedConstraintsWidth/*'/>
	public bool Width;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsHeight/MediaTrackSupportedConstraintsHeight.generated.xml' path='docs/MediaTrackSupportedConstraintsHeight/*'/>
	public bool Height;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsAspectRatio/MediaTrackSupportedConstraintsAspectRatio.generated.xml' path='docs/MediaTrackSupportedConstraintsAspectRatio/*'/>
	public bool AspectRatio;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsFrameRate/MediaTrackSupportedConstraintsFrameRate.generated.xml' path='docs/MediaTrackSupportedConstraintsFrameRate/*'/>
	public bool FrameRate;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsFacingMode/MediaTrackSupportedConstraintsFacingMode.generated.xml' path='docs/MediaTrackSupportedConstraintsFacingMode/*'/>
	public bool FacingMode;
		public bool ResizeMode;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsSampleRate/MediaTrackSupportedConstraintsSampleRate.generated.xml' path='docs/MediaTrackSupportedConstraintsSampleRate/*'/>
	public bool SampleRate;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsSampleSize/MediaTrackSupportedConstraintsSampleSize.generated.xml' path='docs/MediaTrackSupportedConstraintsSampleSize/*'/>
	public bool SampleSize;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsEchoCancellation/MediaTrackSupportedConstraintsEchoCancellation.generated.xml' path='docs/MediaTrackSupportedConstraintsEchoCancellation/*'/>
	public bool EchoCancellation;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsAutoGainControl/MediaTrackSupportedConstraintsAutoGainControl.generated.xml' path='docs/MediaTrackSupportedConstraintsAutoGainControl/*'/>
	public bool AutoGainControl;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsNoiseSuppression/MediaTrackSupportedConstraintsNoiseSuppression.generated.xml' path='docs/MediaTrackSupportedConstraintsNoiseSuppression/*'/>
	public bool NoiseSuppression;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsLatency/MediaTrackSupportedConstraintsLatency.generated.xml' path='docs/MediaTrackSupportedConstraintsLatency/*'/>
	public bool Latency;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsChannelCount/MediaTrackSupportedConstraintsChannelCount.generated.xml' path='docs/MediaTrackSupportedConstraintsChannelCount/*'/>
	public bool ChannelCount;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsDeviceId/MediaTrackSupportedConstraintsDeviceId.generated.xml' path='docs/MediaTrackSupportedConstraintsDeviceId/*'/>
	public bool DeviceId;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsGroupId/MediaTrackSupportedConstraintsGroupId.generated.xml' path='docs/MediaTrackSupportedConstraintsGroupId/*'/>
	public bool GroupId;
		public bool BackgroundBlur;
}

public partial class MediaTrackCapabilities
{
		public ULongRange Width;
		public ULongRange Height;
		public DoubleRange AspectRatio;
		public DoubleRange FrameRate;
		public List<DOMString> FacingMode;
		public List<DOMString> ResizeMode;
		public ULongRange SampleRate;
		public ULongRange SampleSize;
		public List<bool> EchoCancellation;
		public List<bool> AutoGainControl;
		public List<bool> NoiseSuppression;
		public DoubleRange Latency;
		public ULongRange ChannelCount;
		public DOMString DeviceId;
		public DOMString GroupId;
		public List<bool> BackgroundBlur;
}

///<include file='Utils/Docs/MediaTrackConstraints/MediaTrackConstraints.generated.xml' path='docs/MediaTrackConstraints/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaTrackConstraints : MediaTrackConstraintSet
{
		public List<MediaTrackConstraintSet> Advanced;
}

public partial class MediaTrackConstraintSet
{
		public ConstrainULong Width;
		public ConstrainULong Height;
		public ConstrainDouble AspectRatio;
		public ConstrainDouble FrameRate;
		public ConstrainDOMString FacingMode;
		public ConstrainDOMString ResizeMode;
		public ConstrainULong SampleRate;
		public ConstrainULong SampleSize;
		public ConstrainBoolean EchoCancellation;
		public ConstrainBoolean AutoGainControl;
		public ConstrainBoolean NoiseSuppression;
		public ConstrainDouble Latency;
		public ConstrainULong ChannelCount;
		public ConstrainDOMString DeviceId;
		public ConstrainDOMString GroupId;
		public ConstrainBoolean BackgroundBlur;
}

///<include file='Utils/Docs/MediaTrackSettings/MediaTrackSettings.generated.xml' path='docs/MediaTrackSettings/*'/>
public partial class MediaTrackSettings
{
	///<include file='Utils/Docs/MediaTrackSettingsWidth/MediaTrackSettingsWidth.generated.xml' path='docs/MediaTrackSettingsWidth/*'/>
	public ulong Width;
	///<include file='Utils/Docs/MediaTrackSettingsHeight/MediaTrackSettingsHeight.generated.xml' path='docs/MediaTrackSettingsHeight/*'/>
	public ulong Height;
	///<include file='Utils/Docs/MediaTrackSettingsAspectRatio/MediaTrackSettingsAspectRatio.generated.xml' path='docs/MediaTrackSettingsAspectRatio/*'/>
	public Number AspectRatio;
	///<include file='Utils/Docs/MediaTrackSettingsFrameRate/MediaTrackSettingsFrameRate.generated.xml' path='docs/MediaTrackSettingsFrameRate/*'/>
	public Number FrameRate;
	///<include file='Utils/Docs/MediaTrackSettingsFacingMode/MediaTrackSettingsFacingMode.generated.xml' path='docs/MediaTrackSettingsFacingMode/*'/>
	public DOMString FacingMode;
		public DOMString ResizeMode;
	///<include file='Utils/Docs/MediaTrackSettingsSampleRate/MediaTrackSettingsSampleRate.generated.xml' path='docs/MediaTrackSettingsSampleRate/*'/>
	public ulong SampleRate;
	///<include file='Utils/Docs/MediaTrackSettingsSampleSize/MediaTrackSettingsSampleSize.generated.xml' path='docs/MediaTrackSettingsSampleSize/*'/>
	public ulong SampleSize;
	///<include file='Utils/Docs/MediaTrackSettingsEchoCancellation/MediaTrackSettingsEchoCancellation.generated.xml' path='docs/MediaTrackSettingsEchoCancellation/*'/>
	public bool EchoCancellation;
	///<include file='Utils/Docs/MediaTrackSettingsAutoGainControl/MediaTrackSettingsAutoGainControl.generated.xml' path='docs/MediaTrackSettingsAutoGainControl/*'/>
	public bool AutoGainControl;
	///<include file='Utils/Docs/MediaTrackSettingsNoiseSuppression/MediaTrackSettingsNoiseSuppression.generated.xml' path='docs/MediaTrackSettingsNoiseSuppression/*'/>
	public bool NoiseSuppression;
	///<include file='Utils/Docs/MediaTrackSettingsLatency/MediaTrackSettingsLatency.generated.xml' path='docs/MediaTrackSettingsLatency/*'/>
	public Number Latency;
	///<include file='Utils/Docs/MediaTrackSettingsChannelCount/MediaTrackSettingsChannelCount.generated.xml' path='docs/MediaTrackSettingsChannelCount/*'/>
	public ulong ChannelCount;
	///<include file='Utils/Docs/MediaTrackSettingsDeviceId/MediaTrackSettingsDeviceId.generated.xml' path='docs/MediaTrackSettingsDeviceId/*'/>
	public DOMString DeviceId;
	///<include file='Utils/Docs/MediaTrackSettingsGroupId/MediaTrackSettingsGroupId.generated.xml' path='docs/MediaTrackSettingsGroupId/*'/>
	public DOMString GroupId;
		public bool BackgroundBlur;
}

///<include file='Utils/Docs/MediaStreamTrackEvent/MediaStreamTrackEvent.generated.xml' path='docs/MediaStreamTrackEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamTrackEvent : Event
{
	///<include file='Utils/Docs/MediaStreamTrackEventMediaStreamTrackEvent/MediaStreamTrackEventMediaStreamTrackEvent.generated.xml' path='docs/MediaStreamTrackEventMediaStreamTrackEvent/*'/>
	public MediaStreamTrackEvent(DOMString type, MediaStreamTrackEventInit eventInitDict) { }
	///<include file='Utils/Docs/MediaStreamTrackEventTrack/MediaStreamTrackEventTrack.generated.xml' path='docs/MediaStreamTrackEventTrack/*'/>
	public MediaStreamTrack Track { get; }
	public MediaStreamTrackEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamTrackEventInit : EventInit
{
		public required MediaStreamTrack Track;
}

///<include file='Utils/Docs/OverconstrainedError/OverconstrainedError.generated.xml' path='docs/OverconstrainedError/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class OverconstrainedError : DOMException
{
	///<include file='Utils/Docs/OverconstrainedErrorOverconstrainedError/OverconstrainedErrorOverconstrainedError.generated.xml' path='docs/OverconstrainedErrorOverconstrainedError/*'/>
	public OverconstrainedError(DOMString constraint, DOMString message) { }
	///<include file='Utils/Docs/OverconstrainedErrorConstraint/OverconstrainedErrorConstraint.generated.xml' path='docs/OverconstrainedErrorConstraint/*'/>
	public DOMString Constraint { get; }
	public OverconstrainedError() { }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorMediaDevices/NavigatorMediaDevices.generated.xml' path='docs/NavigatorMediaDevices/*'/>
	public MediaDevices MediaDevices { get; }
}

///<include file='Utils/Docs/MediaDevices/MediaDevices.generated.xml' path='docs/MediaDevices/*'/>
public partial class MediaDevices : EventTarget
{
		public EventHandler Ondevicechange { get; set; }
	///<include file='Utils/Docs/MediaDevicesEnumerateDevices/MediaDevicesEnumerateDevices.generated.xml' path='docs/MediaDevicesEnumerateDevices/*'/>
	public Task<List<MediaDeviceInfo>> EnumerateDevices() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaDeviceInfo/MediaDeviceInfo.generated.xml' path='docs/MediaDeviceInfo/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaDeviceInfo
{
	///<include file='Utils/Docs/MediaDeviceInfoDeviceId/MediaDeviceInfoDeviceId.generated.xml' path='docs/MediaDeviceInfoDeviceId/*'/>
	public DOMString DeviceId { get; }
	///<include file='Utils/Docs/MediaDeviceInfoKind/MediaDeviceInfoKind.generated.xml' path='docs/MediaDeviceInfoKind/*'/>
	public MediaDeviceKind Kind { get; }
	///<include file='Utils/Docs/MediaDeviceInfoLabel/MediaDeviceInfoLabel.generated.xml' path='docs/MediaDeviceInfoLabel/*'/>
	public DOMString Label { get; }
	///<include file='Utils/Docs/MediaDeviceInfoGroupId/MediaDeviceInfoGroupId.generated.xml' path='docs/MediaDeviceInfoGroupId/*'/>
	public DOMString GroupId { get; }
	///<include file='Utils/Docs/MediaDeviceInfoToJSON/MediaDeviceInfoToJSON.generated.xml' path='docs/MediaDeviceInfoToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/InputDeviceInfo/InputDeviceInfo.generated.xml' path='docs/InputDeviceInfo/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class InputDeviceInfo : MediaDeviceInfo
{
	///<include file='Utils/Docs/InputDeviceInfoGetCapabilities/InputDeviceInfoGetCapabilities.generated.xml' path='docs/InputDeviceInfoGetCapabilities/*'/>
	public MediaTrackCapabilities GetCapabilities() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeviceChangeEvent : Event
{
		public DeviceChangeEvent(DOMString type, DeviceChangeEventInit eventInitDict) { }
		public MediaDeviceInfo[] Devices { get; }
		public MediaDeviceInfo[] UserInsertedDevices { get; }
	public DeviceChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeviceChangeEventInit : EventInit
{
		public List<MediaDeviceInfo> Devices;
}

///<include file='Utils/Docs/MediaDevices/MediaDevices.generated.xml' path='docs/MediaDevices/*'/>
public partial class MediaDevices
{
	///<include file='Utils/Docs/MediaDevicesGetSupportedConstraints/MediaDevicesGetSupportedConstraints.generated.xml' path='docs/MediaDevicesGetSupportedConstraints/*'/>
	public MediaTrackSupportedConstraints GetSupportedConstraints() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaDevicesGetUserMedia/MediaDevicesGetUserMedia.generated.xml' path='docs/MediaDevicesGetUserMedia/*'/>
	public Task<MediaStream> GetUserMedia(MediaStreamConstraints constraints) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamConstraints
{
		public Union111 Video;
		public Union112 Audio;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DoubleRange
{
		public Number Max;
		public Number Min;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ConstrainDoubleRange : DoubleRange
{
		public Number Exact;
		public Number Ideal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ULongRange
{
		public ulong Max;
		public ulong Min;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ConstrainULongRange : ULongRange
{
		public ulong Exact;
		public ulong Ideal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ConstrainBooleanParameters
{
		public bool Exact;
		public bool Ideal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ConstrainDOMStringParameters
{
		public Union113 Exact;
		public Union114 Ideal;
}





[To(ToAttribute.FirstCharToLowerCase)]
public partial class CameraDevicePermissionDescriptor : PermissionDescriptor
{
		public bool PanTiltZoom;
}

///<include file='Utils/Docs/CaptureController/CaptureController.generated.xml' path='docs/CaptureController/*'/>
public partial class CaptureController
{
		public List<long> GetSupportedZoomLevels() { throw new System.NotImplementedException(); }
		public long GetZoomLevel() { throw new System.NotImplementedException(); }
		public Task<Undefined> SetZoomLevel(long zoomLevel) { throw new System.NotImplementedException(); }
		public EventHandler Oncapturedzoomlevelchange { get; set; }
}

///<include file='Utils/Docs/CaptureController/CaptureController.generated.xml' path='docs/CaptureController/*'/>
public partial class CaptureController
{
	
		public Task<Undefined> ForwardWheel(HTMLElement? element) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaStreamTrackProcessor/MediaStreamTrackProcessor.generated.xml' path='docs/MediaStreamTrackProcessor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamTrackProcessor
{
	///<include file='Utils/Docs/MediaStreamTrackProcessorMediaStreamTrackProcessor/MediaStreamTrackProcessorMediaStreamTrackProcessor.generated.xml' path='docs/MediaStreamTrackProcessorMediaStreamTrackProcessor/*'/>
	public MediaStreamTrackProcessor(MediaStreamTrackProcessorInit init) { }
	///<include file='Utils/Docs/MediaStreamTrackProcessorReadable/MediaStreamTrackProcessorReadable.generated.xml' path='docs/MediaStreamTrackProcessorReadable/*'/>
	public ReadableStream Readable { get; }
	public MediaStreamTrackProcessor() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamTrackProcessorInit
{
		public required MediaStreamTrack Track;
		public ushort MaxBufferSize;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoTrackGenerator
{
		public VideoTrackGenerator() { }
		public WritableStream Writable { get; }
		public bool Muted { get; set; }
		public MediaStreamTrack Track { get; }
}

///<include file='Utils/Docs/MediaDevices/MediaDevices.generated.xml' path='docs/MediaDevices/*'/>
public partial class MediaDevices
{
		public Task<MediaStream> GetViewportMedia(DisplayMediaStreamOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public PreferenceManager Preferences { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PreferenceManager
{
		public PreferenceObject ColorScheme { get; }
		public PreferenceObject Contrast { get; }
		public PreferenceObject ReducedMotion { get; }
		public PreferenceObject ReducedTransparency { get; }
		public PreferenceObject ReducedData { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PreferenceObject : EventTarget
{
		public DOMString? Override { get; }
		public DOMString Value { get; }
		public DOMString[] ValidValues { get; }
		public Undefined ClearOverride() { throw new System.NotImplementedException(); }
		public Task<Undefined> RequestOverride(DOMString? value) { throw new System.NotImplementedException(); }
		public EventHandler Onchange { get; set; }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorMediaSession/NavigatorMediaSession.generated.xml' path='docs/NavigatorMediaSession/*'/>
	public MediaSession MediaSession { get; }
}

///<include file='Utils/Docs/MediaSession/MediaSession.generated.xml' path='docs/MediaSession/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaSession
{
	///<include file='Utils/Docs/MediaSessionMetadata/MediaSessionMetadata.generated.xml' path='docs/MediaSessionMetadata/*'/>
	public MediaMetadata? Metadata { get; set; }
	///<include file='Utils/Docs/MediaSessionPlaybackState/MediaSessionPlaybackState.generated.xml' path='docs/MediaSessionPlaybackState/*'/>
	public MediaSessionPlaybackState PlaybackState { get; set; }
	///<include file='Utils/Docs/MediaSessionSetActionHandler/MediaSessionSetActionHandler.generated.xml' path='docs/MediaSessionSetActionHandler/*'/>
	public Undefined SetActionHandler(MediaSessionAction action, MediaSessionActionHandler? handler) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaSessionSetPositionState/MediaSessionSetPositionState.generated.xml' path='docs/MediaSessionSetPositionState/*'/>
	public Undefined SetPositionState(MediaPositionState state) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaSessionSetMicrophoneActive/MediaSessionSetMicrophoneActive.generated.xml' path='docs/MediaSessionSetMicrophoneActive/*'/>
	public Task<Undefined> SetMicrophoneActive(bool active) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaSessionSetCameraActive/MediaSessionSetCameraActive.generated.xml' path='docs/MediaSessionSetCameraActive/*'/>
	public Task<Undefined> SetCameraActive(bool active) { throw new System.NotImplementedException(); }
		public Task<Undefined> SetScreenshareActive(bool active) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MediaMetadata/MediaMetadata.generated.xml' path='docs/MediaMetadata/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaMetadata
{
	///<include file='Utils/Docs/MediaMetadataMediaMetadata/MediaMetadataMediaMetadata.generated.xml' path='docs/MediaMetadataMediaMetadata/*'/>
	public MediaMetadata(MediaMetadataInit init) { }
	///<include file='Utils/Docs/MediaMetadataTitle/MediaMetadataTitle.generated.xml' path='docs/MediaMetadataTitle/*'/>
	public DOMString Title { get; set; }
	///<include file='Utils/Docs/MediaMetadataArtist/MediaMetadataArtist.generated.xml' path='docs/MediaMetadataArtist/*'/>
	public DOMString Artist { get; set; }
	///<include file='Utils/Docs/MediaMetadataAlbum/MediaMetadataAlbum.generated.xml' path='docs/MediaMetadataAlbum/*'/>
	public DOMString Album { get; set; }
	///<include file='Utils/Docs/MediaMetadataArtwork/MediaMetadataArtwork.generated.xml' path='docs/MediaMetadataArtwork/*'/>
	public Object[] Artwork { get; set; }
	///<include file='Utils/Docs/MediaMetadataChapterInfo/MediaMetadataChapterInfo.generated.xml' path='docs/MediaMetadataChapterInfo/*'/>
	public ChapterInformation[] ChapterInfo { get; }
	public MediaMetadata() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaMetadataInit
{
		public DOMString Title;
		public DOMString Artist;
		public DOMString Album;
		public List<MediaImage> Artwork;
		public List<ChapterInformationInit> ChapterInfo;
}

///<include file='Utils/Docs/ChapterInformation/ChapterInformation.generated.xml' path='docs/ChapterInformation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ChapterInformation
{
	///<include file='Utils/Docs/ChapterInformationTitle/ChapterInformationTitle.generated.xml' path='docs/ChapterInformationTitle/*'/>
	public DOMString Title { get; }
	///<include file='Utils/Docs/ChapterInformationStartTime/ChapterInformationStartTime.generated.xml' path='docs/ChapterInformationStartTime/*'/>
	public Number StartTime { get; }
	///<include file='Utils/Docs/ChapterInformationArtwork/ChapterInformationArtwork.generated.xml' path='docs/ChapterInformationArtwork/*'/>
	public MediaImage[] Artwork { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ChapterInformationInit
{
		public DOMString Title;
		public Number StartTime;
		public List<MediaImage> Artwork;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaImage
{
		public required USVString Src;
		public DOMString Sizes;
		public DOMString Type;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaPositionState
{
		public double Duration;
		public Number PlaybackRate;
		public Number Position;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaSessionActionDetails
{
		public required MediaSessionAction Action;
		public Number SeekOffset;
		public Number SeekTime;
		public bool FastSeek;
		public bool IsActivating;
}

///<include file='Utils/Docs/MediaRecorder/MediaRecorder.generated.xml' path='docs/MediaRecorder/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaRecorder : EventTarget
{
	///<include file='Utils/Docs/MediaRecorderMediaRecorder/MediaRecorderMediaRecorder.generated.xml' path='docs/MediaRecorderMediaRecorder/*'/>
	public MediaRecorder(MediaStream stream, MediaRecorderOptions options) { }
	///<include file='Utils/Docs/MediaRecorderStream/MediaRecorderStream.generated.xml' path='docs/MediaRecorderStream/*'/>
	public MediaStream Stream { get; }
	///<include file='Utils/Docs/MediaRecorderMimeType/MediaRecorderMimeType.generated.xml' path='docs/MediaRecorderMimeType/*'/>
	public DOMString MimeType { get; }
	///<include file='Utils/Docs/MediaRecorderState/MediaRecorderState.generated.xml' path='docs/MediaRecorderState/*'/>
	public RecordingState State { get; }
		public EventHandler Onstart { get; set; }
		public EventHandler Onstop { get; set; }
		public EventHandler Ondataavailable { get; set; }
		public EventHandler Onpause { get; set; }
		public EventHandler Onresume { get; set; }
		public EventHandler Onerror { get; set; }
	///<include file='Utils/Docs/MediaRecorderVideoBitsPerSecond/MediaRecorderVideoBitsPerSecond.generated.xml' path='docs/MediaRecorderVideoBitsPerSecond/*'/>
	public ulong VideoBitsPerSecond { get; }
	///<include file='Utils/Docs/MediaRecorderAudioBitsPerSecond/MediaRecorderAudioBitsPerSecond.generated.xml' path='docs/MediaRecorderAudioBitsPerSecond/*'/>
	public ulong AudioBitsPerSecond { get; }
	///<include file='Utils/Docs/MediaRecorderAudioBitrateMode/MediaRecorderAudioBitrateMode.generated.xml' path='docs/MediaRecorderAudioBitrateMode/*'/>
	public BitrateMode AudioBitrateMode { get; }
	///<include file='Utils/Docs/MediaRecorderStart/MediaRecorderStart.generated.xml' path='docs/MediaRecorderStart/*'/>
	public Undefined Start(ulong timeslice) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaRecorderStop/MediaRecorderStop.generated.xml' path='docs/MediaRecorderStop/*'/>
	public Undefined Stop() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaRecorderPause/MediaRecorderPause.generated.xml' path='docs/MediaRecorderPause/*'/>
	public Undefined Pause() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaRecorderResume/MediaRecorderResume.generated.xml' path='docs/MediaRecorderResume/*'/>
	public Undefined Resume() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaRecorderRequestData/MediaRecorderRequestData.generated.xml' path='docs/MediaRecorderRequestData/*'/>
	public Undefined RequestData() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MediaRecorderIsTypeSupported/MediaRecorderIsTypeSupported.generated.xml' path='docs/MediaRecorderIsTypeSupported/*'/>
	public static bool IsTypeSupported(DOMString type) { throw new System.NotImplementedException(); }
	public MediaRecorder() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaRecorderOptions
{
		public DOMString MimeType;
		public ulong AudioBitsPerSecond;
		public ulong VideoBitsPerSecond;
		public ulong BitsPerSecond;
		public BitrateMode AudioBitrateMode;
		public DOMHighResTimeStamp VideoKeyFrameIntervalDuration;
		public ulong VideoKeyFrameIntervalCount;
}

///<include file='Utils/Docs/BlobEvent/BlobEvent.generated.xml' path='docs/BlobEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BlobEvent : Event
{
	///<include file='Utils/Docs/BlobEventBlobEvent/BlobEventBlobEvent.generated.xml' path='docs/BlobEventBlobEvent/*'/>
	public BlobEvent(DOMString type, BlobEventInit eventInitDict) { }
	///<include file='Utils/Docs/BlobEventData/BlobEventData.generated.xml' path='docs/BlobEventData/*'/>
	public Blob Data { get; }
	///<include file='Utils/Docs/BlobEventTimecode/BlobEventTimecode.generated.xml' path='docs/BlobEventTimecode/*'/>
	public DOMHighResTimeStamp Timecode { get; }
	public BlobEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BlobEventInit
{
		public required Blob Data;
		public DOMHighResTimeStamp Timecode;
}

[To(ToAttribute.Default)]
public partial class HTMLModelElement : HTMLElement
{
}

///<include file='Utils/Docs/MediaStreamTrack/MediaStreamTrack.generated.xml' path='docs/MediaStreamTrack/*'/>
public partial class MediaStreamTrack
{
	///<include file='Utils/Docs/MediaStreamTrackContentHint/MediaStreamTrackContentHint.generated.xml' path='docs/MediaStreamTrackContentHint/*'/>
	public DOMString ContentHint { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpSendParameters
{
		public RTCDegradationPreference DegradationPreference;
}

///<include file='Utils/Docs/PerformanceNavigationTiming/PerformanceNavigationTiming.generated.xml' path='docs/PerformanceNavigationTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceNavigationTiming : PerformanceResourceTiming
{
	///<include file='Utils/Docs/PerformanceNavigationTimingUnloadEventStart/PerformanceNavigationTimingUnloadEventStart.generated.xml' path='docs/PerformanceNavigationTimingUnloadEventStart/*'/>
	public DOMHighResTimeStamp UnloadEventStart { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingUnloadEventEnd/PerformanceNavigationTimingUnloadEventEnd.generated.xml' path='docs/PerformanceNavigationTimingUnloadEventEnd/*'/>
	public DOMHighResTimeStamp UnloadEventEnd { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingDomInteractive/PerformanceNavigationTimingDomInteractive.generated.xml' path='docs/PerformanceNavigationTimingDomInteractive/*'/>
	public DOMHighResTimeStamp DomInteractive { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingDomContentLoadedEventStart/PerformanceNavigationTimingDomContentLoadedEventStart.generated.xml' path='docs/PerformanceNavigationTimingDomContentLoadedEventStart/*'/>
	public DOMHighResTimeStamp DomContentLoadedEventStart { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingDomContentLoadedEventEnd/PerformanceNavigationTimingDomContentLoadedEventEnd.generated.xml' path='docs/PerformanceNavigationTimingDomContentLoadedEventEnd/*'/>
	public DOMHighResTimeStamp DomContentLoadedEventEnd { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingDomComplete/PerformanceNavigationTimingDomComplete.generated.xml' path='docs/PerformanceNavigationTimingDomComplete/*'/>
	public DOMHighResTimeStamp DomComplete { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingLoadEventStart/PerformanceNavigationTimingLoadEventStart.generated.xml' path='docs/PerformanceNavigationTimingLoadEventStart/*'/>
	public DOMHighResTimeStamp LoadEventStart { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingLoadEventEnd/PerformanceNavigationTimingLoadEventEnd.generated.xml' path='docs/PerformanceNavigationTimingLoadEventEnd/*'/>
	public DOMHighResTimeStamp LoadEventEnd { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingType/PerformanceNavigationTimingType.generated.xml' path='docs/PerformanceNavigationTimingType/*'/>
	public NavigationTimingType Type { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingRedirectCount/PerformanceNavigationTimingRedirectCount.generated.xml' path='docs/PerformanceNavigationTimingRedirectCount/*'/>
	public ushort RedirectCount { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingCriticalCHRestart/PerformanceNavigationTimingCriticalCHRestart.generated.xml' path='docs/PerformanceNavigationTimingCriticalCHRestart/*'/>
	public DOMHighResTimeStamp CriticalCHRestart { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingNotRestoredReasons/PerformanceNavigationTimingNotRestoredReasons.generated.xml' path='docs/PerformanceNavigationTimingNotRestoredReasons/*'/>
	public NotRestoredReasons? NotRestoredReasons { get; }
	///<include file='Utils/Docs/PerformanceNavigationTimingToJSON/PerformanceNavigationTimingToJSON.generated.xml' path='docs/PerformanceNavigationTimingToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PerformanceTiming/PerformanceTiming.generated.xml' path='docs/PerformanceTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceTiming
{
	///<include file='Utils/Docs/PerformanceTimingNavigationStart/PerformanceTimingNavigationStart.generated.xml' path='docs/PerformanceTimingNavigationStart/*'/>
	public ulong NavigationStart { get; }
	///<include file='Utils/Docs/PerformanceTimingUnloadEventStart/PerformanceTimingUnloadEventStart.generated.xml' path='docs/PerformanceTimingUnloadEventStart/*'/>
	public ulong UnloadEventStart { get; }
	///<include file='Utils/Docs/PerformanceTimingUnloadEventEnd/PerformanceTimingUnloadEventEnd.generated.xml' path='docs/PerformanceTimingUnloadEventEnd/*'/>
	public ulong UnloadEventEnd { get; }
	///<include file='Utils/Docs/PerformanceTimingRedirectStart/PerformanceTimingRedirectStart.generated.xml' path='docs/PerformanceTimingRedirectStart/*'/>
	public ulong RedirectStart { get; }
	///<include file='Utils/Docs/PerformanceTimingRedirectEnd/PerformanceTimingRedirectEnd.generated.xml' path='docs/PerformanceTimingRedirectEnd/*'/>
	public ulong RedirectEnd { get; }
	///<include file='Utils/Docs/PerformanceTimingFetchStart/PerformanceTimingFetchStart.generated.xml' path='docs/PerformanceTimingFetchStart/*'/>
	public ulong FetchStart { get; }
	///<include file='Utils/Docs/PerformanceTimingDomainLookupStart/PerformanceTimingDomainLookupStart.generated.xml' path='docs/PerformanceTimingDomainLookupStart/*'/>
	public ulong DomainLookupStart { get; }
	///<include file='Utils/Docs/PerformanceTimingDomainLookupEnd/PerformanceTimingDomainLookupEnd.generated.xml' path='docs/PerformanceTimingDomainLookupEnd/*'/>
	public ulong DomainLookupEnd { get; }
	///<include file='Utils/Docs/PerformanceTimingConnectStart/PerformanceTimingConnectStart.generated.xml' path='docs/PerformanceTimingConnectStart/*'/>
	public ulong ConnectStart { get; }
	///<include file='Utils/Docs/PerformanceTimingConnectEnd/PerformanceTimingConnectEnd.generated.xml' path='docs/PerformanceTimingConnectEnd/*'/>
	public ulong ConnectEnd { get; }
	///<include file='Utils/Docs/PerformanceTimingSecureConnectionStart/PerformanceTimingSecureConnectionStart.generated.xml' path='docs/PerformanceTimingSecureConnectionStart/*'/>
	public ulong SecureConnectionStart { get; }
	///<include file='Utils/Docs/PerformanceTimingRequestStart/PerformanceTimingRequestStart.generated.xml' path='docs/PerformanceTimingRequestStart/*'/>
	public ulong RequestStart { get; }
	///<include file='Utils/Docs/PerformanceTimingResponseStart/PerformanceTimingResponseStart.generated.xml' path='docs/PerformanceTimingResponseStart/*'/>
	public ulong ResponseStart { get; }
	///<include file='Utils/Docs/PerformanceTimingResponseEnd/PerformanceTimingResponseEnd.generated.xml' path='docs/PerformanceTimingResponseEnd/*'/>
	public ulong ResponseEnd { get; }
	///<include file='Utils/Docs/PerformanceTimingDomLoading/PerformanceTimingDomLoading.generated.xml' path='docs/PerformanceTimingDomLoading/*'/>
	public ulong DomLoading { get; }
	///<include file='Utils/Docs/PerformanceTimingDomInteractive/PerformanceTimingDomInteractive.generated.xml' path='docs/PerformanceTimingDomInteractive/*'/>
	public ulong DomInteractive { get; }
	///<include file='Utils/Docs/PerformanceTimingDomContentLoadedEventStart/PerformanceTimingDomContentLoadedEventStart.generated.xml' path='docs/PerformanceTimingDomContentLoadedEventStart/*'/>
	public ulong DomContentLoadedEventStart { get; }
	///<include file='Utils/Docs/PerformanceTimingDomContentLoadedEventEnd/PerformanceTimingDomContentLoadedEventEnd.generated.xml' path='docs/PerformanceTimingDomContentLoadedEventEnd/*'/>
	public ulong DomContentLoadedEventEnd { get; }
	///<include file='Utils/Docs/PerformanceTimingDomComplete/PerformanceTimingDomComplete.generated.xml' path='docs/PerformanceTimingDomComplete/*'/>
	public ulong DomComplete { get; }
	///<include file='Utils/Docs/PerformanceTimingLoadEventStart/PerformanceTimingLoadEventStart.generated.xml' path='docs/PerformanceTimingLoadEventStart/*'/>
	public ulong LoadEventStart { get; }
	///<include file='Utils/Docs/PerformanceTimingLoadEventEnd/PerformanceTimingLoadEventEnd.generated.xml' path='docs/PerformanceTimingLoadEventEnd/*'/>
	public ulong LoadEventEnd { get; }
	///<include file='Utils/Docs/PerformanceTimingToJSON/PerformanceTimingToJSON.generated.xml' path='docs/PerformanceTimingToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PerformanceNavigation/PerformanceNavigation.generated.xml' path='docs/PerformanceNavigation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceNavigation
{
		public const ushort TYPE_NAVIGATE = 0;
		public const ushort TYPE_RELOAD = 1;
		public const ushort TYPE_BACK_FORWARD = 2;
		public const ushort TYPE_RESERVED = 255;
	///<include file='Utils/Docs/PerformanceNavigationType/PerformanceNavigationType.generated.xml' path='docs/PerformanceNavigationType/*'/>
	public ushort Type { get; }
	///<include file='Utils/Docs/PerformanceNavigationRedirectCount/PerformanceNavigationRedirectCount.generated.xml' path='docs/PerformanceNavigationRedirectCount/*'/>
	public ushort RedirectCount { get; }
	///<include file='Utils/Docs/PerformanceNavigationToJSON/PerformanceNavigationToJSON.generated.xml' path='docs/PerformanceNavigationToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Performance/Performance.generated.xml' path='docs/Performance/*'/>
public partial class Performance
{
	///<include file='Utils/Docs/PerformanceTiming/PerformanceTiming.generated.xml' path='docs/PerformanceTiming/*'/>
	public PerformanceTiming Timing { get; }
	///<include file='Utils/Docs/PerformanceNavigation/PerformanceNavigation.generated.xml' path='docs/PerformanceNavigation/*'/>
	public PerformanceNavigation Navigation { get; }
}

///<include file='Utils/Docs/NetworkInformation/NetworkInformation.generated.xml' path='docs/NetworkInformation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NetworkInformation : EventTarget, NetworkInformationSaveData
{
	///<include file='Utils/Docs/NetworkInformationType/NetworkInformationType.generated.xml' path='docs/NetworkInformationType/*'/>
	public ConnectionType Type { get; }
	///<include file='Utils/Docs/NetworkInformationEffectiveType/NetworkInformationEffectiveType.generated.xml' path='docs/NetworkInformationEffectiveType/*'/>
	public EffectiveConnectionType EffectiveType { get; }
	///<include file='Utils/Docs/NetworkInformationDownlinkMax/NetworkInformationDownlinkMax.generated.xml' path='docs/NetworkInformationDownlinkMax/*'/>
	public Megabit DownlinkMax { get; }
	///<include file='Utils/Docs/NetworkInformationDownlink/NetworkInformationDownlink.generated.xml' path='docs/NetworkInformationDownlink/*'/>
	public Megabit Downlink { get; }
	///<include file='Utils/Docs/NetworkInformationRtt/NetworkInformationRtt.generated.xml' path='docs/NetworkInformationRtt/*'/>
	public Millisecond Rtt { get; }
		public EventHandler Onchange { get; set; }
}



///<include file='Utils/Docs/Notification/Notification.generated.xml' path='docs/Notification/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Notification : EventTarget
{
	///<include file='Utils/Docs/NotificationNotification/NotificationNotification.generated.xml' path='docs/NotificationNotification/*'/>
	public Notification(DOMString title, NotificationOptions options) { }
	///<include file='Utils/Docs/NotificationPermission/NotificationPermission.generated.xml' path='docs/NotificationPermission/*'/>
	public static NotificationPermission Permission { get; }
	///<include file='Utils/Docs/NotificationRequestPermission/NotificationRequestPermission.generated.xml' path='docs/NotificationRequestPermission/*'/>
	public static Task<NotificationPermission> RequestPermission(NotificationPermissionCallback deprecatedCallback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NotificationMaxActions/NotificationMaxActions.generated.xml' path='docs/NotificationMaxActions/*'/>
	public static ulong MaxActions { get; }
		public EventHandler Onclick { get; set; }
		public EventHandler Onshow { get; set; }
		public EventHandler Onerror { get; set; }
		public EventHandler Onclose { get; set; }
	///<include file='Utils/Docs/NotificationTitle/NotificationTitle.generated.xml' path='docs/NotificationTitle/*'/>
	public DOMString Title { get; }
	///<include file='Utils/Docs/NotificationDir/NotificationDir.generated.xml' path='docs/NotificationDir/*'/>
	public NotificationDirection Dir { get; }
	///<include file='Utils/Docs/NotificationLang/NotificationLang.generated.xml' path='docs/NotificationLang/*'/>
	public DOMString Lang { get; }
	///<include file='Utils/Docs/NotificationBody/NotificationBody.generated.xml' path='docs/NotificationBody/*'/>
	public DOMString Body { get; }
	///<include file='Utils/Docs/NotificationTag/NotificationTag.generated.xml' path='docs/NotificationTag/*'/>
	public DOMString Tag { get; }
	///<include file='Utils/Docs/NotificationImage/NotificationImage.generated.xml' path='docs/NotificationImage/*'/>
	public USVString Image { get; }
	///<include file='Utils/Docs/NotificationIcon/NotificationIcon.generated.xml' path='docs/NotificationIcon/*'/>
	public USVString Icon { get; }
	///<include file='Utils/Docs/NotificationBadge/NotificationBadge.generated.xml' path='docs/NotificationBadge/*'/>
	public USVString Badge { get; }
	///<include file='Utils/Docs/NotificationVibrate/NotificationVibrate.generated.xml' path='docs/NotificationVibrate/*'/>
	public ulong[] Vibrate { get; }
	///<include file='Utils/Docs/NotificationTimestamp/NotificationTimestamp.generated.xml' path='docs/NotificationTimestamp/*'/>
	public EpochTimeStamp Timestamp { get; }
	///<include file='Utils/Docs/NotificationRenotify/NotificationRenotify.generated.xml' path='docs/NotificationRenotify/*'/>
	public bool Renotify { get; }
	///<include file='Utils/Docs/NotificationSilent/NotificationSilent.generated.xml' path='docs/NotificationSilent/*'/>
	public bool? Silent { get; }
	///<include file='Utils/Docs/NotificationRequireInteraction/NotificationRequireInteraction.generated.xml' path='docs/NotificationRequireInteraction/*'/>
	public bool RequireInteraction { get; }
	///<include file='Utils/Docs/NotificationData/NotificationData.generated.xml' path='docs/NotificationData/*'/>
	public dynamic Data { get; }
	///<include file='Utils/Docs/NotificationActions/NotificationActions.generated.xml' path='docs/NotificationActions/*'/>
	public NotificationAction[] Actions { get; }
	///<include file='Utils/Docs/NotificationClose/NotificationClose.generated.xml' path='docs/NotificationClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	public Notification() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NotificationOptions
{
		public NotificationDirection Dir;
		public DOMString Lang;
		public DOMString Body;
		public DOMString Tag;
		public USVString Image;
		public USVString Icon;
		public USVString Badge;
		public VibratePattern Vibrate;
		public EpochTimeStamp Timestamp;
		public bool Renotify;
		public bool? Silent;
		public bool RequireInteraction;
		public dynamic Data;
		public List<NotificationAction> Actions;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NotificationAction
{
		public required DOMString Action;
		public required DOMString Title;
		public USVString Icon;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GetNotificationOptions
{
		public DOMString Tag;
}

///<include file='Utils/Docs/ServiceWorkerRegistration/ServiceWorkerRegistration.generated.xml' path='docs/ServiceWorkerRegistration/*'/>
public partial class ServiceWorkerRegistration
{
	///<include file='Utils/Docs/ServiceWorkerRegistrationShowNotification/ServiceWorkerRegistrationShowNotification.generated.xml' path='docs/ServiceWorkerRegistrationShowNotification/*'/>
	public Task<Undefined> ShowNotification(DOMString title, NotificationOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ServiceWorkerRegistrationGetNotifications/ServiceWorkerRegistrationGetNotifications.generated.xml' path='docs/ServiceWorkerRegistrationGetNotifications/*'/>
	public Task<List<Notification>> GetNotifications(GetNotificationOptions filter) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/NotificationEvent/NotificationEvent.generated.xml' path='docs/NotificationEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NotificationEvent : ExtendableEvent
{
	///<include file='Utils/Docs/NotificationEventNotificationEvent/NotificationEventNotificationEvent.generated.xml' path='docs/NotificationEventNotificationEvent/*'/>
	public NotificationEvent(DOMString type, NotificationEventInit eventInitDict) { }
	///<include file='Utils/Docs/NotificationEventNotification/NotificationEventNotification.generated.xml' path='docs/NotificationEventNotification/*'/>
	public Notification Notification { get; }
	///<include file='Utils/Docs/NotificationEventAction/NotificationEventAction.generated.xml' path='docs/NotificationEventAction/*'/>
	public DOMString Action { get; }
	public NotificationEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NotificationEventInit : ExtendableEventInit
{
		public required Notification Notification;
		public DOMString Action;
}

///<include file='Utils/Docs/ServiceWorkerGlobalScope/ServiceWorkerGlobalScope.generated.xml' path='docs/ServiceWorkerGlobalScope/*'/>
public partial class ServiceWorkerGlobalScope
{
		public EventHandler Onnotificationclick { get; set; }
		public EventHandler Onnotificationclose { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Subscriber
{
		public Undefined Next(dynamic value) { throw new System.NotImplementedException(); }
		public Undefined Error(dynamic error) { throw new System.NotImplementedException(); }
		public Undefined Complete() { throw new System.NotImplementedException(); }
		public Undefined AddTeardown(VoidFunction teardown) { throw new System.NotImplementedException(); }
		public bool Active { get; }
		public AbortSignal Signal { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SubscriptionObserver
{
		public ObservableSubscriptionCallback Next;
		public ObservableSubscriptionCallback Error;
		public VoidFunction Complete;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ObservableInspector
{
		public ObservableSubscriptionCallback Next;
		public ObservableSubscriptionCallback Error;
		public VoidFunction Complete;
		public VoidFunction Subscribe;
		public ObservableInspectorAbortHandler Abort;
}



[To(ToAttribute.FirstCharToLowerCase)]
public partial class SubscribeOptions
{
		public AbortSignal Signal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Observable
{
		public Observable(SubscribeCallback callback) { }
		public Undefined Subscribe(ObserverUnion observer, SubscribeOptions options) { throw new System.NotImplementedException(); }
		public static Observable From(dynamic value) { throw new System.NotImplementedException(); }
		public Observable TakeUntil(dynamic notifier) { throw new System.NotImplementedException(); }
		public Observable Map(Mapper mapper) { throw new System.NotImplementedException(); }
		public Observable Filter(Predicate predicate) { throw new System.NotImplementedException(); }
		public Observable Take(ulong amount) { throw new System.NotImplementedException(); }
		public Observable Drop(ulong amount) { throw new System.NotImplementedException(); }
		public Observable FlatMap(Mapper mapper) { throw new System.NotImplementedException(); }
		public Observable SwitchMap(Mapper mapper) { throw new System.NotImplementedException(); }
		public Observable Inspect(ObservableInspectorUnion inspectorUnion) { throw new System.NotImplementedException(); }
		public Observable Catch(CatchCallback callback) { throw new System.NotImplementedException(); }
		public Observable Finally(VoidFunction callback) { throw new System.NotImplementedException(); }
		public Task<List<dynamic>> ToArray(SubscribeOptions options) { throw new System.NotImplementedException(); }
		public Task<Undefined> ForEach(Visitor callback, SubscribeOptions options) { throw new System.NotImplementedException(); }
		public Task<bool> Every(Predicate predicate, SubscribeOptions options) { throw new System.NotImplementedException(); }
		public Task<dynamic> First(SubscribeOptions options) { throw new System.NotImplementedException(); }
		public Task<dynamic> Last(SubscribeOptions options) { throw new System.NotImplementedException(); }
		public Task<dynamic> Find(Predicate predicate, SubscribeOptions options) { throw new System.NotImplementedException(); }
		public Task<bool> Some(Predicate predicate, SubscribeOptions options) { throw new System.NotImplementedException(); }
		public Task<dynamic> Reduce(Reducer reducer, dynamic initialValue, SubscribeOptions options) { throw new System.NotImplementedException(); }
	public Observable() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ObservableEventListenerOptions
{
		public bool Capture;
		public bool Passive;
}

///<include file='Utils/Docs/EventTarget/EventTarget.generated.xml' path='docs/EventTarget/*'/>
public partial class EventTarget
{
		public Observable When(DOMString type, ObservableEventListenerOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OES_draw_buffers_indexed
{
		public Undefined EnableiOES(GLenum target, GLuint index) { throw new System.NotImplementedException(); }
		public Undefined DisableiOES(GLenum target, GLuint index) { throw new System.NotImplementedException(); }
		public Undefined BlendEquationiOES(GLuint buf, GLenum mode) { throw new System.NotImplementedException(); }
		public Undefined BlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { throw new System.NotImplementedException(); }
		public Undefined BlendFunciOES(GLuint buf, GLenum src, GLenum dst) { throw new System.NotImplementedException(); }
		public Undefined BlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { throw new System.NotImplementedException(); }
		public Undefined ColorMaskiOES(GLuint buf, bool r, bool g, bool b, bool a) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OES_element_index_uint
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OES_fbo_render_mipmap
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OES_standard_derivatives
{
		public const GLenum FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OES_texture_float
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OES_texture_float_linear
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OES_texture_half_float
{
		public const GLenum HALF_FLOAT_OES = 0x8D61;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OES_texture_half_float_linear
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLVertexArrayObjectOES : WebGLObject
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OES_vertex_array_object
{
		public const GLenum VERTEX_ARRAY_BINDING_OES = 0x85B5;
		public WebGLVertexArrayObjectOES CreateVertexArrayOES() { throw new System.NotImplementedException(); }
		public Undefined DeleteVertexArrayOES(WebGLVertexArrayObjectOES? arrayObject) { throw new System.NotImplementedException(); }
		public bool IsVertexArrayOES(WebGLVertexArrayObjectOES? arrayObject) { throw new System.NotImplementedException(); }
		public Undefined BindVertexArrayOES(WebGLVertexArrayObjectOES? arrayObject) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Ondeviceorientation { get; set; }
}

///<include file='Utils/Docs/DeviceOrientationEvent/DeviceOrientationEvent.generated.xml' path='docs/DeviceOrientationEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeviceOrientationEvent : Event
{
	///<include file='Utils/Docs/DeviceOrientationEventDeviceOrientationEvent/DeviceOrientationEventDeviceOrientationEvent.generated.xml' path='docs/DeviceOrientationEventDeviceOrientationEvent/*'/>
	public DeviceOrientationEvent(DOMString type, DeviceOrientationEventInit eventInitDict) { }
	///<include file='Utils/Docs/DeviceOrientationEventAlpha/DeviceOrientationEventAlpha.generated.xml' path='docs/DeviceOrientationEventAlpha/*'/>
	public Number? Alpha { get; }
	///<include file='Utils/Docs/DeviceOrientationEventBeta/DeviceOrientationEventBeta.generated.xml' path='docs/DeviceOrientationEventBeta/*'/>
	public Number? Beta { get; }
	///<include file='Utils/Docs/DeviceOrientationEventGamma/DeviceOrientationEventGamma.generated.xml' path='docs/DeviceOrientationEventGamma/*'/>
	public Number? Gamma { get; }
	///<include file='Utils/Docs/DeviceOrientationEventAbsolute/DeviceOrientationEventAbsolute.generated.xml' path='docs/DeviceOrientationEventAbsolute/*'/>
	public bool Absolute { get; }
		public static Task<PermissionState> RequestPermission(bool absolute) { throw new System.NotImplementedException(); }
	public DeviceOrientationEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeviceOrientationEventInit : EventInit
{
		public Number? Alpha;
		public Number? Beta;
		public Number? Gamma;
		public bool Absolute;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Ondeviceorientationabsolute { get; set; }
}

///<include file='Utils/Docs/DeviceMotionEventAcceleration/DeviceMotionEventAcceleration.generated.xml' path='docs/DeviceMotionEventAcceleration/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeviceMotionEventAcceleration
{
	///<include file='Utils/Docs/DeviceMotionEventAccelerationX/DeviceMotionEventAccelerationX.generated.xml' path='docs/DeviceMotionEventAccelerationX/*'/>
	public Number? X { get; }
	///<include file='Utils/Docs/DeviceMotionEventAccelerationY/DeviceMotionEventAccelerationY.generated.xml' path='docs/DeviceMotionEventAccelerationY/*'/>
	public Number? Y { get; }
	///<include file='Utils/Docs/DeviceMotionEventAccelerationZ/DeviceMotionEventAccelerationZ.generated.xml' path='docs/DeviceMotionEventAccelerationZ/*'/>
	public Number? Z { get; }
}

///<include file='Utils/Docs/DeviceMotionEventRotationRate/DeviceMotionEventRotationRate.generated.xml' path='docs/DeviceMotionEventRotationRate/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeviceMotionEventRotationRate
{
	///<include file='Utils/Docs/DeviceMotionEventRotationRateAlpha/DeviceMotionEventRotationRateAlpha.generated.xml' path='docs/DeviceMotionEventRotationRateAlpha/*'/>
	public Number? Alpha { get; }
	///<include file='Utils/Docs/DeviceMotionEventRotationRateBeta/DeviceMotionEventRotationRateBeta.generated.xml' path='docs/DeviceMotionEventRotationRateBeta/*'/>
	public Number? Beta { get; }
	///<include file='Utils/Docs/DeviceMotionEventRotationRateGamma/DeviceMotionEventRotationRateGamma.generated.xml' path='docs/DeviceMotionEventRotationRateGamma/*'/>
	public Number? Gamma { get; }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Ondevicemotion { get; set; }
}

///<include file='Utils/Docs/DeviceMotionEvent/DeviceMotionEvent.generated.xml' path='docs/DeviceMotionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeviceMotionEvent : Event
{
	///<include file='Utils/Docs/DeviceMotionEventDeviceMotionEvent/DeviceMotionEventDeviceMotionEvent.generated.xml' path='docs/DeviceMotionEventDeviceMotionEvent/*'/>
	public DeviceMotionEvent(DOMString type, DeviceMotionEventInit eventInitDict) { }
	///<include file='Utils/Docs/DeviceMotionEventAcceleration/DeviceMotionEventAcceleration.generated.xml' path='docs/DeviceMotionEventAcceleration/*'/>
	public DeviceMotionEventAcceleration? Acceleration { get; }
	///<include file='Utils/Docs/DeviceMotionEventAccelerationIncludingGravity/DeviceMotionEventAccelerationIncludingGravity.generated.xml' path='docs/DeviceMotionEventAccelerationIncludingGravity/*'/>
	public DeviceMotionEventAcceleration? AccelerationIncludingGravity { get; }
	///<include file='Utils/Docs/DeviceMotionEventRotationRate/DeviceMotionEventRotationRate.generated.xml' path='docs/DeviceMotionEventRotationRate/*'/>
	public DeviceMotionEventRotationRate? RotationRate { get; }
	///<include file='Utils/Docs/DeviceMotionEventInterval/DeviceMotionEventInterval.generated.xml' path='docs/DeviceMotionEventInterval/*'/>
	public Number Interval { get; }
		public static Task<PermissionState> RequestPermission() { throw new System.NotImplementedException(); }
	public DeviceMotionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeviceMotionEventAccelerationInit
{
		public Number? X;
		public Number? Y;
		public Number? Z;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeviceMotionEventRotationRateInit
{
		public Number? Alpha;
		public Number? Beta;
		public Number? Gamma;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DeviceMotionEventInit : EventInit
{
		public DeviceMotionEventAccelerationInit Acceleration;
		public DeviceMotionEventAccelerationInit AccelerationIncludingGravity;
		public DeviceMotionEventRotationRateInit RotationRate;
		public Number Interval;
}


///<include file='Utils/Docs/OrientationSensor/OrientationSensor.generated.xml' path='docs/OrientationSensor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class OrientationSensor : Sensor
{
	///<include file='Utils/Docs/OrientationSensorQuaternion/OrientationSensorQuaternion.generated.xml' path='docs/OrientationSensorQuaternion/*'/>
	public Number[]? Quaternion { get; }
	///<include file='Utils/Docs/OrientationSensorPopulateMatrix/OrientationSensorPopulateMatrix.generated.xml' path='docs/OrientationSensorPopulateMatrix/*'/>
	public Undefined PopulateMatrix(RotationMatrixType targetMatrix) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OrientationSensorOptions : SensorOptions
{
		public OrientationSensorLocalCoordinateSystem ReferenceFrame;
}

///<include file='Utils/Docs/AbsoluteOrientationSensor/AbsoluteOrientationSensor.generated.xml' path='docs/AbsoluteOrientationSensor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AbsoluteOrientationSensor : OrientationSensor
{
	///<include file='Utils/Docs/AbsoluteOrientationSensorAbsoluteOrientationSensor/AbsoluteOrientationSensorAbsoluteOrientationSensor.generated.xml' path='docs/AbsoluteOrientationSensorAbsoluteOrientationSensor/*'/>
	public AbsoluteOrientationSensor(OrientationSensorOptions sensorOptions) { }
	public AbsoluteOrientationSensor() { }
}

///<include file='Utils/Docs/RelativeOrientationSensor/RelativeOrientationSensor.generated.xml' path='docs/RelativeOrientationSensor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RelativeOrientationSensor : OrientationSensor
{
	///<include file='Utils/Docs/RelativeOrientationSensorRelativeOrientationSensor/RelativeOrientationSensorRelativeOrientationSensor.generated.xml' path='docs/RelativeOrientationSensorRelativeOrientationSensor/*'/>
	public RelativeOrientationSensor(OrientationSensorOptions sensorOptions) { }
	public RelativeOrientationSensor() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OVR_multiview2
{
		public const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
		public const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
		public const GLenum MAX_VIEWS_OVR = 0x9631;
		public const GLenum FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633;
		public Undefined FramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, WebGLTexture? texture, GLint level, GLint baseViewIndex, GLsizei numViews) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
		public EventHandler Onfreeze { get; set; }
		public EventHandler Onresume { get; set; }
		public bool WasDiscarded { get; }
}

///<include file='Utils/Docs/Client/Client.generated.xml' path='docs/Client/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Client
{
		public ClientLifecycleState LifecycleState { get; }
}

///<include file='Utils/Docs/PerformancePaintTiming/PerformancePaintTiming.generated.xml' path='docs/PerformancePaintTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformancePaintTiming : PerformanceEntry, PaintTimingMixin
{
}


///<include file='Utils/Docs/ServiceWorkerRegistration/ServiceWorkerRegistration.generated.xml' path='docs/ServiceWorkerRegistration/*'/>
public partial class ServiceWorkerRegistration
{
	///<include file='Utils/Docs/ServiceWorkerRegistrationPaymentManager/ServiceWorkerRegistrationPaymentManager.generated.xml' path='docs/ServiceWorkerRegistrationPaymentManager/*'/>
	public PaymentManager PaymentManager { get; }
}

///<include file='Utils/Docs/PaymentManager/PaymentManager.generated.xml' path='docs/PaymentManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentManager
{
	///<include file='Utils/Docs/PaymentManagerUserHint/PaymentManagerUserHint.generated.xml' path='docs/PaymentManagerUserHint/*'/>
	public DOMString UserHint { get; set; }
	///<include file='Utils/Docs/PaymentManagerEnableDelegations/PaymentManagerEnableDelegations.generated.xml' path='docs/PaymentManagerEnableDelegations/*'/>
	public Task<Undefined> EnableDelegations(List<PaymentDelegation> delegations) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ServiceWorkerGlobalScope/ServiceWorkerGlobalScope.generated.xml' path='docs/ServiceWorkerGlobalScope/*'/>
public partial class ServiceWorkerGlobalScope
{
		public EventHandler Oncanmakepayment { get; set; }
}

///<include file='Utils/Docs/CanMakePaymentEvent/CanMakePaymentEvent.generated.xml' path='docs/CanMakePaymentEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CanMakePaymentEvent : ExtendableEvent
{
	///<include file='Utils/Docs/CanMakePaymentEventCanMakePaymentEvent/CanMakePaymentEventCanMakePaymentEvent.generated.xml' path='docs/CanMakePaymentEventCanMakePaymentEvent/*'/>
	public CanMakePaymentEvent(DOMString type) { }
	///<include file='Utils/Docs/CanMakePaymentEventRespondWith/CanMakePaymentEventRespondWith.generated.xml' path='docs/CanMakePaymentEventRespondWith/*'/>
	public Undefined RespondWith(Task<bool> canMakePaymentResponse) { throw new System.NotImplementedException(); }
	public CanMakePaymentEvent() { }
}

///<include file='Utils/Docs/ServiceWorkerGlobalScope/ServiceWorkerGlobalScope.generated.xml' path='docs/ServiceWorkerGlobalScope/*'/>
public partial class ServiceWorkerGlobalScope
{
		public EventHandler Onpaymentrequest { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentRequestDetailsUpdate
{
		public DOMString Error;
		public PaymentCurrencyAmount Total;
		public List<PaymentDetailsModifier> Modifiers;
		public List<PaymentShippingOption> ShippingOptions;
		public Object PaymentMethodErrors;
		public AddressErrors ShippingAddressErrors;
}

///<include file='Utils/Docs/PaymentRequestEvent/PaymentRequestEvent.generated.xml' path='docs/PaymentRequestEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentRequestEvent : ExtendableEvent
{
	///<include file='Utils/Docs/PaymentRequestEventPaymentRequestEvent/PaymentRequestEventPaymentRequestEvent.generated.xml' path='docs/PaymentRequestEventPaymentRequestEvent/*'/>
	public PaymentRequestEvent(DOMString type, PaymentRequestEventInit eventInitDict) { }
	///<include file='Utils/Docs/PaymentRequestEventTopOrigin/PaymentRequestEventTopOrigin.generated.xml' path='docs/PaymentRequestEventTopOrigin/*'/>
	public USVString TopOrigin { get; }
	///<include file='Utils/Docs/PaymentRequestEventPaymentRequestOrigin/PaymentRequestEventPaymentRequestOrigin.generated.xml' path='docs/PaymentRequestEventPaymentRequestOrigin/*'/>
	public USVString PaymentRequestOrigin { get; }
	///<include file='Utils/Docs/PaymentRequestEventPaymentRequestId/PaymentRequestEventPaymentRequestId.generated.xml' path='docs/PaymentRequestEventPaymentRequestId/*'/>
	public DOMString PaymentRequestId { get; }
	///<include file='Utils/Docs/PaymentRequestEventMethodData/PaymentRequestEventMethodData.generated.xml' path='docs/PaymentRequestEventMethodData/*'/>
	public PaymentMethodData[] MethodData { get; }
	///<include file='Utils/Docs/PaymentRequestEventTotal/PaymentRequestEventTotal.generated.xml' path='docs/PaymentRequestEventTotal/*'/>
	public Object Total { get; }
	///<include file='Utils/Docs/PaymentRequestEventModifiers/PaymentRequestEventModifiers.generated.xml' path='docs/PaymentRequestEventModifiers/*'/>
	public PaymentDetailsModifier[] Modifiers { get; }
		public Object? PaymentOptions { get; }
		public PaymentShippingOption[]? ShippingOptions { get; }
	///<include file='Utils/Docs/PaymentRequestEventOpenWindow/PaymentRequestEventOpenWindow.generated.xml' path='docs/PaymentRequestEventOpenWindow/*'/>
	public Task<WindowClient?> OpenWindow(USVString url) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PaymentRequestEventChangePaymentMethod/PaymentRequestEventChangePaymentMethod.generated.xml' path='docs/PaymentRequestEventChangePaymentMethod/*'/>
	public Task<PaymentRequestDetailsUpdate?> ChangePaymentMethod(DOMString methodName, Object? methodDetails) { throw new System.NotImplementedException(); }
		public Task<PaymentRequestDetailsUpdate?> ChangeShippingAddress(AddressInit shippingAddress) { throw new System.NotImplementedException(); }
		public Task<PaymentRequestDetailsUpdate?> ChangeShippingOption(DOMString shippingOption) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PaymentRequestEventRespondWith/PaymentRequestEventRespondWith.generated.xml' path='docs/PaymentRequestEventRespondWith/*'/>
	public Undefined RespondWith(Task<PaymentHandlerResponse> handlerResponsePromise) { throw new System.NotImplementedException(); }
	public PaymentRequestEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentRequestEventInit : ExtendableEventInit
{
		public USVString TopOrigin;
		public USVString PaymentRequestOrigin;
		public DOMString PaymentRequestId;
		public List<PaymentMethodData> MethodData;
		public PaymentCurrencyAmount Total;
		public List<PaymentDetailsModifier> Modifiers;
		public PaymentOptions PaymentOptions;
		public List<PaymentShippingOption> ShippingOptions;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentHandlerResponse
{
		public DOMString MethodName;
		public Object Details;
		public DOMString? PayerName;
		public DOMString? PayerEmail;
		public DOMString? PayerPhone;
		public AddressInit ShippingAddress;
		public DOMString? ShippingOption;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AddressInit
{
		public DOMString Country;
		public List<DOMString> AddressLine;
		public DOMString Region;
		public DOMString City;
		public DOMString DependentLocality;
		public DOMString PostalCode;
		public DOMString SortingCode;
		public DOMString Organization;
		public DOMString Recipient;
		public DOMString Phone;
}

///<include file='Utils/Docs/PaymentRequest/PaymentRequest.generated.xml' path='docs/PaymentRequest/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentRequest : EventTarget
{
	///<include file='Utils/Docs/PaymentRequestPaymentRequest/PaymentRequestPaymentRequest.generated.xml' path='docs/PaymentRequestPaymentRequest/*'/>
	public PaymentRequest(List<PaymentMethodData> methodData, PaymentDetailsInit details, PaymentOptions options) { }
	///<include file='Utils/Docs/PaymentRequestShow/PaymentRequestShow.generated.xml' path='docs/PaymentRequestShow/*'/>
	public Task<PaymentResponse> Show(Task<PaymentDetailsUpdate> detailsPromise) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PaymentRequestAbort/PaymentRequestAbort.generated.xml' path='docs/PaymentRequestAbort/*'/>
	public Task<Undefined> Abort() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PaymentRequestCanMakePayment/PaymentRequestCanMakePayment.generated.xml' path='docs/PaymentRequestCanMakePayment/*'/>
	public Task<bool> CanMakePayment() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PaymentRequestId/PaymentRequestId.generated.xml' path='docs/PaymentRequestId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/PaymentRequestShippingAddress/PaymentRequestShippingAddress.generated.xml' path='docs/PaymentRequestShippingAddress/*'/>
	public ContactAddress? ShippingAddress { get; }
	///<include file='Utils/Docs/PaymentRequestShippingOption/PaymentRequestShippingOption.generated.xml' path='docs/PaymentRequestShippingOption/*'/>
	public DOMString? ShippingOption { get; }
	///<include file='Utils/Docs/PaymentRequestShippingType/PaymentRequestShippingType.generated.xml' path='docs/PaymentRequestShippingType/*'/>
	public PaymentShippingType? ShippingType { get; }
		public EventHandler Onshippingaddresschange { get; set; }
		public EventHandler Onshippingoptionchange { get; set; }
		public EventHandler Onpaymentmethodchange { get; set; }
	public PaymentRequest() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentMethodData
{
		public required DOMString SupportedMethods;
		public Object Data;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentCurrencyAmount
{
		public required DOMString Currency;
		public required DOMString Value;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentDetailsBase
{
		public List<PaymentItem> DisplayItems;
		public List<PaymentShippingOption> ShippingOptions;
		public List<PaymentDetailsModifier> Modifiers;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentDetailsInit : PaymentDetailsBase
{
		public DOMString Id;
		public required PaymentItem Total;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentDetailsUpdate : PaymentDetailsBase
{
		public DOMString Error;
		public PaymentItem Total;
		public AddressErrors ShippingAddressErrors;
		public PayerErrors PayerErrors;
		public Object PaymentMethodErrors;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentDetailsModifier
{
		public required DOMString SupportedMethods;
		public PaymentItem Total;
		public List<PaymentItem> AdditionalDisplayItems;
		public Object Data;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentOptions
{
		public bool RequestPayerName;
		public bool RequestBillingAddress;
		public bool RequestPayerEmail;
		public bool RequestPayerPhone;
		public bool RequestShipping;
		public PaymentShippingType ShippingType;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentItem
{
		public required DOMString Label;
		public required PaymentCurrencyAmount Amount;
		public bool Pending;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentCompleteDetails
{
		public Object? Data;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentShippingOption
{
		public required DOMString Id;
		public required DOMString Label;
		public required PaymentCurrencyAmount Amount;
		public bool Selected;
}

///<include file='Utils/Docs/PaymentResponse/PaymentResponse.generated.xml' path='docs/PaymentResponse/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentResponse : EventTarget
{
	///<include file='Utils/Docs/PaymentResponseToJSON/PaymentResponseToJSON.generated.xml' path='docs/PaymentResponseToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PaymentResponseRequestId/PaymentResponseRequestId.generated.xml' path='docs/PaymentResponseRequestId/*'/>
	public DOMString RequestId { get; }
	///<include file='Utils/Docs/PaymentResponseMethodName/PaymentResponseMethodName.generated.xml' path='docs/PaymentResponseMethodName/*'/>
	public DOMString MethodName { get; }
	///<include file='Utils/Docs/PaymentResponseDetails/PaymentResponseDetails.generated.xml' path='docs/PaymentResponseDetails/*'/>
	public Object Details { get; }
	///<include file='Utils/Docs/PaymentResponseShippingAddress/PaymentResponseShippingAddress.generated.xml' path='docs/PaymentResponseShippingAddress/*'/>
	public ContactAddress? ShippingAddress { get; }
	///<include file='Utils/Docs/PaymentResponseShippingOption/PaymentResponseShippingOption.generated.xml' path='docs/PaymentResponseShippingOption/*'/>
	public DOMString? ShippingOption { get; }
	///<include file='Utils/Docs/PaymentResponsePayerName/PaymentResponsePayerName.generated.xml' path='docs/PaymentResponsePayerName/*'/>
	public DOMString? PayerName { get; }
	///<include file='Utils/Docs/PaymentResponsePayerEmail/PaymentResponsePayerEmail.generated.xml' path='docs/PaymentResponsePayerEmail/*'/>
	public DOMString? PayerEmail { get; }
	///<include file='Utils/Docs/PaymentResponsePayerPhone/PaymentResponsePayerPhone.generated.xml' path='docs/PaymentResponsePayerPhone/*'/>
	public DOMString? PayerPhone { get; }
	///<include file='Utils/Docs/PaymentResponseComplete/PaymentResponseComplete.generated.xml' path='docs/PaymentResponseComplete/*'/>
	public Task<Undefined> Complete(PaymentComplete result, PaymentCompleteDetails details) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PaymentResponseRetry/PaymentResponseRetry.generated.xml' path='docs/PaymentResponseRetry/*'/>
	public Task<Undefined> Retry(PaymentValidationErrors errorFields) { throw new System.NotImplementedException(); }
		public EventHandler Onpayerdetailchange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentValidationErrors
{
		public PayerErrors Payer;
		public AddressErrors ShippingAddress;
		public DOMString Error;
		public Object PaymentMethod;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PayerErrors
{
		public DOMString Email;
		public DOMString Name;
		public DOMString Phone;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AddressErrors
{
		public DOMString AddressLine;
		public DOMString City;
		public DOMString Country;
		public DOMString DependentLocality;
		public DOMString Organization;
		public DOMString Phone;
		public DOMString PostalCode;
		public DOMString Recipient;
		public DOMString Region;
		public DOMString SortingCode;
}

///<include file='Utils/Docs/PaymentMethodChangeEvent/PaymentMethodChangeEvent.generated.xml' path='docs/PaymentMethodChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentMethodChangeEvent : PaymentRequestUpdateEvent
{
	///<include file='Utils/Docs/PaymentMethodChangeEventPaymentMethodChangeEvent/PaymentMethodChangeEventPaymentMethodChangeEvent.generated.xml' path='docs/PaymentMethodChangeEventPaymentMethodChangeEvent/*'/>
	public PaymentMethodChangeEvent(DOMString type, PaymentMethodChangeEventInit eventInitDict) { }
	///<include file='Utils/Docs/PaymentMethodChangeEventMethodName/PaymentMethodChangeEventMethodName.generated.xml' path='docs/PaymentMethodChangeEventMethodName/*'/>
	public DOMString MethodName { get; }
	///<include file='Utils/Docs/PaymentMethodChangeEventMethodDetails/PaymentMethodChangeEventMethodDetails.generated.xml' path='docs/PaymentMethodChangeEventMethodDetails/*'/>
	public Object? MethodDetails { get; }
	public PaymentMethodChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentMethodChangeEventInit : PaymentRequestUpdateEventInit
{
		public DOMString MethodName;
		public Object? MethodDetails;
}

///<include file='Utils/Docs/PaymentRequestUpdateEvent/PaymentRequestUpdateEvent.generated.xml' path='docs/PaymentRequestUpdateEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentRequestUpdateEvent : Event
{
	///<include file='Utils/Docs/PaymentRequestUpdateEventPaymentRequestUpdateEvent/PaymentRequestUpdateEventPaymentRequestUpdateEvent.generated.xml' path='docs/PaymentRequestUpdateEventPaymentRequestUpdateEvent/*'/>
	public PaymentRequestUpdateEvent(DOMString type, PaymentRequestUpdateEventInit eventInitDict) { }
	///<include file='Utils/Docs/PaymentRequestUpdateEventUpdateWith/PaymentRequestUpdateEventUpdateWith.generated.xml' path='docs/PaymentRequestUpdateEventUpdateWith/*'/>
	public Undefined UpdateWith(Task<PaymentDetailsUpdate> detailsPromise) { throw new System.NotImplementedException(); }
	public PaymentRequestUpdateEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentRequestUpdateEventInit : EventInit
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MemoryMeasurement
{
		public ulong Bytes;
		public List<MemoryBreakdownEntry> Breakdown;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MemoryBreakdownEntry
{
		public ulong Bytes;
		public List<MemoryAttribution> Attribution;
		public List<DOMString> Types;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MemoryAttribution
{
		public USVString Url;
		public MemoryAttributionContainer Container;
		public DOMString Scope;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MemoryAttributionContainer
{
		public DOMString Id;
		public USVString Src;
}

///<include file='Utils/Docs/Performance/Performance.generated.xml' path='docs/Performance/*'/>
public partial class Performance
{
	///<include file='Utils/Docs/PerformanceMeasureUserAgentSpecificMemory/PerformanceMeasureUserAgentSpecificMemory.generated.xml' path='docs/PerformanceMeasureUserAgentSpecificMemory/*'/>
	public Task<MemoryMeasurement> MeasureUserAgentSpecificMemory() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Performance/Performance.generated.xml' path='docs/Performance/*'/>
public partial class Performance
{
	///<include file='Utils/Docs/PerformanceGetEntries/PerformanceGetEntries.generated.xml' path='docs/PerformanceGetEntries/*'/>
	public PerformanceEntryList GetEntries() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceGetEntriesByType/PerformanceGetEntriesByType.generated.xml' path='docs/PerformanceGetEntriesByType/*'/>
	public PerformanceEntryList GetEntriesByType(DOMString type) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceGetEntriesByName/PerformanceGetEntriesByName.generated.xml' path='docs/PerformanceGetEntriesByName/*'/>
	public PerformanceEntryList GetEntriesByName(DOMString name, DOMString type) { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/PerformanceEntry/PerformanceEntry.generated.xml' path='docs/PerformanceEntry/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceEntry
{
		public ulong Id { get; }
	///<include file='Utils/Docs/PerformanceEntryName/PerformanceEntryName.generated.xml' path='docs/PerformanceEntryName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/PerformanceEntryEntryType/PerformanceEntryEntryType.generated.xml' path='docs/PerformanceEntryEntryType/*'/>
	public DOMString EntryType { get; }
	///<include file='Utils/Docs/PerformanceEntryStartTime/PerformanceEntryStartTime.generated.xml' path='docs/PerformanceEntryStartTime/*'/>
	public DOMHighResTimeStamp StartTime { get; }
	///<include file='Utils/Docs/PerformanceEntryDuration/PerformanceEntryDuration.generated.xml' path='docs/PerformanceEntryDuration/*'/>
	public DOMHighResTimeStamp Duration { get; }
		public ulong NavigationId { get; }
	///<include file='Utils/Docs/PerformanceEntryToJSON/PerformanceEntryToJSON.generated.xml' path='docs/PerformanceEntryToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PerformanceObserver/PerformanceObserver.generated.xml' path='docs/PerformanceObserver/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceObserver
{
	///<include file='Utils/Docs/PerformanceObserverPerformanceObserver/PerformanceObserverPerformanceObserver.generated.xml' path='docs/PerformanceObserverPerformanceObserver/*'/>
	public PerformanceObserver(PerformanceObserverCallback callback) { }
	///<include file='Utils/Docs/PerformanceObserverObserve/PerformanceObserverObserve.generated.xml' path='docs/PerformanceObserverObserve/*'/>
	public Undefined Observe(PerformanceObserverInit options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceObserverDisconnect/PerformanceObserverDisconnect.generated.xml' path='docs/PerformanceObserverDisconnect/*'/>
	public Undefined Disconnect() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceObserverTakeRecords/PerformanceObserverTakeRecords.generated.xml' path='docs/PerformanceObserverTakeRecords/*'/>
	public PerformanceEntryList TakeRecords() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceObserverSupportedEntryTypes/PerformanceObserverSupportedEntryTypes.generated.xml' path='docs/PerformanceObserverSupportedEntryTypes/*'/>
	public static DOMString[] SupportedEntryTypes { get; }
	public PerformanceObserver() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceObserverCallbackOptions
{
		public ulong DroppedEntriesCount;
}

public partial class PerformanceObserverInit
{
		public List<DOMString> EntryTypes;
		public DOMString Type;
		public bool Buffered;
}

///<include file='Utils/Docs/PerformanceObserverEntryList/PerformanceObserverEntryList.generated.xml' path='docs/PerformanceObserverEntryList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceObserverEntryList
{
	///<include file='Utils/Docs/PerformanceObserverEntryListGetEntries/PerformanceObserverEntryListGetEntries.generated.xml' path='docs/PerformanceObserverEntryListGetEntries/*'/>
	public PerformanceEntryList GetEntries() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceObserverEntryListGetEntriesByType/PerformanceObserverEntryListGetEntriesByType.generated.xml' path='docs/PerformanceObserverEntryListGetEntriesByType/*'/>
	public PerformanceEntryList GetEntriesByType(DOMString type) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceObserverEntryListGetEntriesByName/PerformanceObserverEntryListGetEntriesByName.generated.xml' path='docs/PerformanceObserverEntryListGetEntriesByName/*'/>
	public PerformanceEntryList GetEntriesByName(DOMString name, DOMString type) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ServiceWorkerGlobalScope/ServiceWorkerGlobalScope.generated.xml' path='docs/ServiceWorkerGlobalScope/*'/>
public partial class ServiceWorkerGlobalScope
{
		public EventHandler Onperiodicsync { get; set; }
}

///<include file='Utils/Docs/ServiceWorkerRegistration/ServiceWorkerRegistration.generated.xml' path='docs/ServiceWorkerRegistration/*'/>
public partial class ServiceWorkerRegistration
{
	///<include file='Utils/Docs/ServiceWorkerRegistrationPeriodicSync/ServiceWorkerRegistrationPeriodicSync.generated.xml' path='docs/ServiceWorkerRegistrationPeriodicSync/*'/>
	public PeriodicSyncManager PeriodicSync { get; }
}

///<include file='Utils/Docs/PeriodicSyncManager/PeriodicSyncManager.generated.xml' path='docs/PeriodicSyncManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PeriodicSyncManager
{
	///<include file='Utils/Docs/PeriodicSyncManagerRegister/PeriodicSyncManagerRegister.generated.xml' path='docs/PeriodicSyncManagerRegister/*'/>
	public Task<Undefined> Register(DOMString tag, BackgroundSyncOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PeriodicSyncManagerGetTags/PeriodicSyncManagerGetTags.generated.xml' path='docs/PeriodicSyncManagerGetTags/*'/>
	public Task<List<DOMString>> GetTags() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PeriodicSyncManagerUnregister/PeriodicSyncManagerUnregister.generated.xml' path='docs/PeriodicSyncManagerUnregister/*'/>
	public Task<Undefined> Unregister(DOMString tag) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BackgroundSyncOptions
{
		public ulong MinInterval;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PeriodicSyncEventInit : ExtendableEventInit
{
		public required DOMString Tag;
}

///<include file='Utils/Docs/PeriodicSyncEvent/PeriodicSyncEvent.generated.xml' path='docs/PeriodicSyncEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PeriodicSyncEvent : ExtendableEvent
{
	///<include file='Utils/Docs/PeriodicSyncEventPeriodicSyncEvent/PeriodicSyncEventPeriodicSyncEvent.generated.xml' path='docs/PeriodicSyncEventPeriodicSyncEvent/*'/>
	public PeriodicSyncEvent(DOMString type, PeriodicSyncEventInit init) { }
	///<include file='Utils/Docs/PeriodicSyncEventTag/PeriodicSyncEventTag.generated.xml' path='docs/PeriodicSyncEventTag/*'/>
	public DOMString Tag { get; }
	public PeriodicSyncEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PermissionsPolicy
{
		public bool AllowsFeature(DOMString feature, DOMString origin) { throw new System.NotImplementedException(); }
		public List<DOMString> Features() { throw new System.NotImplementedException(); }
		public List<DOMString> AllowedFeatures() { throw new System.NotImplementedException(); }
		public List<DOMString> GetAllowlistForFeature(DOMString feature) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
		public PermissionsPolicy PermissionsPolicy { get; }
}

///<include file='Utils/Docs/HTMLIFrameElement/HTMLIFrameElement.generated.xml' path='docs/HTMLIFrameElement/*'/>
public partial class HTMLIFrameElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public PermissionsPolicy PermissionsPolicy { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PermissionsPolicyViolationReportBody : ReportBody
{
		public Object ToJSON() { throw new System.NotImplementedException(); }
		public DOMString FeatureId { get; }
		public DOMString? SourceFile { get; }
		public long? LineNumber { get; }
		public long? ColumnNumber { get; }
		public DOMString Disposition { get; }
		public DOMString? AllowAttribute { get; }
}

///<include file='Utils/Docs/Permissions/Permissions.generated.xml' path='docs/Permissions/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Permissions
{
		public Task<PermissionStatus> Request(Object permissionDesc) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Permissions/Permissions.generated.xml' path='docs/Permissions/*'/>
public partial class Permissions
{
	///<include file='Utils/Docs/PermissionsRevoke/PermissionsRevoke.generated.xml' path='docs/PermissionsRevoke/*'/>
	public Task<PermissionStatus> Revoke(Object permissionDesc) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorPermissions/NavigatorPermissions.generated.xml' path='docs/NavigatorPermissions/*'/>
	public Permissions Permissions { get; }
}

///<include file='Utils/Docs/WorkerNavigator/WorkerNavigator.generated.xml' path='docs/WorkerNavigator/*'/>
public partial class WorkerNavigator
{
	///<include file='Utils/Docs/WorkerNavigatorPermissions/WorkerNavigatorPermissions.generated.xml' path='docs/WorkerNavigatorPermissions/*'/>
	public Permissions Permissions { get; }
}

///<include file='Utils/Docs/Permissions/Permissions.generated.xml' path='docs/Permissions/*'/>
public partial class Permissions
{
	///<include file='Utils/Docs/PermissionsQuery/PermissionsQuery.generated.xml' path='docs/PermissionsQuery/*'/>
	public Task<PermissionStatus> Query(Object permissionDesc) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PermissionDescriptor
{
		public required DOMString Name;
}

///<include file='Utils/Docs/PermissionStatus/PermissionStatus.generated.xml' path='docs/PermissionStatus/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PermissionStatus : EventTarget
{
	///<include file='Utils/Docs/PermissionStatusState/PermissionStatusState.generated.xml' path='docs/PermissionStatusState/*'/>
	public PermissionState State { get; }
	///<include file='Utils/Docs/PermissionStatusName/PermissionStatusName.generated.xml' path='docs/PermissionStatusName/*'/>
	public DOMString Name { get; }
		public EventHandler Onchange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PermissionSetParameters
{
		public required Object Descriptor;
		public required PermissionState State;
}

///<include file='Utils/Docs/HTMLVideoElement/HTMLVideoElement.generated.xml' path='docs/HTMLVideoElement/*'/>
public partial class HTMLVideoElement
{
	///<include file='Utils/Docs/HTMLVideoElementRequestPictureInPicture/HTMLVideoElementRequestPictureInPicture.generated.xml' path='docs/HTMLVideoElementRequestPictureInPicture/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<PictureInPictureWindow> RequestPictureInPicture() { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onenterpictureinpicture { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onleavepictureinpicture { get; set; }
	///<include file='Utils/Docs/HTMLVideoElementDisablePictureInPicture/HTMLVideoElementDisablePictureInPicture.generated.xml' path='docs/HTMLVideoElementDisablePictureInPicture/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool DisablePictureInPicture { get; set; }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentPictureInPictureEnabled/DocumentPictureInPictureEnabled.generated.xml' path='docs/DocumentPictureInPictureEnabled/*'/>
	public bool PictureInPictureEnabled { get; }
	///<include file='Utils/Docs/DocumentExitPictureInPicture/DocumentExitPictureInPicture.generated.xml' path='docs/DocumentExitPictureInPicture/*'/>
	public Task<Undefined> ExitPictureInPicture() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PictureInPictureWindow/PictureInPictureWindow.generated.xml' path='docs/PictureInPictureWindow/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PictureInPictureWindow : EventTarget
{
	///<include file='Utils/Docs/PictureInPictureWindowWidth/PictureInPictureWindowWidth.generated.xml' path='docs/PictureInPictureWindowWidth/*'/>
	public long Width { get; }
	///<include file='Utils/Docs/PictureInPictureWindowHeight/PictureInPictureWindowHeight.generated.xml' path='docs/PictureInPictureWindowHeight/*'/>
	public long Height { get; }
		public EventHandler Onresize { get; set; }
}

///<include file='Utils/Docs/PictureInPictureEvent/PictureInPictureEvent.generated.xml' path='docs/PictureInPictureEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PictureInPictureEvent : Event
{
	///<include file='Utils/Docs/PictureInPictureEventPictureInPictureEvent/PictureInPictureEventPictureInPictureEvent.generated.xml' path='docs/PictureInPictureEventPictureInPictureEvent/*'/>
	public PictureInPictureEvent(DOMString type, PictureInPictureEventInit eventInitDict) { }
	///<include file='Utils/Docs/PictureInPictureEventPictureInPictureWindow/PictureInPictureEventPictureInPictureWindow.generated.xml' path='docs/PictureInPictureEventPictureInPictureWindow/*'/>
	public PictureInPictureWindow PictureInPictureWindow { get; }
	public PictureInPictureEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PictureInPictureEventInit : EventInit
{
		public required PictureInPictureWindow PictureInPictureWindow;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PointerEventInit : MouseEventInit
{
		public long PointerId;
		public Number Width;
		public Number Height;
		public Number Pressure;
		public Number TangentialPressure;
		public long TiltX;
		public long TiltY;
		public long Twist;
		public Number AltitudeAngle;
		public Number AzimuthAngle;
		public DOMString PointerType;
		public bool IsPrimary;
		public long PersistentDeviceId;
		public List<PointerEvent> CoalescedEvents;
		public List<PointerEvent> PredictedEvents;
}

///<include file='Utils/Docs/PointerEvent/PointerEvent.generated.xml' path='docs/PointerEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PointerEvent : MouseEvent
{
	///<include file='Utils/Docs/PointerEventPointerEvent/PointerEventPointerEvent.generated.xml' path='docs/PointerEventPointerEvent/*'/>
	public PointerEvent(DOMString type, PointerEventInit eventInitDict) { }
	///<include file='Utils/Docs/PointerEventPointerId/PointerEventPointerId.generated.xml' path='docs/PointerEventPointerId/*'/>
	public long PointerId { get; }
	///<include file='Utils/Docs/PointerEventWidth/PointerEventWidth.generated.xml' path='docs/PointerEventWidth/*'/>
	public Number Width { get; }
	///<include file='Utils/Docs/PointerEventHeight/PointerEventHeight.generated.xml' path='docs/PointerEventHeight/*'/>
	public Number Height { get; }
	///<include file='Utils/Docs/PointerEventPressure/PointerEventPressure.generated.xml' path='docs/PointerEventPressure/*'/>
	public Number Pressure { get; }
	///<include file='Utils/Docs/PointerEventTangentialPressure/PointerEventTangentialPressure.generated.xml' path='docs/PointerEventTangentialPressure/*'/>
	public Number TangentialPressure { get; }
	///<include file='Utils/Docs/PointerEventTiltX/PointerEventTiltX.generated.xml' path='docs/PointerEventTiltX/*'/>
	public long TiltX { get; }
	///<include file='Utils/Docs/PointerEventTiltY/PointerEventTiltY.generated.xml' path='docs/PointerEventTiltY/*'/>
	public long TiltY { get; }
	///<include file='Utils/Docs/PointerEventTwist/PointerEventTwist.generated.xml' path='docs/PointerEventTwist/*'/>
	public long Twist { get; }
	///<include file='Utils/Docs/PointerEventAltitudeAngle/PointerEventAltitudeAngle.generated.xml' path='docs/PointerEventAltitudeAngle/*'/>
	public Number AltitudeAngle { get; }
	///<include file='Utils/Docs/PointerEventAzimuthAngle/PointerEventAzimuthAngle.generated.xml' path='docs/PointerEventAzimuthAngle/*'/>
	public Number AzimuthAngle { get; }
	///<include file='Utils/Docs/PointerEventPointerType/PointerEventPointerType.generated.xml' path='docs/PointerEventPointerType/*'/>
	public DOMString PointerType { get; }
	///<include file='Utils/Docs/PointerEventIsPrimary/PointerEventIsPrimary.generated.xml' path='docs/PointerEventIsPrimary/*'/>
	public bool IsPrimary { get; }
	///<include file='Utils/Docs/PointerEventPersistentDeviceId/PointerEventPersistentDeviceId.generated.xml' path='docs/PointerEventPersistentDeviceId/*'/>
	public long PersistentDeviceId { get; }
	///<include file='Utils/Docs/PointerEventGetCoalescedEvents/PointerEventGetCoalescedEvents.generated.xml' path='docs/PointerEventGetCoalescedEvents/*'/>
	public List<PointerEvent> GetCoalescedEvents() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PointerEventGetPredictedEvents/PointerEventGetPredictedEvents.generated.xml' path='docs/PointerEventGetPredictedEvents/*'/>
	public List<PointerEvent> GetPredictedEvents() { throw new System.NotImplementedException(); }
	public PointerEvent() { }
}

///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
public partial class Element
{
	///<include file='Utils/Docs/ElementSetPointerCapture/ElementSetPointerCapture.generated.xml' path='docs/ElementSetPointerCapture/*'/>
	public Undefined SetPointerCapture(long pointerId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementReleasePointerCapture/ElementReleasePointerCapture.generated.xml' path='docs/ElementReleasePointerCapture/*'/>
	public Undefined ReleasePointerCapture(long pointerId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ElementHasPointerCapture/ElementHasPointerCapture.generated.xml' path='docs/ElementHasPointerCapture/*'/>
	public bool HasPointerCapture(long pointerId) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorMaxTouchPoints/NavigatorMaxTouchPoints.generated.xml' path='docs/NavigatorMaxTouchPoints/*'/>
	public long MaxTouchPoints { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PointerLockOptions
{
		public bool UnadjustedMovement;
}

///<include file='Utils/Docs/Element/Element.generated.xml' path='docs/Element/*'/>
public partial class Element
{
	///<include file='Utils/Docs/ElementRequestPointerLock/ElementRequestPointerLock.generated.xml' path='docs/ElementRequestPointerLock/*'/>
	public Task<Undefined> RequestPointerLock(PointerLockOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
		public EventHandler Onpointerlockchange { get; set; }
		public EventHandler Onpointerlockerror { get; set; }
	///<include file='Utils/Docs/DocumentExitPointerLock/DocumentExitPointerLock.generated.xml' path='docs/DocumentExitPointerLock/*'/>
	public Undefined ExitPointerLock() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MouseEvent/MouseEvent.generated.xml' path='docs/MouseEvent/*'/>
public partial class MouseEvent
{
	///<include file='Utils/Docs/MouseEventMovementX/MouseEventMovementX.generated.xml' path='docs/MouseEventMovementX/*'/>
	public Number MovementX { get; }
	///<include file='Utils/Docs/MouseEventMovementY/MouseEventMovementY.generated.xml' path='docs/MouseEventMovementY/*'/>
	public Number MovementY { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MouseEventInit
{
		public Number MovementX;
		public Number MovementY;
}

[To(ToAttribute.Default)]
public partial class HTMLPortalElement : HTMLElement
{
		public HTMLPortalElement() { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public USVString Src { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString ReferrerPolicy { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Task<Undefined> Activate(PortalActivateOptions options) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined PostMessage(dynamic message, StructuredSerializeOptions options) { throw new System.NotImplementedException(); }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onmessage { get; set; }
		[To(ToAttribute.FirstCharToLowerCase)]
	public EventHandler Onmessageerror { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PortalActivateOptions : StructuredSerializeOptions
{
		public dynamic Data;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public PortalHost? PortalHost { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PortalHost : EventTarget
{
		public Undefined PostMessage(dynamic message, StructuredSerializeOptions options) { throw new System.NotImplementedException(); }
		public EventHandler Onmessage { get; set; }
		public EventHandler Onmessageerror { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PortalActivateEvent : Event
{
		public PortalActivateEvent(DOMString type, PortalActivateEventInit eventInitDict) { }
		public dynamic Data { get; }
		public HTMLPortalElement AdoptPredecessor() { throw new System.NotImplementedException(); }
	public PortalActivateEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PortalActivateEventInit : EventInit
{
		public dynamic Data;
}

public partial class MediaStreamConstraints
{
		public bool PreferCurrentTab;
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentPrerendering/DocumentPrerendering.generated.xml' path='docs/DocumentPrerendering/*'/>
	public bool Prerendering { get; }
		public EventHandler Onprerenderingchange { get; set; }
}

///<include file='Utils/Docs/PerformanceNavigationTiming/PerformanceNavigationTiming.generated.xml' path='docs/PerformanceNavigationTiming/*'/>
public partial class PerformanceNavigationTiming
{
	///<include file='Utils/Docs/PerformanceNavigationTimingActivationStart/PerformanceNavigationTimingActivationStart.generated.xml' path='docs/PerformanceNavigationTimingActivationStart/*'/>
	public DOMHighResTimeStamp ActivationStart { get; }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorPresentation/NavigatorPresentation.generated.xml' path='docs/NavigatorPresentation/*'/>
	public Presentation Presentation { get; }
}

///<include file='Utils/Docs/Presentation/Presentation.generated.xml' path='docs/Presentation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Presentation
{
}

///<include file='Utils/Docs/Presentation/Presentation.generated.xml' path='docs/Presentation/*'/>
public partial class Presentation
{
	///<include file='Utils/Docs/PresentationDefaultRequest/PresentationDefaultRequest.generated.xml' path='docs/PresentationDefaultRequest/*'/>
	public PresentationRequest? DefaultRequest { get; set; }
}

///<include file='Utils/Docs/Presentation/Presentation.generated.xml' path='docs/Presentation/*'/>
public partial class Presentation
{
	///<include file='Utils/Docs/PresentationReceiver/PresentationReceiver.generated.xml' path='docs/PresentationReceiver/*'/>
	public PresentationReceiver? Receiver { get; }
}

///<include file='Utils/Docs/PresentationRequest/PresentationRequest.generated.xml' path='docs/PresentationRequest/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PresentationRequest : EventTarget
{
	///<include file='Utils/Docs/PresentationRequestPresentationRequest/PresentationRequestPresentationRequest.generated.xml' path='docs/PresentationRequestPresentationRequest/*'/>
	public PresentationRequest(USVString url) { }
	///<include file='Utils/Docs/PresentationRequestPresentationRequest/PresentationRequestPresentationRequest.generated.xml' path='docs/PresentationRequestPresentationRequest/*'/>
	public PresentationRequest(List<USVString> urls) { }
	///<include file='Utils/Docs/PresentationRequestStart/PresentationRequestStart.generated.xml' path='docs/PresentationRequestStart/*'/>
	public Task<PresentationConnection> Start() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PresentationRequestReconnect/PresentationRequestReconnect.generated.xml' path='docs/PresentationRequestReconnect/*'/>
	public Task<PresentationConnection> Reconnect(USVString presentationId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PresentationRequestGetAvailability/PresentationRequestGetAvailability.generated.xml' path='docs/PresentationRequestGetAvailability/*'/>
	public Task<PresentationAvailability> GetAvailability() { throw new System.NotImplementedException(); }
		public EventHandler Onconnectionavailable { get; set; }
	public PresentationRequest() { }
}

///<include file='Utils/Docs/PresentationAvailability/PresentationAvailability.generated.xml' path='docs/PresentationAvailability/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PresentationAvailability : EventTarget
{
	///<include file='Utils/Docs/PresentationAvailabilityValue/PresentationAvailabilityValue.generated.xml' path='docs/PresentationAvailabilityValue/*'/>
	public bool Value { get; }
		public EventHandler Onchange { get; set; }
}

///<include file='Utils/Docs/PresentationConnectionAvailableEvent/PresentationConnectionAvailableEvent.generated.xml' path='docs/PresentationConnectionAvailableEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PresentationConnectionAvailableEvent : Event
{
	///<include file='Utils/Docs/PresentationConnectionAvailableEventPresentationConnectionAv/PresentationConnectionAvailableEventPresentationConnectionAv.generated.xml' path='docs/PresentationConnectionAvailableEventPresentationConnectionAv/*'/>
	public PresentationConnectionAvailableEvent(DOMString type, PresentationConnectionAvailableEventInit eventInitDict) { }
	///<include file='Utils/Docs/PresentationConnectionAvailableEventConnection/PresentationConnectionAvailableEventConnection.generated.xml' path='docs/PresentationConnectionAvailableEventConnection/*'/>
	public PresentationConnection Connection { get; }
	public PresentationConnectionAvailableEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PresentationConnectionAvailableEventInit : EventInit
{
		public required PresentationConnection Connection;
}

///<include file='Utils/Docs/PresentationConnection/PresentationConnection.generated.xml' path='docs/PresentationConnection/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PresentationConnection : EventTarget
{
	///<include file='Utils/Docs/PresentationConnectionId/PresentationConnectionId.generated.xml' path='docs/PresentationConnectionId/*'/>
	public USVString Id { get; }
	///<include file='Utils/Docs/PresentationConnectionUrl/PresentationConnectionUrl.generated.xml' path='docs/PresentationConnectionUrl/*'/>
	public USVString Url { get; }
	///<include file='Utils/Docs/PresentationConnectionState/PresentationConnectionState.generated.xml' path='docs/PresentationConnectionState/*'/>
	public PresentationConnectionState State { get; }
	///<include file='Utils/Docs/PresentationConnectionClose/PresentationConnectionClose.generated.xml' path='docs/PresentationConnectionClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PresentationConnectionTerminate/PresentationConnectionTerminate.generated.xml' path='docs/PresentationConnectionTerminate/*'/>
	public Undefined Terminate() { throw new System.NotImplementedException(); }
		public EventHandler Onconnect { get; set; }
		public EventHandler Onclose { get; set; }
		public EventHandler Onterminate { get; set; }
	///<include file='Utils/Docs/PresentationConnectionBinaryType/PresentationConnectionBinaryType.generated.xml' path='docs/PresentationConnectionBinaryType/*'/>
	public BinaryType BinaryType { get; set; }
		public EventHandler Onmessage { get; set; }
	///<include file='Utils/Docs/PresentationConnectionSend/PresentationConnectionSend.generated.xml' path='docs/PresentationConnectionSend/*'/>
	public Undefined Send(DOMString message) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PresentationConnectionSend/PresentationConnectionSend.generated.xml' path='docs/PresentationConnectionSend/*'/>
	public Undefined Send(Blob data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PresentationConnectionSend/PresentationConnectionSend.generated.xml' path='docs/PresentationConnectionSend/*'/>
	public Undefined Send(byte[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PresentationConnectionSend/PresentationConnectionSend.generated.xml' path='docs/PresentationConnectionSend/*'/>
	public Undefined Send(ArrayBufferView data) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PresentationConnectionCloseEvent/PresentationConnectionCloseEvent.generated.xml' path='docs/PresentationConnectionCloseEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PresentationConnectionCloseEvent : Event
{
		public PresentationConnectionCloseEvent(DOMString type, PresentationConnectionCloseEventInit eventInitDict) { }
		public PresentationConnectionCloseReason Reason { get; }
		public DOMString Message { get; }
	public PresentationConnectionCloseEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PresentationConnectionCloseEventInit : EventInit
{
		public required PresentationConnectionCloseReason Reason;
		public DOMString Message;
}

///<include file='Utils/Docs/PresentationReceiver/PresentationReceiver.generated.xml' path='docs/PresentationReceiver/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PresentationReceiver
{
		public Task<PresentationConnectionList> ConnectionList { get; }
}

///<include file='Utils/Docs/PresentationConnectionList/PresentationConnectionList.generated.xml' path='docs/PresentationConnectionList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PresentationConnectionList : EventTarget
{
		public PresentationConnection[] Connections { get; }
		public EventHandler Onconnectionavailable { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PrivateAggregation
{
		public Undefined ContributeToHistogram(PAHistogramContribution contribution) { throw new System.NotImplementedException(); }
		public Undefined EnableDebugMode(PADebugModeOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PAHistogramContribution
{
		public required BigInt Bucket;
		public required long Value;
		public BigInt FilteringId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PADebugModeOptions
{
		public required BigInt DebugKey;
}

///<include file='Utils/Docs/HTMLAnchorElement/HTMLAnchorElement.generated.xml' path='docs/HTMLAnchorElement/*'/>
public partial class HTMLAnchorElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public ulong AttributionSourceId { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PrivateNetworkAccessPermissionDescriptor : PermissionDescriptor
{
		public DOMString Id;
}

///<include file='Utils/Docs/RequestInit/RequestInit.generated.xml' path='docs/RequestInit/*'/>
public partial class RequestInit
{
		public IPAddressSpace TargetAddressSpace;
}

///<include file='Utils/Docs/Request/Request.generated.xml' path='docs/Request/*'/>
public partial class Request
{
		public IPAddressSpace TargetAddressSpace { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProximitySensor : Sensor
{
		public ProximitySensor(SensorOptions sensorOptions) { }
		public Number? Distance { get; }
		public Number? Max { get; }
		public bool? Near { get; }
	public ProximitySensor() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushPermissionDescriptor : PermissionDescriptor
{
		public bool UserVisibleOnly;
}

///<include file='Utils/Docs/ServiceWorkerRegistration/ServiceWorkerRegistration.generated.xml' path='docs/ServiceWorkerRegistration/*'/>
public partial class ServiceWorkerRegistration
{
	///<include file='Utils/Docs/ServiceWorkerRegistrationPushManager/ServiceWorkerRegistrationPushManager.generated.xml' path='docs/ServiceWorkerRegistrationPushManager/*'/>
	public PushManager PushManager { get; }
}

///<include file='Utils/Docs/PushManager/PushManager.generated.xml' path='docs/PushManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushManager
{
	///<include file='Utils/Docs/PushManagerSupportedContentEncodings/PushManagerSupportedContentEncodings.generated.xml' path='docs/PushManagerSupportedContentEncodings/*'/>
	public static DOMString[] SupportedContentEncodings { get; }
	///<include file='Utils/Docs/PushManagerSubscribe/PushManagerSubscribe.generated.xml' path='docs/PushManagerSubscribe/*'/>
	public Task<PushSubscription> Subscribe(PushSubscriptionOptionsInit options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PushManagerGetSubscription/PushManagerGetSubscription.generated.xml' path='docs/PushManagerGetSubscription/*'/>
	public Task<PushSubscription?> GetSubscription() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PushManagerPermissionState/PushManagerPermissionState.generated.xml' path='docs/PushManagerPermissionState/*'/>
	public Task<PermissionState> PermissionState(PushSubscriptionOptionsInit options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PushSubscriptionOptions/PushSubscriptionOptions.generated.xml' path='docs/PushSubscriptionOptions/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushSubscriptionOptions
{
	///<include file='Utils/Docs/PushSubscriptionOptionsUserVisibleOnly/PushSubscriptionOptionsUserVisibleOnly.generated.xml' path='docs/PushSubscriptionOptionsUserVisibleOnly/*'/>
	public bool UserVisibleOnly { get; }
	///<include file='Utils/Docs/PushSubscriptionOptionsApplicationServerKey/PushSubscriptionOptionsApplicationServerKey.generated.xml' path='docs/PushSubscriptionOptionsApplicationServerKey/*'/>
	public byte[]? ApplicationServerKey { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushSubscriptionOptionsInit
{
		public bool UserVisibleOnly;
		public Union122? ApplicationServerKey;
}

///<include file='Utils/Docs/PushSubscription/PushSubscription.generated.xml' path='docs/PushSubscription/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushSubscription
{
	///<include file='Utils/Docs/PushSubscriptionEndpoint/PushSubscriptionEndpoint.generated.xml' path='docs/PushSubscriptionEndpoint/*'/>
	public USVString Endpoint { get; }
	///<include file='Utils/Docs/PushSubscriptionExpirationTime/PushSubscriptionExpirationTime.generated.xml' path='docs/PushSubscriptionExpirationTime/*'/>
	public EpochTimeStamp? ExpirationTime { get; }
	///<include file='Utils/Docs/PushSubscriptionOptions/PushSubscriptionOptions.generated.xml' path='docs/PushSubscriptionOptions/*'/>
	public PushSubscriptionOptions Options { get; }
	///<include file='Utils/Docs/PushSubscriptionGetKey/PushSubscriptionGetKey.generated.xml' path='docs/PushSubscriptionGetKey/*'/>
	public byte[]? GetKey(PushEncryptionKeyName name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PushSubscriptionUnsubscribe/PushSubscriptionUnsubscribe.generated.xml' path='docs/PushSubscriptionUnsubscribe/*'/>
	public Task<bool> Unsubscribe() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PushSubscriptionToJSON/PushSubscriptionToJSON.generated.xml' path='docs/PushSubscriptionToJSON/*'/>
	public PushSubscriptionJSON ToJSON() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushSubscriptionJSON
{
		public USVString Endpoint;
		public EpochTimeStamp? ExpirationTime;
		public Dictionary<DOMString, USVString> Keys;
}

///<include file='Utils/Docs/PushMessageData/PushMessageData.generated.xml' path='docs/PushMessageData/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushMessageData
{
	///<include file='Utils/Docs/PushMessageDataArrayBuffer/PushMessageDataArrayBuffer.generated.xml' path='docs/PushMessageDataArrayBuffer/*'/>
	public byte[] ArrayBuffer() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PushMessageDataBlob/PushMessageDataBlob.generated.xml' path='docs/PushMessageDataBlob/*'/>
	public Blob Blob() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PushMessageDataBytes/PushMessageDataBytes.generated.xml' path='docs/PushMessageDataBytes/*'/>
	public System.Byte Bytes() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PushMessageDataJson/PushMessageDataJson.generated.xml' path='docs/PushMessageDataJson/*'/>
	public dynamic Json() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PushMessageDataText/PushMessageDataText.generated.xml' path='docs/PushMessageDataText/*'/>
	public USVString Text() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ServiceWorkerGlobalScope/ServiceWorkerGlobalScope.generated.xml' path='docs/ServiceWorkerGlobalScope/*'/>
public partial class ServiceWorkerGlobalScope
{
		public EventHandler Onpush { get; set; }
		public EventHandler Onpushsubscriptionchange { get; set; }
}

///<include file='Utils/Docs/PushEvent/PushEvent.generated.xml' path='docs/PushEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushEvent : ExtendableEvent
{
	///<include file='Utils/Docs/PushEventPushEvent/PushEventPushEvent.generated.xml' path='docs/PushEventPushEvent/*'/>
	public PushEvent(DOMString type, PushEventInit eventInitDict) { }
	///<include file='Utils/Docs/PushEventData/PushEventData.generated.xml' path='docs/PushEventData/*'/>
	public PushMessageData? Data { get; }
	public PushEvent() { }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushEventInit : ExtendableEventInit
{
		public PushMessageDataInit Data;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushSubscriptionChangeEvent : ExtendableEvent
{
		public PushSubscriptionChangeEvent(DOMString type, PushSubscriptionChangeEventInit eventInitDict) { }
		public PushSubscription? NewSubscription { get; }
		public PushSubscription? OldSubscription { get; }
	public PushSubscriptionChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PushSubscriptionChangeEventInit : ExtendableEventInit
{
		public PushSubscription NewSubscription;
		public PushSubscription OldSubscription;
}

///<include file='Utils/Docs/XRView/XRView.generated.xml' path='docs/XRView/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRView
{
		public XRCamera? Camera { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRCamera
{
		public ulong Width { get; }
		public ulong Height { get; }
}

///<include file='Utils/Docs/XRWebGLBinding/XRWebGLBinding.generated.xml' path='docs/XRWebGLBinding/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRWebGLBinding
{
		public WebGLTexture? GetCameraImage(XRCamera camera) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRMesh
{
		public XRSpace MeshSpace { get; }
		public System.Single[] Vertices { get; }
		public System.UInt32 Indices { get; }
		public DOMHighResTimeStamp LastChangedTime { get; }
		public DOMString? SemanticLabel { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRMeshSet
{
	
}

///<include file='Utils/Docs/XRFrame/XRFrame.generated.xml' path='docs/XRFrame/*'/>
public partial class XRFrame
{
		public XRMeshSet DetectedMeshes { get; }
}

///<include file='Utils/Docs/RemotePlayback/RemotePlayback.generated.xml' path='docs/RemotePlayback/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RemotePlayback : EventTarget
{
	///<include file='Utils/Docs/RemotePlaybackWatchAvailability/RemotePlaybackWatchAvailability.generated.xml' path='docs/RemotePlaybackWatchAvailability/*'/>
	public Task<long> WatchAvailability(RemotePlaybackAvailabilityCallback callback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RemotePlaybackCancelWatchAvailability/RemotePlaybackCancelWatchAvailability.generated.xml' path='docs/RemotePlaybackCancelWatchAvailability/*'/>
	public Task<Undefined> CancelWatchAvailability(long id) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RemotePlaybackState/RemotePlaybackState.generated.xml' path='docs/RemotePlaybackState/*'/>
	public RemotePlaybackState State { get; }
		public EventHandler Onconnecting { get; set; }
		public EventHandler Onconnect { get; set; }
		public EventHandler Ondisconnect { get; set; }
	///<include file='Utils/Docs/RemotePlaybackPrompt/RemotePlaybackPrompt.generated.xml' path='docs/RemotePlaybackPrompt/*'/>
	public Task<Undefined> Prompt() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HTMLMediaElement/HTMLMediaElement.generated.xml' path='docs/HTMLMediaElement/*'/>
public partial class HTMLMediaElement
{
	///<include file='Utils/Docs/HTMLMediaElementRemote/HTMLMediaElementRemote.generated.xml' path='docs/HTMLMediaElementRemote/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public RemotePlayback Remote { get; }
	///<include file='Utils/Docs/HTMLMediaElementDisableRemotePlayback/HTMLMediaElementDisableRemotePlayback.generated.xml' path='docs/HTMLMediaElementDisableRemotePlayback/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public bool DisableRemotePlayback { get; set; }
}

///<include file='Utils/Docs/ReportBody/ReportBody.generated.xml' path='docs/ReportBody/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReportBody
{
	///<include file='Utils/Docs/ReportBodyToJSON/ReportBodyToJSON.generated.xml' path='docs/ReportBodyToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Report/Report.generated.xml' path='docs/Report/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Report
{
		public Object ToJSON() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReportType/ReportType.generated.xml' path='docs/ReportType/*'/>
	public DOMString Type { get; }
	///<include file='Utils/Docs/ReportUrl/ReportUrl.generated.xml' path='docs/ReportUrl/*'/>
	public DOMString Url { get; }
	///<include file='Utils/Docs/ReportBody/ReportBody.generated.xml' path='docs/ReportBody/*'/>
	public ReportBody? Body { get; }
}

///<include file='Utils/Docs/ReportingObserver/ReportingObserver.generated.xml' path='docs/ReportingObserver/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReportingObserver
{
	///<include file='Utils/Docs/ReportingObserverReportingObserver/ReportingObserverReportingObserver.generated.xml' path='docs/ReportingObserverReportingObserver/*'/>
	public ReportingObserver(ReportingObserverCallback callback, ReportingObserverOptions options) { }
	///<include file='Utils/Docs/ReportingObserverObserve/ReportingObserverObserve.generated.xml' path='docs/ReportingObserverObserve/*'/>
	public Undefined Observe() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReportingObserverDisconnect/ReportingObserverDisconnect.generated.xml' path='docs/ReportingObserverDisconnect/*'/>
	public Undefined Disconnect() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReportingObserverTakeRecords/ReportingObserverTakeRecords.generated.xml' path='docs/ReportingObserverTakeRecords/*'/>
	public ReportList TakeRecords() { throw new System.NotImplementedException(); }
	public ReportingObserver() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReportingObserverOptions
{
		public List<DOMString> Types;
		public bool Buffered;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GenerateTestReportParameters
{
		public required DOMString Message;
		public DOMString Group;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowRequestIdleCallback/WindowRequestIdleCallback.generated.xml' path='docs/WindowRequestIdleCallback/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong RequestIdleCallback(IdleRequestCallback callback, IdleRequestOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowCancelIdleCallback/WindowCancelIdleCallback.generated.xml' path='docs/WindowCancelIdleCallback/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined CancelIdleCallback(ulong handle) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdleRequestOptions
{
		public ulong Timeout;
}

///<include file='Utils/Docs/IdleDeadline/IdleDeadline.generated.xml' path='docs/IdleDeadline/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IdleDeadline
{
	///<include file='Utils/Docs/IdleDeadlineTimeRemaining/IdleDeadlineTimeRemaining.generated.xml' path='docs/IdleDeadlineTimeRemaining/*'/>
	public DOMHighResTimeStamp TimeRemaining() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/IdleDeadlineDidTimeout/IdleDeadlineDidTimeout.generated.xml' path='docs/IdleDeadlineDidTimeout/*'/>
	public bool DidTimeout { get; }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentRequestStorageAccessFor/DocumentRequestStorageAccessFor.generated.xml' path='docs/DocumentRequestStorageAccessFor/*'/>
	public Task<Undefined> RequestStorageAccessFor(USVString requestedOrigin) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TopLevelStorageAccessPermissionDescriptor : PermissionDescriptor
{
		public USVString RequestedOrigin;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ResizeObserverOptions
{
		public ResizeObserverBoxOptions Box;
}

///<include file='Utils/Docs/ResizeObserver/ResizeObserver.generated.xml' path='docs/ResizeObserver/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ResizeObserver
{
	///<include file='Utils/Docs/ResizeObserverResizeObserver/ResizeObserverResizeObserver.generated.xml' path='docs/ResizeObserverResizeObserver/*'/>
	public ResizeObserver(ResizeObserverCallback callback) { }
	///<include file='Utils/Docs/ResizeObserverObserve/ResizeObserverObserve.generated.xml' path='docs/ResizeObserverObserve/*'/>
	public Undefined Observe(Element target, ResizeObserverOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ResizeObserverUnobserve/ResizeObserverUnobserve.generated.xml' path='docs/ResizeObserverUnobserve/*'/>
	public Undefined Unobserve(Element target) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ResizeObserverDisconnect/ResizeObserverDisconnect.generated.xml' path='docs/ResizeObserverDisconnect/*'/>
	public Undefined Disconnect() { throw new System.NotImplementedException(); }
	public ResizeObserver() { }
}

///<include file='Utils/Docs/ResizeObserverEntry/ResizeObserverEntry.generated.xml' path='docs/ResizeObserverEntry/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ResizeObserverEntry
{
	///<include file='Utils/Docs/ResizeObserverEntryTarget/ResizeObserverEntryTarget.generated.xml' path='docs/ResizeObserverEntryTarget/*'/>
	public Element Target { get; }
	///<include file='Utils/Docs/ResizeObserverEntryContentRect/ResizeObserverEntryContentRect.generated.xml' path='docs/ResizeObserverEntryContentRect/*'/>
	public DOMRectReadOnly ContentRect { get; }
	///<include file='Utils/Docs/ResizeObserverEntryBorderBoxSize/ResizeObserverEntryBorderBoxSize.generated.xml' path='docs/ResizeObserverEntryBorderBoxSize/*'/>
	public ResizeObserverSize[] BorderBoxSize { get; }
	///<include file='Utils/Docs/ResizeObserverEntryContentBoxSize/ResizeObserverEntryContentBoxSize.generated.xml' path='docs/ResizeObserverEntryContentBoxSize/*'/>
	public ResizeObserverSize[] ContentBoxSize { get; }
	///<include file='Utils/Docs/ResizeObserverEntryDevicePixelContentBoxSize/ResizeObserverEntryDevicePixelContentBoxSize.generated.xml' path='docs/ResizeObserverEntryDevicePixelContentBoxSize/*'/>
	public ResizeObserverSize[] DevicePixelContentBoxSize { get; }
}

///<include file='Utils/Docs/ResizeObserverSize/ResizeObserverSize.generated.xml' path='docs/ResizeObserverSize/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ResizeObserverSize
{
	///<include file='Utils/Docs/ResizeObserverSizeInlineSize/ResizeObserverSizeInlineSize.generated.xml' path='docs/ResizeObserverSizeInlineSize/*'/>
	public double InlineSize { get; }
	///<include file='Utils/Docs/ResizeObserverSizeBlockSize/ResizeObserverSizeBlockSize.generated.xml' path='docs/ResizeObserverSizeBlockSize/*'/>
	public double BlockSize { get; }
}

///<include file='Utils/Docs/PerformanceResourceTiming/PerformanceResourceTiming.generated.xml' path='docs/PerformanceResourceTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceResourceTiming : PerformanceEntry
{
	///<include file='Utils/Docs/PerformanceResourceTimingInitiatorType/PerformanceResourceTimingInitiatorType.generated.xml' path='docs/PerformanceResourceTimingInitiatorType/*'/>
	public DOMString InitiatorType { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingDeliveryType/PerformanceResourceTimingDeliveryType.generated.xml' path='docs/PerformanceResourceTimingDeliveryType/*'/>
	public DOMString DeliveryType { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingNextHopProtocol/PerformanceResourceTimingNextHopProtocol.generated.xml' path='docs/PerformanceResourceTimingNextHopProtocol/*'/>
	public ByteString NextHopProtocol { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingWorkerStart/PerformanceResourceTimingWorkerStart.generated.xml' path='docs/PerformanceResourceTimingWorkerStart/*'/>
	public DOMHighResTimeStamp WorkerStart { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingRedirectStart/PerformanceResourceTimingRedirectStart.generated.xml' path='docs/PerformanceResourceTimingRedirectStart/*'/>
	public DOMHighResTimeStamp RedirectStart { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingRedirectEnd/PerformanceResourceTimingRedirectEnd.generated.xml' path='docs/PerformanceResourceTimingRedirectEnd/*'/>
	public DOMHighResTimeStamp RedirectEnd { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingFetchStart/PerformanceResourceTimingFetchStart.generated.xml' path='docs/PerformanceResourceTimingFetchStart/*'/>
	public DOMHighResTimeStamp FetchStart { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingDomainLookupStart/PerformanceResourceTimingDomainLookupStart.generated.xml' path='docs/PerformanceResourceTimingDomainLookupStart/*'/>
	public DOMHighResTimeStamp DomainLookupStart { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingDomainLookupEnd/PerformanceResourceTimingDomainLookupEnd.generated.xml' path='docs/PerformanceResourceTimingDomainLookupEnd/*'/>
	public DOMHighResTimeStamp DomainLookupEnd { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingConnectStart/PerformanceResourceTimingConnectStart.generated.xml' path='docs/PerformanceResourceTimingConnectStart/*'/>
	public DOMHighResTimeStamp ConnectStart { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingConnectEnd/PerformanceResourceTimingConnectEnd.generated.xml' path='docs/PerformanceResourceTimingConnectEnd/*'/>
	public DOMHighResTimeStamp ConnectEnd { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingSecureConnectionStart/PerformanceResourceTimingSecureConnectionStart.generated.xml' path='docs/PerformanceResourceTimingSecureConnectionStart/*'/>
	public DOMHighResTimeStamp SecureConnectionStart { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingRequestStart/PerformanceResourceTimingRequestStart.generated.xml' path='docs/PerformanceResourceTimingRequestStart/*'/>
	public DOMHighResTimeStamp RequestStart { get; }
		public DOMHighResTimeStamp FinalResponseHeadersStart { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingFirstInterimResponseStart/PerformanceResourceTimingFirstInterimResponseStart.generated.xml' path='docs/PerformanceResourceTimingFirstInterimResponseStart/*'/>
	public DOMHighResTimeStamp FirstInterimResponseStart { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingResponseStart/PerformanceResourceTimingResponseStart.generated.xml' path='docs/PerformanceResourceTimingResponseStart/*'/>
	public DOMHighResTimeStamp ResponseStart { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingResponseEnd/PerformanceResourceTimingResponseEnd.generated.xml' path='docs/PerformanceResourceTimingResponseEnd/*'/>
	public DOMHighResTimeStamp ResponseEnd { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingTransferSize/PerformanceResourceTimingTransferSize.generated.xml' path='docs/PerformanceResourceTimingTransferSize/*'/>
	public ulong TransferSize { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingEncodedBodySize/PerformanceResourceTimingEncodedBodySize.generated.xml' path='docs/PerformanceResourceTimingEncodedBodySize/*'/>
	public ulong EncodedBodySize { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingDecodedBodySize/PerformanceResourceTimingDecodedBodySize.generated.xml' path='docs/PerformanceResourceTimingDecodedBodySize/*'/>
	public ulong DecodedBodySize { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingResponseStatus/PerformanceResourceTimingResponseStatus.generated.xml' path='docs/PerformanceResourceTimingResponseStatus/*'/>
	public ushort ResponseStatus { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingRenderBlockingStatus/PerformanceResourceTimingRenderBlockingStatus.generated.xml' path='docs/PerformanceResourceTimingRenderBlockingStatus/*'/>
	public RenderBlockingStatusType RenderBlockingStatus { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingContentType/PerformanceResourceTimingContentType.generated.xml' path='docs/PerformanceResourceTimingContentType/*'/>
	public DOMString ContentType { get; }
	///<include file='Utils/Docs/PerformanceResourceTimingToJSON/PerformanceResourceTimingToJSON.generated.xml' path='docs/PerformanceResourceTimingToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Performance/Performance.generated.xml' path='docs/Performance/*'/>
public partial class Performance
{
	///<include file='Utils/Docs/PerformanceClearResourceTimings/PerformanceClearResourceTimings.generated.xml' path='docs/PerformanceClearResourceTimings/*'/>
	public Undefined ClearResourceTimings() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceSetResourceTimingBufferSize/PerformanceSetResourceTimingBufferSize.generated.xml' path='docs/PerformanceSetResourceTimingBufferSize/*'/>
	public Undefined SetResourceTimingBufferSize(ulong maxSize) { throw new System.NotImplementedException(); }
		public EventHandler Onresourcetimingbufferfull { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StorageAccessTypes
{
		public bool All;
		public bool Cookies;
		public bool SessionStorage;
		public bool LocalStorage;
		public bool IndexedDB;
		public bool Locks;
		public bool Caches;
		public bool GetDirectory;
		public bool Estimate;
		public bool CreateObjectURL;
		public bool RevokeObjectURL;
		public bool BroadcastChannel;
		public bool SharedWorker;
}

///<include file='Utils/Docs/StorageAccessHandle/StorageAccessHandle.generated.xml' path='docs/StorageAccessHandle/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class StorageAccessHandle
{
	///<include file='Utils/Docs/StorageAccessHandleSessionStorage/StorageAccessHandleSessionStorage.generated.xml' path='docs/StorageAccessHandleSessionStorage/*'/>
	public Storage SessionStorage { get; }
	///<include file='Utils/Docs/StorageAccessHandleLocalStorage/StorageAccessHandleLocalStorage.generated.xml' path='docs/StorageAccessHandleLocalStorage/*'/>
	public Storage LocalStorage { get; }
	///<include file='Utils/Docs/StorageAccessHandleIndexedDB/StorageAccessHandleIndexedDB.generated.xml' path='docs/StorageAccessHandleIndexedDB/*'/>
	public IDBFactory IndexedDB { get; }
	///<include file='Utils/Docs/StorageAccessHandleLocks/StorageAccessHandleLocks.generated.xml' path='docs/StorageAccessHandleLocks/*'/>
	public LockManager Locks { get; }
	///<include file='Utils/Docs/StorageAccessHandleCaches/StorageAccessHandleCaches.generated.xml' path='docs/StorageAccessHandleCaches/*'/>
	public CacheStorage Caches { get; }
	///<include file='Utils/Docs/StorageAccessHandleGetDirectory/StorageAccessHandleGetDirectory.generated.xml' path='docs/StorageAccessHandleGetDirectory/*'/>
	public Task<FileSystemDirectoryHandle> GetDirectory() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StorageAccessHandleEstimate/StorageAccessHandleEstimate.generated.xml' path='docs/StorageAccessHandleEstimate/*'/>
	public Task<StorageEstimate> Estimate() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StorageAccessHandleCreateObjectURL/StorageAccessHandleCreateObjectURL.generated.xml' path='docs/StorageAccessHandleCreateObjectURL/*'/>
	public DOMString CreateObjectURL(Union124 obj) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StorageAccessHandleRevokeObjectURL/StorageAccessHandleRevokeObjectURL.generated.xml' path='docs/StorageAccessHandleRevokeObjectURL/*'/>
	public Undefined RevokeObjectURL(DOMString url) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StorageAccessHandleBroadcastChannel/StorageAccessHandleBroadcastChannel.generated.xml' path='docs/StorageAccessHandleBroadcastChannel/*'/>
	public BroadcastChannel BroadcastChannel(DOMString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StorageAccessHandleSharedWorker/StorageAccessHandleSharedWorker.generated.xml' path='docs/StorageAccessHandleSharedWorker/*'/>
	public SharedWorker SharedWorker(USVString scriptURL, Union125 options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentHasUnpartitionedCookieAccess/DocumentHasUnpartitionedCookieAccess.generated.xml' path='docs/DocumentHasUnpartitionedCookieAccess/*'/>
	public Task<bool> HasUnpartitionedCookieAccess() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedWorkerOptions : WorkerOptions
{
		public SameSiteCookiesType SameSiteCookies;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SetHTMLOptions
{
		public Union126 Sanitizer;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SetHTMLUnsafeOptions
{
		public Union127 Sanitizer;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Sanitizer
{
		public Sanitizer(Union128 configuration) { }
		public SanitizerConfig Get() { throw new System.NotImplementedException(); }
		public Undefined AllowElement(SanitizerElementWithAttributes element) { throw new System.NotImplementedException(); }
		public Undefined RemoveElement(SanitizerElement element) { throw new System.NotImplementedException(); }
		public Undefined ReplaceElementWithChildren(SanitizerElement element) { throw new System.NotImplementedException(); }
		public Undefined AllowAttribute(SanitizerAttribute attribute) { throw new System.NotImplementedException(); }
		public Undefined RemoveAttribute(SanitizerAttribute attribute) { throw new System.NotImplementedException(); }
		public Undefined SetComments(bool allow) { throw new System.NotImplementedException(); }
		public Undefined SetDataAttributes(bool allow) { throw new System.NotImplementedException(); }
		public Undefined RemoveUnsafe() { throw new System.NotImplementedException(); }
	public Sanitizer() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SanitizerElementNamespace
{
		public required DOMString Name;
		public DOMString? Namespace;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SanitizerElementNamespaceWithAttributes : SanitizerElementNamespace
{
		public List<SanitizerAttribute> Attributes;
		public List<SanitizerAttribute> RemoveAttributes;
}



[To(ToAttribute.FirstCharToLowerCase)]
public partial class SanitizerAttributeNamespace
{
		public required DOMString Name;
		public DOMString? Namespace;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class SanitizerConfig
{
		public List<SanitizerElementWithAttributes> Elements;
		public List<SanitizerElement> RemoveElements;
		public List<SanitizerElement> ReplaceWithChildrenElements;
		public List<SanitizerAttribute> Attributes;
		public List<SanitizerAttribute> RemoveAttributes;
		public bool Comments;
		public bool DataAttributes;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SchedulerPostTaskOptions
{
		public AbortSignal Signal;
		public TaskPriority Priority;
		public ulong Delay;
}

///<include file='Utils/Docs/Scheduler/Scheduler.generated.xml' path='docs/Scheduler/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Scheduler
{
	///<include file='Utils/Docs/SchedulerPostTask/SchedulerPostTask.generated.xml' path='docs/SchedulerPostTask/*'/>
	public Task<dynamic> PostTask(SchedulerPostTaskCallback callback, SchedulerPostTaskOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SchedulerYield/SchedulerYield.generated.xml' path='docs/SchedulerYield/*'/>
	public Task<Undefined> Yield() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TaskPriorityChangeEvent/TaskPriorityChangeEvent.generated.xml' path='docs/TaskPriorityChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TaskPriorityChangeEvent : Event
{
	///<include file='Utils/Docs/TaskPriorityChangeEventTaskPriorityChangeEvent/TaskPriorityChangeEventTaskPriorityChangeEvent.generated.xml' path='docs/TaskPriorityChangeEventTaskPriorityChangeEvent/*'/>
	public TaskPriorityChangeEvent(DOMString type, TaskPriorityChangeEventInit priorityChangeEventInitDict) { }
	///<include file='Utils/Docs/TaskPriorityChangeEventPreviousPriority/TaskPriorityChangeEventPreviousPriority.generated.xml' path='docs/TaskPriorityChangeEventPreviousPriority/*'/>
	public TaskPriority PreviousPriority { get; }
	public TaskPriorityChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TaskPriorityChangeEventInit : EventInit
{
		public required TaskPriority PreviousPriority;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TaskControllerInit
{
		public TaskPriority Priority;
}

///<include file='Utils/Docs/TaskController/TaskController.generated.xml' path='docs/TaskController/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TaskController : AbortController
{
	///<include file='Utils/Docs/TaskControllerTaskController/TaskControllerTaskController.generated.xml' path='docs/TaskControllerTaskController/*'/>
	public TaskController(TaskControllerInit init) { }
	///<include file='Utils/Docs/TaskControllerSetPriority/TaskControllerSetPriority.generated.xml' path='docs/TaskControllerSetPriority/*'/>
	public Undefined SetPriority(TaskPriority priority) { throw new System.NotImplementedException(); }
	public TaskController() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TaskSignalAnyInit
{
		public Union132 Priority;
}

///<include file='Utils/Docs/TaskSignal/TaskSignal.generated.xml' path='docs/TaskSignal/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TaskSignal : AbortSignal
{
	///<include file='Utils/Docs/TaskSignalAny/TaskSignalAny.generated.xml' path='docs/TaskSignalAny/*'/>
	public static TaskSignal Any(List<AbortSignal> signals, TaskSignalAnyInit init) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TaskSignalPriority/TaskSignalPriority.generated.xml' path='docs/TaskSignalPriority/*'/>
	public TaskPriority Priority { get; }
		public EventHandler Onprioritychange { get; set; }
}

///<include file='Utils/Docs/MediaDevices/MediaDevices.generated.xml' path='docs/MediaDevices/*'/>
public partial class MediaDevices
{
	///<include file='Utils/Docs/MediaDevicesGetDisplayMedia/MediaDevicesGetDisplayMedia.generated.xml' path='docs/MediaDevicesGetDisplayMedia/*'/>
	public Task<MediaStream> GetDisplayMedia(DisplayMediaStreamOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CaptureController/CaptureController.generated.xml' path='docs/CaptureController/*'/>
public partial class CaptureController : EventTarget
{
	
	///<include file='Utils/Docs/CaptureControllerSetFocusBehavior/CaptureControllerSetFocusBehavior.generated.xml' path='docs/CaptureControllerSetFocusBehavior/*'/>
	public Undefined SetFocusBehavior(CaptureStartFocusBehavior focusBehavior) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DisplayMediaStreamOptions
{
		public Union133 Video;
		public Union134 Audio;
		public CaptureController Controller;
		public SelfCapturePreferenceEnum SelfBrowserSurface;
		public SystemAudioPreferenceEnum SystemAudio;
		public SurfaceSwitchingPreferenceEnum SurfaceSwitching;
		public MonitorTypeSurfacesEnum MonitorTypeSurfaces;
}

///<include file='Utils/Docs/MediaTrackSupportedConstraints/MediaTrackSupportedConstraints.generated.xml' path='docs/MediaTrackSupportedConstraints/*'/>
public partial class MediaTrackSupportedConstraints
{
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsDisplaySurface/MediaTrackSupportedConstraintsDisplaySurface.generated.xml' path='docs/MediaTrackSupportedConstraintsDisplaySurface/*'/>
	public bool DisplaySurface;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsLogicalSurface/MediaTrackSupportedConstraintsLogicalSurface.generated.xml' path='docs/MediaTrackSupportedConstraintsLogicalSurface/*'/>
	public bool LogicalSurface;
		public bool Cursor;
		public bool RestrictOwnAudio;
	///<include file='Utils/Docs/MediaTrackSupportedConstraintsSuppressLocalAudioPlayback/MediaTrackSupportedConstraintsSuppressLocalAudioPlayback.generated.xml' path='docs/MediaTrackSupportedConstraintsSuppressLocalAudioPlayback/*'/>
	public bool SuppressLocalAudioPlayback;
}

public partial class MediaTrackConstraintSet
{
		public ConstrainDOMString DisplaySurface;
		public ConstrainBoolean LogicalSurface;
		public ConstrainDOMString Cursor;
		public ConstrainBoolean RestrictOwnAudio;
		public ConstrainBoolean SuppressLocalAudioPlayback;
}

///<include file='Utils/Docs/MediaTrackSettings/MediaTrackSettings.generated.xml' path='docs/MediaTrackSettings/*'/>
public partial class MediaTrackSettings
{
	///<include file='Utils/Docs/MediaTrackSettingsDisplaySurface/MediaTrackSettingsDisplaySurface.generated.xml' path='docs/MediaTrackSettingsDisplaySurface/*'/>
	public DOMString DisplaySurface;
	///<include file='Utils/Docs/MediaTrackSettingsLogicalSurface/MediaTrackSettingsLogicalSurface.generated.xml' path='docs/MediaTrackSettingsLogicalSurface/*'/>
	public bool LogicalSurface;
	///<include file='Utils/Docs/MediaTrackSettingsCursor/MediaTrackSettingsCursor.generated.xml' path='docs/MediaTrackSettingsCursor/*'/>
	public DOMString Cursor;
		public bool RestrictOwnAudio;
	///<include file='Utils/Docs/MediaTrackSettingsSuppressLocalAudioPlayback/MediaTrackSettingsSuppressLocalAudioPlayback.generated.xml' path='docs/MediaTrackSettingsSuppressLocalAudioPlayback/*'/>
	public bool SuppressLocalAudioPlayback;
}

public partial class MediaTrackCapabilities
{
		public DOMString DisplaySurface;
		public bool LogicalSurface;
		public List<DOMString> Cursor;
}

///<include file='Utils/Docs/Screen/Screen.generated.xml' path='docs/Screen/*'/>
public partial class Screen
{
	///<include file='Utils/Docs/ScreenOrientation/ScreenOrientation.generated.xml' path='docs/ScreenOrientation/*'/>
	public ScreenOrientation Orientation { get; }
}

///<include file='Utils/Docs/ScreenOrientation/ScreenOrientation.generated.xml' path='docs/ScreenOrientation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScreenOrientation : EventTarget
{
	///<include file='Utils/Docs/ScreenOrientationLock/ScreenOrientationLock.generated.xml' path='docs/ScreenOrientationLock/*'/>
	public Task<Undefined> Lock(OrientationLockType orientation) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ScreenOrientationUnlock/ScreenOrientationUnlock.generated.xml' path='docs/ScreenOrientationUnlock/*'/>
	public Undefined Unlock() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ScreenOrientationType/ScreenOrientationType.generated.xml' path='docs/ScreenOrientationType/*'/>
	public OrientationType Type { get; }
	///<include file='Utils/Docs/ScreenOrientationAngle/ScreenOrientationAngle.generated.xml' path='docs/ScreenOrientationAngle/*'/>
	public ushort Angle { get; }
		public EventHandler Onchange { get; set; }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorWakeLock/NavigatorWakeLock.generated.xml' path='docs/NavigatorWakeLock/*'/>
	public WakeLock WakeLock { get; }
}

///<include file='Utils/Docs/WakeLock/WakeLock.generated.xml' path='docs/WakeLock/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WakeLock
{
	///<include file='Utils/Docs/WakeLockRequest/WakeLockRequest.generated.xml' path='docs/WakeLockRequest/*'/>
	public Task<WakeLockSentinel> Request(WakeLockType type) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/WakeLockSentinel/WakeLockSentinel.generated.xml' path='docs/WakeLockSentinel/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WakeLockSentinel : EventTarget
{
	///<include file='Utils/Docs/WakeLockSentinelReleased/WakeLockSentinelReleased.generated.xml' path='docs/WakeLockSentinelReleased/*'/>
	public bool Released { get; }
	///<include file='Utils/Docs/WakeLockSentinelType/WakeLockSentinelType.generated.xml' path='docs/WakeLockSentinelType/*'/>
	public WakeLockType Type { get; }
	///<include file='Utils/Docs/WakeLockSentinelRelease/WakeLockSentinelRelease.generated.xml' path='docs/WakeLockSentinelRelease/*'/>
	public Task<Undefined> Release() { throw new System.NotImplementedException(); }
		public EventHandler Onrelease { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScrollTimelineOptions
{
		public Element? Source;
		public ScrollAxis Axis;
}

///<include file='Utils/Docs/ScrollTimeline/ScrollTimeline.generated.xml' path='docs/ScrollTimeline/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScrollTimeline : AnimationTimeline
{
	///<include file='Utils/Docs/ScrollTimelineScrollTimeline/ScrollTimelineScrollTimeline.generated.xml' path='docs/ScrollTimelineScrollTimeline/*'/>
	public ScrollTimeline(ScrollTimelineOptions options) { }
	///<include file='Utils/Docs/ScrollTimelineSource/ScrollTimelineSource.generated.xml' path='docs/ScrollTimelineSource/*'/>
	public Element? Source { get; }
	///<include file='Utils/Docs/ScrollTimelineAxis/ScrollTimelineAxis.generated.xml' path='docs/ScrollTimelineAxis/*'/>
	public ScrollAxis Axis { get; }
	public ScrollTimeline() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ViewTimelineOptions
{
		public Element Subject;
		public ScrollAxis Axis;
		public Union135 Inset;
}

///<include file='Utils/Docs/ViewTimeline/ViewTimeline.generated.xml' path='docs/ViewTimeline/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ViewTimeline : ScrollTimeline
{
	///<include file='Utils/Docs/ViewTimelineViewTimeline/ViewTimelineViewTimeline.generated.xml' path='docs/ViewTimelineViewTimeline/*'/>
	public ViewTimeline(ViewTimelineOptions options) { }
	///<include file='Utils/Docs/ViewTimelineSubject/ViewTimelineSubject.generated.xml' path='docs/ViewTimelineSubject/*'/>
	public Element Subject { get; }
	///<include file='Utils/Docs/ViewTimelineStartOffset/ViewTimelineStartOffset.generated.xml' path='docs/ViewTimelineStartOffset/*'/>
	public CSSNumericValue StartOffset { get; }
	///<include file='Utils/Docs/ViewTimelineEndOffset/ViewTimelineEndOffset.generated.xml' path='docs/ViewTimelineEndOffset/*'/>
	public CSSNumericValue EndOffset { get; }
	public ViewTimeline() { }
}

///<include file='Utils/Docs/FragmentDirective/FragmentDirective.generated.xml' path='docs/FragmentDirective/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FragmentDirective
{
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentFragmentDirective/DocumentFragmentDirective.generated.xml' path='docs/DocumentFragmentDirective/*'/>
	public FragmentDirective FragmentDirective { get; }
}

///<include file='Utils/Docs/SecurePaymentConfirmationRequest/SecurePaymentConfirmationRequest.generated.xml' path='docs/SecurePaymentConfirmationRequest/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SecurePaymentConfirmationRequest
{
		public required BufferSource Challenge;
		public required USVString RpId;
		public required List<BufferSource> CredentialIds;
		public required PaymentCredentialInstrument Instrument;
		public ulong Timeout;
		public USVString PayeeName;
		public USVString PayeeOrigin;
		public AuthenticationExtensionsClientInputs Extensions;
		public List<USVString> Locale;
		public bool ShowOptOut;
}

///<include file='Utils/Docs/PaymentRequest/PaymentRequest.generated.xml' path='docs/PaymentRequest/*'/>
public partial class PaymentRequest
{
		public static Task<bool> IsSecurePaymentConfirmationAvailable() { throw new System.NotImplementedException(); }
}

public partial class AuthenticationExtensionsClientInputs
{
		public AuthenticationExtensionsPaymentInputs Payment;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationExtensionsPaymentInputs
{
		public bool IsPayment;
		public USVString RpId;
		public USVString TopOrigin;
		public USVString PayeeName;
		public USVString PayeeOrigin;
		public PaymentCurrencyAmount Total;
		public PaymentCredentialInstrument Instrument;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CollectedClientPaymentData : CollectedClientData
{
		public required CollectedClientAdditionalPaymentData Payment;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CollectedClientAdditionalPaymentData
{
		public required USVString RpId;
		public required USVString TopOrigin;
		public USVString PayeeName;
		public USVString PayeeOrigin;
		public required PaymentCurrencyAmount Total;
		public required PaymentCredentialInstrument Instrument;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PaymentCredentialInstrument
{
		public required USVString DisplayName;
		public required USVString Icon;
		public bool IconMustBeShown;
}

///<include file='Utils/Docs/Selection/Selection.generated.xml' path='docs/Selection/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Selection
{
	///<include file='Utils/Docs/SelectionAnchorNode/SelectionAnchorNode.generated.xml' path='docs/SelectionAnchorNode/*'/>
	public Node? AnchorNode { get; }
	///<include file='Utils/Docs/SelectionAnchorOffset/SelectionAnchorOffset.generated.xml' path='docs/SelectionAnchorOffset/*'/>
	public ulong AnchorOffset { get; }
	///<include file='Utils/Docs/SelectionFocusNode/SelectionFocusNode.generated.xml' path='docs/SelectionFocusNode/*'/>
	public Node? FocusNode { get; }
	///<include file='Utils/Docs/SelectionFocusOffset/SelectionFocusOffset.generated.xml' path='docs/SelectionFocusOffset/*'/>
	public ulong FocusOffset { get; }
	///<include file='Utils/Docs/SelectionIsCollapsed/SelectionIsCollapsed.generated.xml' path='docs/SelectionIsCollapsed/*'/>
	public bool IsCollapsed { get; }
	///<include file='Utils/Docs/SelectionRangeCount/SelectionRangeCount.generated.xml' path='docs/SelectionRangeCount/*'/>
	public ulong RangeCount { get; }
	///<include file='Utils/Docs/SelectionType/SelectionType.generated.xml' path='docs/SelectionType/*'/>
	public DOMString Type { get; }
	///<include file='Utils/Docs/SelectionDirection/SelectionDirection.generated.xml' path='docs/SelectionDirection/*'/>
	public DOMString Direction { get; }
	///<include file='Utils/Docs/SelectionGetRangeAt/SelectionGetRangeAt.generated.xml' path='docs/SelectionGetRangeAt/*'/>
	public Range GetRangeAt(ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionAddRange/SelectionAddRange.generated.xml' path='docs/SelectionAddRange/*'/>
	public Undefined AddRange(Range range) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionRemoveRange/SelectionRemoveRange.generated.xml' path='docs/SelectionRemoveRange/*'/>
	public Undefined RemoveRange(Range range) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionRemoveAllRanges/SelectionRemoveAllRanges.generated.xml' path='docs/SelectionRemoveAllRanges/*'/>
	public Undefined RemoveAllRanges() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionEmpty/SelectionEmpty.generated.xml' path='docs/SelectionEmpty/*'/>
	public Undefined Empty() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionGetComposedRanges/SelectionGetComposedRanges.generated.xml' path='docs/SelectionGetComposedRanges/*'/>
	public List<StaticRange> GetComposedRanges(GetComposedRangesOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionCollapse/SelectionCollapse.generated.xml' path='docs/SelectionCollapse/*'/>
	public Undefined Collapse(Node? node, ulong offset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionSetPosition/SelectionSetPosition.generated.xml' path='docs/SelectionSetPosition/*'/>
	public Undefined SetPosition(Node? node, ulong offset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionCollapseToStart/SelectionCollapseToStart.generated.xml' path='docs/SelectionCollapseToStart/*'/>
	public Undefined CollapseToStart() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionCollapseToEnd/SelectionCollapseToEnd.generated.xml' path='docs/SelectionCollapseToEnd/*'/>
	public Undefined CollapseToEnd() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionExtend/SelectionExtend.generated.xml' path='docs/SelectionExtend/*'/>
	public Undefined Extend(Node node, ulong offset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionSetBaseAndExtent/SelectionSetBaseAndExtent.generated.xml' path='docs/SelectionSetBaseAndExtent/*'/>
	public Undefined SetBaseAndExtent(Node anchorNode, ulong anchorOffset, Node focusNode, ulong focusOffset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionSelectAllChildren/SelectionSelectAllChildren.generated.xml' path='docs/SelectionSelectAllChildren/*'/>
	public Undefined SelectAllChildren(Node node) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionModify/SelectionModify.generated.xml' path='docs/SelectionModify/*'/>
	public Undefined Modify(DOMString alter, DOMString direction, DOMString granularity) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionDeleteFromDocument/SelectionDeleteFromDocument.generated.xml' path='docs/SelectionDeleteFromDocument/*'/>
	public Undefined DeleteFromDocument() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SelectionContainsNode/SelectionContainsNode.generated.xml' path='docs/SelectionContainsNode/*'/>
	public bool ContainsNode(Node node, bool allowPartialContainment) { throw new System.NotImplementedException(); }
	
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GetComposedRangesOptions
{
		public List<ShadowRoot> ShadowRoots;
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentGetSelection/DocumentGetSelection.generated.xml' path='docs/DocumentGetSelection/*'/>
	public Selection? GetSelection() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowGetSelection/WindowGetSelection.generated.xml' path='docs/WindowGetSelection/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Selection? GetSelection() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorSerial/NavigatorSerial.generated.xml' path='docs/NavigatorSerial/*'/>
	public Serial Serial { get; }
}

///<include file='Utils/Docs/WorkerNavigator/WorkerNavigator.generated.xml' path='docs/WorkerNavigator/*'/>
public partial class WorkerNavigator
{
	///<include file='Utils/Docs/WorkerNavigatorSerial/WorkerNavigatorSerial.generated.xml' path='docs/WorkerNavigatorSerial/*'/>
	public Serial Serial { get; }
}

///<include file='Utils/Docs/Serial/Serial.generated.xml' path='docs/Serial/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Serial : EventTarget
{
		public EventHandler Onconnect { get; set; }
		public EventHandler Ondisconnect { get; set; }
	///<include file='Utils/Docs/SerialGetPorts/SerialGetPorts.generated.xml' path='docs/SerialGetPorts/*'/>
	public Task<List<SerialPort>> GetPorts() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SerialRequestPort/SerialRequestPort.generated.xml' path='docs/SerialRequestPort/*'/>
	public Task<SerialPort> RequestPort(SerialPortRequestOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SerialPortRequestOptions
{
		public List<SerialPortFilter> Filters;
		public List<BluetoothServiceUUID> AllowedBluetoothServiceClassIds;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SerialPortFilter
{
		public ushort UsbVendorId;
		public ushort UsbProductId;
		public BluetoothServiceUUID BluetoothServiceClassId;
}

///<include file='Utils/Docs/SerialPort/SerialPort.generated.xml' path='docs/SerialPort/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SerialPort : EventTarget
{
		public EventHandler Onconnect { get; set; }
		public EventHandler Ondisconnect { get; set; }
	///<include file='Utils/Docs/SerialPortConnected/SerialPortConnected.generated.xml' path='docs/SerialPortConnected/*'/>
	public bool Connected { get; }
	///<include file='Utils/Docs/SerialPortReadable/SerialPortReadable.generated.xml' path='docs/SerialPortReadable/*'/>
	public ReadableStream Readable { get; }
	///<include file='Utils/Docs/SerialPortWritable/SerialPortWritable.generated.xml' path='docs/SerialPortWritable/*'/>
	public WritableStream Writable { get; }
	///<include file='Utils/Docs/SerialPortGetInfo/SerialPortGetInfo.generated.xml' path='docs/SerialPortGetInfo/*'/>
	public SerialPortInfo GetInfo() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SerialPortOpen/SerialPortOpen.generated.xml' path='docs/SerialPortOpen/*'/>
	public Task<Undefined> Open(SerialOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SerialPortSetSignals/SerialPortSetSignals.generated.xml' path='docs/SerialPortSetSignals/*'/>
	public Task<Undefined> SetSignals(SerialOutputSignals signals) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SerialPortGetSignals/SerialPortGetSignals.generated.xml' path='docs/SerialPortGetSignals/*'/>
	public Task<SerialInputSignals> GetSignals() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SerialPortClose/SerialPortClose.generated.xml' path='docs/SerialPortClose/*'/>
	public Task<Undefined> Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SerialPortForget/SerialPortForget.generated.xml' path='docs/SerialPortForget/*'/>
	public Task<Undefined> Forget() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SerialPortInfo
{
		public ushort UsbVendorId;
		public ushort UsbProductId;
		public BluetoothServiceUUID BluetoothServiceClassId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SerialOptions
{
		public required ulong BaudRate;
		public byte DataBits;
		public byte StopBits;
		public ParityType Parity;
		public ulong BufferSize;
		public FlowControlType FlowControl;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SerialOutputSignals
{
		public bool DataTerminalReady;
		public bool RequestToSend;
		public bool Break;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SerialInputSignals
{
		public required bool DataCarrierDetect;
		public required bool ClearToSend;
		public required bool RingIndicator;
		public required bool DataSetReady;
}

///<include file='Utils/Docs/PerformanceServerTiming/PerformanceServerTiming.generated.xml' path='docs/PerformanceServerTiming/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceServerTiming
{
	///<include file='Utils/Docs/PerformanceServerTimingName/PerformanceServerTimingName.generated.xml' path='docs/PerformanceServerTimingName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/PerformanceServerTimingDuration/PerformanceServerTimingDuration.generated.xml' path='docs/PerformanceServerTimingDuration/*'/>
	public DOMHighResTimeStamp Duration { get; }
	///<include file='Utils/Docs/PerformanceServerTimingDescription/PerformanceServerTimingDescription.generated.xml' path='docs/PerformanceServerTimingDescription/*'/>
	public DOMString Description { get; }
	///<include file='Utils/Docs/PerformanceServerTimingToJSON/PerformanceServerTimingToJSON.generated.xml' path='docs/PerformanceServerTimingToJSON/*'/>
	public Object ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PerformanceResourceTiming/PerformanceResourceTiming.generated.xml' path='docs/PerformanceResourceTiming/*'/>
public partial class PerformanceResourceTiming
{
	///<include file='Utils/Docs/PerformanceResourceTimingServerTiming/PerformanceResourceTimingServerTiming.generated.xml' path='docs/PerformanceResourceTimingServerTiming/*'/>
	public PerformanceServerTiming[] ServerTiming { get; }
}

///<include file='Utils/Docs/ServiceWorker/ServiceWorker.generated.xml' path='docs/ServiceWorker/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ServiceWorker : EventTarget, AbstractWorker
{
	///<include file='Utils/Docs/ServiceWorkerScriptURL/ServiceWorkerScriptURL.generated.xml' path='docs/ServiceWorkerScriptURL/*'/>
	public USVString ScriptURL { get; }
	///<include file='Utils/Docs/ServiceWorkerState/ServiceWorkerState.generated.xml' path='docs/ServiceWorkerState/*'/>
	public ServiceWorkerState State { get; }
	///<include file='Utils/Docs/ServiceWorkerPostMessage/ServiceWorkerPostMessage.generated.xml' path='docs/ServiceWorkerPostMessage/*'/>
	public Undefined PostMessage(dynamic message, List<Object> transfer) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ServiceWorkerPostMessage/ServiceWorkerPostMessage.generated.xml' path='docs/ServiceWorkerPostMessage/*'/>
	public Undefined PostMessage(dynamic message, StructuredSerializeOptions options) { throw new System.NotImplementedException(); }
		public EventHandler Onstatechange { get; set; }
}


///<include file='Utils/Docs/ServiceWorkerRegistration/ServiceWorkerRegistration.generated.xml' path='docs/ServiceWorkerRegistration/*'/>
public partial class ServiceWorkerRegistration : EventTarget
{
	///<include file='Utils/Docs/ServiceWorkerRegistrationInstalling/ServiceWorkerRegistrationInstalling.generated.xml' path='docs/ServiceWorkerRegistrationInstalling/*'/>
	public ServiceWorker? Installing { get; }
	///<include file='Utils/Docs/ServiceWorkerRegistrationWaiting/ServiceWorkerRegistrationWaiting.generated.xml' path='docs/ServiceWorkerRegistrationWaiting/*'/>
	public ServiceWorker? Waiting { get; }
	///<include file='Utils/Docs/ServiceWorkerRegistrationActive/ServiceWorkerRegistrationActive.generated.xml' path='docs/ServiceWorkerRegistrationActive/*'/>
	public ServiceWorker? Active { get; }
	///<include file='Utils/Docs/ServiceWorkerRegistrationNavigationPreload/ServiceWorkerRegistrationNavigationPreload.generated.xml' path='docs/ServiceWorkerRegistrationNavigationPreload/*'/>
	public NavigationPreloadManager NavigationPreload { get; }
	///<include file='Utils/Docs/ServiceWorkerRegistrationScope/ServiceWorkerRegistrationScope.generated.xml' path='docs/ServiceWorkerRegistrationScope/*'/>
	public USVString Scope { get; }
	///<include file='Utils/Docs/ServiceWorkerRegistrationUpdateViaCache/ServiceWorkerRegistrationUpdateViaCache.generated.xml' path='docs/ServiceWorkerRegistrationUpdateViaCache/*'/>
	public ServiceWorkerUpdateViaCache UpdateViaCache { get; }
	///<include file='Utils/Docs/ServiceWorkerRegistrationUpdate/ServiceWorkerRegistrationUpdate.generated.xml' path='docs/ServiceWorkerRegistrationUpdate/*'/>
	public Task<Undefined> Update() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ServiceWorkerRegistrationUnregister/ServiceWorkerRegistrationUnregister.generated.xml' path='docs/ServiceWorkerRegistrationUnregister/*'/>
	public Task<bool> Unregister() { throw new System.NotImplementedException(); }
		public EventHandler Onupdatefound { get; set; }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorServiceWorker/NavigatorServiceWorker.generated.xml' path='docs/NavigatorServiceWorker/*'/>
	public ServiceWorkerContainer ServiceWorker { get; }
}

///<include file='Utils/Docs/WorkerNavigator/WorkerNavigator.generated.xml' path='docs/WorkerNavigator/*'/>
public partial class WorkerNavigator
{
	///<include file='Utils/Docs/WorkerNavigatorServiceWorker/WorkerNavigatorServiceWorker.generated.xml' path='docs/WorkerNavigatorServiceWorker/*'/>
	public ServiceWorkerContainer ServiceWorker { get; }
}

///<include file='Utils/Docs/ServiceWorkerContainer/ServiceWorkerContainer.generated.xml' path='docs/ServiceWorkerContainer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ServiceWorkerContainer : EventTarget
{
	///<include file='Utils/Docs/ServiceWorkerContainerController/ServiceWorkerContainerController.generated.xml' path='docs/ServiceWorkerContainerController/*'/>
	public ServiceWorker? Controller { get; }
	///<include file='Utils/Docs/ServiceWorkerContainerReady/ServiceWorkerContainerReady.generated.xml' path='docs/ServiceWorkerContainerReady/*'/>
	public Task<ServiceWorkerRegistration> Ready { get; }
	///<include file='Utils/Docs/ServiceWorkerContainerRegister/ServiceWorkerContainerRegister.generated.xml' path='docs/ServiceWorkerContainerRegister/*'/>
	public Task<ServiceWorkerRegistration> Register(Union137 scriptURL, RegistrationOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ServiceWorkerContainerGetRegistration/ServiceWorkerContainerGetRegistration.generated.xml' path='docs/ServiceWorkerContainerGetRegistration/*'/>
	public Task<ServiceWorkerRegistration> GetRegistration(USVString clientURL) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ServiceWorkerContainerGetRegistrations/ServiceWorkerContainerGetRegistrations.generated.xml' path='docs/ServiceWorkerContainerGetRegistrations/*'/>
	public Task<ServiceWorkerRegistration[]> GetRegistrations() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ServiceWorkerContainerStartMessages/ServiceWorkerContainerStartMessages.generated.xml' path='docs/ServiceWorkerContainerStartMessages/*'/>
	public Undefined StartMessages() { throw new System.NotImplementedException(); }
		public EventHandler Oncontrollerchange { get; set; }
		public EventHandler Onmessage { get; set; }
		public EventHandler Onmessageerror { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RegistrationOptions
{
		public USVString Scope;
		public WorkerType Type;
		public ServiceWorkerUpdateViaCache UpdateViaCache;
}

///<include file='Utils/Docs/NavigationPreloadManager/NavigationPreloadManager.generated.xml' path='docs/NavigationPreloadManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationPreloadManager
{
	///<include file='Utils/Docs/NavigationPreloadManagerEnable/NavigationPreloadManagerEnable.generated.xml' path='docs/NavigationPreloadManagerEnable/*'/>
	public Task<Undefined> Enable() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigationPreloadManagerDisable/NavigationPreloadManagerDisable.generated.xml' path='docs/NavigationPreloadManagerDisable/*'/>
	public Task<Undefined> Disable() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigationPreloadManagerSetHeaderValue/NavigationPreloadManagerSetHeaderValue.generated.xml' path='docs/NavigationPreloadManagerSetHeaderValue/*'/>
	public Task<Undefined> SetHeaderValue(ByteString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigationPreloadManagerGetState/NavigationPreloadManagerGetState.generated.xml' path='docs/NavigationPreloadManagerGetState/*'/>
	public Task<NavigationPreloadState> GetState() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigationPreloadState
{
		public bool Enabled;
		public ByteString HeaderValue;
}

///<include file='Utils/Docs/ServiceWorkerGlobalScope/ServiceWorkerGlobalScope.generated.xml' path='docs/ServiceWorkerGlobalScope/*'/>
public partial class ServiceWorkerGlobalScope : WorkerGlobalScope
{
	///<include file='Utils/Docs/ServiceWorkerGlobalScopeClients/ServiceWorkerGlobalScopeClients.generated.xml' path='docs/ServiceWorkerGlobalScopeClients/*'/>
	public Clients Clients { get; }
	///<include file='Utils/Docs/ServiceWorkerGlobalScopeRegistration/ServiceWorkerGlobalScopeRegistration.generated.xml' path='docs/ServiceWorkerGlobalScopeRegistration/*'/>
	public ServiceWorkerRegistration Registration { get; }
	///<include file='Utils/Docs/ServiceWorkerGlobalScopeServiceWorker/ServiceWorkerGlobalScopeServiceWorker.generated.xml' path='docs/ServiceWorkerGlobalScopeServiceWorker/*'/>
	public ServiceWorker ServiceWorker { get; }
	///<include file='Utils/Docs/ServiceWorkerGlobalScopeSkipWaiting/ServiceWorkerGlobalScopeSkipWaiting.generated.xml' path='docs/ServiceWorkerGlobalScopeSkipWaiting/*'/>
	public Task<Undefined> SkipWaiting() { throw new System.NotImplementedException(); }
		public EventHandler Oninstall { get; set; }
		public EventHandler Onactivate { get; set; }
		public EventHandler Onfetch { get; set; }
		public EventHandler Onmessage { get; set; }
		public EventHandler Onmessageerror { get; set; }
}

///<include file='Utils/Docs/Client/Client.generated.xml' path='docs/Client/*'/>
public partial class Client
{
	///<include file='Utils/Docs/ClientUrl/ClientUrl.generated.xml' path='docs/ClientUrl/*'/>
	public USVString Url { get; }
	///<include file='Utils/Docs/ClientFrameType/ClientFrameType.generated.xml' path='docs/ClientFrameType/*'/>
	public FrameType FrameType { get; }
	///<include file='Utils/Docs/ClientId/ClientId.generated.xml' path='docs/ClientId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/ClientType/ClientType.generated.xml' path='docs/ClientType/*'/>
	public ClientType Type { get; }
	///<include file='Utils/Docs/ClientPostMessage/ClientPostMessage.generated.xml' path='docs/ClientPostMessage/*'/>
	public Undefined PostMessage(dynamic message, List<Object> transfer) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ClientPostMessage/ClientPostMessage.generated.xml' path='docs/ClientPostMessage/*'/>
	public Undefined PostMessage(dynamic message, StructuredSerializeOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/WindowClient/WindowClient.generated.xml' path='docs/WindowClient/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WindowClient : Client
{
	///<include file='Utils/Docs/WindowClientVisibilityState/WindowClientVisibilityState.generated.xml' path='docs/WindowClientVisibilityState/*'/>
	public DocumentVisibilityState VisibilityState { get; }
	///<include file='Utils/Docs/WindowClientFocused/WindowClientFocused.generated.xml' path='docs/WindowClientFocused/*'/>
	public bool Focused { get; }
	///<include file='Utils/Docs/WindowClientAncestorOrigins/WindowClientAncestorOrigins.generated.xml' path='docs/WindowClientAncestorOrigins/*'/>
	public USVString[] AncestorOrigins { get; }
	///<include file='Utils/Docs/WindowClientFocus/WindowClientFocus.generated.xml' path='docs/WindowClientFocus/*'/>
	public Task<WindowClient> Focus() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WindowClientNavigate/WindowClientNavigate.generated.xml' path='docs/WindowClientNavigate/*'/>
	public Task<WindowClient?> Navigate(USVString url) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Clients/Clients.generated.xml' path='docs/Clients/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Clients
{
	///<include file='Utils/Docs/ClientsGet/ClientsGet.generated.xml' path='docs/ClientsGet/*'/>
	public Task<Client> Get(DOMString id) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ClientsMatchAll/ClientsMatchAll.generated.xml' path='docs/ClientsMatchAll/*'/>
	public Task<Client[]> MatchAll(ClientQueryOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ClientsOpenWindow/ClientsOpenWindow.generated.xml' path='docs/ClientsOpenWindow/*'/>
	public Task<WindowClient?> OpenWindow(USVString url) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ClientsClaim/ClientsClaim.generated.xml' path='docs/ClientsClaim/*'/>
	public Task<Undefined> Claim() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ClientQueryOptions
{
		public bool IncludeUncontrolled;
		public ClientType Type;
}

///<include file='Utils/Docs/ExtendableEvent/ExtendableEvent.generated.xml' path='docs/ExtendableEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ExtendableEvent : Event
{
	///<include file='Utils/Docs/ExtendableEventExtendableEvent/ExtendableEventExtendableEvent.generated.xml' path='docs/ExtendableEventExtendableEvent/*'/>
	public ExtendableEvent(DOMString type, ExtendableEventInit eventInitDict) { }
	///<include file='Utils/Docs/ExtendableEventWaitUntil/ExtendableEventWaitUntil.generated.xml' path='docs/ExtendableEventWaitUntil/*'/>
	public Undefined WaitUntil(Task<dynamic> f) { throw new System.NotImplementedException(); }
	public ExtendableEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ExtendableEventInit : EventInit
{
}

///<include file='Utils/Docs/InstallEvent/InstallEvent.generated.xml' path='docs/InstallEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class InstallEvent : ExtendableEvent
{
	///<include file='Utils/Docs/InstallEventInstallEvent/InstallEventInstallEvent.generated.xml' path='docs/InstallEventInstallEvent/*'/>
	public InstallEvent(DOMString type, ExtendableEventInit eventInitDict) { }
	///<include file='Utils/Docs/InstallEventAddRoutes/InstallEventAddRoutes.generated.xml' path='docs/InstallEventAddRoutes/*'/>
	public Task<Undefined> AddRoutes(Union138 rules) { throw new System.NotImplementedException(); }
	public InstallEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RouterRule
{
		public required RouterCondition Condition;
		public required RouterSource Source;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RouterCondition
{
		public URLPatternCompatible UrlPattern;
		public ByteString RequestMethod;
		public RequestMode RequestMode;
		public RequestDestination RequestDestination;
		public RunningStatus RunningStatus;
		public List<RouterCondition> Or;
		public RouterCondition Not;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class RouterSourceDict
{
		public DOMString CacheName;
}

///<include file='Utils/Docs/FetchEvent/FetchEvent.generated.xml' path='docs/FetchEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FetchEvent : ExtendableEvent
{
	///<include file='Utils/Docs/FetchEventFetchEvent/FetchEventFetchEvent.generated.xml' path='docs/FetchEventFetchEvent/*'/>
	public FetchEvent(DOMString type, FetchEventInit eventInitDict) { }
	///<include file='Utils/Docs/FetchEventRequest/FetchEventRequest.generated.xml' path='docs/FetchEventRequest/*'/>
	public Request Request { get; }
	///<include file='Utils/Docs/FetchEventPreloadResponse/FetchEventPreloadResponse.generated.xml' path='docs/FetchEventPreloadResponse/*'/>
	public Task<dynamic> PreloadResponse { get; }
	///<include file='Utils/Docs/FetchEventClientId/FetchEventClientId.generated.xml' path='docs/FetchEventClientId/*'/>
	public DOMString ClientId { get; }
	///<include file='Utils/Docs/FetchEventResultingClientId/FetchEventResultingClientId.generated.xml' path='docs/FetchEventResultingClientId/*'/>
	public DOMString ResultingClientId { get; }
	///<include file='Utils/Docs/FetchEventReplacesClientId/FetchEventReplacesClientId.generated.xml' path='docs/FetchEventReplacesClientId/*'/>
	public DOMString ReplacesClientId { get; }
	///<include file='Utils/Docs/FetchEventHandled/FetchEventHandled.generated.xml' path='docs/FetchEventHandled/*'/>
	public Task<Undefined> Handled { get; }
	///<include file='Utils/Docs/FetchEventRespondWith/FetchEventRespondWith.generated.xml' path='docs/FetchEventRespondWith/*'/>
	public Undefined RespondWith(Task<Response> r) { throw new System.NotImplementedException(); }
	public FetchEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FetchEventInit : ExtendableEventInit
{
		public required Request Request;
		public Task<dynamic> PreloadResponse;
		public DOMString ClientId;
		public DOMString ResultingClientId;
		public DOMString ReplacesClientId;
		public Task<Undefined> Handled;
}

///<include file='Utils/Docs/ExtendableMessageEvent/ExtendableMessageEvent.generated.xml' path='docs/ExtendableMessageEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ExtendableMessageEvent : ExtendableEvent
{
	///<include file='Utils/Docs/ExtendableMessageEventExtendableMessageEvent/ExtendableMessageEventExtendableMessageEvent.generated.xml' path='docs/ExtendableMessageEventExtendableMessageEvent/*'/>
	public ExtendableMessageEvent(DOMString type, ExtendableMessageEventInit eventInitDict) { }
	///<include file='Utils/Docs/ExtendableMessageEventData/ExtendableMessageEventData.generated.xml' path='docs/ExtendableMessageEventData/*'/>
	public dynamic Data { get; }
	///<include file='Utils/Docs/ExtendableMessageEventOrigin/ExtendableMessageEventOrigin.generated.xml' path='docs/ExtendableMessageEventOrigin/*'/>
	public USVString Origin { get; }
	///<include file='Utils/Docs/ExtendableMessageEventLastEventId/ExtendableMessageEventLastEventId.generated.xml' path='docs/ExtendableMessageEventLastEventId/*'/>
	public DOMString LastEventId { get; }
	///<include file='Utils/Docs/ExtendableMessageEventSource/ExtendableMessageEventSource.generated.xml' path='docs/ExtendableMessageEventSource/*'/>
	public Union140? Source { get; }
	///<include file='Utils/Docs/ExtendableMessageEventPorts/ExtendableMessageEventPorts.generated.xml' path='docs/ExtendableMessageEventPorts/*'/>
	public MessagePort[] Ports { get; }
	public ExtendableMessageEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ExtendableMessageEventInit : ExtendableEventInit
{
		public dynamic Data;
		public USVString Origin;
		public DOMString LastEventId;
		public Union141? Source;
		public List<MessagePort> Ports;
}

///<include file='Utils/Docs/Cache/Cache.generated.xml' path='docs/Cache/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Cache
{
	///<include file='Utils/Docs/CacheMatch/CacheMatch.generated.xml' path='docs/CacheMatch/*'/>
	public Task<Response> Match(RequestInfo request, CacheQueryOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CacheMatchAll/CacheMatchAll.generated.xml' path='docs/CacheMatchAll/*'/>
	public Task<Response[]> MatchAll(RequestInfo request, CacheQueryOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CacheAdd/CacheAdd.generated.xml' path='docs/CacheAdd/*'/>
	public Task<Undefined> Add(RequestInfo request) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CacheAddAll/CacheAddAll.generated.xml' path='docs/CacheAddAll/*'/>
	public Task<Undefined> AddAll(List<RequestInfo> requests) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CachePut/CachePut.generated.xml' path='docs/CachePut/*'/>
	public Task<Undefined> Put(RequestInfo request, Response response) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CacheDelete/CacheDelete.generated.xml' path='docs/CacheDelete/*'/>
	public Task<bool> Delete(RequestInfo request, CacheQueryOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CacheKeys/CacheKeys.generated.xml' path='docs/CacheKeys/*'/>
	public Task<Request[]> Keys(RequestInfo request, CacheQueryOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CacheQueryOptions
{
		public bool IgnoreSearch;
		public bool IgnoreMethod;
		public bool IgnoreVary;
}

///<include file='Utils/Docs/CacheStorage/CacheStorage.generated.xml' path='docs/CacheStorage/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CacheStorage
{
	///<include file='Utils/Docs/CacheStorageMatch/CacheStorageMatch.generated.xml' path='docs/CacheStorageMatch/*'/>
	public Task<Response> Match(RequestInfo request, MultiCacheQueryOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CacheStorageHas/CacheStorageHas.generated.xml' path='docs/CacheStorageHas/*'/>
	public Task<bool> Has(DOMString cacheName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CacheStorageOpen/CacheStorageOpen.generated.xml' path='docs/CacheStorageOpen/*'/>
	public Task<Cache> Open(DOMString cacheName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CacheStorageDelete/CacheStorageDelete.generated.xml' path='docs/CacheStorageDelete/*'/>
	public Task<bool> Delete(DOMString cacheName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CacheStorageKeys/CacheStorageKeys.generated.xml' path='docs/CacheStorageKeys/*'/>
	public Task<List<DOMString>> Keys() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MultiCacheQueryOptions : CacheQueryOptions
{
		public DOMString CacheName;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FaceDetector
{
		public FaceDetector(FaceDetectorOptions faceDetectorOptions) { }
		public Task<List<DetectedFace>> Detect(ImageBitmapSource image) { throw new System.NotImplementedException(); }
	public FaceDetector() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FaceDetectorOptions
{
		public ushort MaxDetectedFaces;
		public bool FastMode;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DetectedFace
{
		public required DOMRectReadOnly BoundingBox;
		public required List<Landmark>? Landmarks;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Landmark
{
		public required List<Point2D> Locations;
		public LandmarkType Type;
}

///<include file='Utils/Docs/BarcodeDetector/BarcodeDetector.generated.xml' path='docs/BarcodeDetector/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BarcodeDetector
{
	///<include file='Utils/Docs/BarcodeDetectorBarcodeDetector/BarcodeDetectorBarcodeDetector.generated.xml' path='docs/BarcodeDetectorBarcodeDetector/*'/>
	public BarcodeDetector(BarcodeDetectorOptions barcodeDetectorOptions) { }
	///<include file='Utils/Docs/BarcodeDetectorGetSupportedFormats/BarcodeDetectorGetSupportedFormats.generated.xml' path='docs/BarcodeDetectorGetSupportedFormats/*'/>
	public static Task<List<BarcodeFormat>> GetSupportedFormats() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BarcodeDetectorDetect/BarcodeDetectorDetect.generated.xml' path='docs/BarcodeDetectorDetect/*'/>
	public Task<List<DetectedBarcode>> Detect(ImageBitmapSource image) { throw new System.NotImplementedException(); }
	public BarcodeDetector() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BarcodeDetectorOptions
{
		public List<BarcodeFormat> Formats;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DetectedBarcode
{
		public required DOMRectReadOnly BoundingBox;
		public required DOMString RawValue;
		public required BarcodeFormat Format;
		public required List<Point2D> CornerPoints;
}

///<include file='Utils/Docs/SharedStorageWorklet/SharedStorageWorklet.generated.xml' path='docs/SharedStorageWorklet/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageWorklet : Worklet
{
		public Task<SharedStorageResponse> SelectURL(DOMString name, List<SharedStorageUrlWithMetadata> urls, SharedStorageRunOperationMethodOptions options) { throw new System.NotImplementedException(); }
		public Task<dynamic> Run(DOMString name, SharedStorageRunOperationMethodOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SharedStorageWorkletGlobalScope/SharedStorageWorkletGlobalScope.generated.xml' path='docs/SharedStorageWorkletGlobalScope/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageWorkletGlobalScope : WorkletGlobalScope
{
	///<include file='Utils/Docs/SharedStorageWorkletGlobalScopeRegister/SharedStorageWorkletGlobalScopeRegister.generated.xml' path='docs/SharedStorageWorkletGlobalScopeRegister/*'/>
	public Undefined Register(DOMString name, Function operationCtor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SharedStorageWorkletGlobalScopeSharedStorage/SharedStorageWorkletGlobalScopeSharedStorage.generated.xml' path='docs/SharedStorageWorkletGlobalScopeSharedStorage/*'/>
	public SharedStorage SharedStorage { get; }
		public PrivateAggregation PrivateAggregation { get; }
		public Task<List<StorageInterestGroup>> InterestGroups() { throw new System.NotImplementedException(); }
		public SharedStorageWorkletNavigator Navigator { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageUrlWithMetadata
{
		public required USVString Url;
		public Object ReportingMetadata;
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowSharedStorage/WindowSharedStorage.generated.xml' path='docs/WindowSharedStorage/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public SharedStorage? SharedStorage { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageModifierMethod
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageSetMethod : SharedStorageModifierMethod
{
		public SharedStorageSetMethod(DOMString key, DOMString value, SharedStorageSetMethodOptions options) { }
	public SharedStorageSetMethod() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageAppendMethod : SharedStorageModifierMethod
{
		public SharedStorageAppendMethod(DOMString key, DOMString value, SharedStorageModifierMethodOptions options) { }
	public SharedStorageAppendMethod() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageDeleteMethod : SharedStorageModifierMethod
{
		public SharedStorageDeleteMethod(DOMString key, SharedStorageModifierMethodOptions options) { }
	public SharedStorageDeleteMethod() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageClearMethod : SharedStorageModifierMethod
{
		public SharedStorageClearMethod(SharedStorageModifierMethodOptions options) { }
	public SharedStorageClearMethod() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageModifierMethodOptions
{
		public DOMString WithLock;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageSetMethodOptions : SharedStorageModifierMethodOptions
{
		public bool IgnoreIfPresent;
}

///<include file='Utils/Docs/SharedStorage/SharedStorage.generated.xml' path='docs/SharedStorage/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorage
{
	///<include file='Utils/Docs/SharedStorageSet/SharedStorageSet.generated.xml' path='docs/SharedStorageSet/*'/>
	public Task<dynamic> Set(DOMString key, DOMString value, SharedStorageSetMethodOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SharedStorageAppend/SharedStorageAppend.generated.xml' path='docs/SharedStorageAppend/*'/>
	public Task<dynamic> Append(DOMString key, DOMString value, SharedStorageModifierMethodOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SharedStorageDelete/SharedStorageDelete.generated.xml' path='docs/SharedStorageDelete/*'/>
	public Task<dynamic> Delete(DOMString key, SharedStorageModifierMethodOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SharedStorageClear/SharedStorageClear.generated.xml' path='docs/SharedStorageClear/*'/>
	public Task<dynamic> Clear(SharedStorageModifierMethodOptions options) { throw new System.NotImplementedException(); }
		public Task<dynamic> BatchUpdate(List<SharedStorageModifierMethod> methods, SharedStorageModifierMethodOptions options) { throw new System.NotImplementedException(); }
		public Task<SharedStorageResponse> SelectURL(DOMString name, List<SharedStorageUrlWithMetadata> urls, SharedStorageRunOperationMethodOptions options) { throw new System.NotImplementedException(); }
		public Task<dynamic> Run(DOMString name, SharedStorageRunOperationMethodOptions options) { throw new System.NotImplementedException(); }
		public Task<SharedStorageWorklet> CreateWorklet(USVString moduleURL, SharedStorageWorkletOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SharedStorageWorklet/SharedStorageWorklet.generated.xml' path='docs/SharedStorageWorklet/*'/>
	public SharedStorageWorklet Worklet { get; }
		public Task<DOMString> Get(DOMString key) { throw new System.NotImplementedException(); }
		public Task<ulong> Length() { throw new System.NotImplementedException(); }
		public Task<Number> RemainingBudget() { throw new System.NotImplementedException(); }
	public DOMString this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStoragePrivateAggregationConfig
{
		public USVString AggregationCoordinatorOrigin;
		public USVString ContextId;
		public ulong FilteringIdMaxBytes;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageRunOperationMethodOptions
{
		public Object Data;
		public bool ResolveToConfig;
		public bool KeepAlive;
		public SharedStoragePrivateAggregationConfig PrivateAggregationConfig;
		public DOMString SavedQuery;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageWorkletOptions : WorkletOptions
{
		public USVString DataOrigin;
}

///<include file='Utils/Docs/RequestInit/RequestInit.generated.xml' path='docs/RequestInit/*'/>
public partial class RequestInit
{
		public bool SharedStorageWritable;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SharedStorageWorkletNavigator
{
}


///<include file='Utils/Docs/SpeechRecognition/SpeechRecognition.generated.xml' path='docs/SpeechRecognition/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechRecognition : EventTarget
{
	///<include file='Utils/Docs/SpeechRecognitionSpeechRecognition/SpeechRecognitionSpeechRecognition.generated.xml' path='docs/SpeechRecognitionSpeechRecognition/*'/>
	public SpeechRecognition() { }
	///<include file='Utils/Docs/SpeechRecognitionGrammars/SpeechRecognitionGrammars.generated.xml' path='docs/SpeechRecognitionGrammars/*'/>
	public SpeechGrammarList Grammars { get; set; }
	///<include file='Utils/Docs/SpeechRecognitionLang/SpeechRecognitionLang.generated.xml' path='docs/SpeechRecognitionLang/*'/>
	public DOMString Lang { get; set; }
	///<include file='Utils/Docs/SpeechRecognitionContinuous/SpeechRecognitionContinuous.generated.xml' path='docs/SpeechRecognitionContinuous/*'/>
	public bool Continuous { get; set; }
	///<include file='Utils/Docs/SpeechRecognitionInterimResults/SpeechRecognitionInterimResults.generated.xml' path='docs/SpeechRecognitionInterimResults/*'/>
	public bool InterimResults { get; set; }
	///<include file='Utils/Docs/SpeechRecognitionMaxAlternatives/SpeechRecognitionMaxAlternatives.generated.xml' path='docs/SpeechRecognitionMaxAlternatives/*'/>
	public ulong MaxAlternatives { get; set; }
	///<include file='Utils/Docs/SpeechRecognitionStart/SpeechRecognitionStart.generated.xml' path='docs/SpeechRecognitionStart/*'/>
	public Undefined Start() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SpeechRecognitionStop/SpeechRecognitionStop.generated.xml' path='docs/SpeechRecognitionStop/*'/>
	public Undefined Stop() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SpeechRecognitionAbort/SpeechRecognitionAbort.generated.xml' path='docs/SpeechRecognitionAbort/*'/>
	public Undefined Abort() { throw new System.NotImplementedException(); }
		public EventHandler Onaudiostart { get; set; }
		public EventHandler Onsoundstart { get; set; }
		public EventHandler Onspeechstart { get; set; }
		public EventHandler Onspeechend { get; set; }
		public EventHandler Onsoundend { get; set; }
		public EventHandler Onaudioend { get; set; }
		public EventHandler Onresult { get; set; }
		public EventHandler Onnomatch { get; set; }
		public EventHandler Onerror { get; set; }
		public EventHandler Onstart { get; set; }
		public EventHandler Onend { get; set; }
}

///<include file='Utils/Docs/SpeechRecognitionErrorEvent/SpeechRecognitionErrorEvent.generated.xml' path='docs/SpeechRecognitionErrorEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechRecognitionErrorEvent : Event
{
		public SpeechRecognitionErrorEvent(DOMString type, SpeechRecognitionErrorEventInit eventInitDict) { }
	///<include file='Utils/Docs/SpeechRecognitionErrorEventError/SpeechRecognitionErrorEventError.generated.xml' path='docs/SpeechRecognitionErrorEventError/*'/>
	public SpeechRecognitionErrorCode Error { get; }
	///<include file='Utils/Docs/SpeechRecognitionErrorEventMessage/SpeechRecognitionErrorEventMessage.generated.xml' path='docs/SpeechRecognitionErrorEventMessage/*'/>
	public DOMString Message { get; }
	public SpeechRecognitionErrorEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechRecognitionErrorEventInit : EventInit
{
		public required SpeechRecognitionErrorCode Error;
		public DOMString Message;
}

///<include file='Utils/Docs/SpeechRecognitionAlternative/SpeechRecognitionAlternative.generated.xml' path='docs/SpeechRecognitionAlternative/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechRecognitionAlternative
{
	///<include file='Utils/Docs/SpeechRecognitionAlternativeTranscript/SpeechRecognitionAlternativeTranscript.generated.xml' path='docs/SpeechRecognitionAlternativeTranscript/*'/>
	public DOMString Transcript { get; }
	///<include file='Utils/Docs/SpeechRecognitionAlternativeConfidence/SpeechRecognitionAlternativeConfidence.generated.xml' path='docs/SpeechRecognitionAlternativeConfidence/*'/>
	public Number Confidence { get; }
}

///<include file='Utils/Docs/SpeechRecognitionResult/SpeechRecognitionResult.generated.xml' path='docs/SpeechRecognitionResult/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechRecognitionResult
{
	///<include file='Utils/Docs/SpeechRecognitionResultLength/SpeechRecognitionResultLength.generated.xml' path='docs/SpeechRecognitionResultLength/*'/>
	public ulong Length { get; }
	
	///<include file='Utils/Docs/SpeechRecognitionResultIsFinal/SpeechRecognitionResultIsFinal.generated.xml' path='docs/SpeechRecognitionResultIsFinal/*'/>
	public bool IsFinal { get; }
}

///<include file='Utils/Docs/SpeechRecognitionResultList/SpeechRecognitionResultList.generated.xml' path='docs/SpeechRecognitionResultList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechRecognitionResultList
{
	///<include file='Utils/Docs/SpeechRecognitionResultListLength/SpeechRecognitionResultListLength.generated.xml' path='docs/SpeechRecognitionResultListLength/*'/>
	public ulong Length { get; }
	
}

///<include file='Utils/Docs/SpeechRecognitionEvent/SpeechRecognitionEvent.generated.xml' path='docs/SpeechRecognitionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechRecognitionEvent : Event
{
		public SpeechRecognitionEvent(DOMString type, SpeechRecognitionEventInit eventInitDict) { }
	///<include file='Utils/Docs/SpeechRecognitionEventResultIndex/SpeechRecognitionEventResultIndex.generated.xml' path='docs/SpeechRecognitionEventResultIndex/*'/>
	public ulong ResultIndex { get; }
	///<include file='Utils/Docs/SpeechRecognitionEventResults/SpeechRecognitionEventResults.generated.xml' path='docs/SpeechRecognitionEventResults/*'/>
	public SpeechRecognitionResultList Results { get; }
	public SpeechRecognitionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechRecognitionEventInit : EventInit
{
		public ulong ResultIndex;
		public required SpeechRecognitionResultList Results;
}

///<include file='Utils/Docs/SpeechGrammar/SpeechGrammar.generated.xml' path='docs/SpeechGrammar/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechGrammar
{
	///<include file='Utils/Docs/SpeechGrammarSrc/SpeechGrammarSrc.generated.xml' path='docs/SpeechGrammarSrc/*'/>
	public DOMString Src { get; set; }
	///<include file='Utils/Docs/SpeechGrammarWeight/SpeechGrammarWeight.generated.xml' path='docs/SpeechGrammarWeight/*'/>
	public Number Weight { get; set; }
}

///<include file='Utils/Docs/SpeechGrammarList/SpeechGrammarList.generated.xml' path='docs/SpeechGrammarList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechGrammarList
{
	///<include file='Utils/Docs/SpeechGrammarListSpeechGrammarList/SpeechGrammarListSpeechGrammarList.generated.xml' path='docs/SpeechGrammarListSpeechGrammarList/*'/>
	public SpeechGrammarList() { }
	///<include file='Utils/Docs/SpeechGrammarListLength/SpeechGrammarListLength.generated.xml' path='docs/SpeechGrammarListLength/*'/>
	public ulong Length { get; }
	
	///<include file='Utils/Docs/SpeechGrammarListAddFromURI/SpeechGrammarListAddFromURI.generated.xml' path='docs/SpeechGrammarListAddFromURI/*'/>
	public Undefined AddFromURI(DOMString src, Number weight) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SpeechGrammarListAddFromString/SpeechGrammarListAddFromString.generated.xml' path='docs/SpeechGrammarListAddFromString/*'/>
	public Undefined AddFromString(DOMString string_, Number weight) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SpeechSynthesis/SpeechSynthesis.generated.xml' path='docs/SpeechSynthesis/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechSynthesis : EventTarget
{
	///<include file='Utils/Docs/SpeechSynthesisPending/SpeechSynthesisPending.generated.xml' path='docs/SpeechSynthesisPending/*'/>
	public bool Pending { get; }
	///<include file='Utils/Docs/SpeechSynthesisSpeaking/SpeechSynthesisSpeaking.generated.xml' path='docs/SpeechSynthesisSpeaking/*'/>
	public bool Speaking { get; }
	///<include file='Utils/Docs/SpeechSynthesisPaused/SpeechSynthesisPaused.generated.xml' path='docs/SpeechSynthesisPaused/*'/>
	public bool Paused { get; }
		public EventHandler Onvoiceschanged { get; set; }
	///<include file='Utils/Docs/SpeechSynthesisSpeak/SpeechSynthesisSpeak.generated.xml' path='docs/SpeechSynthesisSpeak/*'/>
	public Undefined Speak(SpeechSynthesisUtterance utterance) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SpeechSynthesisCancel/SpeechSynthesisCancel.generated.xml' path='docs/SpeechSynthesisCancel/*'/>
	public Undefined Cancel() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SpeechSynthesisPause/SpeechSynthesisPause.generated.xml' path='docs/SpeechSynthesisPause/*'/>
	public Undefined Pause() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SpeechSynthesisResume/SpeechSynthesisResume.generated.xml' path='docs/SpeechSynthesisResume/*'/>
	public Undefined Resume() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SpeechSynthesisGetVoices/SpeechSynthesisGetVoices.generated.xml' path='docs/SpeechSynthesisGetVoices/*'/>
	public List<SpeechSynthesisVoice> GetVoices() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowSpeechSynthesis/WindowSpeechSynthesis.generated.xml' path='docs/WindowSpeechSynthesis/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public SpeechSynthesis SpeechSynthesis { get; }
}

///<include file='Utils/Docs/SpeechSynthesisUtterance/SpeechSynthesisUtterance.generated.xml' path='docs/SpeechSynthesisUtterance/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechSynthesisUtterance : EventTarget
{
	///<include file='Utils/Docs/SpeechSynthesisUtteranceSpeechSynthesisUtterance/SpeechSynthesisUtteranceSpeechSynthesisUtterance.generated.xml' path='docs/SpeechSynthesisUtteranceSpeechSynthesisUtterance/*'/>
	public SpeechSynthesisUtterance(DOMString text) { }
	///<include file='Utils/Docs/SpeechSynthesisUtteranceText/SpeechSynthesisUtteranceText.generated.xml' path='docs/SpeechSynthesisUtteranceText/*'/>
	public DOMString Text { get; set; }
	///<include file='Utils/Docs/SpeechSynthesisUtteranceLang/SpeechSynthesisUtteranceLang.generated.xml' path='docs/SpeechSynthesisUtteranceLang/*'/>
	public DOMString Lang { get; set; }
	///<include file='Utils/Docs/SpeechSynthesisUtteranceVoice/SpeechSynthesisUtteranceVoice.generated.xml' path='docs/SpeechSynthesisUtteranceVoice/*'/>
	public SpeechSynthesisVoice? Voice { get; set; }
	///<include file='Utils/Docs/SpeechSynthesisUtteranceVolume/SpeechSynthesisUtteranceVolume.generated.xml' path='docs/SpeechSynthesisUtteranceVolume/*'/>
	public Number Volume { get; set; }
	///<include file='Utils/Docs/SpeechSynthesisUtteranceRate/SpeechSynthesisUtteranceRate.generated.xml' path='docs/SpeechSynthesisUtteranceRate/*'/>
	public Number Rate { get; set; }
	///<include file='Utils/Docs/SpeechSynthesisUtterancePitch/SpeechSynthesisUtterancePitch.generated.xml' path='docs/SpeechSynthesisUtterancePitch/*'/>
	public Number Pitch { get; set; }
		public EventHandler Onstart { get; set; }
		public EventHandler Onend { get; set; }
		public EventHandler Onerror { get; set; }
		public EventHandler Onpause { get; set; }
		public EventHandler Onresume { get; set; }
		public EventHandler Onmark { get; set; }
		public EventHandler Onboundary { get; set; }
	public SpeechSynthesisUtterance() { }
}

///<include file='Utils/Docs/SpeechSynthesisEvent/SpeechSynthesisEvent.generated.xml' path='docs/SpeechSynthesisEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechSynthesisEvent : Event
{
	///<include file='Utils/Docs/SpeechSynthesisEventSpeechSynthesisEvent/SpeechSynthesisEventSpeechSynthesisEvent.generated.xml' path='docs/SpeechSynthesisEventSpeechSynthesisEvent/*'/>
	public SpeechSynthesisEvent(DOMString type, SpeechSynthesisEventInit eventInitDict) { }
	///<include file='Utils/Docs/SpeechSynthesisEventUtterance/SpeechSynthesisEventUtterance.generated.xml' path='docs/SpeechSynthesisEventUtterance/*'/>
	public SpeechSynthesisUtterance Utterance { get; }
	///<include file='Utils/Docs/SpeechSynthesisEventCharIndex/SpeechSynthesisEventCharIndex.generated.xml' path='docs/SpeechSynthesisEventCharIndex/*'/>
	public ulong CharIndex { get; }
	///<include file='Utils/Docs/SpeechSynthesisEventCharLength/SpeechSynthesisEventCharLength.generated.xml' path='docs/SpeechSynthesisEventCharLength/*'/>
	public ulong CharLength { get; }
	///<include file='Utils/Docs/SpeechSynthesisEventElapsedTime/SpeechSynthesisEventElapsedTime.generated.xml' path='docs/SpeechSynthesisEventElapsedTime/*'/>
	public Number ElapsedTime { get; }
	///<include file='Utils/Docs/SpeechSynthesisEventName/SpeechSynthesisEventName.generated.xml' path='docs/SpeechSynthesisEventName/*'/>
	public DOMString Name { get; }
	public SpeechSynthesisEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechSynthesisEventInit : EventInit
{
		public required SpeechSynthesisUtterance Utterance;
		public ulong CharIndex;
		public ulong CharLength;
		public Number ElapsedTime;
		public DOMString Name;
}

///<include file='Utils/Docs/SpeechSynthesisErrorEvent/SpeechSynthesisErrorEvent.generated.xml' path='docs/SpeechSynthesisErrorEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechSynthesisErrorEvent : SpeechSynthesisEvent
{
	///<include file='Utils/Docs/SpeechSynthesisErrorEventSpeechSynthesisErrorEvent/SpeechSynthesisErrorEventSpeechSynthesisErrorEvent.generated.xml' path='docs/SpeechSynthesisErrorEventSpeechSynthesisErrorEvent/*'/>
	public SpeechSynthesisErrorEvent(DOMString type, SpeechSynthesisErrorEventInit eventInitDict) { }
	///<include file='Utils/Docs/SpeechSynthesisErrorEventError/SpeechSynthesisErrorEventError.generated.xml' path='docs/SpeechSynthesisErrorEventError/*'/>
	public SpeechSynthesisErrorCode Error { get; }
	public SpeechSynthesisErrorEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechSynthesisErrorEventInit : SpeechSynthesisEventInit
{
		public required SpeechSynthesisErrorCode Error;
}

///<include file='Utils/Docs/SpeechSynthesisVoice/SpeechSynthesisVoice.generated.xml' path='docs/SpeechSynthesisVoice/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SpeechSynthesisVoice
{
	///<include file='Utils/Docs/SpeechSynthesisVoiceVoiceURI/SpeechSynthesisVoiceVoiceURI.generated.xml' path='docs/SpeechSynthesisVoiceVoiceURI/*'/>
	public DOMString VoiceURI { get; }
	///<include file='Utils/Docs/SpeechSynthesisVoiceName/SpeechSynthesisVoiceName.generated.xml' path='docs/SpeechSynthesisVoiceName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/SpeechSynthesisVoiceLang/SpeechSynthesisVoiceLang.generated.xml' path='docs/SpeechSynthesisVoiceLang/*'/>
	public DOMString Lang { get; }
	///<include file='Utils/Docs/SpeechSynthesisVoiceLocalService/SpeechSynthesisVoiceLocalService.generated.xml' path='docs/SpeechSynthesisVoiceLocalService/*'/>
	public bool LocalService { get; }
	///<include file='Utils/Docs/SpeechSynthesisVoiceDefault/SpeechSynthesisVoiceDefault.generated.xml' path='docs/SpeechSynthesisVoiceDefault/*'/>
	public bool Default { get; }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentHasStorageAccess/DocumentHasStorageAccess.generated.xml' path='docs/DocumentHasStorageAccess/*'/>
	public Task<bool> HasStorageAccess() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/DocumentRequestStorageAccess/DocumentRequestStorageAccess.generated.xml' path='docs/DocumentRequestStorageAccess/*'/>
	public Task<Undefined> RequestStorageAccess() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StorageBucketManager
{
		public Task<StorageBucket> Open(DOMString name, StorageBucketOptions options) { throw new System.NotImplementedException(); }
		public Task<List<DOMString>> Keys() { throw new System.NotImplementedException(); }
		public Task<Undefined> Delete(DOMString name) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StorageBucketOptions
{
		public bool Persisted;
		public ulong Quota;
		public DOMHighResTimeStamp Expires;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StorageBucket
{
		public DOMString Name { get; }
		public Task<bool> Persist() { throw new System.NotImplementedException(); }
		public Task<bool> Persisted() { throw new System.NotImplementedException(); }
		public Task<StorageEstimate> Estimate() { throw new System.NotImplementedException(); }
		public Task<Undefined> SetExpires(DOMHighResTimeStamp expires) { throw new System.NotImplementedException(); }
		public Task<DOMHighResTimeStamp?> Expires() { throw new System.NotImplementedException(); }
		public IDBFactory IndexedDB { get; }
		public CacheStorage Caches { get; }
		public Task<FileSystemDirectoryHandle> GetDirectory() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/StorageManager/StorageManager.generated.xml' path='docs/StorageManager/*'/>
public partial class StorageManager
{
	///<include file='Utils/Docs/StorageManagerPersisted/StorageManagerPersisted.generated.xml' path='docs/StorageManagerPersisted/*'/>
	public Task<bool> Persisted() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StorageManagerPersist/StorageManagerPersist.generated.xml' path='docs/StorageManagerPersist/*'/>
	public Task<bool> Persist() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/StorageManagerEstimate/StorageManagerEstimate.generated.xml' path='docs/StorageManagerEstimate/*'/>
	public Task<StorageEstimate> Estimate() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StorageEstimate
{
		public ulong Usage;
		public ulong Quota;
}

///<include file='Utils/Docs/ReadableStream/ReadableStream.generated.xml' path='docs/ReadableStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableStream
{
	///<include file='Utils/Docs/ReadableStreamReadableStream/ReadableStreamReadableStream.generated.xml' path='docs/ReadableStreamReadableStream/*'/>
	public ReadableStream(Object underlyingSource, QueuingStrategy strategy) { }
	///<include file='Utils/Docs/ReadableStreamFrom/ReadableStreamFrom.generated.xml' path='docs/ReadableStreamFrom/*'/>
	public static ReadableStream From(dynamic asyncIterable) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableStreamLocked/ReadableStreamLocked.generated.xml' path='docs/ReadableStreamLocked/*'/>
	public bool Locked { get; }
	///<include file='Utils/Docs/ReadableStreamCancel/ReadableStreamCancel.generated.xml' path='docs/ReadableStreamCancel/*'/>
	public Task<Undefined> Cancel(dynamic reason) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableStreamGetReader/ReadableStreamGetReader.generated.xml' path='docs/ReadableStreamGetReader/*'/>
	public ReadableStreamReader GetReader(ReadableStreamGetReaderOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableStreamPipeThrough/ReadableStreamPipeThrough.generated.xml' path='docs/ReadableStreamPipeThrough/*'/>
	public ReadableStream PipeThrough(ReadableWritablePair transform, StreamPipeOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableStreamPipeTo/ReadableStreamPipeTo.generated.xml' path='docs/ReadableStreamPipeTo/*'/>
	public Task<Undefined> PipeTo(WritableStream destination, StreamPipeOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableStreamTee/ReadableStreamTee.generated.xml' path='docs/ReadableStreamTee/*'/>
	public List<ReadableStream> Tee() { throw new System.NotImplementedException(); }
	public dynamic this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	public ReadableStream() { }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableStreamGetReaderOptions
{
		public ReadableStreamReaderMode Mode;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableStreamIteratorOptions
{
		public bool PreventCancel;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableWritablePair
{
		public required ReadableStream Readable;
		public required WritableStream Writable;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StreamPipeOptions
{
		public bool PreventClose;
		public bool PreventAbort;
		public bool PreventCancel;
		public AbortSignal Signal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class UnderlyingSource
{
		public UnderlyingSourceStartCallback Start;
		public UnderlyingSourcePullCallback Pull;
		public UnderlyingSourceCancelCallback Cancel;
		public ReadableStreamType Type;
		public ulong AutoAllocateChunkSize;
}


///<include file='Utils/Docs/ReadableStreamDefaultReader/ReadableStreamDefaultReader.generated.xml' path='docs/ReadableStreamDefaultReader/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableStreamDefaultReader
{
	///<include file='Utils/Docs/ReadableStreamDefaultReaderReadableStreamDefaultReader/ReadableStreamDefaultReaderReadableStreamDefaultReader.generated.xml' path='docs/ReadableStreamDefaultReaderReadableStreamDefaultReader/*'/>
	public ReadableStreamDefaultReader(ReadableStream stream) { }
	///<include file='Utils/Docs/ReadableStreamDefaultReaderRead/ReadableStreamDefaultReaderRead.generated.xml' path='docs/ReadableStreamDefaultReaderRead/*'/>
	public Task<ReadableStreamReadResult> Read() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableStreamDefaultReaderReleaseLock/ReadableStreamDefaultReaderReleaseLock.generated.xml' path='docs/ReadableStreamDefaultReaderReleaseLock/*'/>
	public Undefined ReleaseLock() { throw new System.NotImplementedException(); }
	public ReadableStreamDefaultReader() { }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableStreamReadResult
{
		public dynamic Value;
		public bool Done;
}

///<include file='Utils/Docs/ReadableStreamBYOBReader/ReadableStreamBYOBReader.generated.xml' path='docs/ReadableStreamBYOBReader/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableStreamBYOBReader
{
	///<include file='Utils/Docs/ReadableStreamBYOBReaderReadableStreamBYOBReader/ReadableStreamBYOBReaderReadableStreamBYOBReader.generated.xml' path='docs/ReadableStreamBYOBReaderReadableStreamBYOBReader/*'/>
	public ReadableStreamBYOBReader(ReadableStream stream) { }
	///<include file='Utils/Docs/ReadableStreamBYOBReaderRead/ReadableStreamBYOBReaderRead.generated.xml' path='docs/ReadableStreamBYOBReaderRead/*'/>
	public Task<ReadableStreamReadResult> Read(ArrayBufferView view, ReadableStreamBYOBReaderReadOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableStreamBYOBReaderReleaseLock/ReadableStreamBYOBReaderReleaseLock.generated.xml' path='docs/ReadableStreamBYOBReaderReleaseLock/*'/>
	public Undefined ReleaseLock() { throw new System.NotImplementedException(); }
	public ReadableStreamBYOBReader() { }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableStreamBYOBReaderReadOptions
{
		public ulong Min;
}

///<include file='Utils/Docs/ReadableStreamDefaultController/ReadableStreamDefaultController.generated.xml' path='docs/ReadableStreamDefaultController/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableStreamDefaultController
{
	///<include file='Utils/Docs/ReadableStreamDefaultControllerDesiredSize/ReadableStreamDefaultControllerDesiredSize.generated.xml' path='docs/ReadableStreamDefaultControllerDesiredSize/*'/>
	public double? DesiredSize { get; }
	///<include file='Utils/Docs/ReadableStreamDefaultControllerClose/ReadableStreamDefaultControllerClose.generated.xml' path='docs/ReadableStreamDefaultControllerClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableStreamDefaultControllerEnqueue/ReadableStreamDefaultControllerEnqueue.generated.xml' path='docs/ReadableStreamDefaultControllerEnqueue/*'/>
	public Undefined Enqueue(dynamic chunk) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableStreamDefaultControllerError/ReadableStreamDefaultControllerError.generated.xml' path='docs/ReadableStreamDefaultControllerError/*'/>
	public Undefined Error(dynamic e) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ReadableByteStreamController/ReadableByteStreamController.generated.xml' path='docs/ReadableByteStreamController/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableByteStreamController
{
	///<include file='Utils/Docs/ReadableByteStreamControllerByobRequest/ReadableByteStreamControllerByobRequest.generated.xml' path='docs/ReadableByteStreamControllerByobRequest/*'/>
	public ReadableStreamBYOBRequest? ByobRequest { get; }
	///<include file='Utils/Docs/ReadableByteStreamControllerDesiredSize/ReadableByteStreamControllerDesiredSize.generated.xml' path='docs/ReadableByteStreamControllerDesiredSize/*'/>
	public double? DesiredSize { get; }
	///<include file='Utils/Docs/ReadableByteStreamControllerClose/ReadableByteStreamControllerClose.generated.xml' path='docs/ReadableByteStreamControllerClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableByteStreamControllerEnqueue/ReadableByteStreamControllerEnqueue.generated.xml' path='docs/ReadableByteStreamControllerEnqueue/*'/>
	public Undefined Enqueue(ArrayBufferView chunk) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableByteStreamControllerError/ReadableByteStreamControllerError.generated.xml' path='docs/ReadableByteStreamControllerError/*'/>
	public Undefined Error(dynamic e) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ReadableStreamBYOBRequest/ReadableStreamBYOBRequest.generated.xml' path='docs/ReadableStreamBYOBRequest/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReadableStreamBYOBRequest
{
	///<include file='Utils/Docs/ReadableStreamBYOBRequestView/ReadableStreamBYOBRequestView.generated.xml' path='docs/ReadableStreamBYOBRequestView/*'/>
	public ArrayBufferView? View { get; }
	///<include file='Utils/Docs/ReadableStreamBYOBRequestRespond/ReadableStreamBYOBRequestRespond.generated.xml' path='docs/ReadableStreamBYOBRequestRespond/*'/>
	public Undefined Respond(ulong bytesWritten) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ReadableStreamBYOBRequestRespondWithNewView/ReadableStreamBYOBRequestRespondWithNewView.generated.xml' path='docs/ReadableStreamBYOBRequestRespondWithNewView/*'/>
	public Undefined RespondWithNewView(ArrayBufferView view) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/WritableStream/WritableStream.generated.xml' path='docs/WritableStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WritableStream
{
	///<include file='Utils/Docs/WritableStreamWritableStream/WritableStreamWritableStream.generated.xml' path='docs/WritableStreamWritableStream/*'/>
	public WritableStream(Object underlyingSink, QueuingStrategy strategy) { }
	///<include file='Utils/Docs/WritableStreamLocked/WritableStreamLocked.generated.xml' path='docs/WritableStreamLocked/*'/>
	public bool Locked { get; }
	///<include file='Utils/Docs/WritableStreamAbort/WritableStreamAbort.generated.xml' path='docs/WritableStreamAbort/*'/>
	public Task<Undefined> Abort(dynamic reason) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WritableStreamClose/WritableStreamClose.generated.xml' path='docs/WritableStreamClose/*'/>
	public Task<Undefined> Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WritableStreamGetWriter/WritableStreamGetWriter.generated.xml' path='docs/WritableStreamGetWriter/*'/>
	public WritableStreamDefaultWriter GetWriter() { throw new System.NotImplementedException(); }
	public WritableStream() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class UnderlyingSink
{
		public UnderlyingSinkStartCallback Start;
		public UnderlyingSinkWriteCallback Write;
		public UnderlyingSinkCloseCallback Close;
		public UnderlyingSinkAbortCallback Abort;
		public dynamic Type;
}

///<include file='Utils/Docs/WritableStreamDefaultWriter/WritableStreamDefaultWriter.generated.xml' path='docs/WritableStreamDefaultWriter/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WritableStreamDefaultWriter
{
	///<include file='Utils/Docs/WritableStreamDefaultWriterWritableStreamDefaultWriter/WritableStreamDefaultWriterWritableStreamDefaultWriter.generated.xml' path='docs/WritableStreamDefaultWriterWritableStreamDefaultWriter/*'/>
	public WritableStreamDefaultWriter(WritableStream stream) { }
	///<include file='Utils/Docs/WritableStreamDefaultWriterClosed/WritableStreamDefaultWriterClosed.generated.xml' path='docs/WritableStreamDefaultWriterClosed/*'/>
	public Task<Undefined> Closed { get; }
	///<include file='Utils/Docs/WritableStreamDefaultWriterDesiredSize/WritableStreamDefaultWriterDesiredSize.generated.xml' path='docs/WritableStreamDefaultWriterDesiredSize/*'/>
	public double? DesiredSize { get; }
	///<include file='Utils/Docs/WritableStreamDefaultWriterReady/WritableStreamDefaultWriterReady.generated.xml' path='docs/WritableStreamDefaultWriterReady/*'/>
	public Task<Undefined> Ready { get; }
	///<include file='Utils/Docs/WritableStreamDefaultWriterAbort/WritableStreamDefaultWriterAbort.generated.xml' path='docs/WritableStreamDefaultWriterAbort/*'/>
	public Task<Undefined> Abort(dynamic reason) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WritableStreamDefaultWriterClose/WritableStreamDefaultWriterClose.generated.xml' path='docs/WritableStreamDefaultWriterClose/*'/>
	public Task<Undefined> Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WritableStreamDefaultWriterReleaseLock/WritableStreamDefaultWriterReleaseLock.generated.xml' path='docs/WritableStreamDefaultWriterReleaseLock/*'/>
	public Undefined ReleaseLock() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WritableStreamDefaultWriterWrite/WritableStreamDefaultWriterWrite.generated.xml' path='docs/WritableStreamDefaultWriterWrite/*'/>
	public Task<Undefined> Write(dynamic chunk) { throw new System.NotImplementedException(); }
	public WritableStreamDefaultWriter() { }
}

///<include file='Utils/Docs/WritableStreamDefaultController/WritableStreamDefaultController.generated.xml' path='docs/WritableStreamDefaultController/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WritableStreamDefaultController
{
	///<include file='Utils/Docs/WritableStreamDefaultControllerSignal/WritableStreamDefaultControllerSignal.generated.xml' path='docs/WritableStreamDefaultControllerSignal/*'/>
	public AbortSignal Signal { get; }
	///<include file='Utils/Docs/WritableStreamDefaultControllerError/WritableStreamDefaultControllerError.generated.xml' path='docs/WritableStreamDefaultControllerError/*'/>
	public Undefined Error(dynamic e) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TransformStream/TransformStream.generated.xml' path='docs/TransformStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TransformStream
{
	///<include file='Utils/Docs/TransformStreamTransformStream/TransformStreamTransformStream.generated.xml' path='docs/TransformStreamTransformStream/*'/>
	public TransformStream(Object transformer, QueuingStrategy writableStrategy, QueuingStrategy readableStrategy) { }
	///<include file='Utils/Docs/TransformStreamReadable/TransformStreamReadable.generated.xml' path='docs/TransformStreamReadable/*'/>
	public ReadableStream Readable { get; }
	///<include file='Utils/Docs/TransformStreamWritable/TransformStreamWritable.generated.xml' path='docs/TransformStreamWritable/*'/>
	public WritableStream Writable { get; }
	public TransformStream() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Transformer
{
		public TransformerStartCallback Start;
		public TransformerTransformCallback Transform;
		public TransformerFlushCallback Flush;
		public TransformerCancelCallback Cancel;
		public dynamic ReadableType;
		public dynamic WritableType;
}

///<include file='Utils/Docs/TransformStreamDefaultController/TransformStreamDefaultController.generated.xml' path='docs/TransformStreamDefaultController/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TransformStreamDefaultController
{
	///<include file='Utils/Docs/TransformStreamDefaultControllerDesiredSize/TransformStreamDefaultControllerDesiredSize.generated.xml' path='docs/TransformStreamDefaultControllerDesiredSize/*'/>
	public double? DesiredSize { get; }
	///<include file='Utils/Docs/TransformStreamDefaultControllerEnqueue/TransformStreamDefaultControllerEnqueue.generated.xml' path='docs/TransformStreamDefaultControllerEnqueue/*'/>
	public Undefined Enqueue(dynamic chunk) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TransformStreamDefaultControllerError/TransformStreamDefaultControllerError.generated.xml' path='docs/TransformStreamDefaultControllerError/*'/>
	public Undefined Error(dynamic reason) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TransformStreamDefaultControllerTerminate/TransformStreamDefaultControllerTerminate.generated.xml' path='docs/TransformStreamDefaultControllerTerminate/*'/>
	public Undefined Terminate() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class QueuingStrategy
{
		public double HighWaterMark;
		public QueuingStrategySize Size;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class QueuingStrategyInit
{
		public required double HighWaterMark;
}

///<include file='Utils/Docs/ByteLengthQueuingStrategy/ByteLengthQueuingStrategy.generated.xml' path='docs/ByteLengthQueuingStrategy/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ByteLengthQueuingStrategy
{
	///<include file='Utils/Docs/ByteLengthQueuingStrategyByteLengthQueuingStrategy/ByteLengthQueuingStrategyByteLengthQueuingStrategy.generated.xml' path='docs/ByteLengthQueuingStrategyByteLengthQueuingStrategy/*'/>
	public ByteLengthQueuingStrategy(QueuingStrategyInit init) { }
	///<include file='Utils/Docs/ByteLengthQueuingStrategyHighWaterMark/ByteLengthQueuingStrategyHighWaterMark.generated.xml' path='docs/ByteLengthQueuingStrategyHighWaterMark/*'/>
	public double HighWaterMark { get; }
	///<include file='Utils/Docs/ByteLengthQueuingStrategySize/ByteLengthQueuingStrategySize.generated.xml' path='docs/ByteLengthQueuingStrategySize/*'/>
	public Function Size { get; }
	public ByteLengthQueuingStrategy() { }
}

///<include file='Utils/Docs/CountQueuingStrategy/CountQueuingStrategy.generated.xml' path='docs/CountQueuingStrategy/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CountQueuingStrategy
{
	///<include file='Utils/Docs/CountQueuingStrategyCountQueuingStrategy/CountQueuingStrategyCountQueuingStrategy.generated.xml' path='docs/CountQueuingStrategyCountQueuingStrategy/*'/>
	public CountQueuingStrategy(QueuingStrategyInit init) { }
	///<include file='Utils/Docs/CountQueuingStrategyHighWaterMark/CountQueuingStrategyHighWaterMark.generated.xml' path='docs/CountQueuingStrategyHighWaterMark/*'/>
	public double HighWaterMark { get; }
	///<include file='Utils/Docs/CountQueuingStrategySize/CountQueuingStrategySize.generated.xml' path='docs/CountQueuingStrategySize/*'/>
	public Function Size { get; }
	public CountQueuingStrategy() { }
}

///<include file='Utils/Docs/TimeEvent/TimeEvent.generated.xml' path='docs/TimeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TimeEvent : Event
{
		public WindowProxy? View { get; }
		public long Detail { get; }
		public Undefined InitTimeEvent(DOMString typeArg, Window? viewArg, long detailArg) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SVGAnimationElement/SVGAnimationElement.generated.xml' path='docs/SVGAnimationElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimationElement : SVGElement, SVGTests
{
	///<include file='Utils/Docs/SVGAnimationElementTargetElement/SVGAnimationElementTargetElement.generated.xml' path='docs/SVGAnimationElementTargetElement/*'/>
	public SVGElement? TargetElement { get; }
		public EventHandler Onbegin { get; set; }
		public EventHandler Onend { get; set; }
		public EventHandler Onrepeat { get; set; }
		public Number GetStartTime() { throw new System.NotImplementedException(); }
		public Number GetCurrentTime() { throw new System.NotImplementedException(); }
		public Number GetSimpleDuration() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGAnimationElementBeginElement/SVGAnimationElementBeginElement.generated.xml' path='docs/SVGAnimationElementBeginElement/*'/>
	public Undefined BeginElement() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGAnimationElementBeginElementAt/SVGAnimationElementBeginElementAt.generated.xml' path='docs/SVGAnimationElementBeginElementAt/*'/>
	public Undefined BeginElementAt(Number offset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGAnimationElementEndElement/SVGAnimationElementEndElement.generated.xml' path='docs/SVGAnimationElementEndElement/*'/>
	public Undefined EndElement() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGAnimationElementEndElementAt/SVGAnimationElementEndElementAt.generated.xml' path='docs/SVGAnimationElementEndElementAt/*'/>
	public Undefined EndElementAt(Number offset) { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/SVGAnimateElement/SVGAnimateElement.generated.xml' path='docs/SVGAnimateElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimateElement : SVGAnimationElement
{
}

///<include file='Utils/Docs/SVGSetElement/SVGSetElement.generated.xml' path='docs/SVGSetElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGSetElement : SVGAnimationElement
{
}

///<include file='Utils/Docs/SVGAnimateMotionElement/SVGAnimateMotionElement.generated.xml' path='docs/SVGAnimateMotionElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimateMotionElement : SVGAnimationElement
{
}

///<include file='Utils/Docs/SVGMPathElement/SVGMPathElement.generated.xml' path='docs/SVGMPathElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGMPathElement : SVGElement, SVGURIReference
{
}


///<include file='Utils/Docs/SVGAnimateTransformElement/SVGAnimateTransformElement.generated.xml' path='docs/SVGAnimateTransformElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimateTransformElement : SVGAnimationElement
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGDiscardElement : SVGAnimationElement
{
}

///<include file='Utils/Docs/SVGSVGElement/SVGSVGElement.generated.xml' path='docs/SVGSVGElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGSVGElement
{
		public Undefined PauseAnimations() { throw new System.NotImplementedException(); }
		public Undefined UnpauseAnimations() { throw new System.NotImplementedException(); }
		public bool AnimationsPaused() { throw new System.NotImplementedException(); }
		public Number GetCurrentTime() { throw new System.NotImplementedException(); }
		public Undefined SetCurrentTime(Number seconds) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SVGElement/SVGElement.generated.xml' path='docs/SVGElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGElement : Element, ElementCSSInlineStyle, GlobalEventHandlers, SVGElementInstance, HTMLOrSVGElement
{
		public SVGAnimatedString ClassName { get; }
	///<include file='Utils/Docs/SVGElementOwnerSVGElement/SVGElementOwnerSVGElement.generated.xml' path='docs/SVGElementOwnerSVGElement/*'/>
	public SVGSVGElement? OwnerSVGElement { get; }
	///<include file='Utils/Docs/SVGElementViewportElement/SVGElementViewportElement.generated.xml' path='docs/SVGElementViewportElement/*'/>
	public SVGElement? ViewportElement { get; }
}




[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGBoundingBoxOptions
{
		public bool Fill;
		public bool Stroke;
		public bool Markers;
		public bool Clipped;
}

///<include file='Utils/Docs/SVGGraphicsElement/SVGGraphicsElement.generated.xml' path='docs/SVGGraphicsElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGGraphicsElement : SVGElement, SVGTests
{
		public SVGAnimatedTransformList Transform { get; }
	///<include file='Utils/Docs/SVGGraphicsElementGetBBox/SVGGraphicsElementGetBBox.generated.xml' path='docs/SVGGraphicsElementGetBBox/*'/>
	public DOMRect GetBBox(SVGBoundingBoxOptions options) { throw new System.NotImplementedException(); }
		public DOMMatrix? GetCTM() { throw new System.NotImplementedException(); }
		public DOMMatrix? GetScreenCTM() { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/SVGGeometryElement/SVGGeometryElement.generated.xml' path='docs/SVGGeometryElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGGeometryElement : SVGGraphicsElement
{
	///<include file='Utils/Docs/SVGGeometryElementPathLength/SVGGeometryElementPathLength.generated.xml' path='docs/SVGGeometryElementPathLength/*'/>
	public SVGAnimatedNumber PathLength { get; }
	///<include file='Utils/Docs/SVGGeometryElementIsPointInFill/SVGGeometryElementIsPointInFill.generated.xml' path='docs/SVGGeometryElementIsPointInFill/*'/>
	public bool IsPointInFill(DOMPointInit point) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGGeometryElementIsPointInStroke/SVGGeometryElementIsPointInStroke.generated.xml' path='docs/SVGGeometryElementIsPointInStroke/*'/>
	public bool IsPointInStroke(DOMPointInit point) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGGeometryElementGetTotalLength/SVGGeometryElementGetTotalLength.generated.xml' path='docs/SVGGeometryElementGetTotalLength/*'/>
	public Number GetTotalLength() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGGeometryElementGetPointAtLength/SVGGeometryElementGetPointAtLength.generated.xml' path='docs/SVGGeometryElementGetPointAtLength/*'/>
	public DOMPoint GetPointAtLength(Number distance) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SVGNumber/SVGNumber.generated.xml' path='docs/SVGNumber/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGNumber
{
		public Number Value { get; set; }
}

///<include file='Utils/Docs/SVGLength/SVGLength.generated.xml' path='docs/SVGLength/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGLength
{
		public const ushort SVG_LENGTHTYPE_UNKNOWN = 0;
		public const ushort SVG_LENGTHTYPE_NUMBER = 1;
		public const ushort SVG_LENGTHTYPE_PERCENTAGE = 2;
		public const ushort SVG_LENGTHTYPE_EMS = 3;
		public const ushort SVG_LENGTHTYPE_EXS = 4;
		public const ushort SVG_LENGTHTYPE_PX = 5;
		public const ushort SVG_LENGTHTYPE_CM = 6;
		public const ushort SVG_LENGTHTYPE_MM = 7;
		public const ushort SVG_LENGTHTYPE_IN = 8;
		public const ushort SVG_LENGTHTYPE_PT = 9;
		public const ushort SVG_LENGTHTYPE_PC = 10;
		public ushort UnitType { get; }
		public Number Value { get; set; }
		public Number ValueInSpecifiedUnits { get; set; }
		public DOMString ValueAsString { get; set; }
		public Undefined NewValueSpecifiedUnits(ushort unitType, Number valueInSpecifiedUnits) { throw new System.NotImplementedException(); }
		public Undefined ConvertToSpecifiedUnits(ushort unitType) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SVGAngle/SVGAngle.generated.xml' path='docs/SVGAngle/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAngle
{
		public const ushort SVG_ANGLETYPE_UNKNOWN = 0;
		public const ushort SVG_ANGLETYPE_UNSPECIFIED = 1;
		public const ushort SVG_ANGLETYPE_DEG = 2;
		public const ushort SVG_ANGLETYPE_RAD = 3;
		public const ushort SVG_ANGLETYPE_GRAD = 4;
	///<include file='Utils/Docs/SVGAngleUnitType/SVGAngleUnitType.generated.xml' path='docs/SVGAngleUnitType/*'/>
	public ushort UnitType { get; }
	///<include file='Utils/Docs/SVGAngleValue/SVGAngleValue.generated.xml' path='docs/SVGAngleValue/*'/>
	public Number Value { get; set; }
	///<include file='Utils/Docs/SVGAngleValueInSpecifiedUnits/SVGAngleValueInSpecifiedUnits.generated.xml' path='docs/SVGAngleValueInSpecifiedUnits/*'/>
	public Number ValueInSpecifiedUnits { get; set; }
	///<include file='Utils/Docs/SVGAngleValueAsString/SVGAngleValueAsString.generated.xml' path='docs/SVGAngleValueAsString/*'/>
	public DOMString ValueAsString { get; set; }
	///<include file='Utils/Docs/SVGAngleNewValueSpecifiedUnits/SVGAngleNewValueSpecifiedUnits.generated.xml' path='docs/SVGAngleNewValueSpecifiedUnits/*'/>
	public Undefined NewValueSpecifiedUnits(ushort unitType, Number valueInSpecifiedUnits) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGAngleConvertToSpecifiedUnits/SVGAngleConvertToSpecifiedUnits.generated.xml' path='docs/SVGAngleConvertToSpecifiedUnits/*'/>
	public Undefined ConvertToSpecifiedUnits(ushort unitType) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SVGNumberList/SVGNumberList.generated.xml' path='docs/SVGNumberList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGNumberList
{
	///<include file='Utils/Docs/SVGNumberListLength/SVGNumberListLength.generated.xml' path='docs/SVGNumberListLength/*'/>
	public ulong Length { get; }
	///<include file='Utils/Docs/SVGNumberListNumberOfItems/SVGNumberListNumberOfItems.generated.xml' path='docs/SVGNumberListNumberOfItems/*'/>
	public ulong NumberOfItems { get; }
	///<include file='Utils/Docs/SVGNumberListClear/SVGNumberListClear.generated.xml' path='docs/SVGNumberListClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGNumberListInitialize/SVGNumberListInitialize.generated.xml' path='docs/SVGNumberListInitialize/*'/>
	public SVGNumber Initialize(SVGNumber newItem) { throw new System.NotImplementedException(); }
	
	///<include file='Utils/Docs/SVGNumberListInsertItemBefore/SVGNumberListInsertItemBefore.generated.xml' path='docs/SVGNumberListInsertItemBefore/*'/>
	public SVGNumber InsertItemBefore(SVGNumber newItem, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGNumberListReplaceItem/SVGNumberListReplaceItem.generated.xml' path='docs/SVGNumberListReplaceItem/*'/>
	public SVGNumber ReplaceItem(SVGNumber newItem, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGNumberListRemoveItem/SVGNumberListRemoveItem.generated.xml' path='docs/SVGNumberListRemoveItem/*'/>
	public SVGNumber RemoveItem(ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGNumberListAppendItem/SVGNumberListAppendItem.generated.xml' path='docs/SVGNumberListAppendItem/*'/>
	public SVGNumber AppendItem(SVGNumber newItem) { throw new System.NotImplementedException(); }
	
}

///<include file='Utils/Docs/SVGLengthList/SVGLengthList.generated.xml' path='docs/SVGLengthList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGLengthList
{
	///<include file='Utils/Docs/SVGLengthListLength/SVGLengthListLength.generated.xml' path='docs/SVGLengthListLength/*'/>
	public ulong Length { get; }
	///<include file='Utils/Docs/SVGLengthListNumberOfItems/SVGLengthListNumberOfItems.generated.xml' path='docs/SVGLengthListNumberOfItems/*'/>
	public ulong NumberOfItems { get; }
	///<include file='Utils/Docs/SVGLengthListClear/SVGLengthListClear.generated.xml' path='docs/SVGLengthListClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGLengthListInitialize/SVGLengthListInitialize.generated.xml' path='docs/SVGLengthListInitialize/*'/>
	public SVGLength Initialize(SVGLength newItem) { throw new System.NotImplementedException(); }
	
	///<include file='Utils/Docs/SVGLengthListInsertItemBefore/SVGLengthListInsertItemBefore.generated.xml' path='docs/SVGLengthListInsertItemBefore/*'/>
	public SVGLength InsertItemBefore(SVGLength newItem, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGLengthListReplaceItem/SVGLengthListReplaceItem.generated.xml' path='docs/SVGLengthListReplaceItem/*'/>
	public SVGLength ReplaceItem(SVGLength newItem, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGLengthListRemoveItem/SVGLengthListRemoveItem.generated.xml' path='docs/SVGLengthListRemoveItem/*'/>
	public SVGLength RemoveItem(ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGLengthListAppendItem/SVGLengthListAppendItem.generated.xml' path='docs/SVGLengthListAppendItem/*'/>
	public SVGLength AppendItem(SVGLength newItem) { throw new System.NotImplementedException(); }
	
}

///<include file='Utils/Docs/SVGStringList/SVGStringList.generated.xml' path='docs/SVGStringList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGStringList
{
		public ulong Length { get; }
		public ulong NumberOfItems { get; }
		public Undefined Clear() { throw new System.NotImplementedException(); }
		public DOMString Initialize(DOMString newItem) { throw new System.NotImplementedException(); }
	
		public DOMString InsertItemBefore(DOMString newItem, ulong index) { throw new System.NotImplementedException(); }
		public DOMString ReplaceItem(DOMString newItem, ulong index) { throw new System.NotImplementedException(); }
		public DOMString RemoveItem(ulong index) { throw new System.NotImplementedException(); }
		public DOMString AppendItem(DOMString newItem) { throw new System.NotImplementedException(); }
	
}

///<include file='Utils/Docs/SVGAnimatedBoolean/SVGAnimatedBoolean.generated.xml' path='docs/SVGAnimatedBoolean/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedBoolean
{
	///<include file='Utils/Docs/SVGAnimatedBooleanBaseVal/SVGAnimatedBooleanBaseVal.generated.xml' path='docs/SVGAnimatedBooleanBaseVal/*'/>
	public bool BaseVal { get; set; }
	///<include file='Utils/Docs/SVGAnimatedBooleanAnimVal/SVGAnimatedBooleanAnimVal.generated.xml' path='docs/SVGAnimatedBooleanAnimVal/*'/>
	public bool AnimVal { get; }
}

///<include file='Utils/Docs/SVGAnimatedEnumeration/SVGAnimatedEnumeration.generated.xml' path='docs/SVGAnimatedEnumeration/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedEnumeration
{
	///<include file='Utils/Docs/SVGAnimatedEnumerationBaseVal/SVGAnimatedEnumerationBaseVal.generated.xml' path='docs/SVGAnimatedEnumerationBaseVal/*'/>
	public ushort BaseVal { get; set; }
	///<include file='Utils/Docs/SVGAnimatedEnumerationAnimVal/SVGAnimatedEnumerationAnimVal.generated.xml' path='docs/SVGAnimatedEnumerationAnimVal/*'/>
	public ushort AnimVal { get; }
}

///<include file='Utils/Docs/SVGAnimatedInteger/SVGAnimatedInteger.generated.xml' path='docs/SVGAnimatedInteger/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedInteger
{
	///<include file='Utils/Docs/SVGAnimatedIntegerBaseVal/SVGAnimatedIntegerBaseVal.generated.xml' path='docs/SVGAnimatedIntegerBaseVal/*'/>
	public long BaseVal { get; set; }
	///<include file='Utils/Docs/SVGAnimatedIntegerAnimVal/SVGAnimatedIntegerAnimVal.generated.xml' path='docs/SVGAnimatedIntegerAnimVal/*'/>
	public long AnimVal { get; }
}

///<include file='Utils/Docs/SVGAnimatedNumber/SVGAnimatedNumber.generated.xml' path='docs/SVGAnimatedNumber/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedNumber
{
	///<include file='Utils/Docs/SVGAnimatedNumberBaseVal/SVGAnimatedNumberBaseVal.generated.xml' path='docs/SVGAnimatedNumberBaseVal/*'/>
	public Number BaseVal { get; set; }
	///<include file='Utils/Docs/SVGAnimatedNumberAnimVal/SVGAnimatedNumberAnimVal.generated.xml' path='docs/SVGAnimatedNumberAnimVal/*'/>
	public Number AnimVal { get; }
}

///<include file='Utils/Docs/SVGAnimatedLength/SVGAnimatedLength.generated.xml' path='docs/SVGAnimatedLength/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedLength
{
	///<include file='Utils/Docs/SVGAnimatedLengthBaseVal/SVGAnimatedLengthBaseVal.generated.xml' path='docs/SVGAnimatedLengthBaseVal/*'/>
	public SVGLength BaseVal { get; }
	///<include file='Utils/Docs/SVGAnimatedLengthAnimVal/SVGAnimatedLengthAnimVal.generated.xml' path='docs/SVGAnimatedLengthAnimVal/*'/>
	public SVGLength AnimVal { get; }
}

///<include file='Utils/Docs/SVGAnimatedAngle/SVGAnimatedAngle.generated.xml' path='docs/SVGAnimatedAngle/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedAngle
{
	///<include file='Utils/Docs/SVGAnimatedAngleBaseVal/SVGAnimatedAngleBaseVal.generated.xml' path='docs/SVGAnimatedAngleBaseVal/*'/>
	public SVGAngle BaseVal { get; }
	///<include file='Utils/Docs/SVGAnimatedAngleAnimVal/SVGAnimatedAngleAnimVal.generated.xml' path='docs/SVGAnimatedAngleAnimVal/*'/>
	public SVGAngle AnimVal { get; }
}

///<include file='Utils/Docs/SVGAnimatedString/SVGAnimatedString.generated.xml' path='docs/SVGAnimatedString/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedString
{
	///<include file='Utils/Docs/SVGAnimatedStringBaseVal/SVGAnimatedStringBaseVal.generated.xml' path='docs/SVGAnimatedStringBaseVal/*'/>
	public DOMString BaseVal { get; set; }
	///<include file='Utils/Docs/SVGAnimatedStringAnimVal/SVGAnimatedStringAnimVal.generated.xml' path='docs/SVGAnimatedStringAnimVal/*'/>
	public DOMString AnimVal { get; }
}

///<include file='Utils/Docs/SVGAnimatedRect/SVGAnimatedRect.generated.xml' path='docs/SVGAnimatedRect/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedRect
{
	///<include file='Utils/Docs/SVGAnimatedRectBaseVal/SVGAnimatedRectBaseVal.generated.xml' path='docs/SVGAnimatedRectBaseVal/*'/>
	public DOMRect BaseVal { get; }
	///<include file='Utils/Docs/SVGAnimatedRectAnimVal/SVGAnimatedRectAnimVal.generated.xml' path='docs/SVGAnimatedRectAnimVal/*'/>
	public DOMRectReadOnly AnimVal { get; }
}

///<include file='Utils/Docs/SVGAnimatedNumberList/SVGAnimatedNumberList.generated.xml' path='docs/SVGAnimatedNumberList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedNumberList
{
	///<include file='Utils/Docs/SVGAnimatedNumberListBaseVal/SVGAnimatedNumberListBaseVal.generated.xml' path='docs/SVGAnimatedNumberListBaseVal/*'/>
	public SVGNumberList BaseVal { get; }
	///<include file='Utils/Docs/SVGAnimatedNumberListAnimVal/SVGAnimatedNumberListAnimVal.generated.xml' path='docs/SVGAnimatedNumberListAnimVal/*'/>
	public SVGNumberList AnimVal { get; }
}

///<include file='Utils/Docs/SVGAnimatedLengthList/SVGAnimatedLengthList.generated.xml' path='docs/SVGAnimatedLengthList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedLengthList
{
	///<include file='Utils/Docs/SVGAnimatedLengthListBaseVal/SVGAnimatedLengthListBaseVal.generated.xml' path='docs/SVGAnimatedLengthListBaseVal/*'/>
	public SVGLengthList BaseVal { get; }
	///<include file='Utils/Docs/SVGAnimatedLengthListAnimVal/SVGAnimatedLengthListAnimVal.generated.xml' path='docs/SVGAnimatedLengthListAnimVal/*'/>
	public SVGLengthList AnimVal { get; }
}

///<include file='Utils/Docs/SVGUnitTypes/SVGUnitTypes.generated.xml' path='docs/SVGUnitTypes/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGUnitTypes
{
		public const ushort SVG_UNIT_TYPE_UNKNOWN = 0;
		public const ushort SVG_UNIT_TYPE_USERSPACEONUSE = 1;
		public const ushort SVG_UNIT_TYPE_OBJECTBOUNDINGBOX = 2;
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentRootElement/DocumentRootElement.generated.xml' path='docs/DocumentRootElement/*'/>
	public SVGSVGElement? RootElement { get; }
}

///<include file='Utils/Docs/SVGSVGElement/SVGSVGElement.generated.xml' path='docs/SVGSVGElement/*'/>
public partial class SVGSVGElement : SVGGraphicsElement
{
		public SVGAnimatedLength X { get; }
		public SVGAnimatedLength Y { get; }
		public SVGAnimatedLength Width { get; }
		public SVGAnimatedLength Height { get; }
		public Number CurrentScale { get; set; }
		public DOMPointReadOnly CurrentTranslate { get; }
		public NodeList GetIntersectionList(DOMRectReadOnly rect, SVGElement? referenceElement) { throw new System.NotImplementedException(); }
		public NodeList GetEnclosureList(DOMRectReadOnly rect, SVGElement? referenceElement) { throw new System.NotImplementedException(); }
		public bool CheckIntersection(SVGElement element, DOMRectReadOnly rect) { throw new System.NotImplementedException(); }
		public bool CheckEnclosure(SVGElement element, DOMRectReadOnly rect) { throw new System.NotImplementedException(); }
		public Undefined DeselectAll() { throw new System.NotImplementedException(); }
		public SVGNumber CreateSVGNumber() { throw new System.NotImplementedException(); }
		public SVGLength CreateSVGLength() { throw new System.NotImplementedException(); }
		public SVGAngle CreateSVGAngle() { throw new System.NotImplementedException(); }
		public DOMPoint CreateSVGPoint() { throw new System.NotImplementedException(); }
		public DOMMatrix CreateSVGMatrix() { throw new System.NotImplementedException(); }
		public DOMRect CreateSVGRect() { throw new System.NotImplementedException(); }
		public SVGTransform CreateSVGTransform() { throw new System.NotImplementedException(); }
		public SVGTransform CreateSVGTransformFromMatrix(DOMMatrix2DInit matrix) { throw new System.NotImplementedException(); }
		public Element GetElementById(DOMString elementId) { throw new System.NotImplementedException(); }
		public ulong SuspendRedraw(ulong maxWaitMilliseconds) { throw new System.NotImplementedException(); }
		public Undefined UnsuspendRedraw(ulong suspendHandleID) { throw new System.NotImplementedException(); }
		public Undefined UnsuspendRedrawAll() { throw new System.NotImplementedException(); }
		public Undefined ForceRedraw() { throw new System.NotImplementedException(); }
}



///<include file='Utils/Docs/SVGGElement/SVGGElement.generated.xml' path='docs/SVGGElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGGElement : SVGGraphicsElement
{
}

///<include file='Utils/Docs/SVGDefsElement/SVGDefsElement.generated.xml' path='docs/SVGDefsElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGDefsElement : SVGGraphicsElement
{
}

///<include file='Utils/Docs/SVGDescElement/SVGDescElement.generated.xml' path='docs/SVGDescElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGDescElement : SVGElement
{
}

///<include file='Utils/Docs/SVGMetadataElement/SVGMetadataElement.generated.xml' path='docs/SVGMetadataElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGMetadataElement : SVGElement
{
}

///<include file='Utils/Docs/SVGTitleElement/SVGTitleElement.generated.xml' path='docs/SVGTitleElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGTitleElement : SVGElement
{
}

///<include file='Utils/Docs/SVGSymbolElement/SVGSymbolElement.generated.xml' path='docs/SVGSymbolElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGSymbolElement : SVGGraphicsElement, SVGFitToViewBox
{
}


///<include file='Utils/Docs/SVGUseElement/SVGUseElement.generated.xml' path='docs/SVGUseElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGUseElement : SVGGraphicsElement, SVGURIReference
{
		public SVGAnimatedLength X { get; }
		public SVGAnimatedLength Y { get; }
		public SVGAnimatedLength Width { get; }
		public SVGAnimatedLength Height { get; }
		public SVGElement? InstanceRoot { get; }
		public SVGElement? AnimatedInstanceRoot { get; }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGUseElementShadowRoot : ShadowRoot
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ShadowAnimation : Animation
{
		public ShadowAnimation(Animation source, Union145 newTarget) { }
		public Animation SourceAnimation { get; }
	public ShadowAnimation() { }
}

///<include file='Utils/Docs/SVGSwitchElement/SVGSwitchElement.generated.xml' path='docs/SVGSwitchElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGSwitchElement : SVGGraphicsElement
{
}

///<include file='Utils/Docs/SVGStyleElement/SVGStyleElement.generated.xml' path='docs/SVGStyleElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGStyleElement : SVGElement, LinkStyle
{
	///<include file='Utils/Docs/SVGStyleElementType/SVGStyleElementType.generated.xml' path='docs/SVGStyleElementType/*'/>
	public DOMString Type { get; set; }
	///<include file='Utils/Docs/SVGStyleElementMedia/SVGStyleElementMedia.generated.xml' path='docs/SVGStyleElementMedia/*'/>
	public DOMString Media { get; set; }
	///<include file='Utils/Docs/SVGStyleElementTitle/SVGStyleElementTitle.generated.xml' path='docs/SVGStyleElementTitle/*'/>
	public DOMString Title { get; set; }
}


///<include file='Utils/Docs/SVGTransform/SVGTransform.generated.xml' path='docs/SVGTransform/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGTransform
{
		public const ushort SVG_TRANSFORM_UNKNOWN = 0;
		public const ushort SVG_TRANSFORM_MATRIX = 1;
		public const ushort SVG_TRANSFORM_TRANSLATE = 2;
		public const ushort SVG_TRANSFORM_SCALE = 3;
		public const ushort SVG_TRANSFORM_ROTATE = 4;
		public const ushort SVG_TRANSFORM_SKEWX = 5;
		public const ushort SVG_TRANSFORM_SKEWY = 6;
	///<include file='Utils/Docs/SVGTransformType/SVGTransformType.generated.xml' path='docs/SVGTransformType/*'/>
	public ushort Type { get; }
	///<include file='Utils/Docs/SVGTransformMatrix/SVGTransformMatrix.generated.xml' path='docs/SVGTransformMatrix/*'/>
	public DOMMatrix Matrix { get; }
	///<include file='Utils/Docs/SVGTransformAngle/SVGTransformAngle.generated.xml' path='docs/SVGTransformAngle/*'/>
	public Number Angle { get; }
	///<include file='Utils/Docs/SVGTransformSetMatrix/SVGTransformSetMatrix.generated.xml' path='docs/SVGTransformSetMatrix/*'/>
	public Undefined SetMatrix(DOMMatrix2DInit matrix) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTransformSetTranslate/SVGTransformSetTranslate.generated.xml' path='docs/SVGTransformSetTranslate/*'/>
	public Undefined SetTranslate(Number tx, Number ty) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTransformSetScale/SVGTransformSetScale.generated.xml' path='docs/SVGTransformSetScale/*'/>
	public Undefined SetScale(Number sx, Number sy) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTransformSetRotate/SVGTransformSetRotate.generated.xml' path='docs/SVGTransformSetRotate/*'/>
	public Undefined SetRotate(Number angle, Number cx, Number cy) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTransformSetSkewX/SVGTransformSetSkewX.generated.xml' path='docs/SVGTransformSetSkewX/*'/>
	public Undefined SetSkewX(Number angle) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTransformSetSkewY/SVGTransformSetSkewY.generated.xml' path='docs/SVGTransformSetSkewY/*'/>
	public Undefined SetSkewY(Number angle) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SVGTransformList/SVGTransformList.generated.xml' path='docs/SVGTransformList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGTransformList
{
	///<include file='Utils/Docs/SVGTransformListLength/SVGTransformListLength.generated.xml' path='docs/SVGTransformListLength/*'/>
	public ulong Length { get; }
	///<include file='Utils/Docs/SVGTransformListNumberOfItems/SVGTransformListNumberOfItems.generated.xml' path='docs/SVGTransformListNumberOfItems/*'/>
	public ulong NumberOfItems { get; }
	///<include file='Utils/Docs/SVGTransformListClear/SVGTransformListClear.generated.xml' path='docs/SVGTransformListClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTransformListInitialize/SVGTransformListInitialize.generated.xml' path='docs/SVGTransformListInitialize/*'/>
	public SVGTransform Initialize(SVGTransform newItem) { throw new System.NotImplementedException(); }
	
	///<include file='Utils/Docs/SVGTransformListInsertItemBefore/SVGTransformListInsertItemBefore.generated.xml' path='docs/SVGTransformListInsertItemBefore/*'/>
	public SVGTransform InsertItemBefore(SVGTransform newItem, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTransformListReplaceItem/SVGTransformListReplaceItem.generated.xml' path='docs/SVGTransformListReplaceItem/*'/>
	public SVGTransform ReplaceItem(SVGTransform newItem, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTransformListRemoveItem/SVGTransformListRemoveItem.generated.xml' path='docs/SVGTransformListRemoveItem/*'/>
	public SVGTransform RemoveItem(ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTransformListAppendItem/SVGTransformListAppendItem.generated.xml' path='docs/SVGTransformListAppendItem/*'/>
	public SVGTransform AppendItem(SVGTransform newItem) { throw new System.NotImplementedException(); }
	
	///<include file='Utils/Docs/SVGTransformListCreateSVGTransformFromMatrix/SVGTransformListCreateSVGTransformFromMatrix.generated.xml' path='docs/SVGTransformListCreateSVGTransformFromMatrix/*'/>
	public SVGTransform CreateSVGTransformFromMatrix(DOMMatrix2DInit matrix) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTransformListConsolidate/SVGTransformListConsolidate.generated.xml' path='docs/SVGTransformListConsolidate/*'/>
	public SVGTransform? Consolidate() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SVGAnimatedTransformList/SVGAnimatedTransformList.generated.xml' path='docs/SVGAnimatedTransformList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedTransformList
{
	///<include file='Utils/Docs/SVGAnimatedTransformListBaseVal/SVGAnimatedTransformListBaseVal.generated.xml' path='docs/SVGAnimatedTransformListBaseVal/*'/>
	public SVGTransformList BaseVal { get; }
	///<include file='Utils/Docs/SVGAnimatedTransformListAnimVal/SVGAnimatedTransformListAnimVal.generated.xml' path='docs/SVGAnimatedTransformListAnimVal/*'/>
	public SVGTransformList AnimVal { get; }
}

///<include file='Utils/Docs/SVGPreserveAspectRatio/SVGPreserveAspectRatio.generated.xml' path='docs/SVGPreserveAspectRatio/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGPreserveAspectRatio
{
		public const ushort SVG_PRESERVEASPECTRATIO_UNKNOWN = 0;
		public const ushort SVG_PRESERVEASPECTRATIO_NONE = 1;
		public const ushort SVG_PRESERVEASPECTRATIO_XMINYMIN = 2;
		public const ushort SVG_PRESERVEASPECTRATIO_XMIDYMIN = 3;
		public const ushort SVG_PRESERVEASPECTRATIO_XMAXYMIN = 4;
		public const ushort SVG_PRESERVEASPECTRATIO_XMINYMID = 5;
		public const ushort SVG_PRESERVEASPECTRATIO_XMIDYMID = 6;
		public const ushort SVG_PRESERVEASPECTRATIO_XMAXYMID = 7;
		public const ushort SVG_PRESERVEASPECTRATIO_XMINYMAX = 8;
		public const ushort SVG_PRESERVEASPECTRATIO_XMIDYMAX = 9;
		public const ushort SVG_PRESERVEASPECTRATIO_XMAXYMAX = 10;
		public const ushort SVG_MEETORSLICE_UNKNOWN = 0;
		public const ushort SVG_MEETORSLICE_MEET = 1;
		public const ushort SVG_MEETORSLICE_SLICE = 2;
		public ushort Align { get; set; }
		public ushort MeetOrSlice { get; set; }
}

///<include file='Utils/Docs/SVGAnimatedPreserveAspectRatio/SVGAnimatedPreserveAspectRatio.generated.xml' path='docs/SVGAnimatedPreserveAspectRatio/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAnimatedPreserveAspectRatio
{
	///<include file='Utils/Docs/SVGAnimatedPreserveAspectRatioBaseVal/SVGAnimatedPreserveAspectRatioBaseVal.generated.xml' path='docs/SVGAnimatedPreserveAspectRatioBaseVal/*'/>
	public SVGPreserveAspectRatio BaseVal { get; }
	///<include file='Utils/Docs/SVGAnimatedPreserveAspectRatioAnimVal/SVGAnimatedPreserveAspectRatioAnimVal.generated.xml' path='docs/SVGAnimatedPreserveAspectRatioAnimVal/*'/>
	public SVGPreserveAspectRatio AnimVal { get; }
}

///<include file='Utils/Docs/SVGPathElement/SVGPathElement.generated.xml' path='docs/SVGPathElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGPathElement : SVGGeometryElement
{
}

///<include file='Utils/Docs/SVGRectElement/SVGRectElement.generated.xml' path='docs/SVGRectElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGRectElement : SVGGeometryElement
{
	///<include file='Utils/Docs/SVGRectElementX/SVGRectElementX.generated.xml' path='docs/SVGRectElementX/*'/>
	public SVGAnimatedLength X { get; }
	///<include file='Utils/Docs/SVGRectElementY/SVGRectElementY.generated.xml' path='docs/SVGRectElementY/*'/>
	public SVGAnimatedLength Y { get; }
	///<include file='Utils/Docs/SVGRectElementWidth/SVGRectElementWidth.generated.xml' path='docs/SVGRectElementWidth/*'/>
	public SVGAnimatedLength Width { get; }
	///<include file='Utils/Docs/SVGRectElementHeight/SVGRectElementHeight.generated.xml' path='docs/SVGRectElementHeight/*'/>
	public SVGAnimatedLength Height { get; }
	///<include file='Utils/Docs/SVGRectElementRx/SVGRectElementRx.generated.xml' path='docs/SVGRectElementRx/*'/>
	public SVGAnimatedLength Rx { get; }
	///<include file='Utils/Docs/SVGRectElementRy/SVGRectElementRy.generated.xml' path='docs/SVGRectElementRy/*'/>
	public SVGAnimatedLength Ry { get; }
}

///<include file='Utils/Docs/SVGCircleElement/SVGCircleElement.generated.xml' path='docs/SVGCircleElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGCircleElement : SVGGeometryElement
{
	///<include file='Utils/Docs/SVGCircleElementCx/SVGCircleElementCx.generated.xml' path='docs/SVGCircleElementCx/*'/>
	public SVGAnimatedLength Cx { get; }
	///<include file='Utils/Docs/SVGCircleElementCy/SVGCircleElementCy.generated.xml' path='docs/SVGCircleElementCy/*'/>
	public SVGAnimatedLength Cy { get; }
	///<include file='Utils/Docs/SVGCircleElementR/SVGCircleElementR.generated.xml' path='docs/SVGCircleElementR/*'/>
	public SVGAnimatedLength R { get; }
}

///<include file='Utils/Docs/SVGEllipseElement/SVGEllipseElement.generated.xml' path='docs/SVGEllipseElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGEllipseElement : SVGGeometryElement
{
		public SVGAnimatedLength Cx { get; }
		public SVGAnimatedLength Cy { get; }
		public SVGAnimatedLength Rx { get; }
		public SVGAnimatedLength Ry { get; }
}

///<include file='Utils/Docs/SVGLineElement/SVGLineElement.generated.xml' path='docs/SVGLineElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGLineElement : SVGGeometryElement
{
	///<include file='Utils/Docs/SVGLineElementX1/SVGLineElementX1.generated.xml' path='docs/SVGLineElementX1/*'/>
	public SVGAnimatedLength X1 { get; }
	///<include file='Utils/Docs/SVGLineElementY1/SVGLineElementY1.generated.xml' path='docs/SVGLineElementY1/*'/>
	public SVGAnimatedLength Y1 { get; }
	///<include file='Utils/Docs/SVGLineElementX2/SVGLineElementX2.generated.xml' path='docs/SVGLineElementX2/*'/>
	public SVGAnimatedLength X2 { get; }
	///<include file='Utils/Docs/SVGLineElementY2/SVGLineElementY2.generated.xml' path='docs/SVGLineElementY2/*'/>
	public SVGAnimatedLength Y2 { get; }
}

///<include file='Utils/Docs/SVGPointList/SVGPointList.generated.xml' path='docs/SVGPointList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGPointList
{
	///<include file='Utils/Docs/SVGPointListLength/SVGPointListLength.generated.xml' path='docs/SVGPointListLength/*'/>
	public ulong Length { get; }
	///<include file='Utils/Docs/SVGPointListNumberOfItems/SVGPointListNumberOfItems.generated.xml' path='docs/SVGPointListNumberOfItems/*'/>
	public ulong NumberOfItems { get; }
	///<include file='Utils/Docs/SVGPointListClear/SVGPointListClear.generated.xml' path='docs/SVGPointListClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGPointListInitialize/SVGPointListInitialize.generated.xml' path='docs/SVGPointListInitialize/*'/>
	public DOMPoint Initialize(DOMPoint newItem) { throw new System.NotImplementedException(); }
	
	///<include file='Utils/Docs/SVGPointListInsertItemBefore/SVGPointListInsertItemBefore.generated.xml' path='docs/SVGPointListInsertItemBefore/*'/>
	public DOMPoint InsertItemBefore(DOMPoint newItem, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGPointListReplaceItem/SVGPointListReplaceItem.generated.xml' path='docs/SVGPointListReplaceItem/*'/>
	public DOMPoint ReplaceItem(DOMPoint newItem, ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGPointListRemoveItem/SVGPointListRemoveItem.generated.xml' path='docs/SVGPointListRemoveItem/*'/>
	public DOMPoint RemoveItem(ulong index) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGPointListAppendItem/SVGPointListAppendItem.generated.xml' path='docs/SVGPointListAppendItem/*'/>
	public DOMPoint AppendItem(DOMPoint newItem) { throw new System.NotImplementedException(); }
	
}

///<include file='Utils/Docs/SVGPolylineElement/SVGPolylineElement.generated.xml' path='docs/SVGPolylineElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGPolylineElement : SVGGeometryElement, SVGAnimatedPoints
{
}


///<include file='Utils/Docs/SVGPolygonElement/SVGPolygonElement.generated.xml' path='docs/SVGPolygonElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGPolygonElement : SVGGeometryElement, SVGAnimatedPoints
{
}


///<include file='Utils/Docs/SVGTextContentElement/SVGTextContentElement.generated.xml' path='docs/SVGTextContentElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGTextContentElement : SVGGraphicsElement
{
		public const ushort LENGTHADJUST_UNKNOWN = 0;
		public const ushort LENGTHADJUST_SPACING = 1;
		public const ushort LENGTHADJUST_SPACINGANDGLYPHS = 2;
	///<include file='Utils/Docs/SVGTextContentElementTextLength/SVGTextContentElementTextLength.generated.xml' path='docs/SVGTextContentElementTextLength/*'/>
	public SVGAnimatedLength TextLength { get; }
	///<include file='Utils/Docs/SVGTextContentElementLengthAdjust/SVGTextContentElementLengthAdjust.generated.xml' path='docs/SVGTextContentElementLengthAdjust/*'/>
	public SVGAnimatedEnumeration LengthAdjust { get; }
	///<include file='Utils/Docs/SVGTextContentElementGetNumberOfChars/SVGTextContentElementGetNumberOfChars.generated.xml' path='docs/SVGTextContentElementGetNumberOfChars/*'/>
	public long GetNumberOfChars() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTextContentElementGetComputedTextLength/SVGTextContentElementGetComputedTextLength.generated.xml' path='docs/SVGTextContentElementGetComputedTextLength/*'/>
	public Number GetComputedTextLength() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTextContentElementGetSubStringLength/SVGTextContentElementGetSubStringLength.generated.xml' path='docs/SVGTextContentElementGetSubStringLength/*'/>
	public Number GetSubStringLength(ulong charnum, ulong nchars) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTextContentElementGetStartPositionOfChar/SVGTextContentElementGetStartPositionOfChar.generated.xml' path='docs/SVGTextContentElementGetStartPositionOfChar/*'/>
	public DOMPoint GetStartPositionOfChar(ulong charnum) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTextContentElementGetEndPositionOfChar/SVGTextContentElementGetEndPositionOfChar.generated.xml' path='docs/SVGTextContentElementGetEndPositionOfChar/*'/>
	public DOMPoint GetEndPositionOfChar(ulong charnum) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTextContentElementGetExtentOfChar/SVGTextContentElementGetExtentOfChar.generated.xml' path='docs/SVGTextContentElementGetExtentOfChar/*'/>
	public DOMRect GetExtentOfChar(ulong charnum) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTextContentElementGetRotationOfChar/SVGTextContentElementGetRotationOfChar.generated.xml' path='docs/SVGTextContentElementGetRotationOfChar/*'/>
	public Number GetRotationOfChar(ulong charnum) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGTextContentElementGetCharNumAtPosition/SVGTextContentElementGetCharNumAtPosition.generated.xml' path='docs/SVGTextContentElementGetCharNumAtPosition/*'/>
	public long GetCharNumAtPosition(DOMPointInit point) { throw new System.NotImplementedException(); }
		public Undefined SelectSubString(ulong charnum, ulong nchars) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/SVGTextPositioningElement/SVGTextPositioningElement.generated.xml' path='docs/SVGTextPositioningElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGTextPositioningElement : SVGTextContentElement
{
		public SVGAnimatedLengthList X { get; }
		public SVGAnimatedLengthList Y { get; }
		public SVGAnimatedLengthList Dx { get; }
		public SVGAnimatedLengthList Dy { get; }
		public SVGAnimatedNumberList Rotate { get; }
}

///<include file='Utils/Docs/SVGTextElement/SVGTextElement.generated.xml' path='docs/SVGTextElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGTextElement : SVGTextPositioningElement
{
}

///<include file='Utils/Docs/SVGTSpanElement/SVGTSpanElement.generated.xml' path='docs/SVGTSpanElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGTSpanElement : SVGTextPositioningElement
{
}

///<include file='Utils/Docs/SVGTextPathElement/SVGTextPathElement.generated.xml' path='docs/SVGTextPathElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGTextPathElement : SVGTextContentElement, SVGURIReference
{
		public const ushort TEXTPATH_METHODTYPE_UNKNOWN = 0;
		public const ushort TEXTPATH_METHODTYPE_ALIGN = 1;
		public const ushort TEXTPATH_METHODTYPE_STRETCH = 2;
		public const ushort TEXTPATH_SPACINGTYPE_UNKNOWN = 0;
		public const ushort TEXTPATH_SPACINGTYPE_AUTO = 1;
		public const ushort TEXTPATH_SPACINGTYPE_EXACT = 2;
	///<include file='Utils/Docs/SVGTextPathElementStartOffset/SVGTextPathElementStartOffset.generated.xml' path='docs/SVGTextPathElementStartOffset/*'/>
	public SVGAnimatedLength StartOffset { get; }
	///<include file='Utils/Docs/SVGTextPathElementMethod/SVGTextPathElementMethod.generated.xml' path='docs/SVGTextPathElementMethod/*'/>
	public SVGAnimatedEnumeration Method { get; }
	///<include file='Utils/Docs/SVGTextPathElementSpacing/SVGTextPathElementSpacing.generated.xml' path='docs/SVGTextPathElementSpacing/*'/>
	public SVGAnimatedEnumeration Spacing { get; }
}


///<include file='Utils/Docs/SVGImageElement/SVGImageElement.generated.xml' path='docs/SVGImageElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGImageElement : SVGGraphicsElement, SVGURIReference
{
	///<include file='Utils/Docs/SVGImageElementX/SVGImageElementX.generated.xml' path='docs/SVGImageElementX/*'/>
	public SVGAnimatedLength X { get; }
	///<include file='Utils/Docs/SVGImageElementY/SVGImageElementY.generated.xml' path='docs/SVGImageElementY/*'/>
	public SVGAnimatedLength Y { get; }
	///<include file='Utils/Docs/SVGImageElementWidth/SVGImageElementWidth.generated.xml' path='docs/SVGImageElementWidth/*'/>
	public SVGAnimatedLength Width { get; }
	///<include file='Utils/Docs/SVGImageElementHeight/SVGImageElementHeight.generated.xml' path='docs/SVGImageElementHeight/*'/>
	public SVGAnimatedLength Height { get; }
	///<include file='Utils/Docs/SVGImageElementPreserveAspectRatio/SVGImageElementPreserveAspectRatio.generated.xml' path='docs/SVGImageElementPreserveAspectRatio/*'/>
	public SVGAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
		public DOMString? CrossOrigin { get; set; }
}


///<include file='Utils/Docs/SVGForeignObjectElement/SVGForeignObjectElement.generated.xml' path='docs/SVGForeignObjectElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGForeignObjectElement : SVGGraphicsElement
{
		public SVGAnimatedLength X { get; }
		public SVGAnimatedLength Y { get; }
		public SVGAnimatedLength Width { get; }
		public SVGAnimatedLength Height { get; }
}

///<include file='Utils/Docs/SVGMarkerElement/SVGMarkerElement.generated.xml' path='docs/SVGMarkerElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGMarkerElement : SVGElement, SVGFitToViewBox
{
		public const ushort SVG_MARKERUNITS_UNKNOWN = 0;
		public const ushort SVG_MARKERUNITS_USERSPACEONUSE = 1;
		public const ushort SVG_MARKERUNITS_STROKEWIDTH = 2;
		public const ushort SVG_MARKER_ORIENT_UNKNOWN = 0;
		public const ushort SVG_MARKER_ORIENT_AUTO = 1;
		public const ushort SVG_MARKER_ORIENT_ANGLE = 2;
	///<include file='Utils/Docs/SVGMarkerElementRefX/SVGMarkerElementRefX.generated.xml' path='docs/SVGMarkerElementRefX/*'/>
	public SVGAnimatedLength RefX { get; }
	///<include file='Utils/Docs/SVGMarkerElementRefY/SVGMarkerElementRefY.generated.xml' path='docs/SVGMarkerElementRefY/*'/>
	public SVGAnimatedLength RefY { get; }
	///<include file='Utils/Docs/SVGMarkerElementMarkerUnits/SVGMarkerElementMarkerUnits.generated.xml' path='docs/SVGMarkerElementMarkerUnits/*'/>
	public SVGAnimatedEnumeration MarkerUnits { get; }
	///<include file='Utils/Docs/SVGMarkerElementMarkerWidth/SVGMarkerElementMarkerWidth.generated.xml' path='docs/SVGMarkerElementMarkerWidth/*'/>
	public SVGAnimatedLength MarkerWidth { get; }
	///<include file='Utils/Docs/SVGMarkerElementMarkerHeight/SVGMarkerElementMarkerHeight.generated.xml' path='docs/SVGMarkerElementMarkerHeight/*'/>
	public SVGAnimatedLength MarkerHeight { get; }
	///<include file='Utils/Docs/SVGMarkerElementOrientType/SVGMarkerElementOrientType.generated.xml' path='docs/SVGMarkerElementOrientType/*'/>
	public SVGAnimatedEnumeration OrientType { get; }
	///<include file='Utils/Docs/SVGMarkerElementOrientAngle/SVGMarkerElementOrientAngle.generated.xml' path='docs/SVGMarkerElementOrientAngle/*'/>
	public SVGAnimatedAngle OrientAngle { get; }
		public DOMString Orient { get; set; }
	///<include file='Utils/Docs/SVGMarkerElementSetOrientToAuto/SVGMarkerElementSetOrientToAuto.generated.xml' path='docs/SVGMarkerElementSetOrientToAuto/*'/>
	public Undefined SetOrientToAuto() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SVGMarkerElementSetOrientToAngle/SVGMarkerElementSetOrientToAngle.generated.xml' path='docs/SVGMarkerElementSetOrientToAngle/*'/>
	public Undefined SetOrientToAngle(SVGAngle angle) { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/SVGGradientElement/SVGGradientElement.generated.xml' path='docs/SVGGradientElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGGradientElement : SVGElement, SVGURIReference
{
		public const ushort SVG_SPREADMETHOD_UNKNOWN = 0;
		public const ushort SVG_SPREADMETHOD_PAD = 1;
		public const ushort SVG_SPREADMETHOD_REFLECT = 2;
		public const ushort SVG_SPREADMETHOD_REPEAT = 3;
	///<include file='Utils/Docs/SVGGradientElementGradientUnits/SVGGradientElementGradientUnits.generated.xml' path='docs/SVGGradientElementGradientUnits/*'/>
	public SVGAnimatedEnumeration GradientUnits { get; }
	///<include file='Utils/Docs/SVGGradientElementGradientTransform/SVGGradientElementGradientTransform.generated.xml' path='docs/SVGGradientElementGradientTransform/*'/>
	public SVGAnimatedTransformList GradientTransform { get; }
	///<include file='Utils/Docs/SVGGradientElementSpreadMethod/SVGGradientElementSpreadMethod.generated.xml' path='docs/SVGGradientElementSpreadMethod/*'/>
	public SVGAnimatedEnumeration SpreadMethod { get; }
}


///<include file='Utils/Docs/SVGLinearGradientElement/SVGLinearGradientElement.generated.xml' path='docs/SVGLinearGradientElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGLinearGradientElement : SVGGradientElement
{
	///<include file='Utils/Docs/SVGLinearGradientElementX1/SVGLinearGradientElementX1.generated.xml' path='docs/SVGLinearGradientElementX1/*'/>
	public SVGAnimatedLength X1 { get; }
	///<include file='Utils/Docs/SVGLinearGradientElementY1/SVGLinearGradientElementY1.generated.xml' path='docs/SVGLinearGradientElementY1/*'/>
	public SVGAnimatedLength Y1 { get; }
	///<include file='Utils/Docs/SVGLinearGradientElementX2/SVGLinearGradientElementX2.generated.xml' path='docs/SVGLinearGradientElementX2/*'/>
	public SVGAnimatedLength X2 { get; }
	///<include file='Utils/Docs/SVGLinearGradientElementY2/SVGLinearGradientElementY2.generated.xml' path='docs/SVGLinearGradientElementY2/*'/>
	public SVGAnimatedLength Y2 { get; }
}

///<include file='Utils/Docs/SVGRadialGradientElement/SVGRadialGradientElement.generated.xml' path='docs/SVGRadialGradientElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGRadialGradientElement : SVGGradientElement
{
	///<include file='Utils/Docs/SVGRadialGradientElementCx/SVGRadialGradientElementCx.generated.xml' path='docs/SVGRadialGradientElementCx/*'/>
	public SVGAnimatedLength Cx { get; }
	///<include file='Utils/Docs/SVGRadialGradientElementCy/SVGRadialGradientElementCy.generated.xml' path='docs/SVGRadialGradientElementCy/*'/>
	public SVGAnimatedLength Cy { get; }
	///<include file='Utils/Docs/SVGRadialGradientElementR/SVGRadialGradientElementR.generated.xml' path='docs/SVGRadialGradientElementR/*'/>
	public SVGAnimatedLength R { get; }
	///<include file='Utils/Docs/SVGRadialGradientElementFx/SVGRadialGradientElementFx.generated.xml' path='docs/SVGRadialGradientElementFx/*'/>
	public SVGAnimatedLength Fx { get; }
	///<include file='Utils/Docs/SVGRadialGradientElementFy/SVGRadialGradientElementFy.generated.xml' path='docs/SVGRadialGradientElementFy/*'/>
	public SVGAnimatedLength Fy { get; }
		public SVGAnimatedLength Fr { get; }
}

///<include file='Utils/Docs/SVGStopElement/SVGStopElement.generated.xml' path='docs/SVGStopElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGStopElement : SVGElement
{
	///<include file='Utils/Docs/SVGStopElementOffset/SVGStopElementOffset.generated.xml' path='docs/SVGStopElementOffset/*'/>
	public SVGAnimatedNumber Offset { get; }
}

///<include file='Utils/Docs/SVGPatternElement/SVGPatternElement.generated.xml' path='docs/SVGPatternElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGPatternElement : SVGElement, SVGFitToViewBox, SVGURIReference
{
	///<include file='Utils/Docs/SVGPatternElementPatternUnits/SVGPatternElementPatternUnits.generated.xml' path='docs/SVGPatternElementPatternUnits/*'/>
	public SVGAnimatedEnumeration PatternUnits { get; }
	///<include file='Utils/Docs/SVGPatternElementPatternContentUnits/SVGPatternElementPatternContentUnits.generated.xml' path='docs/SVGPatternElementPatternContentUnits/*'/>
	public SVGAnimatedEnumeration PatternContentUnits { get; }
	///<include file='Utils/Docs/SVGPatternElementPatternTransform/SVGPatternElementPatternTransform.generated.xml' path='docs/SVGPatternElementPatternTransform/*'/>
	public SVGAnimatedTransformList PatternTransform { get; }
		public SVGAnimatedLength X { get; }
		public SVGAnimatedLength Y { get; }
		public SVGAnimatedLength Width { get; }
		public SVGAnimatedLength Height { get; }
}



///<include file='Utils/Docs/SVGScriptElement/SVGScriptElement.generated.xml' path='docs/SVGScriptElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGScriptElement : SVGElement, SVGURIReference
{
		public DOMString Type { get; set; }
		public DOMString? CrossOrigin { get; set; }
}


///<include file='Utils/Docs/SVGAElement/SVGAElement.generated.xml' path='docs/SVGAElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGAElement : SVGGraphicsElement, SVGURIReference
{
	///<include file='Utils/Docs/SVGAElementTarget/SVGAElementTarget.generated.xml' path='docs/SVGAElementTarget/*'/>
	public SVGAnimatedString Target { get; }
		public DOMString Download { get; set; }
		public USVString Ping { get; set; }
		public DOMString Rel { get; set; }
		public DOMTokenList RelList { get; }
		public DOMString Hreflang { get; set; }
		public DOMString Type { get; set; }
		public DOMString Text { get; set; }
		public DOMString ReferrerPolicy { get; set; }
}


///<include file='Utils/Docs/SVGAElement/SVGAElement.generated.xml' path='docs/SVGAElement/*'/>
public partial class SVGAElement
{
		public USVString Origin { get; }
		public USVString Protocol { get; set; }
		public USVString Username { get; set; }
		public USVString Password { get; set; }
		public USVString Host { get; set; }
		public USVString Hostname { get; set; }
		public USVString Port { get; set; }
		public USVString Pathname { get; set; }
		public USVString Search { get; set; }
		public USVString Hash { get; set; }
}

///<include file='Utils/Docs/SVGViewElement/SVGViewElement.generated.xml' path='docs/SVGViewElement/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SVGViewElement : SVGElement, SVGFitToViewBox
{
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class TestUtils
{
		public Task<Undefined> Gc() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.Default)]
public partial class TextDetector
{
		public TextDetector() { }
		[To(ToAttribute.FirstCharToLowerCase)]
	public Task<List<DetectedText>> Detect(ImageBitmapSource image) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DetectedText
{
		public required DOMRectReadOnly BoundingBox;
		public required DOMString RawValue;
		public required List<Point2D> CornerPoints;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TouchInit
{
		public required long Identifier;
		public required EventTarget Target;
		public Number ClientX;
		public Number ClientY;
		public Number ScreenX;
		public Number ScreenY;
		public Number PageX;
		public Number PageY;
		public Number RadiusX;
		public Number RadiusY;
		public Number RotationAngle;
		public Number Force;
		public Number AltitudeAngle;
		public Number AzimuthAngle;
		public TouchType TouchType;
}

///<include file='Utils/Docs/Touch/Touch.generated.xml' path='docs/Touch/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Touch
{
	///<include file='Utils/Docs/TouchTouch/TouchTouch.generated.xml' path='docs/TouchTouch/*'/>
	public Touch(TouchInit touchInitDict) { }
	///<include file='Utils/Docs/TouchIdentifier/TouchIdentifier.generated.xml' path='docs/TouchIdentifier/*'/>
	public long Identifier { get; }
	///<include file='Utils/Docs/TouchTarget/TouchTarget.generated.xml' path='docs/TouchTarget/*'/>
	public EventTarget Target { get; }
	///<include file='Utils/Docs/TouchScreenX/TouchScreenX.generated.xml' path='docs/TouchScreenX/*'/>
	public Number ScreenX { get; }
	///<include file='Utils/Docs/TouchScreenY/TouchScreenY.generated.xml' path='docs/TouchScreenY/*'/>
	public Number ScreenY { get; }
	///<include file='Utils/Docs/TouchClientX/TouchClientX.generated.xml' path='docs/TouchClientX/*'/>
	public Number ClientX { get; }
	///<include file='Utils/Docs/TouchClientY/TouchClientY.generated.xml' path='docs/TouchClientY/*'/>
	public Number ClientY { get; }
	///<include file='Utils/Docs/TouchPageX/TouchPageX.generated.xml' path='docs/TouchPageX/*'/>
	public Number PageX { get; }
	///<include file='Utils/Docs/TouchPageY/TouchPageY.generated.xml' path='docs/TouchPageY/*'/>
	public Number PageY { get; }
	///<include file='Utils/Docs/TouchRadiusX/TouchRadiusX.generated.xml' path='docs/TouchRadiusX/*'/>
	public Number RadiusX { get; }
	///<include file='Utils/Docs/TouchRadiusY/TouchRadiusY.generated.xml' path='docs/TouchRadiusY/*'/>
	public Number RadiusY { get; }
	///<include file='Utils/Docs/TouchRotationAngle/TouchRotationAngle.generated.xml' path='docs/TouchRotationAngle/*'/>
	public Number RotationAngle { get; }
	///<include file='Utils/Docs/TouchForce/TouchForce.generated.xml' path='docs/TouchForce/*'/>
	public Number Force { get; }
		public Number AltitudeAngle { get; }
		public Number AzimuthAngle { get; }
		public TouchType TouchType { get; }
	public Touch() { }
}

///<include file='Utils/Docs/TouchList/TouchList.generated.xml' path='docs/TouchList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TouchList
{
	///<include file='Utils/Docs/TouchListLength/TouchListLength.generated.xml' path='docs/TouchListLength/*'/>
	public ulong Length { get; }
	
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TouchEventInit : EventModifierInit
{
		public List<Touch> Touches;
		public List<Touch> TargetTouches;
		public List<Touch> ChangedTouches;
}

///<include file='Utils/Docs/TouchEvent/TouchEvent.generated.xml' path='docs/TouchEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TouchEvent : UIEvent
{
	///<include file='Utils/Docs/TouchEventTouchEvent/TouchEventTouchEvent.generated.xml' path='docs/TouchEventTouchEvent/*'/>
	public TouchEvent(DOMString type, TouchEventInit eventInitDict) { }
	///<include file='Utils/Docs/TouchEventTouches/TouchEventTouches.generated.xml' path='docs/TouchEventTouches/*'/>
	public TouchList Touches { get; }
	///<include file='Utils/Docs/TouchEventTargetTouches/TouchEventTargetTouches.generated.xml' path='docs/TouchEventTargetTouches/*'/>
	public TouchList TargetTouches { get; }
	///<include file='Utils/Docs/TouchEventChangedTouches/TouchEventChangedTouches.generated.xml' path='docs/TouchEventChangedTouches/*'/>
	public TouchList ChangedTouches { get; }
	///<include file='Utils/Docs/TouchEventAltKey/TouchEventAltKey.generated.xml' path='docs/TouchEventAltKey/*'/>
	public bool AltKey { get; }
	///<include file='Utils/Docs/TouchEventMetaKey/TouchEventMetaKey.generated.xml' path='docs/TouchEventMetaKey/*'/>
	public bool MetaKey { get; }
	///<include file='Utils/Docs/TouchEventCtrlKey/TouchEventCtrlKey.generated.xml' path='docs/TouchEventCtrlKey/*'/>
	public bool CtrlKey { get; }
	///<include file='Utils/Docs/TouchEventShiftKey/TouchEventShiftKey.generated.xml' path='docs/TouchEventShiftKey/*'/>
	public bool ShiftKey { get; }
	
	public TouchEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PrivateToken
{
		public required TokenVersion Version;
		public required OperationType Operation;
		public RefreshPolicy RefreshPolicy;
		public List<USVString> Issuers;
}

///<include file='Utils/Docs/RequestInit/RequestInit.generated.xml' path='docs/RequestInit/*'/>
public partial class RequestInit
{
		public PrivateToken PrivateToken;
}

///<include file='Utils/Docs/HTMLIFrameElement/HTMLIFrameElement.generated.xml' path='docs/HTMLIFrameElement/*'/>
public partial class HTMLIFrameElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString PrivateToken { get; set; }
}

///<include file='Utils/Docs/XMLHttpRequest/XMLHttpRequest.generated.xml' path='docs/XMLHttpRequest/*'/>
public partial class XMLHttpRequest
{
		public Undefined SetPrivateToken(PrivateToken privateToken) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
		public Task<bool> HasPrivateToken(USVString issuer) { throw new System.NotImplementedException(); }
		public Task<bool> HasRedemptionRecord(USVString issuer) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TrustedHTML/TrustedHTML.generated.xml' path='docs/TrustedHTML/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TrustedHTML
{
	
	///<include file='Utils/Docs/TrustedHTMLToJSON/TrustedHTMLToJSON.generated.xml' path='docs/TrustedHTMLToJSON/*'/>
	public DOMString ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TrustedScript/TrustedScript.generated.xml' path='docs/TrustedScript/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TrustedScript
{
	
	///<include file='Utils/Docs/TrustedScriptToJSON/TrustedScriptToJSON.generated.xml' path='docs/TrustedScriptToJSON/*'/>
	public DOMString ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TrustedScriptURL/TrustedScriptURL.generated.xml' path='docs/TrustedScriptURL/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TrustedScriptURL
{
	
	///<include file='Utils/Docs/TrustedScriptURLToJSON/TrustedScriptURLToJSON.generated.xml' path='docs/TrustedScriptURLToJSON/*'/>
	public USVString ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/TrustedTypePolicyFactory/TrustedTypePolicyFactory.generated.xml' path='docs/TrustedTypePolicyFactory/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TrustedTypePolicyFactory
{
	///<include file='Utils/Docs/TrustedTypePolicyFactoryCreatePolicy/TrustedTypePolicyFactoryCreatePolicy.generated.xml' path='docs/TrustedTypePolicyFactoryCreatePolicy/*'/>
	public TrustedTypePolicy CreatePolicy(DOMString policyName, TrustedTypePolicyOptions policyOptions) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TrustedTypePolicyFactoryIsHTML/TrustedTypePolicyFactoryIsHTML.generated.xml' path='docs/TrustedTypePolicyFactoryIsHTML/*'/>
	public bool IsHTML(dynamic value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TrustedTypePolicyFactoryIsScript/TrustedTypePolicyFactoryIsScript.generated.xml' path='docs/TrustedTypePolicyFactoryIsScript/*'/>
	public bool IsScript(dynamic value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TrustedTypePolicyFactoryIsScriptURL/TrustedTypePolicyFactoryIsScriptURL.generated.xml' path='docs/TrustedTypePolicyFactoryIsScriptURL/*'/>
	public bool IsScriptURL(dynamic value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TrustedTypePolicyFactoryEmptyHTML/TrustedTypePolicyFactoryEmptyHTML.generated.xml' path='docs/TrustedTypePolicyFactoryEmptyHTML/*'/>
	public TrustedHTML EmptyHTML { get; }
	///<include file='Utils/Docs/TrustedTypePolicyFactoryEmptyScript/TrustedTypePolicyFactoryEmptyScript.generated.xml' path='docs/TrustedTypePolicyFactoryEmptyScript/*'/>
	public TrustedScript EmptyScript { get; }
	///<include file='Utils/Docs/TrustedTypePolicyFactoryGetAttributeType/TrustedTypePolicyFactoryGetAttributeType.generated.xml' path='docs/TrustedTypePolicyFactoryGetAttributeType/*'/>
	public DOMString? GetAttributeType(DOMString tagName, DOMString attribute, DOMString? elementNs, DOMString? attrNs) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TrustedTypePolicyFactoryGetPropertyType/TrustedTypePolicyFactoryGetPropertyType.generated.xml' path='docs/TrustedTypePolicyFactoryGetPropertyType/*'/>
	public DOMString? GetPropertyType(DOMString tagName, DOMString property, DOMString? elementNs) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TrustedTypePolicyFactoryDefaultPolicy/TrustedTypePolicyFactoryDefaultPolicy.generated.xml' path='docs/TrustedTypePolicyFactoryDefaultPolicy/*'/>
	public TrustedTypePolicy? DefaultPolicy { get; }
}

///<include file='Utils/Docs/TrustedTypePolicy/TrustedTypePolicy.generated.xml' path='docs/TrustedTypePolicy/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class TrustedTypePolicy
{
	///<include file='Utils/Docs/TrustedTypePolicyName/TrustedTypePolicyName.generated.xml' path='docs/TrustedTypePolicyName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/TrustedTypePolicyCreateHTML/TrustedTypePolicyCreateHTML.generated.xml' path='docs/TrustedTypePolicyCreateHTML/*'/>
	public TrustedHTML CreateHTML(DOMString input, params dynamic[] arguments) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TrustedTypePolicyCreateScript/TrustedTypePolicyCreateScript.generated.xml' path='docs/TrustedTypePolicyCreateScript/*'/>
	public TrustedScript CreateScript(DOMString input, params dynamic[] arguments) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/TrustedTypePolicyCreateScriptURL/TrustedTypePolicyCreateScriptURL.generated.xml' path='docs/TrustedTypePolicyCreateScriptURL/*'/>
	public TrustedScriptURL CreateScriptURL(DOMString input, params dynamic[] arguments) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TrustedTypePolicyOptions
{
		public CreateHTMLCallback CreateHTML;
		public CreateScriptCallback CreateScript;
		public CreateScriptURLCallback CreateScriptURL;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public Task<Undefined> JoinAdInterestGroup(AuctionAdInterestGroup group) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuctionAd
{
		public required USVString RenderURL;
		public USVString SizeGroup;
		public dynamic Metadata;
		public USVString BuyerReportingId;
		public USVString BuyerAndSellerReportingId;
		public List<USVString> SelectableBuyerAndSellerReportingIds;
		public List<USVString> AllowedReportingOrigins;
		public DOMString AdRenderId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuctionAdInterestGroupSize
{
		public required USVString Width;
		public required USVString Height;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GenerateBidInterestGroup
{
		public required USVString Owner;
		public required USVString Name;
		public bool EnableBiddingSignalsPrioritization;
		public Dictionary<DOMString, Number> PriorityVector;
		public Dictionary<USVString, List<DOMString>> SellerCapabilities;
		public DOMString ExecutionMode;
		public USVString BiddingLogicURL;
		public USVString BiddingWasmHelperURL;
		public USVString UpdateURL;
		public USVString TrustedBiddingSignalsURL;
		public List<USVString> TrustedBiddingSignalsKeys;
		public DOMString TrustedBiddingSignalsSlotSizeMode;
		public long MaxTrustedBiddingSignalsURLLength;
		public USVString TrustedBiddingSignalsCoordinator;
		public dynamic UserBiddingSignals;
		public List<AuctionAd> Ads;
		public List<AuctionAd> AdComponents;
		public Dictionary<DOMString, AuctionAdInterestGroupSize> AdSizes;
		public Dictionary<DOMString, List<DOMString>> SizeGroups;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProtectedAudiencePrivateAggregationConfig
{
		public USVString AggregationCoordinatorOrigin;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuctionAdInterestGroup : GenerateBidInterestGroup
{
		public Number Priority;
		public Dictionary<DOMString, Number> PrioritySignalsOverrides;
		public required Number LifetimeMs;
		public DOMString AdditionalBidKey;
		public ProtectedAudiencePrivateAggregationConfig PrivateAggregationConfig;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public Task<Undefined> LeaveAdInterestGroup(AuctionAdInterestGroupKey group) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuctionAdInterestGroupKey
{
		public required USVString Owner;
		public required USVString Name;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public Task<Undefined> ClearOriginJoinedAdInterestGroups(USVString owner, List<USVString> interestGroupsToKeep) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public Task<USVString?> RunAdAuction(AuctionAdConfig config) { throw new System.NotImplementedException(); }
		public bool DeprecatedRunAdAuctionEnforcesKAnonymity { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuctionReportBuyersConfig
{
		public required BigInt Bucket;
		public required Number Scale;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuctionReportBuyerDebugModeConfig
{
		public bool Enabled;
		public BigInt? DebugKey;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuctionRealTimeReportingConfig
{
		public required DOMString Type;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuctionAdConfig
{
		public required USVString Seller;
		public required USVString DecisionLogicURL;
		public USVString TrustedScoringSignalsURL;
		public long MaxTrustedScoringSignalsURLLength;
		public USVString TrustedScoringSignalsCoordinator;
		public List<USVString> InterestGroupBuyers;
		public Task<dynamic> AuctionSignals;
		public Task<dynamic> SellerSignals;
		public Task<DOMString?> DirectFromSellerSignalsHeaderAdSlot;
		public Task<Dictionary<USVString, USVString>?> DeprecatedRenderURLReplacements;
		public ulong SellerTimeout;
		public ushort SellerExperimentGroupId;
		public Task<Dictionary<USVString, dynamic>?> PerBuyerSignals;
		public Task<Dictionary<USVString, ulong>?> PerBuyerTimeouts;
		public Task<Dictionary<USVString, ulong>?> PerBuyerCumulativeTimeouts;
		public ulong ReportingTimeout;
		public USVString SellerCurrency;
		public Task<Dictionary<USVString, USVString>?> PerBuyerCurrencies;
		public Dictionary<USVString, ushort> PerBuyerMultiBidLimits;
		public Dictionary<USVString, ushort> PerBuyerGroupLimits;
		public Dictionary<USVString, ushort> PerBuyerExperimentGroupIds;
		public Dictionary<USVString, Dictionary<USVString, Number>> PerBuyerPrioritySignals;
		public List<BigInt> AuctionReportBuyerKeys;
		public Dictionary<DOMString, AuctionReportBuyersConfig> AuctionReportBuyers;
		public AuctionReportBuyerDebugModeConfig AuctionReportBuyerDebugModeConfig;
		public List<DOMString> RequiredSellerCapabilities;
		public ProtectedAudiencePrivateAggregationConfig PrivateAggregationConfig;
		public Dictionary<DOMString, DOMString> RequestedSize;
		public List<Dictionary<DOMString, DOMString>> AllSlotsRequestedSizes;
		public Task<Undefined> AdditionalBids;
		public DOMString AuctionNonce;
		public AuctionRealTimeReportingConfig SellerRealTimeReportingConfig;
		public Dictionary<USVString, AuctionRealTimeReportingConfig> PerBuyerRealTimeReportingConfig;
		public List<AuctionAdConfig> ComponentAuctions;
		public AbortSignal? Signal;
		public Task<bool> ResolveToConfig;
		public Task<System.Byte> ServerResponse;
		public USVString RequestId;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public bool CanLoadAdAuctionFencedFrame() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public Task<AdAuctionData> GetInterestGroupAdAuctionData(AdAuctionDataConfig config) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AdAuctionData
{
		public required System.Byte Request;
		public required USVString RequestId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AdAuctionDataConfig
{
		public required USVString Seller;
		public required USVString CoordinatorOrigin;
		public ulong RequestSize;
		public Dictionary<USVString, AdAuctionDataBuyerConfig> PerBuyerConfig;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AdAuctionDataBuyerConfig
{
		public ulong TargetSize;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StorageInterestGroup : AuctionAdInterestGroup
{
		public ulong JoinCount;
		public ulong BidCount;
		public List<PreviousWin> PrevWinsMs;
		public USVString JoiningOrigin;
		public long TimeSinceGroupJoinedMs;
		public long LifetimeRemainingMs;
		public long TimeSinceLastUpdateMs;
		public long TimeUntilNextUpdateMs;
		public ulong EstimatedSize;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public Task<DOMString> CreateAuctionNonce() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class InterestGroupScriptRunnerGlobalScope
{
		public PrivateAggregation? PrivateAggregation { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PASignalValue
{
		public required DOMString BaseValue;
		public Number Scale;
		public Union147 Offset;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PAExtendedHistogramContribution
{
		public required Union148 Bucket;
		public required Union149 Value;
		public BigInt FilteringId;
}

public partial class PrivateAggregation
{
		public Undefined ContributeToHistogramOnEvent(DOMString event_, PAExtendedHistogramContribution contribution) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ForDebuggingOnly
{
		public Undefined ReportAdAuctionWin(USVString url) { throw new System.NotImplementedException(); }
		public Undefined ReportAdAuctionLoss(USVString url) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RealTimeReporting
{
		public Undefined ContributeToHistogram(RealTimeContribution contribution) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RealTimeContribution
{
		public required long Bucket;
		public required Number PriorityWeight;
		public long LatencyThreshold;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class InterestGroupBiddingAndScoringScriptRunnerGlobalScope : InterestGroupScriptRunnerGlobalScope
{
		public ForDebuggingOnly ForDebuggingOnly { get; }
		public RealTimeReporting RealTimeReporting { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class InterestGroupBiddingScriptRunnerGlobalScope : InterestGroupBiddingAndScoringScriptRunnerGlobalScope
{
		public bool SetBid(Union150 oneOrManyBids) { throw new System.NotImplementedException(); }
		public Undefined SetPriority(Number priority) { throw new System.NotImplementedException(); }
		public Undefined SetPrioritySignalsOverride(DOMString key, Number? priority) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AdRender
{
		public required DOMString Url;
		public DOMString Width;
		public DOMString Height;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GenerateBidOutput
{
		public Number Bid;
		public DOMString BidCurrency;
		public Union151 Render;
		public dynamic Ad;
		public USVString SelectedBuyerAndSellerReportingId;
		public List<DOMString> AdComponents;
		public Number AdCost;
		public double ModelingSignals;
		public bool AllowComponentAuction;
		public ulong TargetNumAdComponents;
		public ulong NumMandatoryAdComponents;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class InterestGroupScoringScriptRunnerGlobalScope : InterestGroupBiddingAndScoringScriptRunnerGlobalScope
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class InterestGroupReportingScriptRunnerGlobalScope : InterestGroupScriptRunnerGlobalScope
{
		public Undefined SendReportTo(DOMString url) { throw new System.NotImplementedException(); }
		public Undefined RegisterAdBeacon(Dictionary<DOMString, USVString> map) { throw new System.NotImplementedException(); }
		public Undefined RegisterAdMacro(DOMString name, USVString value) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public Undefined UpdateAdInterestGroups() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
		public ProtectedAudience ProtectedAudience { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProtectedAudience
{
		public dynamic QueryFeatureSupport(DOMString feature) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/RequestInit/RequestInit.generated.xml' path='docs/RequestInit/*'/>
public partial class RequestInit
{
		public bool AdAuctionHeaders;
}

///<include file='Utils/Docs/HTMLIFrameElement/HTMLIFrameElement.generated.xml' path='docs/HTMLIFrameElement/*'/>
public partial class HTMLIFrameElement
{
		[To(ToAttribute.FirstCharToLowerCase)]
	public bool AdAuctionHeaders { get; set; }
}



[To(ToAttribute.FirstCharToLowerCase)]
public partial class BiddingBrowserSignals
{
		public required DOMString TopWindowHostname;
		public required USVString Seller;
		public required long JoinCount;
		public required long BidCount;
		public required long Recency;
		public required long AdComponentsLimit;
		public required ushort MultiBidLimit;
		public Dictionary<DOMString, DOMString> RequestedSize;
		public USVString TopLevelSeller;
		public List<PreviousWin> PrevWinsMs;
		public Object WasmHelper;
		public ulong DataVersion;
		public ulong CrossOriginDataVersion;
		public bool ForDebuggingOnlyInCooldownOrLockout;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScoringBrowserSignals
{
		public required DOMString TopWindowHostname;
		public required USVString InterestGroupOwner;
		public required USVString RenderURL;
		public required ulong BiddingDurationMsec;
		public required DOMString BidCurrency;
		public Dictionary<DOMString, DOMString> RenderSize;
		public ulong DataVersion;
		public ulong CrossOriginDataVersion;
		public List<USVString> AdComponents;
		public bool ForDebuggingOnlyInCooldownOrLockout;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReportingBrowserSignals
{
		public required DOMString TopWindowHostname;
		public required USVString InterestGroupOwner;
		public required USVString RenderURL;
		public required Number Bid;
		public required Number HighestScoringOtherBid;
		public DOMString BidCurrency;
		public DOMString HighestScoringOtherBidCurrency;
		public USVString TopLevelSeller;
		public USVString ComponentSeller;
		public USVString BuyerAndSellerReportingId;
		public USVString SelectedBuyerAndSellerReportingId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReportResultBrowserSignals : ReportingBrowserSignals
{
		public required Number Desirability;
		public DOMString TopLevelSellerSignals;
		public Number ModifiedBid;
		public ulong DataVersion;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ReportWinBrowserSignals : ReportingBrowserSignals
{
		public Number AdCost;
		public USVString Seller;
		public bool MadeHighestScoringOtherBid;
		public DOMString InterestGroupName;
		public DOMString BuyerReportingId;
		public ushort ModelingSignals;
		public ulong DataVersion;
		public KAnonStatus KAnonStatus;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DirectFromSellerSignalsForBuyer
{
		public dynamic AuctionSignals;
		public dynamic PerBuyerSignals;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DirectFromSellerSignalsForSeller
{
		public dynamic AuctionSignals;
		public dynamic SellerSignals;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScoreAdOutput
{
		public required Number Desirability;
		public Number Bid;
		public DOMString BidCurrency;
		public Number IncomingBidInSellerCurrency;
		public bool AllowComponentAuction;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigatorUABrandVersion
{
		public DOMString Brand;
		public DOMString Version;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class UADataValues
{
		public DOMString Architecture;
		public DOMString Bitness;
		public List<NavigatorUABrandVersion> Brands;
		public List<DOMString> FormFactors;
		public List<NavigatorUABrandVersion> FullVersionList;
		public DOMString Model;
		public bool Mobile;
		public DOMString Platform;
		public DOMString PlatformVersion;
		public DOMString UaFullVersion;
		public bool Wow64;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class UALowEntropyJSON
{
		public List<NavigatorUABrandVersion> Brands;
		public bool Mobile;
		public DOMString Platform;
}

///<include file='Utils/Docs/NavigatorUAData/NavigatorUAData.generated.xml' path='docs/NavigatorUAData/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NavigatorUAData
{
	///<include file='Utils/Docs/NavigatorUADataBrands/NavigatorUADataBrands.generated.xml' path='docs/NavigatorUADataBrands/*'/>
	public NavigatorUABrandVersion[] Brands { get; }
	///<include file='Utils/Docs/NavigatorUADataMobile/NavigatorUADataMobile.generated.xml' path='docs/NavigatorUADataMobile/*'/>
	public bool Mobile { get; }
	///<include file='Utils/Docs/NavigatorUADataPlatform/NavigatorUADataPlatform.generated.xml' path='docs/NavigatorUADataPlatform/*'/>
	public DOMString Platform { get; }
	///<include file='Utils/Docs/NavigatorUADataGetHighEntropyValues/NavigatorUADataGetHighEntropyValues.generated.xml' path='docs/NavigatorUADataGetHighEntropyValues/*'/>
	public Task<UADataValues> GetHighEntropyValues(List<DOMString> hints) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigatorUADataToJSON/NavigatorUADataToJSON.generated.xml' path='docs/NavigatorUADataToJSON/*'/>
	public UALowEntropyJSON ToJSON() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/UIEvent/UIEvent.generated.xml' path='docs/UIEvent/*'/>
public partial class UIEvent : Event
{
	///<include file='Utils/Docs/UIEventUIEvent/UIEventUIEvent.generated.xml' path='docs/UIEventUIEvent/*'/>
	public UIEvent(DOMString type, UIEventInit eventInitDict) { }
	///<include file='Utils/Docs/UIEventView/UIEventView.generated.xml' path='docs/UIEventView/*'/>
	public Window? View { get; }
	///<include file='Utils/Docs/UIEventDetail/UIEventDetail.generated.xml' path='docs/UIEventDetail/*'/>
	public long Detail { get; }
	public UIEvent() { }
}

public partial class UIEventInit : EventInit
{
		public Window? View;
		public long Detail;
}

///<include file='Utils/Docs/FocusEvent/FocusEvent.generated.xml' path='docs/FocusEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FocusEvent : UIEvent
{
	///<include file='Utils/Docs/FocusEventFocusEvent/FocusEventFocusEvent.generated.xml' path='docs/FocusEventFocusEvent/*'/>
	public FocusEvent(DOMString type, FocusEventInit eventInitDict) { }
	///<include file='Utils/Docs/FocusEventRelatedTarget/FocusEventRelatedTarget.generated.xml' path='docs/FocusEventRelatedTarget/*'/>
	public EventTarget? RelatedTarget { get; }
	public FocusEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FocusEventInit : UIEventInit
{
		public EventTarget? RelatedTarget;
}

///<include file='Utils/Docs/MouseEvent/MouseEvent.generated.xml' path='docs/MouseEvent/*'/>
public partial class MouseEvent : UIEvent
{
	///<include file='Utils/Docs/MouseEventMouseEvent/MouseEventMouseEvent.generated.xml' path='docs/MouseEventMouseEvent/*'/>
	public MouseEvent(DOMString type, MouseEventInit eventInitDict) { }
	///<include file='Utils/Docs/MouseEventScreenX/MouseEventScreenX.generated.xml' path='docs/MouseEventScreenX/*'/>
	public long ScreenX { get; }
	///<include file='Utils/Docs/MouseEventScreenY/MouseEventScreenY.generated.xml' path='docs/MouseEventScreenY/*'/>
	public long ScreenY { get; }
	///<include file='Utils/Docs/MouseEventClientX/MouseEventClientX.generated.xml' path='docs/MouseEventClientX/*'/>
	public long ClientX { get; }
	///<include file='Utils/Docs/MouseEventClientY/MouseEventClientY.generated.xml' path='docs/MouseEventClientY/*'/>
	public long ClientY { get; }
	///<include file='Utils/Docs/MouseEventLayerX/MouseEventLayerX.generated.xml' path='docs/MouseEventLayerX/*'/>
	public long LayerX { get; }
	///<include file='Utils/Docs/MouseEventLayerY/MouseEventLayerY.generated.xml' path='docs/MouseEventLayerY/*'/>
	public long LayerY { get; }
	///<include file='Utils/Docs/MouseEventCtrlKey/MouseEventCtrlKey.generated.xml' path='docs/MouseEventCtrlKey/*'/>
	public bool CtrlKey { get; }
	///<include file='Utils/Docs/MouseEventShiftKey/MouseEventShiftKey.generated.xml' path='docs/MouseEventShiftKey/*'/>
	public bool ShiftKey { get; }
	///<include file='Utils/Docs/MouseEventAltKey/MouseEventAltKey.generated.xml' path='docs/MouseEventAltKey/*'/>
	public bool AltKey { get; }
	///<include file='Utils/Docs/MouseEventMetaKey/MouseEventMetaKey.generated.xml' path='docs/MouseEventMetaKey/*'/>
	public bool MetaKey { get; }
	///<include file='Utils/Docs/MouseEventButton/MouseEventButton.generated.xml' path='docs/MouseEventButton/*'/>
	public Number Button { get; }
	///<include file='Utils/Docs/MouseEventButtons/MouseEventButtons.generated.xml' path='docs/MouseEventButtons/*'/>
	public ushort Buttons { get; }
	///<include file='Utils/Docs/MouseEventRelatedTarget/MouseEventRelatedTarget.generated.xml' path='docs/MouseEventRelatedTarget/*'/>
	public EventTarget? RelatedTarget { get; }
	///<include file='Utils/Docs/MouseEventGetModifierState/MouseEventGetModifierState.generated.xml' path='docs/MouseEventGetModifierState/*'/>
	public bool GetModifierState(DOMString keyArg) { throw new System.NotImplementedException(); }
	public MouseEvent() { }
}

public partial class MouseEventInit : EventModifierInit
{
		public long ScreenX;
		public long ScreenY;
		public long ClientX;
		public long ClientY;
		public Number Button;
		public ushort Buttons;
		public EventTarget? RelatedTarget;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EventModifierInit : UIEventInit
{
		public bool CtrlKey;
		public bool ShiftKey;
		public bool AltKey;
		public bool MetaKey;
		public bool ModifierAltGraph;
		public bool ModifierCapsLock;
		public bool ModifierFn;
		public bool ModifierFnLock;
		public bool ModifierHyper;
		public bool ModifierNumLock;
		public bool ModifierScrollLock;
		public bool ModifierSuper;
		public bool ModifierSymbol;
		public bool ModifierSymbolLock;
}

///<include file='Utils/Docs/WheelEvent/WheelEvent.generated.xml' path='docs/WheelEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WheelEvent : MouseEvent
{
	///<include file='Utils/Docs/WheelEventWheelEvent/WheelEventWheelEvent.generated.xml' path='docs/WheelEventWheelEvent/*'/>
	public WheelEvent(DOMString type, WheelEventInit eventInitDict) { }
		public const ulong DOM_DELTA_PIXEL = 0x00;
		public const ulong DOM_DELTA_LINE = 0x01;
		public const ulong DOM_DELTA_PAGE = 0x02;
	///<include file='Utils/Docs/WheelEventDeltaX/WheelEventDeltaX.generated.xml' path='docs/WheelEventDeltaX/*'/>
	public Number DeltaX { get; }
	///<include file='Utils/Docs/WheelEventDeltaY/WheelEventDeltaY.generated.xml' path='docs/WheelEventDeltaY/*'/>
	public Number DeltaY { get; }
	///<include file='Utils/Docs/WheelEventDeltaZ/WheelEventDeltaZ.generated.xml' path='docs/WheelEventDeltaZ/*'/>
	public Number DeltaZ { get; }
	///<include file='Utils/Docs/WheelEventDeltaMode/WheelEventDeltaMode.generated.xml' path='docs/WheelEventDeltaMode/*'/>
	public ulong DeltaMode { get; }
	public WheelEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WheelEventInit : MouseEventInit
{
		public Number DeltaX;
		public Number DeltaY;
		public Number DeltaZ;
		public ulong DeltaMode;
}

///<include file='Utils/Docs/InputEvent/InputEvent.generated.xml' path='docs/InputEvent/*'/>
public partial class InputEvent : UIEvent
{
	///<include file='Utils/Docs/InputEventInputEvent/InputEventInputEvent.generated.xml' path='docs/InputEventInputEvent/*'/>
	public InputEvent(DOMString type, InputEventInit eventInitDict) { }
	///<include file='Utils/Docs/InputEventData/InputEventData.generated.xml' path='docs/InputEventData/*'/>
	public USVString? Data { get; }
	///<include file='Utils/Docs/InputEventIsComposing/InputEventIsComposing.generated.xml' path='docs/InputEventIsComposing/*'/>
	public bool IsComposing { get; }
	///<include file='Utils/Docs/InputEventInputType/InputEventInputType.generated.xml' path='docs/InputEventInputType/*'/>
	public DOMString InputType { get; }
	public InputEvent() { }
}

public partial class InputEventInit : UIEventInit
{
		public DOMString? Data;
		public bool IsComposing;
		public DOMString InputType;
}

///<include file='Utils/Docs/KeyboardEvent/KeyboardEvent.generated.xml' path='docs/KeyboardEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class KeyboardEvent : UIEvent
{
	///<include file='Utils/Docs/KeyboardEventKeyboardEvent/KeyboardEventKeyboardEvent.generated.xml' path='docs/KeyboardEventKeyboardEvent/*'/>
	public KeyboardEvent(DOMString type, KeyboardEventInit eventInitDict) { }
		public const ulong DOM_KEY_LOCATION_STANDARD = 0x00;
		public const ulong DOM_KEY_LOCATION_LEFT = 0x01;
		public const ulong DOM_KEY_LOCATION_RIGHT = 0x02;
		public const ulong DOM_KEY_LOCATION_NUMPAD = 0x03;
	///<include file='Utils/Docs/KeyboardEventKey/KeyboardEventKey.generated.xml' path='docs/KeyboardEventKey/*'/>
	public DOMString Key { get; }
	///<include file='Utils/Docs/KeyboardEventCode/KeyboardEventCode.generated.xml' path='docs/KeyboardEventCode/*'/>
	public DOMString Code { get; }
	///<include file='Utils/Docs/KeyboardEventLocation/KeyboardEventLocation.generated.xml' path='docs/KeyboardEventLocation/*'/>
	public ulong Location { get; }
	///<include file='Utils/Docs/KeyboardEventCtrlKey/KeyboardEventCtrlKey.generated.xml' path='docs/KeyboardEventCtrlKey/*'/>
	public bool CtrlKey { get; }
	///<include file='Utils/Docs/KeyboardEventShiftKey/KeyboardEventShiftKey.generated.xml' path='docs/KeyboardEventShiftKey/*'/>
	public bool ShiftKey { get; }
	///<include file='Utils/Docs/KeyboardEventAltKey/KeyboardEventAltKey.generated.xml' path='docs/KeyboardEventAltKey/*'/>
	public bool AltKey { get; }
	///<include file='Utils/Docs/KeyboardEventMetaKey/KeyboardEventMetaKey.generated.xml' path='docs/KeyboardEventMetaKey/*'/>
	public bool MetaKey { get; }
	///<include file='Utils/Docs/KeyboardEventRepeat/KeyboardEventRepeat.generated.xml' path='docs/KeyboardEventRepeat/*'/>
	public bool Repeat { get; }
	///<include file='Utils/Docs/KeyboardEventIsComposing/KeyboardEventIsComposing.generated.xml' path='docs/KeyboardEventIsComposing/*'/>
	public bool IsComposing { get; }
	///<include file='Utils/Docs/KeyboardEventGetModifierState/KeyboardEventGetModifierState.generated.xml' path='docs/KeyboardEventGetModifierState/*'/>
	public bool GetModifierState(DOMString keyArg) { throw new System.NotImplementedException(); }
	public KeyboardEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class KeyboardEventInit : EventModifierInit
{
		public DOMString Key;
		public DOMString Code;
		public ulong Location;
		public bool Repeat;
		public bool IsComposing;
}

///<include file='Utils/Docs/CompositionEvent/CompositionEvent.generated.xml' path='docs/CompositionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CompositionEvent : UIEvent
{
	///<include file='Utils/Docs/CompositionEventCompositionEvent/CompositionEventCompositionEvent.generated.xml' path='docs/CompositionEventCompositionEvent/*'/>
	public CompositionEvent(DOMString type, CompositionEventInit eventInitDict) { }
	///<include file='Utils/Docs/CompositionEventData/CompositionEventData.generated.xml' path='docs/CompositionEventData/*'/>
	public USVString Data { get; }
	public CompositionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CompositionEventInit : UIEventInit
{
		public DOMString Data;
}

///<include file='Utils/Docs/UIEvent/UIEvent.generated.xml' path='docs/UIEvent/*'/>
public partial class UIEvent
{
	///<include file='Utils/Docs/UIEventInitUIEvent/UIEventInitUIEvent.generated.xml' path='docs/UIEventInitUIEvent/*'/>
	public Undefined InitUIEvent(DOMString typeArg, bool bubblesArg, bool cancelableArg, Window? viewArg, long detailArg) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MouseEvent/MouseEvent.generated.xml' path='docs/MouseEvent/*'/>
public partial class MouseEvent
{
	///<include file='Utils/Docs/MouseEventInitMouseEvent/MouseEventInitMouseEvent.generated.xml' path='docs/MouseEventInitMouseEvent/*'/>
	public Undefined InitMouseEvent(DOMString typeArg, bool bubblesArg, bool cancelableArg, Window? viewArg, long detailArg, long screenXArg, long screenYArg, long clientXArg, long clientYArg, bool ctrlKeyArg, bool altKeyArg, bool shiftKeyArg, bool metaKeyArg, Number buttonArg, EventTarget? relatedTargetArg) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/KeyboardEvent/KeyboardEvent.generated.xml' path='docs/KeyboardEvent/*'/>
public partial class KeyboardEvent
{
	///<include file='Utils/Docs/KeyboardEventInitKeyboardEvent/KeyboardEventInitKeyboardEvent.generated.xml' path='docs/KeyboardEventInitKeyboardEvent/*'/>
	public Undefined InitKeyboardEvent(DOMString typeArg, bool bubblesArg, bool cancelableArg, Window? viewArg, DOMString keyArg, ulong locationArg, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/CompositionEvent/CompositionEvent.generated.xml' path='docs/CompositionEvent/*'/>
public partial class CompositionEvent
{
	///<include file='Utils/Docs/CompositionEventInitCompositionEvent/CompositionEventInitCompositionEvent.generated.xml' path='docs/CompositionEventInitCompositionEvent/*'/>
	public Undefined InitCompositionEvent(DOMString typeArg, bool bubblesArg, bool cancelableArg, WindowProxy? viewArg, DOMString dataArg) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/UIEvent/UIEvent.generated.xml' path='docs/UIEvent/*'/>
public partial class UIEvent
{
	///<include file='Utils/Docs/UIEventWhich/UIEventWhich.generated.xml' path='docs/UIEventWhich/*'/>
	public ulong Which { get; }
}

public partial class UIEventInit
{
		public ulong Which;
}

///<include file='Utils/Docs/KeyboardEvent/KeyboardEvent.generated.xml' path='docs/KeyboardEvent/*'/>
public partial class KeyboardEvent
{
	///<include file='Utils/Docs/KeyboardEventCharCode/KeyboardEventCharCode.generated.xml' path='docs/KeyboardEventCharCode/*'/>
	public ulong CharCode { get; }
	///<include file='Utils/Docs/KeyboardEventKeyCode/KeyboardEventKeyCode.generated.xml' path='docs/KeyboardEventKeyCode/*'/>
	public ulong KeyCode { get; }
}

public partial class KeyboardEventInit
{
		public ulong CharCode;
		public ulong KeyCode;
}

///<include file='Utils/Docs/TextEvent/TextEvent.generated.xml' path='docs/TextEvent/*'/>
[To(ToAttribute.Default)]
public partial class TextEvent : UIEvent
{
	///<include file='Utils/Docs/TextEventData/TextEventData.generated.xml' path='docs/TextEventData/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public DOMString Data { get; }
	///<include file='Utils/Docs/TextEventInitTextEvent/TextEventInitTextEvent.generated.xml' path='docs/TextEventInitTextEvent/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined InitTextEvent(DOMString type, bool bubbles, bool cancelable, Window? view, DOMString data) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/URL/URL.generated.xml' path='docs/URL/*'/>
public partial class URL
{
	///<include file='Utils/Docs/URLURL/URLURL.generated.xml' path='docs/URLURL/*'/>
	public URL(USVString url, USVString base_) { }
	///<include file='Utils/Docs/URLParse/URLParse.generated.xml' path='docs/URLParse/*'/>
	public static URL? Parse(USVString url, USVString base_) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLCanParse/URLCanParse.generated.xml' path='docs/URLCanParse/*'/>
	public static bool CanParse(USVString url, USVString base_) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLHref/URLHref.generated.xml' path='docs/URLHref/*'/>
	public USVString Href { get; set; }
	///<include file='Utils/Docs/URLOrigin/URLOrigin.generated.xml' path='docs/URLOrigin/*'/>
	public USVString Origin { get; }
	///<include file='Utils/Docs/URLProtocol/URLProtocol.generated.xml' path='docs/URLProtocol/*'/>
	public USVString Protocol { get; set; }
	///<include file='Utils/Docs/URLUsername/URLUsername.generated.xml' path='docs/URLUsername/*'/>
	public USVString Username { get; set; }
	///<include file='Utils/Docs/URLPassword/URLPassword.generated.xml' path='docs/URLPassword/*'/>
	public USVString Password { get; set; }
	///<include file='Utils/Docs/URLHost/URLHost.generated.xml' path='docs/URLHost/*'/>
	public USVString Host { get; set; }
	///<include file='Utils/Docs/URLHostname/URLHostname.generated.xml' path='docs/URLHostname/*'/>
	public USVString Hostname { get; set; }
	///<include file='Utils/Docs/URLPort/URLPort.generated.xml' path='docs/URLPort/*'/>
	public USVString Port { get; set; }
	///<include file='Utils/Docs/URLPathname/URLPathname.generated.xml' path='docs/URLPathname/*'/>
	public USVString Pathname { get; set; }
	///<include file='Utils/Docs/URLSearch/URLSearch.generated.xml' path='docs/URLSearch/*'/>
	public USVString Search { get; set; }
	///<include file='Utils/Docs/URLSearchParams/URLSearchParams.generated.xml' path='docs/URLSearchParams/*'/>
	public URLSearchParams SearchParams { get; }
	///<include file='Utils/Docs/URLHash/URLHash.generated.xml' path='docs/URLHash/*'/>
	public USVString Hash { get; set; }
	///<include file='Utils/Docs/URLToJSON/URLToJSON.generated.xml' path='docs/URLToJSON/*'/>
	public USVString ToJSON() { throw new System.NotImplementedException(); }
	public URL() { }
}

///<include file='Utils/Docs/URLSearchParams/URLSearchParams.generated.xml' path='docs/URLSearchParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class URLSearchParams
{
	///<include file='Utils/Docs/URLSearchParamsURLSearchParams/URLSearchParamsURLSearchParams.generated.xml' path='docs/URLSearchParamsURLSearchParams/*'/>
	public URLSearchParams(Union153 init) { }
	///<include file='Utils/Docs/URLSearchParamsSize/URLSearchParamsSize.generated.xml' path='docs/URLSearchParamsSize/*'/>
	public ulong Size { get; }
	///<include file='Utils/Docs/URLSearchParamsAppend/URLSearchParamsAppend.generated.xml' path='docs/URLSearchParamsAppend/*'/>
	public Undefined Append(USVString name, USVString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLSearchParamsDelete/URLSearchParamsDelete.generated.xml' path='docs/URLSearchParamsDelete/*'/>
	public Undefined Delete(USVString name, USVString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLSearchParamsGet/URLSearchParamsGet.generated.xml' path='docs/URLSearchParamsGet/*'/>
	public USVString? Get(USVString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLSearchParamsGetAll/URLSearchParamsGetAll.generated.xml' path='docs/URLSearchParamsGetAll/*'/>
	public List<USVString> GetAll(USVString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLSearchParamsHas/URLSearchParamsHas.generated.xml' path='docs/URLSearchParamsHas/*'/>
	public bool Has(USVString name, USVString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLSearchParamsSet/URLSearchParamsSet.generated.xml' path='docs/URLSearchParamsSet/*'/>
	public Undefined Set(USVString name, USVString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLSearchParamsSort/URLSearchParamsSort.generated.xml' path='docs/URLSearchParamsSort/*'/>
	public Undefined Sort() { throw new System.NotImplementedException(); }
	public USVString this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	
	public URLSearchParams() { }
}


///<include file='Utils/Docs/URLPattern/URLPattern.generated.xml' path='docs/URLPattern/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class URLPattern
{
	///<include file='Utils/Docs/URLPatternURLPattern/URLPatternURLPattern.generated.xml' path='docs/URLPatternURLPattern/*'/>
	public URLPattern(URLPatternInput input, USVString baseURL, URLPatternOptions options) { }
	///<include file='Utils/Docs/URLPatternURLPattern/URLPatternURLPattern.generated.xml' path='docs/URLPatternURLPattern/*'/>
	public URLPattern(URLPatternInput input, URLPatternOptions options) { }
	///<include file='Utils/Docs/URLPatternTest/URLPatternTest.generated.xml' path='docs/URLPatternTest/*'/>
	public bool Test(URLPatternInput input, USVString baseURL) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLPatternExec/URLPatternExec.generated.xml' path='docs/URLPatternExec/*'/>
	public URLPatternResult? Exec(URLPatternInput input, USVString baseURL) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/URLPatternProtocol/URLPatternProtocol.generated.xml' path='docs/URLPatternProtocol/*'/>
	public USVString Protocol { get; }
	///<include file='Utils/Docs/URLPatternUsername/URLPatternUsername.generated.xml' path='docs/URLPatternUsername/*'/>
	public USVString Username { get; }
	///<include file='Utils/Docs/URLPatternPassword/URLPatternPassword.generated.xml' path='docs/URLPatternPassword/*'/>
	public USVString Password { get; }
	///<include file='Utils/Docs/URLPatternHostname/URLPatternHostname.generated.xml' path='docs/URLPatternHostname/*'/>
	public USVString Hostname { get; }
	///<include file='Utils/Docs/URLPatternPort/URLPatternPort.generated.xml' path='docs/URLPatternPort/*'/>
	public USVString Port { get; }
	///<include file='Utils/Docs/URLPatternPathname/URLPatternPathname.generated.xml' path='docs/URLPatternPathname/*'/>
	public USVString Pathname { get; }
	///<include file='Utils/Docs/URLPatternSearch/URLPatternSearch.generated.xml' path='docs/URLPatternSearch/*'/>
	public USVString Search { get; }
	///<include file='Utils/Docs/URLPatternHash/URLPatternHash.generated.xml' path='docs/URLPatternHash/*'/>
	public USVString Hash { get; }
		public bool HasRegExpGroups { get; }
	public URLPattern() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class URLPatternInit
{
		public USVString Protocol;
		public USVString Username;
		public USVString Password;
		public USVString Hostname;
		public USVString Port;
		public USVString Pathname;
		public USVString Search;
		public USVString Hash;
		public USVString BaseURL;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class URLPatternOptions
{
		public bool IgnoreCase;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class URLPatternResult
{
		public List<URLPatternInput> Inputs;
		public URLPatternComponentResult Protocol;
		public URLPatternComponentResult Username;
		public URLPatternComponentResult Password;
		public URLPatternComponentResult Hostname;
		public URLPatternComponentResult Port;
		public URLPatternComponentResult Pathname;
		public URLPatternComponentResult Search;
		public URLPatternComponentResult Hash;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class URLPatternComponentResult
{
		public USVString Input;
		public Dictionary<USVString, USVString> Groups;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceMarkOptions
{
		public dynamic Detail;
		public DOMHighResTimeStamp StartTime;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceMeasureOptions
{
		public dynamic Detail;
		public Union156 Start;
		public DOMHighResTimeStamp Duration;
		public Union157 End;
}

///<include file='Utils/Docs/Performance/Performance.generated.xml' path='docs/Performance/*'/>
public partial class Performance
{
	///<include file='Utils/Docs/PerformanceMark/PerformanceMark.generated.xml' path='docs/PerformanceMark/*'/>
	public PerformanceMark Mark(DOMString markName, PerformanceMarkOptions markOptions) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceClearMarks/PerformanceClearMarks.generated.xml' path='docs/PerformanceClearMarks/*'/>
	public Undefined ClearMarks(DOMString markName) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceMeasure/PerformanceMeasure.generated.xml' path='docs/PerformanceMeasure/*'/>
	public PerformanceMeasure Measure(DOMString measureName, Union158 startOrMeasureOptions, DOMString endMark) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PerformanceClearMeasures/PerformanceClearMeasures.generated.xml' path='docs/PerformanceClearMeasures/*'/>
	public Undefined ClearMeasures(DOMString measureName) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PerformanceMark/PerformanceMark.generated.xml' path='docs/PerformanceMark/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceMark : PerformanceEntry
{
	///<include file='Utils/Docs/PerformanceMarkPerformanceMark/PerformanceMarkPerformanceMark.generated.xml' path='docs/PerformanceMarkPerformanceMark/*'/>
	public PerformanceMark(DOMString markName, PerformanceMarkOptions markOptions) { }
	///<include file='Utils/Docs/PerformanceMarkDetail/PerformanceMarkDetail.generated.xml' path='docs/PerformanceMarkDetail/*'/>
	public dynamic Detail { get; }
	public PerformanceMark() { }
}

///<include file='Utils/Docs/PerformanceMeasure/PerformanceMeasure.generated.xml' path='docs/PerformanceMeasure/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PerformanceMeasure : PerformanceEntry
{
	///<include file='Utils/Docs/PerformanceMeasureDetail/PerformanceMeasureDetail.generated.xml' path='docs/PerformanceMeasureDetail/*'/>
	public dynamic Detail { get; }
}


///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorVibrate/NavigatorVibrate.generated.xml' path='docs/NavigatorVibrate/*'/>
	public bool Vibrate(VibratePattern pattern) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoFrameCallbackMetadata
{
		public required DOMHighResTimeStamp PresentationTime;
		public required DOMHighResTimeStamp ExpectedDisplayTime;
		public required ulong Width;
		public required ulong Height;
		public required Number MediaTime;
		public required ulong PresentedFrames;
		public Number ProcessingDuration;
		public DOMHighResTimeStamp CaptureTime;
		public DOMHighResTimeStamp ReceiveTime;
		public ulong RtpTimestamp;
}

///<include file='Utils/Docs/HTMLVideoElement/HTMLVideoElement.generated.xml' path='docs/HTMLVideoElement/*'/>
public partial class HTMLVideoElement
{
	///<include file='Utils/Docs/HTMLVideoElementRequestVideoFrameCallback/HTMLVideoElementRequestVideoFrameCallback.generated.xml' path='docs/HTMLVideoElementRequestVideoFrameCallback/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public ulong RequestVideoFrameCallback(VideoFrameRequestCallback callback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HTMLVideoElementCancelVideoFrameCallback/HTMLVideoElementCancelVideoFrameCallback.generated.xml' path='docs/HTMLVideoElementCancelVideoFrameCallback/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Undefined CancelVideoFrameCallback(ulong handle) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorVirtualKeyboard/NavigatorVirtualKeyboard.generated.xml' path='docs/NavigatorVirtualKeyboard/*'/>
	public VirtualKeyboard VirtualKeyboard { get; }
}

///<include file='Utils/Docs/VirtualKeyboard/VirtualKeyboard.generated.xml' path='docs/VirtualKeyboard/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VirtualKeyboard : EventTarget
{
	///<include file='Utils/Docs/VirtualKeyboardShow/VirtualKeyboardShow.generated.xml' path='docs/VirtualKeyboardShow/*'/>
	public Undefined Show() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VirtualKeyboardHide/VirtualKeyboardHide.generated.xml' path='docs/VirtualKeyboardHide/*'/>
	public Undefined Hide() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VirtualKeyboardBoundingRect/VirtualKeyboardBoundingRect.generated.xml' path='docs/VirtualKeyboardBoundingRect/*'/>
	public DOMRect BoundingRect { get; }
	///<include file='Utils/Docs/VirtualKeyboardOverlaysContent/VirtualKeyboardOverlaysContent.generated.xml' path='docs/VirtualKeyboardOverlaysContent/*'/>
	public bool OverlaysContent { get; set; }
		public EventHandler Ongeometrychange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebAssemblyInstantiatedSource
{
		public required Module Module;
		public required Instance Instance;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebAssembly
{
		public bool Validate(BufferSource bytes) { throw new System.NotImplementedException(); }
		public Task<Module> Compile(BufferSource bytes) { throw new System.NotImplementedException(); }
		public Task<WebAssemblyInstantiatedSource> Instantiate(BufferSource bytes, Object importObject) { throw new System.NotImplementedException(); }
		public Task<Instance> Instantiate(Module moduleObject, Object importObject) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ModuleExportDescriptor
{
		public required USVString Name;
		public required ImportExportKind Kind;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ModuleImportDescriptor
{
		public required USVString Module;
		public required USVString Name;
		public required ImportExportKind Kind;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Module
{
		public Module(BufferSource bytes) { }
		public static List<ModuleExportDescriptor> Exports(Module moduleObject) { throw new System.NotImplementedException(); }
		public static List<ModuleImportDescriptor> Imports(Module moduleObject) { throw new System.NotImplementedException(); }
		public static List<byte[]> CustomSections(Module moduleObject, DOMString sectionName) { throw new System.NotImplementedException(); }
	public Module() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Instance
{
		public Instance(Module module, Object importObject) { }
		public Object Exports { get; }
	public Instance() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MemoryDescriptor
{
		public required ulong Initial;
		public ulong Maximum;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Memory
{
		public Memory(MemoryDescriptor descriptor) { }
		public ulong Grow(ulong delta) { throw new System.NotImplementedException(); }
		public byte[] ToFixedLengthBuffer() { throw new System.NotImplementedException(); }
		public byte[] ToResizableBuffer() { throw new System.NotImplementedException(); }
		public byte[] Buffer { get; }
	public Memory() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TableDescriptor
{
		public required TableKind Element;
		public required ulong Initial;
		public ulong Maximum;
}

///<include file='Utils/Docs/Table/Table.generated.xml' path='docs/Table/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Table
{
		public Table(TableDescriptor descriptor, dynamic value) { }
		public ulong Grow(ulong delta, dynamic value) { throw new System.NotImplementedException(); }
		public dynamic Get(ulong index) { throw new System.NotImplementedException(); }
		public Undefined Set(ulong index, dynamic value) { throw new System.NotImplementedException(); }
		public ulong Length { get; }
	public Table() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GlobalDescriptor
{
		public required ValueType Value;
		public bool Mutable;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Global
{
		public Global(GlobalDescriptor descriptor, dynamic v) { }
		public dynamic ValueOf() { throw new System.NotImplementedException(); }
		public dynamic Value { get; set; }
	public Global() { }
}

public partial class WebAssembly
{
		public Task<Module> CompileStreaming(Task<Response> source) { throw new System.NotImplementedException(); }
		public Task<WebAssemblyInstantiatedSource> InstantiateStreaming(Task<Response> source, Object importObject) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/AnimationTimeline/AnimationTimeline.generated.xml' path='docs/AnimationTimeline/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AnimationTimeline
{
	///<include file='Utils/Docs/AnimationTimelineCurrentTime/AnimationTimelineCurrentTime.generated.xml' path='docs/AnimationTimelineCurrentTime/*'/>
	public CSSNumberish? CurrentTime { get; }
		public CSSNumberish? Duration { get; }
		public Animation Play(AnimationEffect? effect) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Animation/Animation.generated.xml' path='docs/Animation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Animation
{
	///<include file='Utils/Docs/AnimationStartTime/AnimationStartTime.generated.xml' path='docs/AnimationStartTime/*'/>
	public CSSNumberish? StartTime { get; set; }
	///<include file='Utils/Docs/AnimationCurrentTime/AnimationCurrentTime.generated.xml' path='docs/AnimationCurrentTime/*'/>
	public CSSNumberish? CurrentTime { get; set; }
		public Number? OverallProgress { get; }
}

///<include file='Utils/Docs/AnimationEffect/AnimationEffect.generated.xml' path='docs/AnimationEffect/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AnimationEffect
{
		public GroupEffect? Parent { get; }
		public AnimationEffect? PreviousSibling { get; }
		public AnimationEffect? NextSibling { get; }
		public Undefined Before(params AnimationEffect[] effects) { throw new System.NotImplementedException(); }
		public Undefined After(params AnimationEffect[] effects) { throw new System.NotImplementedException(); }
		public Undefined Replace(params AnimationEffect[] effects) { throw new System.NotImplementedException(); }
		public Undefined Remove() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EffectTiming
{
		public Number Delay;
		public Number EndDelay;
		public Number PlaybackRate;
		public Union160 Duration;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OptionalEffectTiming
{
		public Number PlaybackRate;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ComputedEffectTiming
{
		public CSSNumberish StartTime;
		public CSSNumberish EndTime;
		public CSSNumberish ActiveDuration;
		public CSSNumberish? LocalTime;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GroupEffect
{
		public GroupEffect(List<AnimationEffect>? children, Union161 timing) { }
		public AnimationNodeList Children { get; }
		public AnimationEffect? FirstChild { get; }
		public AnimationEffect? LastChild { get; }
		public GroupEffect Clone() { throw new System.NotImplementedException(); }
		public Undefined Prepend(params AnimationEffect[] effects) { throw new System.NotImplementedException(); }
		public Undefined Append(params AnimationEffect[] effects) { throw new System.NotImplementedException(); }
	public GroupEffect() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AnimationNodeList
{
		public ulong Length { get; }
	
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SequenceEffect : GroupEffect
{
		public SequenceEffect(List<AnimationEffect>? children, Union162 timing) { }
		public SequenceEffect Clone() { throw new System.NotImplementedException(); }
	public SequenceEffect() { }
}

///<include file='Utils/Docs/KeyframeEffect/KeyframeEffect.generated.xml' path='docs/KeyframeEffect/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class KeyframeEffect
{
	///<include file='Utils/Docs/KeyframeEffectIterationComposite/KeyframeEffectIterationComposite.generated.xml' path='docs/KeyframeEffectIterationComposite/*'/>
	public IterationCompositeOperation IterationComposite { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class KeyframeEffectOptions
{
		public IterationCompositeOperation IterationComposite;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TimelineRangeOffset
{
		public CSSOMString? RangeName;
		public CSSNumericValue Offset;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class KeyframeAnimationOptions
{
		public Union164 RangeStart;
		public Union165 RangeEnd;
}

///<include file='Utils/Docs/AnimationPlaybackEvent/AnimationPlaybackEvent.generated.xml' path='docs/AnimationPlaybackEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AnimationPlaybackEvent : Event
{
	///<include file='Utils/Docs/AnimationPlaybackEventAnimationPlaybackEvent/AnimationPlaybackEventAnimationPlaybackEvent.generated.xml' path='docs/AnimationPlaybackEventAnimationPlaybackEvent/*'/>
	public AnimationPlaybackEvent(DOMString type, AnimationPlaybackEventInit eventInitDict) { }
	///<include file='Utils/Docs/AnimationPlaybackEventCurrentTime/AnimationPlaybackEventCurrentTime.generated.xml' path='docs/AnimationPlaybackEventCurrentTime/*'/>
	public CSSNumberish? CurrentTime { get; }
	///<include file='Utils/Docs/AnimationPlaybackEventTimelineTime/AnimationPlaybackEventTimelineTime.generated.xml' path='docs/AnimationPlaybackEventTimelineTime/*'/>
	public CSSNumberish? TimelineTime { get; }
	public AnimationPlaybackEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AnimationPlaybackEventInit : EventInit
{
		public CSSNumberish? CurrentTime;
		public CSSNumberish? TimelineTime;
}

///<include file='Utils/Docs/AnimationTimeline/AnimationTimeline.generated.xml' path='docs/AnimationTimeline/*'/>
public partial class AnimationTimeline
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DocumentTimelineOptions
{
		public DOMHighResTimeStamp OriginTime;
}

///<include file='Utils/Docs/DocumentTimeline/DocumentTimeline.generated.xml' path='docs/DocumentTimeline/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DocumentTimeline : AnimationTimeline
{
	///<include file='Utils/Docs/DocumentTimelineDocumentTimeline/DocumentTimelineDocumentTimeline.generated.xml' path='docs/DocumentTimelineDocumentTimeline/*'/>
	public DocumentTimeline(DocumentTimelineOptions options) { }
	public DocumentTimeline() { }
}

///<include file='Utils/Docs/Animation/Animation.generated.xml' path='docs/Animation/*'/>
public partial class Animation : EventTarget
{
	///<include file='Utils/Docs/AnimationAnimation/AnimationAnimation.generated.xml' path='docs/AnimationAnimation/*'/>
	public Animation(AnimationEffect? effect, AnimationTimeline? timeline) { }
	///<include file='Utils/Docs/AnimationId/AnimationId.generated.xml' path='docs/AnimationId/*'/>
	public DOMString Id { get; set; }
	///<include file='Utils/Docs/AnimationEffect/AnimationEffect.generated.xml' path='docs/AnimationEffect/*'/>
	public AnimationEffect? Effect { get; set; }
	///<include file='Utils/Docs/AnimationTimeline/AnimationTimeline.generated.xml' path='docs/AnimationTimeline/*'/>
	public AnimationTimeline? Timeline { get; set; }
	///<include file='Utils/Docs/AnimationPlaybackRate/AnimationPlaybackRate.generated.xml' path='docs/AnimationPlaybackRate/*'/>
	public Number PlaybackRate { get; set; }
	///<include file='Utils/Docs/AnimationPlayState/AnimationPlayState.generated.xml' path='docs/AnimationPlayState/*'/>
	public AnimationPlayState PlayState { get; }
	///<include file='Utils/Docs/AnimationReplaceState/AnimationReplaceState.generated.xml' path='docs/AnimationReplaceState/*'/>
	public AnimationReplaceState ReplaceState { get; }
	///<include file='Utils/Docs/AnimationPending/AnimationPending.generated.xml' path='docs/AnimationPending/*'/>
	public bool Pending { get; }
	///<include file='Utils/Docs/AnimationReady/AnimationReady.generated.xml' path='docs/AnimationReady/*'/>
	public Task<Animation> Ready { get; }
	///<include file='Utils/Docs/AnimationFinished/AnimationFinished.generated.xml' path='docs/AnimationFinished/*'/>
	public Task<Animation> Finished { get; }
		public EventHandler Onfinish { get; set; }
		public EventHandler Oncancel { get; set; }
		public EventHandler Onremove { get; set; }
	///<include file='Utils/Docs/AnimationCancel/AnimationCancel.generated.xml' path='docs/AnimationCancel/*'/>
	public Undefined Cancel() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnimationFinish/AnimationFinish.generated.xml' path='docs/AnimationFinish/*'/>
	public Undefined Finish() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnimationPlay/AnimationPlay.generated.xml' path='docs/AnimationPlay/*'/>
	public Undefined Play() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnimationPause/AnimationPause.generated.xml' path='docs/AnimationPause/*'/>
	public Undefined Pause() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnimationUpdatePlaybackRate/AnimationUpdatePlaybackRate.generated.xml' path='docs/AnimationUpdatePlaybackRate/*'/>
	public Undefined UpdatePlaybackRate(Number playbackRate) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnimationReverse/AnimationReverse.generated.xml' path='docs/AnimationReverse/*'/>
	public Undefined Reverse() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnimationPersist/AnimationPersist.generated.xml' path='docs/AnimationPersist/*'/>
	public Undefined Persist() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnimationCommitStyles/AnimationCommitStyles.generated.xml' path='docs/AnimationCommitStyles/*'/>
	public Undefined CommitStyles() { throw new System.NotImplementedException(); }
	public Animation() { }
}

///<include file='Utils/Docs/AnimationEffect/AnimationEffect.generated.xml' path='docs/AnimationEffect/*'/>
public partial class AnimationEffect
{
	///<include file='Utils/Docs/AnimationEffectGetTiming/AnimationEffectGetTiming.generated.xml' path='docs/AnimationEffectGetTiming/*'/>
	public EffectTiming GetTiming() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnimationEffectGetComputedTiming/AnimationEffectGetComputedTiming.generated.xml' path='docs/AnimationEffectGetComputedTiming/*'/>
	public ComputedEffectTiming GetComputedTiming() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnimationEffectUpdateTiming/AnimationEffectUpdateTiming.generated.xml' path='docs/AnimationEffectUpdateTiming/*'/>
	public Undefined UpdateTiming(OptionalEffectTiming timing) { throw new System.NotImplementedException(); }
}

public partial class EffectTiming
{
		public FillMode Fill;
		public Number IterationStart;
		public double Iterations;
		public PlaybackDirection Direction;
		public DOMString Easing;
}

public partial class OptionalEffectTiming
{
		public Number Delay;
		public Number EndDelay;
		public FillMode Fill;
		public Number IterationStart;
		public double Iterations;
		public Union166 Duration;
		public PlaybackDirection Direction;
		public DOMString Easing;
}

public partial class ComputedEffectTiming : EffectTiming
{
		public Number? Progress;
		public double? CurrentIteration;
}

///<include file='Utils/Docs/KeyframeEffect/KeyframeEffect.generated.xml' path='docs/KeyframeEffect/*'/>
public partial class KeyframeEffect : AnimationEffect
{
	///<include file='Utils/Docs/KeyframeEffectKeyframeEffect/KeyframeEffectKeyframeEffect.generated.xml' path='docs/KeyframeEffectKeyframeEffect/*'/>
	public KeyframeEffect(Element? target, Object? keyframes, Union167 options) { }
	///<include file='Utils/Docs/KeyframeEffectKeyframeEffect/KeyframeEffectKeyframeEffect.generated.xml' path='docs/KeyframeEffectKeyframeEffect/*'/>
	public KeyframeEffect(KeyframeEffect source) { }
	///<include file='Utils/Docs/KeyframeEffectTarget/KeyframeEffectTarget.generated.xml' path='docs/KeyframeEffectTarget/*'/>
	public Element? Target { get; set; }
	///<include file='Utils/Docs/KeyframeEffectPseudoElement/KeyframeEffectPseudoElement.generated.xml' path='docs/KeyframeEffectPseudoElement/*'/>
	public CSSOMString? PseudoElement { get; set; }
	///<include file='Utils/Docs/KeyframeEffectComposite/KeyframeEffectComposite.generated.xml' path='docs/KeyframeEffectComposite/*'/>
	public CompositeOperation Composite { get; set; }
	///<include file='Utils/Docs/KeyframeEffectGetKeyframes/KeyframeEffectGetKeyframes.generated.xml' path='docs/KeyframeEffectGetKeyframes/*'/>
	public List<Object> GetKeyframes() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/KeyframeEffectSetKeyframes/KeyframeEffectSetKeyframes.generated.xml' path='docs/KeyframeEffectSetKeyframes/*'/>
	public Undefined SetKeyframes(Object? keyframes) { throw new System.NotImplementedException(); }
	public KeyframeEffect() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BaseComputedKeyframe
{
		public Number? Offset;
		public Number ComputedOffset;
		public DOMString Easing;
		public CompositeOperationOrAuto Composite;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BasePropertyIndexedKeyframe
{
		public Union168 Offset;
		public Union169 Easing;
		public Union170 Composite;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BaseKeyframe
{
		public Number? Offset;
		public DOMString Easing;
		public CompositeOperationOrAuto Composite;
}

public partial class KeyframeEffectOptions : EffectTiming
{
		public CompositeOperation Composite;
		public CSSOMString? PseudoElement;
}

public partial class KeyframeAnimationOptions : KeyframeEffectOptions
{
		public DOMString Id;
		public AnimationTimeline? Timeline;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GetAnimationsOptions
{
		public bool Subtree;
		public CSSOMString? PseudoElement;
}

///<include file='Utils/Docs/Document/Document.generated.xml' path='docs/Document/*'/>
public partial class Document
{
	///<include file='Utils/Docs/DocumentTimeline/DocumentTimeline.generated.xml' path='docs/DocumentTimeline/*'/>
	public DocumentTimeline Timeline { get; }
}

///<include file='Utils/Docs/LaunchParams/LaunchParams.generated.xml' path='docs/LaunchParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class LaunchParams
{
	///<include file='Utils/Docs/LaunchParamsTargetURL/LaunchParamsTargetURL.generated.xml' path='docs/LaunchParamsTargetURL/*'/>
	public DOMString? TargetURL { get; }
	///<include file='Utils/Docs/LaunchParamsFiles/LaunchParamsFiles.generated.xml' path='docs/LaunchParamsFiles/*'/>
	public FileSystemHandle[] Files { get; }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowLaunchQueue/WindowLaunchQueue.generated.xml' path='docs/WindowLaunchQueue/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public LaunchQueue LaunchQueue { get; }
}

///<include file='Utils/Docs/LaunchQueue/LaunchQueue.generated.xml' path='docs/LaunchQueue/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class LaunchQueue
{
	///<include file='Utils/Docs/LaunchQueueSetConsumer/LaunchQueueSetConsumer.generated.xml' path='docs/LaunchQueueSetConsumer/*'/>
	public Undefined SetConsumer(LaunchConsumer consumer) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothLEScanOptions
{
		public List<BluetoothLEScanFilterInit> Filters;
		public bool KeepRepeatedDevices;
		public bool AcceptAllAdvertisements;
}

///<include file='Utils/Docs/Bluetooth/Bluetooth.generated.xml' path='docs/Bluetooth/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Bluetooth
{
		public Task<BluetoothLEScan> RequestLEScan(BluetoothLEScanOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothDataFilter
{
		public BluetoothDataFilter(BluetoothDataFilterInit init) { }
		public byte[] DataPrefix { get; }
		public byte[] Mask { get; }
	public BluetoothDataFilter() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothManufacturerDataFilter
{
		public BluetoothManufacturerDataFilter(Object init) { }
	
	public BluetoothManufacturerDataFilter() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothServiceDataFilter
{
		public BluetoothServiceDataFilter(Object init) { }
	
	public BluetoothServiceDataFilter() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothLEScanFilter
{
		public BluetoothLEScanFilter(BluetoothLEScanFilterInit init) { }
		public DOMString? Name { get; }
		public DOMString? NamePrefix { get; }
		public UUID[] Services { get; }
		public BluetoothManufacturerDataFilter ManufacturerData { get; }
		public BluetoothServiceDataFilter ServiceData { get; }
	public BluetoothLEScanFilter() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothLEScan
{
		public BluetoothLEScanFilter[] Filters { get; }
		public bool KeepRepeatedDevices { get; }
		public bool AcceptAllAdvertisements { get; }
		public bool Active { get; }
		public Undefined Stop() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothLEScanPermissionDescriptor : PermissionDescriptor
{
		public List<BluetoothLEScanFilterInit> Filters;
		public bool KeepRepeatedDevices;
		public bool AcceptAllAdvertisements;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothLEScanPermissionResult : PermissionStatus
{
		public BluetoothLEScan[] Scans { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothDataFilterInit
{
		public BufferSource DataPrefix;
		public BufferSource Mask;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothManufacturerDataFilterInit : BluetoothDataFilterInit
{
		public required ushort CompanyIdentifier;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothServiceDataFilterInit : BluetoothDataFilterInit
{
		public required BluetoothServiceUUID Service;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothLEScanFilterInit
{
		public List<BluetoothServiceUUID> Services;
		public DOMString Name;
		public DOMString NamePrefix;
		public List<BluetoothManufacturerDataFilterInit> ManufacturerData;
		public List<BluetoothServiceDataFilterInit> ServiceData;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RequestDeviceOptions
{
		public List<BluetoothLEScanFilterInit> Filters;
		public List<BluetoothLEScanFilterInit> ExclusionFilters;
		public List<BluetoothServiceUUID> OptionalServices;
		public List<ushort> OptionalManufacturerData;
		public bool AcceptAllDevices;
}

///<include file='Utils/Docs/Bluetooth/Bluetooth.generated.xml' path='docs/Bluetooth/*'/>
public partial class Bluetooth : EventTarget
{
	///<include file='Utils/Docs/BluetoothGetAvailability/BluetoothGetAvailability.generated.xml' path='docs/BluetoothGetAvailability/*'/>
	public Task<bool> GetAvailability() { throw new System.NotImplementedException(); }
		public EventHandler Onavailabilitychanged { get; set; }
		public BluetoothDevice? ReferringDevice { get; }
	///<include file='Utils/Docs/BluetoothGetDevices/BluetoothGetDevices.generated.xml' path='docs/BluetoothGetDevices/*'/>
	public Task<List<BluetoothDevice>> GetDevices() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRequestDevice/BluetoothRequestDevice.generated.xml' path='docs/BluetoothRequestDevice/*'/>
	public Task<BluetoothDevice> RequestDevice(RequestDeviceOptions options) { throw new System.NotImplementedException(); }
}




[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothPermissionDescriptor : PermissionDescriptor
{
		public DOMString DeviceId;
		public List<BluetoothLEScanFilterInit> Filters;
		public List<BluetoothServiceUUID> OptionalServices;
		public List<ushort> OptionalManufacturerData;
		public bool AcceptAllDevices;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AllowedBluetoothDevice
{
		public required DOMString DeviceId;
		public required bool MayUseGATT;
		public required Union172 AllowedServices;
		public required List<ushort> AllowedManufacturerData;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothPermissionStorage
{
		public required List<AllowedBluetoothDevice> AllowedDevices;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothPermissionResult : PermissionStatus
{
		public BluetoothDevice[] Devices { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ValueEvent : Event
{
		public ValueEvent(DOMString type, ValueEventInit initDict) { }
		public dynamic Value { get; }
	public ValueEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ValueEventInit : EventInit
{
		public dynamic Value;
}

///<include file='Utils/Docs/BluetoothDevice/BluetoothDevice.generated.xml' path='docs/BluetoothDevice/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothDevice : EventTarget, BluetoothDeviceEventHandlers, CharacteristicEventHandlers, ServiceEventHandlers
{
	///<include file='Utils/Docs/BluetoothDeviceId/BluetoothDeviceId.generated.xml' path='docs/BluetoothDeviceId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/BluetoothDeviceName/BluetoothDeviceName.generated.xml' path='docs/BluetoothDeviceName/*'/>
	public DOMString? Name { get; }
	///<include file='Utils/Docs/BluetoothDeviceGatt/BluetoothDeviceGatt.generated.xml' path='docs/BluetoothDeviceGatt/*'/>
	public BluetoothRemoteGATTServer? Gatt { get; }
		public Task<Undefined> Forget() { throw new System.NotImplementedException(); }
		public Task<Undefined> WatchAdvertisements(WatchAdvertisementsOptions options) { throw new System.NotImplementedException(); }
		public bool WatchingAdvertisements { get; }
}




[To(ToAttribute.FirstCharToLowerCase)]
public partial class WatchAdvertisementsOptions
{
		public AbortSignal Signal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothManufacturerDataMap
{
	
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothServiceDataMap
{
	
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothAdvertisingEvent : Event
{
		public BluetoothAdvertisingEvent(DOMString type, BluetoothAdvertisingEventInit init) { }
		public BluetoothDevice Device { get; }
		public UUID[] Uuids { get; }
		public DOMString? Name { get; }
		public ushort? Appearance { get; }
		public byte? TxPower { get; }
		public byte? Rssi { get; }
		public BluetoothManufacturerDataMap ManufacturerData { get; }
		public BluetoothServiceDataMap ServiceData { get; }
	public BluetoothAdvertisingEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothAdvertisingEventInit : EventInit
{
		public required BluetoothDevice Device;
		public List<DOMString> Uuids;
		public DOMString Name;
		public ushort Appearance;
		public byte TxPower;
		public byte Rssi;
		public BluetoothManufacturerDataMap ManufacturerData;
		public BluetoothServiceDataMap ServiceData;
}

///<include file='Utils/Docs/BluetoothRemoteGATTServer/BluetoothRemoteGATTServer.generated.xml' path='docs/BluetoothRemoteGATTServer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothRemoteGATTServer
{
	///<include file='Utils/Docs/BluetoothRemoteGATTServerDevice/BluetoothRemoteGATTServerDevice.generated.xml' path='docs/BluetoothRemoteGATTServerDevice/*'/>
	public BluetoothDevice Device { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTServerConnected/BluetoothRemoteGATTServerConnected.generated.xml' path='docs/BluetoothRemoteGATTServerConnected/*'/>
	public bool Connected { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTServerConnect/BluetoothRemoteGATTServerConnect.generated.xml' path='docs/BluetoothRemoteGATTServerConnect/*'/>
	public Task<BluetoothRemoteGATTServer> Connect() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTServerDisconnect/BluetoothRemoteGATTServerDisconnect.generated.xml' path='docs/BluetoothRemoteGATTServerDisconnect/*'/>
	public Undefined Disconnect() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTServerGetPrimaryService/BluetoothRemoteGATTServerGetPrimaryService.generated.xml' path='docs/BluetoothRemoteGATTServerGetPrimaryService/*'/>
	public Task<BluetoothRemoteGATTService> GetPrimaryService(BluetoothServiceUUID service) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTServerGetPrimaryServices/BluetoothRemoteGATTServerGetPrimaryServices.generated.xml' path='docs/BluetoothRemoteGATTServerGetPrimaryServices/*'/>
	public Task<List<BluetoothRemoteGATTService>> GetPrimaryServices(BluetoothServiceUUID service) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/BluetoothRemoteGATTService/BluetoothRemoteGATTService.generated.xml' path='docs/BluetoothRemoteGATTService/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothRemoteGATTService : EventTarget, CharacteristicEventHandlers, ServiceEventHandlers
{
	///<include file='Utils/Docs/BluetoothRemoteGATTServiceDevice/BluetoothRemoteGATTServiceDevice.generated.xml' path='docs/BluetoothRemoteGATTServiceDevice/*'/>
	public BluetoothDevice Device { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTServiceUuid/BluetoothRemoteGATTServiceUuid.generated.xml' path='docs/BluetoothRemoteGATTServiceUuid/*'/>
	public UUID Uuid { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTServiceIsPrimary/BluetoothRemoteGATTServiceIsPrimary.generated.xml' path='docs/BluetoothRemoteGATTServiceIsPrimary/*'/>
	public bool IsPrimary { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTServiceGetCharacteristic/BluetoothRemoteGATTServiceGetCharacteristic.generated.xml' path='docs/BluetoothRemoteGATTServiceGetCharacteristic/*'/>
	public Task<BluetoothRemoteGATTCharacteristic> GetCharacteristic(BluetoothCharacteristicUUID characteristic) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTServiceGetCharacteristics/BluetoothRemoteGATTServiceGetCharacteristics.generated.xml' path='docs/BluetoothRemoteGATTServiceGetCharacteristics/*'/>
	public Task<List<BluetoothRemoteGATTCharacteristic>> GetCharacteristics(BluetoothCharacteristicUUID characteristic) { throw new System.NotImplementedException(); }
		public Task<BluetoothRemoteGATTService> GetIncludedService(BluetoothServiceUUID service) { throw new System.NotImplementedException(); }
		public Task<List<BluetoothRemoteGATTService>> GetIncludedServices(BluetoothServiceUUID service) { throw new System.NotImplementedException(); }
}



///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristic/BluetoothRemoteGATTCharacteristic.generated.xml' path='docs/BluetoothRemoteGATTCharacteristic/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothRemoteGATTCharacteristic : EventTarget, CharacteristicEventHandlers
{
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicService/BluetoothRemoteGATTCharacteristicService.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicService/*'/>
	public BluetoothRemoteGATTService Service { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicUuid/BluetoothRemoteGATTCharacteristicUuid.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicUuid/*'/>
	public UUID Uuid { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicProperties/BluetoothRemoteGATTCharacteristicProperties.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicProperties/*'/>
	public BluetoothCharacteristicProperties Properties { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicValue/BluetoothRemoteGATTCharacteristicValue.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicValue/*'/>
	public Unsupported /*DataView*/? Value { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicGetDescriptor/BluetoothRemoteGATTCharacteristicGetDescriptor.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicGetDescriptor/*'/>
	public Task<BluetoothRemoteGATTDescriptor> GetDescriptor(BluetoothDescriptorUUID descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicGetDescriptors/BluetoothRemoteGATTCharacteristicGetDescriptors.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicGetDescriptors/*'/>
	public Task<List<BluetoothRemoteGATTDescriptor>> GetDescriptors(BluetoothDescriptorUUID descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicReadValue/BluetoothRemoteGATTCharacteristicReadValue.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicReadValue/*'/>
	public Task<Unsupported /*DataView*/> ReadValue() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicWriteValue/BluetoothRemoteGATTCharacteristicWriteValue.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicWriteValue/*'/>
	public Task<Undefined> WriteValue(BufferSource value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicWriteValueWithResponse/BluetoothRemoteGATTCharacteristicWriteValueWithResponse.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicWriteValueWithResponse/*'/>
	public Task<Undefined> WriteValueWithResponse(BufferSource value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicWriteValueWithoutResponse/BluetoothRemoteGATTCharacteristicWriteValueWithoutResponse.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicWriteValueWithoutResponse/*'/>
	public Task<Undefined> WriteValueWithoutResponse(BufferSource value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicStartNotifications/BluetoothRemoteGATTCharacteristicStartNotifications.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicStartNotifications/*'/>
	public Task<BluetoothRemoteGATTCharacteristic> StartNotifications() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTCharacteristicStopNotifications/BluetoothRemoteGATTCharacteristicStopNotifications.generated.xml' path='docs/BluetoothRemoteGATTCharacteristicStopNotifications/*'/>
	public Task<BluetoothRemoteGATTCharacteristic> StopNotifications() { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/BluetoothCharacteristicProperties/BluetoothCharacteristicProperties.generated.xml' path='docs/BluetoothCharacteristicProperties/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothCharacteristicProperties
{
	///<include file='Utils/Docs/BluetoothCharacteristicPropertiesBroadcast/BluetoothCharacteristicPropertiesBroadcast.generated.xml' path='docs/BluetoothCharacteristicPropertiesBroadcast/*'/>
	public bool Broadcast { get; }
	///<include file='Utils/Docs/BluetoothCharacteristicPropertiesRead/BluetoothCharacteristicPropertiesRead.generated.xml' path='docs/BluetoothCharacteristicPropertiesRead/*'/>
	public bool Read { get; }
	///<include file='Utils/Docs/BluetoothCharacteristicPropertiesWriteWithoutResponse/BluetoothCharacteristicPropertiesWriteWithoutResponse.generated.xml' path='docs/BluetoothCharacteristicPropertiesWriteWithoutResponse/*'/>
	public bool WriteWithoutResponse { get; }
	///<include file='Utils/Docs/BluetoothCharacteristicPropertiesWrite/BluetoothCharacteristicPropertiesWrite.generated.xml' path='docs/BluetoothCharacteristicPropertiesWrite/*'/>
	public bool Write { get; }
	///<include file='Utils/Docs/BluetoothCharacteristicPropertiesNotify/BluetoothCharacteristicPropertiesNotify.generated.xml' path='docs/BluetoothCharacteristicPropertiesNotify/*'/>
	public bool Notify { get; }
	///<include file='Utils/Docs/BluetoothCharacteristicPropertiesIndicate/BluetoothCharacteristicPropertiesIndicate.generated.xml' path='docs/BluetoothCharacteristicPropertiesIndicate/*'/>
	public bool Indicate { get; }
	///<include file='Utils/Docs/BluetoothCharacteristicPropertiesAuthenticatedSignedWrites/BluetoothCharacteristicPropertiesAuthenticatedSignedWrites.generated.xml' path='docs/BluetoothCharacteristicPropertiesAuthenticatedSignedWrites/*'/>
	public bool AuthenticatedSignedWrites { get; }
	///<include file='Utils/Docs/BluetoothCharacteristicPropertiesReliableWrite/BluetoothCharacteristicPropertiesReliableWrite.generated.xml' path='docs/BluetoothCharacteristicPropertiesReliableWrite/*'/>
	public bool ReliableWrite { get; }
	///<include file='Utils/Docs/BluetoothCharacteristicPropertiesWritableAuxiliaries/BluetoothCharacteristicPropertiesWritableAuxiliaries.generated.xml' path='docs/BluetoothCharacteristicPropertiesWritableAuxiliaries/*'/>
	public bool WritableAuxiliaries { get; }
}

///<include file='Utils/Docs/BluetoothRemoteGATTDescriptor/BluetoothRemoteGATTDescriptor.generated.xml' path='docs/BluetoothRemoteGATTDescriptor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothRemoteGATTDescriptor
{
	///<include file='Utils/Docs/BluetoothRemoteGATTDescriptorCharacteristic/BluetoothRemoteGATTDescriptorCharacteristic.generated.xml' path='docs/BluetoothRemoteGATTDescriptorCharacteristic/*'/>
	public BluetoothRemoteGATTCharacteristic Characteristic { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTDescriptorUuid/BluetoothRemoteGATTDescriptorUuid.generated.xml' path='docs/BluetoothRemoteGATTDescriptorUuid/*'/>
	public UUID Uuid { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTDescriptorValue/BluetoothRemoteGATTDescriptorValue.generated.xml' path='docs/BluetoothRemoteGATTDescriptorValue/*'/>
	public Unsupported /*DataView*/? Value { get; }
	///<include file='Utils/Docs/BluetoothRemoteGATTDescriptorReadValue/BluetoothRemoteGATTDescriptorReadValue.generated.xml' path='docs/BluetoothRemoteGATTDescriptorReadValue/*'/>
	public Task<Unsupported /*DataView*/> ReadValue() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothRemoteGATTDescriptorWriteValue/BluetoothRemoteGATTDescriptorWriteValue.generated.xml' path='docs/BluetoothRemoteGATTDescriptorWriteValue/*'/>
	public Task<Undefined> WriteValue(BufferSource value) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/BluetoothUUID/BluetoothUUID.generated.xml' path='docs/BluetoothUUID/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BluetoothUUID
{
	///<include file='Utils/Docs/BluetoothUUIDGetService/BluetoothUUIDGetService.generated.xml' path='docs/BluetoothUUIDGetService/*'/>
	public static UUID GetService(Union173 name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothUUIDGetCharacteristic/BluetoothUUIDGetCharacteristic.generated.xml' path='docs/BluetoothUUIDGetCharacteristic/*'/>
	public static UUID GetCharacteristic(Union174 name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothUUIDGetDescriptor/BluetoothUUIDGetDescriptor.generated.xml' path='docs/BluetoothUUIDGetDescriptor/*'/>
	public static UUID GetDescriptor(Union175 name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BluetoothUUIDCanonicalUUID/BluetoothUUIDCanonicalUUID.generated.xml' path='docs/BluetoothUUIDCanonicalUUID/*'/>
	public static UUID CanonicalUUID(ulong alias) { throw new System.NotImplementedException(); }
}




///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorBluetooth/NavigatorBluetooth.generated.xml' path='docs/NavigatorBluetooth/*'/>
	public Bluetooth Bluetooth { get; }
}

///<include file='Utils/Docs/LockManager/LockManager.generated.xml' path='docs/LockManager/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class LockManager
{
	///<include file='Utils/Docs/LockManagerRequest/LockManagerRequest.generated.xml' path='docs/LockManagerRequest/*'/>
	public Task<dynamic> Request(DOMString name, LockGrantedCallback callback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/LockManagerRequest/LockManagerRequest.generated.xml' path='docs/LockManagerRequest/*'/>
	public Task<dynamic> Request(DOMString name, LockOptions options, LockGrantedCallback callback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/LockManagerQuery/LockManagerQuery.generated.xml' path='docs/LockManagerQuery/*'/>
	public Task<LockManagerSnapshot> Query() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class LockOptions
{
		public LockMode Mode;
		public bool IfAvailable;
		public bool Steal;
		public AbortSignal Signal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class LockManagerSnapshot
{
		public List<LockInfo> Held;
		public List<LockInfo> Pending;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class LockInfo
{
		public DOMString Name;
		public LockMode Mode;
		public DOMString ClientId;
}

///<include file='Utils/Docs/Lock/Lock.generated.xml' path='docs/Lock/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Lock
{
	///<include file='Utils/Docs/LockName/LockName.generated.xml' path='docs/LockName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/LockMode/LockMode.generated.xml' path='docs/LockMode/*'/>
	public LockMode Mode { get; }
}

///<include file='Utils/Docs/NDEFMessage/NDEFMessage.generated.xml' path='docs/NDEFMessage/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NDEFMessage
{
	///<include file='Utils/Docs/NDEFMessageNDEFMessage/NDEFMessageNDEFMessage.generated.xml' path='docs/NDEFMessageNDEFMessage/*'/>
	public NDEFMessage(NDEFMessageInit messageInit) { }
	///<include file='Utils/Docs/NDEFMessageRecords/NDEFMessageRecords.generated.xml' path='docs/NDEFMessageRecords/*'/>
	public NDEFRecord[] Records { get; }
	public NDEFMessage() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NDEFMessageInit
{
		public required List<NDEFRecordInit> Records;
}

///<include file='Utils/Docs/NDEFRecord/NDEFRecord.generated.xml' path='docs/NDEFRecord/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NDEFRecord
{
	///<include file='Utils/Docs/NDEFRecordNDEFRecord/NDEFRecordNDEFRecord.generated.xml' path='docs/NDEFRecordNDEFRecord/*'/>
	public NDEFRecord(NDEFRecordInit recordInit) { }
	///<include file='Utils/Docs/NDEFRecordRecordType/NDEFRecordRecordType.generated.xml' path='docs/NDEFRecordRecordType/*'/>
	public USVString RecordType { get; }
	///<include file='Utils/Docs/NDEFRecordMediaType/NDEFRecordMediaType.generated.xml' path='docs/NDEFRecordMediaType/*'/>
	public USVString? MediaType { get; }
	///<include file='Utils/Docs/NDEFRecordId/NDEFRecordId.generated.xml' path='docs/NDEFRecordId/*'/>
	public USVString? Id { get; }
	///<include file='Utils/Docs/NDEFRecordData/NDEFRecordData.generated.xml' path='docs/NDEFRecordData/*'/>
	public Unsupported /*DataView*/? Data { get; }
	///<include file='Utils/Docs/NDEFRecordEncoding/NDEFRecordEncoding.generated.xml' path='docs/NDEFRecordEncoding/*'/>
	public USVString? Encoding { get; }
	///<include file='Utils/Docs/NDEFRecordLang/NDEFRecordLang.generated.xml' path='docs/NDEFRecordLang/*'/>
	public USVString? Lang { get; }
	///<include file='Utils/Docs/NDEFRecordToRecords/NDEFRecordToRecords.generated.xml' path='docs/NDEFRecordToRecords/*'/>
	public List<NDEFRecord>? ToRecords() { throw new System.NotImplementedException(); }
	public NDEFRecord() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NDEFRecordInit
{
		public required USVString RecordType;
		public USVString MediaType;
		public USVString Id;
		public USVString Encoding;
		public USVString Lang;
		public dynamic Data;
}


///<include file='Utils/Docs/NDEFReader/NDEFReader.generated.xml' path='docs/NDEFReader/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NDEFReader : EventTarget
{
	///<include file='Utils/Docs/NDEFReaderNDEFReader/NDEFReaderNDEFReader.generated.xml' path='docs/NDEFReaderNDEFReader/*'/>
	public NDEFReader() { }
		public EventHandler Onreading { get; set; }
		public EventHandler Onreadingerror { get; set; }
	///<include file='Utils/Docs/NDEFReaderScan/NDEFReaderScan.generated.xml' path='docs/NDEFReaderScan/*'/>
	public Task<Undefined> Scan(NDEFScanOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NDEFReaderWrite/NDEFReaderWrite.generated.xml' path='docs/NDEFReaderWrite/*'/>
	public Task<Undefined> Write(NDEFMessageSource message, NDEFWriteOptions options) { throw new System.NotImplementedException(); }
		public Task<Undefined> MakeReadOnly(NDEFMakeReadOnlyOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/NDEFReadingEvent/NDEFReadingEvent.generated.xml' path='docs/NDEFReadingEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class NDEFReadingEvent : Event
{
	///<include file='Utils/Docs/NDEFReadingEventNDEFReadingEvent/NDEFReadingEventNDEFReadingEvent.generated.xml' path='docs/NDEFReadingEventNDEFReadingEvent/*'/>
	public NDEFReadingEvent(DOMString type, NDEFReadingEventInit readingEventInitDict) { }
	///<include file='Utils/Docs/NDEFReadingEventSerialNumber/NDEFReadingEventSerialNumber.generated.xml' path='docs/NDEFReadingEventSerialNumber/*'/>
	public DOMString SerialNumber { get; }
	///<include file='Utils/Docs/NDEFReadingEventMessage/NDEFReadingEventMessage.generated.xml' path='docs/NDEFReadingEventMessage/*'/>
	public NDEFMessage Message { get; }
	public NDEFReadingEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NDEFReadingEventInit : EventInit
{
		public DOMString? SerialNumber;
		public required NDEFMessageInit Message;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NDEFWriteOptions
{
		public bool Overwrite;
		public AbortSignal? Signal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NDEFMakeReadOnlyOptions
{
		public AbortSignal? Signal;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class NDEFScanOptions
{
		public AbortSignal Signal;
}

///<include file='Utils/Docs/OTPCredential/OTPCredential.generated.xml' path='docs/OTPCredential/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class OTPCredential : Credential
{
	///<include file='Utils/Docs/OTPCredentialCode/OTPCredentialCode.generated.xml' path='docs/OTPCredentialCode/*'/>
	public DOMString Code { get; }
}

public partial class CredentialRequestOptions
{
		public OTPCredentialRequestOptions Otp;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OTPCredentialRequestOptions
{
		public List<OTPCredentialTransportType> Transport;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorShare/NavigatorShare.generated.xml' path='docs/NavigatorShare/*'/>
	public Task<Undefined> Share(ShareData data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/NavigatorCanShare/NavigatorCanShare.generated.xml' path='docs/NavigatorCanShare/*'/>
	public bool CanShare(ShareData data) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ShareData
{
		public List<File> Files;
		public USVString Title;
		public USVString Text;
		public USVString Url;
}

///<include file='Utils/Docs/BaseAudioContext/BaseAudioContext.generated.xml' path='docs/BaseAudioContext/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BaseAudioContext : EventTarget
{
	///<include file='Utils/Docs/BaseAudioContextDestination/BaseAudioContextDestination.generated.xml' path='docs/BaseAudioContextDestination/*'/>
	public AudioDestinationNode Destination { get; }
	///<include file='Utils/Docs/BaseAudioContextSampleRate/BaseAudioContextSampleRate.generated.xml' path='docs/BaseAudioContextSampleRate/*'/>
	public Number SampleRate { get; }
	///<include file='Utils/Docs/BaseAudioContextCurrentTime/BaseAudioContextCurrentTime.generated.xml' path='docs/BaseAudioContextCurrentTime/*'/>
	public Number CurrentTime { get; }
	///<include file='Utils/Docs/BaseAudioContextListener/BaseAudioContextListener.generated.xml' path='docs/BaseAudioContextListener/*'/>
	public AudioListener Listener { get; }
	///<include file='Utils/Docs/BaseAudioContextState/BaseAudioContextState.generated.xml' path='docs/BaseAudioContextState/*'/>
	public AudioContextState State { get; }
		public ulong RenderQuantumSize { get; }
	///<include file='Utils/Docs/BaseAudioContextAudioWorklet/BaseAudioContextAudioWorklet.generated.xml' path='docs/BaseAudioContextAudioWorklet/*'/>
	public AudioWorklet AudioWorklet { get; }
		public EventHandler Onstatechange { get; set; }
	///<include file='Utils/Docs/BaseAudioContextCreateAnalyser/BaseAudioContextCreateAnalyser.generated.xml' path='docs/BaseAudioContextCreateAnalyser/*'/>
	public AnalyserNode CreateAnalyser() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateBiquadFilter/BaseAudioContextCreateBiquadFilter.generated.xml' path='docs/BaseAudioContextCreateBiquadFilter/*'/>
	public BiquadFilterNode CreateBiquadFilter() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateBuffer/BaseAudioContextCreateBuffer.generated.xml' path='docs/BaseAudioContextCreateBuffer/*'/>
	public AudioBuffer CreateBuffer(ulong numberOfChannels, ulong length, Number sampleRate) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateBufferSource/BaseAudioContextCreateBufferSource.generated.xml' path='docs/BaseAudioContextCreateBufferSource/*'/>
	public AudioBufferSourceNode CreateBufferSource() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateChannelMerger/BaseAudioContextCreateChannelMerger.generated.xml' path='docs/BaseAudioContextCreateChannelMerger/*'/>
	public ChannelMergerNode CreateChannelMerger(ulong numberOfInputs) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateChannelSplitter/BaseAudioContextCreateChannelSplitter.generated.xml' path='docs/BaseAudioContextCreateChannelSplitter/*'/>
	public ChannelSplitterNode CreateChannelSplitter(ulong numberOfOutputs) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateConstantSource/BaseAudioContextCreateConstantSource.generated.xml' path='docs/BaseAudioContextCreateConstantSource/*'/>
	public ConstantSourceNode CreateConstantSource() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateConvolver/BaseAudioContextCreateConvolver.generated.xml' path='docs/BaseAudioContextCreateConvolver/*'/>
	public ConvolverNode CreateConvolver() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateDelay/BaseAudioContextCreateDelay.generated.xml' path='docs/BaseAudioContextCreateDelay/*'/>
	public DelayNode CreateDelay(Number maxDelayTime) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateDynamicsCompressor/BaseAudioContextCreateDynamicsCompressor.generated.xml' path='docs/BaseAudioContextCreateDynamicsCompressor/*'/>
	public DynamicsCompressorNode CreateDynamicsCompressor() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateGain/BaseAudioContextCreateGain.generated.xml' path='docs/BaseAudioContextCreateGain/*'/>
	public GainNode CreateGain() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateIIRFilter/BaseAudioContextCreateIIRFilter.generated.xml' path='docs/BaseAudioContextCreateIIRFilter/*'/>
	public IIRFilterNode CreateIIRFilter(List<Number> feedforward, List<Number> feedback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateOscillator/BaseAudioContextCreateOscillator.generated.xml' path='docs/BaseAudioContextCreateOscillator/*'/>
	public OscillatorNode CreateOscillator() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreatePanner/BaseAudioContextCreatePanner.generated.xml' path='docs/BaseAudioContextCreatePanner/*'/>
	public PannerNode CreatePanner() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreatePeriodicWave/BaseAudioContextCreatePeriodicWave.generated.xml' path='docs/BaseAudioContextCreatePeriodicWave/*'/>
	public PeriodicWave CreatePeriodicWave(List<Number> real, List<Number> imag, PeriodicWaveConstraints constraints) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateScriptProcessor/BaseAudioContextCreateScriptProcessor.generated.xml' path='docs/BaseAudioContextCreateScriptProcessor/*'/>
	public ScriptProcessorNode CreateScriptProcessor(ulong bufferSize, ulong numberOfInputChannels, ulong numberOfOutputChannels) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateStereoPanner/BaseAudioContextCreateStereoPanner.generated.xml' path='docs/BaseAudioContextCreateStereoPanner/*'/>
	public StereoPannerNode CreateStereoPanner() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextCreateWaveShaper/BaseAudioContextCreateWaveShaper.generated.xml' path='docs/BaseAudioContextCreateWaveShaper/*'/>
	public WaveShaperNode CreateWaveShaper() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/BaseAudioContextDecodeAudioData/BaseAudioContextDecodeAudioData.generated.xml' path='docs/BaseAudioContextDecodeAudioData/*'/>
	public Task<AudioBuffer> DecodeAudioData(byte[] audioData, DecodeSuccessCallback? successCallback, DecodeErrorCallback? errorCallback) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/AudioContext/AudioContext.generated.xml' path='docs/AudioContext/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioContext : BaseAudioContext
{
	///<include file='Utils/Docs/AudioContextAudioContext/AudioContextAudioContext.generated.xml' path='docs/AudioContextAudioContext/*'/>
	public AudioContext(AudioContextOptions contextOptions) { }
	///<include file='Utils/Docs/AudioContextBaseLatency/AudioContextBaseLatency.generated.xml' path='docs/AudioContextBaseLatency/*'/>
	public Number BaseLatency { get; }
	///<include file='Utils/Docs/AudioContextOutputLatency/AudioContextOutputLatency.generated.xml' path='docs/AudioContextOutputLatency/*'/>
	public Number OutputLatency { get; }
	///<include file='Utils/Docs/AudioContextSinkId/AudioContextSinkId.generated.xml' path='docs/AudioContextSinkId/*'/>
	public Union180 SinkId { get; }
		public AudioRenderCapacity RenderCapacity { get; }
		public EventHandler Onsinkchange { get; set; }
		public EventHandler Onerror { get; set; }
	///<include file='Utils/Docs/AudioContextGetOutputTimestamp/AudioContextGetOutputTimestamp.generated.xml' path='docs/AudioContextGetOutputTimestamp/*'/>
	public AudioTimestamp GetOutputTimestamp() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioContextResume/AudioContextResume.generated.xml' path='docs/AudioContextResume/*'/>
	public Task<Undefined> Resume() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioContextSuspend/AudioContextSuspend.generated.xml' path='docs/AudioContextSuspend/*'/>
	public Task<Undefined> Suspend() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioContextClose/AudioContextClose.generated.xml' path='docs/AudioContextClose/*'/>
	public Task<Undefined> Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioContextSetSinkId/AudioContextSetSinkId.generated.xml' path='docs/AudioContextSetSinkId/*'/>
	public Task<Undefined> SetSinkId(Union181 sinkId) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioContextCreateMediaElementSource/AudioContextCreateMediaElementSource.generated.xml' path='docs/AudioContextCreateMediaElementSource/*'/>
	public MediaElementAudioSourceNode CreateMediaElementSource(HTMLMediaElement mediaElement) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioContextCreateMediaStreamSource/AudioContextCreateMediaStreamSource.generated.xml' path='docs/AudioContextCreateMediaStreamSource/*'/>
	public MediaStreamAudioSourceNode CreateMediaStreamSource(MediaStream mediaStream) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioContextCreateMediaStreamTrackSource/AudioContextCreateMediaStreamTrackSource.generated.xml' path='docs/AudioContextCreateMediaStreamTrackSource/*'/>
	public MediaStreamTrackAudioSourceNode CreateMediaStreamTrackSource(MediaStreamTrack mediaStreamTrack) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioContextCreateMediaStreamDestination/AudioContextCreateMediaStreamDestination.generated.xml' path='docs/AudioContextCreateMediaStreamDestination/*'/>
	public MediaStreamAudioDestinationNode CreateMediaStreamDestination() { throw new System.NotImplementedException(); }
	public AudioContext() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioContextOptions
{
		public Union182 LatencyHint;
		public Number SampleRate;
		public Union183 SinkId;
		public Union184 RenderSizeHint;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioSinkOptions
{
		public required AudioSinkType Type;
}

///<include file='Utils/Docs/AudioSinkInfo/AudioSinkInfo.generated.xml' path='docs/AudioSinkInfo/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioSinkInfo
{
	///<include file='Utils/Docs/AudioSinkInfoType/AudioSinkInfoType.generated.xml' path='docs/AudioSinkInfoType/*'/>
	public AudioSinkType Type { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioTimestamp
{
		public Number ContextTime;
		public DOMHighResTimeStamp PerformanceTime;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioRenderCapacity : EventTarget
{
		public Undefined Start(AudioRenderCapacityOptions options) { throw new System.NotImplementedException(); }
		public Undefined Stop() { throw new System.NotImplementedException(); }
		public EventHandler Onupdate { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioRenderCapacityOptions
{
		public Number UpdateInterval;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioRenderCapacityEvent : Event
{
		public AudioRenderCapacityEvent(DOMString type, AudioRenderCapacityEventInit eventInitDict) { }
		public Number Timestamp { get; }
		public Number AverageLoad { get; }
		public Number PeakLoad { get; }
		public Number UnderrunRatio { get; }
	public AudioRenderCapacityEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioRenderCapacityEventInit : EventInit
{
		public Number Timestamp;
		public Number AverageLoad;
		public Number PeakLoad;
		public Number UnderrunRatio;
}

///<include file='Utils/Docs/OfflineAudioContext/OfflineAudioContext.generated.xml' path='docs/OfflineAudioContext/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class OfflineAudioContext : BaseAudioContext
{
	///<include file='Utils/Docs/OfflineAudioContextOfflineAudioContext/OfflineAudioContextOfflineAudioContext.generated.xml' path='docs/OfflineAudioContextOfflineAudioContext/*'/>
	public OfflineAudioContext(OfflineAudioContextOptions contextOptions) { }
	///<include file='Utils/Docs/OfflineAudioContextOfflineAudioContext/OfflineAudioContextOfflineAudioContext.generated.xml' path='docs/OfflineAudioContextOfflineAudioContext/*'/>
	public OfflineAudioContext(ulong numberOfChannels, ulong length, Number sampleRate) { }
	///<include file='Utils/Docs/OfflineAudioContextStartRendering/OfflineAudioContextStartRendering.generated.xml' path='docs/OfflineAudioContextStartRendering/*'/>
	public Task<AudioBuffer> StartRendering() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/OfflineAudioContextResume/OfflineAudioContextResume.generated.xml' path='docs/OfflineAudioContextResume/*'/>
	public Task<Undefined> Resume() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/OfflineAudioContextSuspend/OfflineAudioContextSuspend.generated.xml' path='docs/OfflineAudioContextSuspend/*'/>
	public Task<Undefined> Suspend(Number suspendTime) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/OfflineAudioContextLength/OfflineAudioContextLength.generated.xml' path='docs/OfflineAudioContextLength/*'/>
	public ulong Length { get; }
		public EventHandler Oncomplete { get; set; }
	public OfflineAudioContext() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OfflineAudioContextOptions
{
		public ulong NumberOfChannels;
		public required ulong Length;
		public required Number SampleRate;
		public Union185 RenderSizeHint;
}

///<include file='Utils/Docs/OfflineAudioCompletionEvent/OfflineAudioCompletionEvent.generated.xml' path='docs/OfflineAudioCompletionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class OfflineAudioCompletionEvent : Event
{
	///<include file='Utils/Docs/OfflineAudioCompletionEventOfflineAudioCompletionEvent/OfflineAudioCompletionEventOfflineAudioCompletionEvent.generated.xml' path='docs/OfflineAudioCompletionEventOfflineAudioCompletionEvent/*'/>
	public OfflineAudioCompletionEvent(DOMString type, OfflineAudioCompletionEventInit eventInitDict) { }
	///<include file='Utils/Docs/OfflineAudioCompletionEventRenderedBuffer/OfflineAudioCompletionEventRenderedBuffer.generated.xml' path='docs/OfflineAudioCompletionEventRenderedBuffer/*'/>
	public AudioBuffer RenderedBuffer { get; }
	public OfflineAudioCompletionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OfflineAudioCompletionEventInit : EventInit
{
		public required AudioBuffer RenderedBuffer;
}

///<include file='Utils/Docs/AudioBuffer/AudioBuffer.generated.xml' path='docs/AudioBuffer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioBuffer
{
	///<include file='Utils/Docs/AudioBufferAudioBuffer/AudioBufferAudioBuffer.generated.xml' path='docs/AudioBufferAudioBuffer/*'/>
	public AudioBuffer(AudioBufferOptions options) { }
	///<include file='Utils/Docs/AudioBufferSampleRate/AudioBufferSampleRate.generated.xml' path='docs/AudioBufferSampleRate/*'/>
	public Number SampleRate { get; }
	///<include file='Utils/Docs/AudioBufferLength/AudioBufferLength.generated.xml' path='docs/AudioBufferLength/*'/>
	public ulong Length { get; }
	///<include file='Utils/Docs/AudioBufferDuration/AudioBufferDuration.generated.xml' path='docs/AudioBufferDuration/*'/>
	public Number Duration { get; }
	///<include file='Utils/Docs/AudioBufferNumberOfChannels/AudioBufferNumberOfChannels.generated.xml' path='docs/AudioBufferNumberOfChannels/*'/>
	public ulong NumberOfChannels { get; }
	///<include file='Utils/Docs/AudioBufferGetChannelData/AudioBufferGetChannelData.generated.xml' path='docs/AudioBufferGetChannelData/*'/>
	public System.Single GetChannelData(ulong channel) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioBufferCopyFromChannel/AudioBufferCopyFromChannel.generated.xml' path='docs/AudioBufferCopyFromChannel/*'/>
	public Undefined CopyFromChannel(System.Single destination, ulong channelNumber, ulong bufferOffset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioBufferCopyToChannel/AudioBufferCopyToChannel.generated.xml' path='docs/AudioBufferCopyToChannel/*'/>
	public Undefined CopyToChannel(System.Single source, ulong channelNumber, ulong bufferOffset) { throw new System.NotImplementedException(); }
	public AudioBuffer() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioBufferOptions
{
		public ulong NumberOfChannels;
		public required ulong Length;
		public required Number SampleRate;
}

///<include file='Utils/Docs/AudioNode/AudioNode.generated.xml' path='docs/AudioNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioNode : EventTarget
{
	///<include file='Utils/Docs/AudioNodeConnect/AudioNodeConnect.generated.xml' path='docs/AudioNodeConnect/*'/>
	public AudioNode Connect(AudioNode destinationNode, ulong output, ulong input) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioNodeConnect/AudioNodeConnect.generated.xml' path='docs/AudioNodeConnect/*'/>
	public Undefined Connect(AudioParam destinationParam, ulong output) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioNodeDisconnect/AudioNodeDisconnect.generated.xml' path='docs/AudioNodeDisconnect/*'/>
	public Undefined Disconnect() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioNodeDisconnect/AudioNodeDisconnect.generated.xml' path='docs/AudioNodeDisconnect/*'/>
	public Undefined Disconnect(ulong output) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioNodeDisconnect/AudioNodeDisconnect.generated.xml' path='docs/AudioNodeDisconnect/*'/>
	public Undefined Disconnect(AudioNode destinationNode) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioNodeDisconnect/AudioNodeDisconnect.generated.xml' path='docs/AudioNodeDisconnect/*'/>
	public Undefined Disconnect(AudioNode destinationNode, ulong output) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioNodeDisconnect/AudioNodeDisconnect.generated.xml' path='docs/AudioNodeDisconnect/*'/>
	public Undefined Disconnect(AudioNode destinationNode, ulong output, ulong input) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioNodeDisconnect/AudioNodeDisconnect.generated.xml' path='docs/AudioNodeDisconnect/*'/>
	public Undefined Disconnect(AudioParam destinationParam) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioNodeDisconnect/AudioNodeDisconnect.generated.xml' path='docs/AudioNodeDisconnect/*'/>
	public Undefined Disconnect(AudioParam destinationParam, ulong output) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioNodeContext/AudioNodeContext.generated.xml' path='docs/AudioNodeContext/*'/>
	public BaseAudioContext Context { get; }
	///<include file='Utils/Docs/AudioNodeNumberOfInputs/AudioNodeNumberOfInputs.generated.xml' path='docs/AudioNodeNumberOfInputs/*'/>
	public ulong NumberOfInputs { get; }
	///<include file='Utils/Docs/AudioNodeNumberOfOutputs/AudioNodeNumberOfOutputs.generated.xml' path='docs/AudioNodeNumberOfOutputs/*'/>
	public ulong NumberOfOutputs { get; }
	///<include file='Utils/Docs/AudioNodeChannelCount/AudioNodeChannelCount.generated.xml' path='docs/AudioNodeChannelCount/*'/>
	public ulong ChannelCount { get; set; }
	///<include file='Utils/Docs/AudioNodeChannelCountMode/AudioNodeChannelCountMode.generated.xml' path='docs/AudioNodeChannelCountMode/*'/>
	public ChannelCountMode ChannelCountMode { get; set; }
	///<include file='Utils/Docs/AudioNodeChannelInterpretation/AudioNodeChannelInterpretation.generated.xml' path='docs/AudioNodeChannelInterpretation/*'/>
	public ChannelInterpretation ChannelInterpretation { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioNodeOptions
{
		public ulong ChannelCount;
		public ChannelCountMode ChannelCountMode;
		public ChannelInterpretation ChannelInterpretation;
}

///<include file='Utils/Docs/AudioParam/AudioParam.generated.xml' path='docs/AudioParam/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioParam
{
	///<include file='Utils/Docs/AudioParamValue/AudioParamValue.generated.xml' path='docs/AudioParamValue/*'/>
	public Number Value { get; set; }
		public AutomationRate AutomationRate { get; set; }
	///<include file='Utils/Docs/AudioParamDefaultValue/AudioParamDefaultValue.generated.xml' path='docs/AudioParamDefaultValue/*'/>
	public Number DefaultValue { get; }
	///<include file='Utils/Docs/AudioParamMinValue/AudioParamMinValue.generated.xml' path='docs/AudioParamMinValue/*'/>
	public Number MinValue { get; }
	///<include file='Utils/Docs/AudioParamMaxValue/AudioParamMaxValue.generated.xml' path='docs/AudioParamMaxValue/*'/>
	public Number MaxValue { get; }
	///<include file='Utils/Docs/AudioParamSetValueAtTime/AudioParamSetValueAtTime.generated.xml' path='docs/AudioParamSetValueAtTime/*'/>
	public AudioParam SetValueAtTime(Number value, Number startTime) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioParamLinearRampToValueAtTime/AudioParamLinearRampToValueAtTime.generated.xml' path='docs/AudioParamLinearRampToValueAtTime/*'/>
	public AudioParam LinearRampToValueAtTime(Number value, Number endTime) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioParamExponentialRampToValueAtTime/AudioParamExponentialRampToValueAtTime.generated.xml' path='docs/AudioParamExponentialRampToValueAtTime/*'/>
	public AudioParam ExponentialRampToValueAtTime(Number value, Number endTime) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioParamSetTargetAtTime/AudioParamSetTargetAtTime.generated.xml' path='docs/AudioParamSetTargetAtTime/*'/>
	public AudioParam SetTargetAtTime(Number target, Number startTime, Number timeConstant) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioParamSetValueCurveAtTime/AudioParamSetValueCurveAtTime.generated.xml' path='docs/AudioParamSetValueCurveAtTime/*'/>
	public AudioParam SetValueCurveAtTime(List<Number> values, Number startTime, Number duration) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioParamCancelScheduledValues/AudioParamCancelScheduledValues.generated.xml' path='docs/AudioParamCancelScheduledValues/*'/>
	public AudioParam CancelScheduledValues(Number cancelTime) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioParamCancelAndHoldAtTime/AudioParamCancelAndHoldAtTime.generated.xml' path='docs/AudioParamCancelAndHoldAtTime/*'/>
	public AudioParam CancelAndHoldAtTime(Number cancelTime) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/AudioScheduledSourceNode/AudioScheduledSourceNode.generated.xml' path='docs/AudioScheduledSourceNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioScheduledSourceNode : AudioNode
{
		public EventHandler Onended { get; set; }
	///<include file='Utils/Docs/AudioScheduledSourceNodeStart/AudioScheduledSourceNodeStart.generated.xml' path='docs/AudioScheduledSourceNodeStart/*'/>
	public Undefined Start(Number when) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioScheduledSourceNodeStop/AudioScheduledSourceNodeStop.generated.xml' path='docs/AudioScheduledSourceNodeStop/*'/>
	public Undefined Stop(Number when) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/AnalyserNode/AnalyserNode.generated.xml' path='docs/AnalyserNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AnalyserNode : AudioNode
{
	///<include file='Utils/Docs/AnalyserNodeAnalyserNode/AnalyserNodeAnalyserNode.generated.xml' path='docs/AnalyserNodeAnalyserNode/*'/>
	public AnalyserNode(BaseAudioContext context, AnalyserOptions options) { }
	///<include file='Utils/Docs/AnalyserNodeGetFloatFrequencyData/AnalyserNodeGetFloatFrequencyData.generated.xml' path='docs/AnalyserNodeGetFloatFrequencyData/*'/>
	public Undefined GetFloatFrequencyData(System.Single array) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnalyserNodeGetByteFrequencyData/AnalyserNodeGetByteFrequencyData.generated.xml' path='docs/AnalyserNodeGetByteFrequencyData/*'/>
	public Undefined GetByteFrequencyData(System.Byte array) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnalyserNodeGetFloatTimeDomainData/AnalyserNodeGetFloatTimeDomainData.generated.xml' path='docs/AnalyserNodeGetFloatTimeDomainData/*'/>
	public Undefined GetFloatTimeDomainData(System.Single array) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnalyserNodeGetByteTimeDomainData/AnalyserNodeGetByteTimeDomainData.generated.xml' path='docs/AnalyserNodeGetByteTimeDomainData/*'/>
	public Undefined GetByteTimeDomainData(System.Byte array) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AnalyserNodeFftSize/AnalyserNodeFftSize.generated.xml' path='docs/AnalyserNodeFftSize/*'/>
	public ulong FftSize { get; set; }
	///<include file='Utils/Docs/AnalyserNodeFrequencyBinCount/AnalyserNodeFrequencyBinCount.generated.xml' path='docs/AnalyserNodeFrequencyBinCount/*'/>
	public ulong FrequencyBinCount { get; }
	///<include file='Utils/Docs/AnalyserNodeMinDecibels/AnalyserNodeMinDecibels.generated.xml' path='docs/AnalyserNodeMinDecibels/*'/>
	public Number MinDecibels { get; set; }
	///<include file='Utils/Docs/AnalyserNodeMaxDecibels/AnalyserNodeMaxDecibels.generated.xml' path='docs/AnalyserNodeMaxDecibels/*'/>
	public Number MaxDecibels { get; set; }
	///<include file='Utils/Docs/AnalyserNodeSmoothingTimeConstant/AnalyserNodeSmoothingTimeConstant.generated.xml' path='docs/AnalyserNodeSmoothingTimeConstant/*'/>
	public Number SmoothingTimeConstant { get; set; }
	public AnalyserNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AnalyserOptions : AudioNodeOptions
{
		public ulong FftSize;
		public Number MaxDecibels;
		public Number MinDecibels;
		public Number SmoothingTimeConstant;
}

///<include file='Utils/Docs/AudioBufferSourceNode/AudioBufferSourceNode.generated.xml' path='docs/AudioBufferSourceNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioBufferSourceNode : AudioScheduledSourceNode
{
	///<include file='Utils/Docs/AudioBufferSourceNodeAudioBufferSourceNode/AudioBufferSourceNodeAudioBufferSourceNode.generated.xml' path='docs/AudioBufferSourceNodeAudioBufferSourceNode/*'/>
	public AudioBufferSourceNode(BaseAudioContext context, AudioBufferSourceOptions options) { }
	///<include file='Utils/Docs/AudioBufferSourceNodeBuffer/AudioBufferSourceNodeBuffer.generated.xml' path='docs/AudioBufferSourceNodeBuffer/*'/>
	public AudioBuffer? Buffer { get; set; }
	///<include file='Utils/Docs/AudioBufferSourceNodePlaybackRate/AudioBufferSourceNodePlaybackRate.generated.xml' path='docs/AudioBufferSourceNodePlaybackRate/*'/>
	public AudioParam PlaybackRate { get; }
	///<include file='Utils/Docs/AudioBufferSourceNodeDetune/AudioBufferSourceNodeDetune.generated.xml' path='docs/AudioBufferSourceNodeDetune/*'/>
	public AudioParam Detune { get; }
	///<include file='Utils/Docs/AudioBufferSourceNodeLoop/AudioBufferSourceNodeLoop.generated.xml' path='docs/AudioBufferSourceNodeLoop/*'/>
	public bool Loop { get; set; }
	///<include file='Utils/Docs/AudioBufferSourceNodeLoopStart/AudioBufferSourceNodeLoopStart.generated.xml' path='docs/AudioBufferSourceNodeLoopStart/*'/>
	public Number LoopStart { get; set; }
	///<include file='Utils/Docs/AudioBufferSourceNodeLoopEnd/AudioBufferSourceNodeLoopEnd.generated.xml' path='docs/AudioBufferSourceNodeLoopEnd/*'/>
	public Number LoopEnd { get; set; }
	///<include file='Utils/Docs/AudioBufferSourceNodeStart/AudioBufferSourceNodeStart.generated.xml' path='docs/AudioBufferSourceNodeStart/*'/>
	public Undefined Start(Number when, Number offset, Number duration) { throw new System.NotImplementedException(); }
	public AudioBufferSourceNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioBufferSourceOptions
{
		public AudioBuffer? Buffer;
		public Number Detune;
		public bool Loop;
		public Number LoopEnd;
		public Number LoopStart;
		public Number PlaybackRate;
}

///<include file='Utils/Docs/AudioDestinationNode/AudioDestinationNode.generated.xml' path='docs/AudioDestinationNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioDestinationNode : AudioNode
{
	///<include file='Utils/Docs/AudioDestinationNodeMaxChannelCount/AudioDestinationNodeMaxChannelCount.generated.xml' path='docs/AudioDestinationNodeMaxChannelCount/*'/>
	public ulong MaxChannelCount { get; }
}

///<include file='Utils/Docs/AudioListener/AudioListener.generated.xml' path='docs/AudioListener/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioListener
{
	///<include file='Utils/Docs/AudioListenerPositionX/AudioListenerPositionX.generated.xml' path='docs/AudioListenerPositionX/*'/>
	public AudioParam PositionX { get; }
	///<include file='Utils/Docs/AudioListenerPositionY/AudioListenerPositionY.generated.xml' path='docs/AudioListenerPositionY/*'/>
	public AudioParam PositionY { get; }
	///<include file='Utils/Docs/AudioListenerPositionZ/AudioListenerPositionZ.generated.xml' path='docs/AudioListenerPositionZ/*'/>
	public AudioParam PositionZ { get; }
	///<include file='Utils/Docs/AudioListenerForwardX/AudioListenerForwardX.generated.xml' path='docs/AudioListenerForwardX/*'/>
	public AudioParam ForwardX { get; }
	///<include file='Utils/Docs/AudioListenerForwardY/AudioListenerForwardY.generated.xml' path='docs/AudioListenerForwardY/*'/>
	public AudioParam ForwardY { get; }
	///<include file='Utils/Docs/AudioListenerForwardZ/AudioListenerForwardZ.generated.xml' path='docs/AudioListenerForwardZ/*'/>
	public AudioParam ForwardZ { get; }
	///<include file='Utils/Docs/AudioListenerUpX/AudioListenerUpX.generated.xml' path='docs/AudioListenerUpX/*'/>
	public AudioParam UpX { get; }
	///<include file='Utils/Docs/AudioListenerUpY/AudioListenerUpY.generated.xml' path='docs/AudioListenerUpY/*'/>
	public AudioParam UpY { get; }
	///<include file='Utils/Docs/AudioListenerUpZ/AudioListenerUpZ.generated.xml' path='docs/AudioListenerUpZ/*'/>
	public AudioParam UpZ { get; }
	///<include file='Utils/Docs/AudioListenerSetPosition/AudioListenerSetPosition.generated.xml' path='docs/AudioListenerSetPosition/*'/>
	public Undefined SetPosition(Number x, Number y, Number z) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioListenerSetOrientation/AudioListenerSetOrientation.generated.xml' path='docs/AudioListenerSetOrientation/*'/>
	public Undefined SetOrientation(Number x, Number y, Number z, Number xUp, Number yUp, Number zUp) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/AudioProcessingEvent/AudioProcessingEvent.generated.xml' path='docs/AudioProcessingEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioProcessingEvent : Event
{
	///<include file='Utils/Docs/AudioProcessingEventAudioProcessingEvent/AudioProcessingEventAudioProcessingEvent.generated.xml' path='docs/AudioProcessingEventAudioProcessingEvent/*'/>
	public AudioProcessingEvent(DOMString type, AudioProcessingEventInit eventInitDict) { }
	///<include file='Utils/Docs/AudioProcessingEventPlaybackTime/AudioProcessingEventPlaybackTime.generated.xml' path='docs/AudioProcessingEventPlaybackTime/*'/>
	public Number PlaybackTime { get; }
	///<include file='Utils/Docs/AudioProcessingEventInputBuffer/AudioProcessingEventInputBuffer.generated.xml' path='docs/AudioProcessingEventInputBuffer/*'/>
	public AudioBuffer InputBuffer { get; }
	///<include file='Utils/Docs/AudioProcessingEventOutputBuffer/AudioProcessingEventOutputBuffer.generated.xml' path='docs/AudioProcessingEventOutputBuffer/*'/>
	public AudioBuffer OutputBuffer { get; }
	public AudioProcessingEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioProcessingEventInit : EventInit
{
		public required Number PlaybackTime;
		public required AudioBuffer InputBuffer;
		public required AudioBuffer OutputBuffer;
}

///<include file='Utils/Docs/BiquadFilterNode/BiquadFilterNode.generated.xml' path='docs/BiquadFilterNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class BiquadFilterNode : AudioNode
{
	///<include file='Utils/Docs/BiquadFilterNodeBiquadFilterNode/BiquadFilterNodeBiquadFilterNode.generated.xml' path='docs/BiquadFilterNodeBiquadFilterNode/*'/>
	public BiquadFilterNode(BaseAudioContext context, BiquadFilterOptions options) { }
	///<include file='Utils/Docs/BiquadFilterNodeType/BiquadFilterNodeType.generated.xml' path='docs/BiquadFilterNodeType/*'/>
	public BiquadFilterType Type { get; set; }
	///<include file='Utils/Docs/BiquadFilterNodeFrequency/BiquadFilterNodeFrequency.generated.xml' path='docs/BiquadFilterNodeFrequency/*'/>
	public AudioParam Frequency { get; }
	///<include file='Utils/Docs/BiquadFilterNodeDetune/BiquadFilterNodeDetune.generated.xml' path='docs/BiquadFilterNodeDetune/*'/>
	public AudioParam Detune { get; }
	///<include file='Utils/Docs/BiquadFilterNodeQ/BiquadFilterNodeQ.generated.xml' path='docs/BiquadFilterNodeQ/*'/>
	public AudioParam Q { get; }
	///<include file='Utils/Docs/BiquadFilterNodeGain/BiquadFilterNodeGain.generated.xml' path='docs/BiquadFilterNodeGain/*'/>
	public AudioParam Gain { get; }
	///<include file='Utils/Docs/BiquadFilterNodeGetFrequencyResponse/BiquadFilterNodeGetFrequencyResponse.generated.xml' path='docs/BiquadFilterNodeGetFrequencyResponse/*'/>
	public Undefined GetFrequencyResponse(System.Single frequencyHz, System.Single magResponse, System.Single phaseResponse) { throw new System.NotImplementedException(); }
	public BiquadFilterNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class BiquadFilterOptions : AudioNodeOptions
{
		public BiquadFilterType Type;
		public Number Q;
		public Number Detune;
		public Number Frequency;
		public Number Gain;
}

///<include file='Utils/Docs/ChannelMergerNode/ChannelMergerNode.generated.xml' path='docs/ChannelMergerNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ChannelMergerNode : AudioNode
{
	///<include file='Utils/Docs/ChannelMergerNodeChannelMergerNode/ChannelMergerNodeChannelMergerNode.generated.xml' path='docs/ChannelMergerNodeChannelMergerNode/*'/>
	public ChannelMergerNode(BaseAudioContext context, ChannelMergerOptions options) { }
	public ChannelMergerNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ChannelMergerOptions : AudioNodeOptions
{
		public ulong NumberOfInputs;
}

///<include file='Utils/Docs/ChannelSplitterNode/ChannelSplitterNode.generated.xml' path='docs/ChannelSplitterNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ChannelSplitterNode : AudioNode
{
	///<include file='Utils/Docs/ChannelSplitterNodeChannelSplitterNode/ChannelSplitterNodeChannelSplitterNode.generated.xml' path='docs/ChannelSplitterNodeChannelSplitterNode/*'/>
	public ChannelSplitterNode(BaseAudioContext context, ChannelSplitterOptions options) { }
	public ChannelSplitterNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ChannelSplitterOptions : AudioNodeOptions
{
		public ulong NumberOfOutputs;
}

///<include file='Utils/Docs/ConstantSourceNode/ConstantSourceNode.generated.xml' path='docs/ConstantSourceNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ConstantSourceNode : AudioScheduledSourceNode
{
	///<include file='Utils/Docs/ConstantSourceNodeConstantSourceNode/ConstantSourceNodeConstantSourceNode.generated.xml' path='docs/ConstantSourceNodeConstantSourceNode/*'/>
	public ConstantSourceNode(BaseAudioContext context, ConstantSourceOptions options) { }
	///<include file='Utils/Docs/ConstantSourceNodeOffset/ConstantSourceNodeOffset.generated.xml' path='docs/ConstantSourceNodeOffset/*'/>
	public AudioParam Offset { get; }
	public ConstantSourceNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ConstantSourceOptions
{
		public Number Offset;
}

///<include file='Utils/Docs/ConvolverNode/ConvolverNode.generated.xml' path='docs/ConvolverNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ConvolverNode : AudioNode
{
	///<include file='Utils/Docs/ConvolverNodeConvolverNode/ConvolverNodeConvolverNode.generated.xml' path='docs/ConvolverNodeConvolverNode/*'/>
	public ConvolverNode(BaseAudioContext context, ConvolverOptions options) { }
	///<include file='Utils/Docs/ConvolverNodeBuffer/ConvolverNodeBuffer.generated.xml' path='docs/ConvolverNodeBuffer/*'/>
	public AudioBuffer? Buffer { get; set; }
	///<include file='Utils/Docs/ConvolverNodeNormalize/ConvolverNodeNormalize.generated.xml' path='docs/ConvolverNodeNormalize/*'/>
	public bool Normalize { get; set; }
	public ConvolverNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ConvolverOptions : AudioNodeOptions
{
		public AudioBuffer? Buffer;
		public bool DisableNormalization;
}

///<include file='Utils/Docs/DelayNode/DelayNode.generated.xml' path='docs/DelayNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DelayNode : AudioNode
{
	///<include file='Utils/Docs/DelayNodeDelayNode/DelayNodeDelayNode.generated.xml' path='docs/DelayNodeDelayNode/*'/>
	public DelayNode(BaseAudioContext context, DelayOptions options) { }
	///<include file='Utils/Docs/DelayNodeDelayTime/DelayNodeDelayTime.generated.xml' path='docs/DelayNodeDelayTime/*'/>
	public AudioParam DelayTime { get; }
	public DelayNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DelayOptions : AudioNodeOptions
{
		public Number MaxDelayTime;
		public Number DelayTime;
}

///<include file='Utils/Docs/DynamicsCompressorNode/DynamicsCompressorNode.generated.xml' path='docs/DynamicsCompressorNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DynamicsCompressorNode : AudioNode
{
	///<include file='Utils/Docs/DynamicsCompressorNodeDynamicsCompressorNode/DynamicsCompressorNodeDynamicsCompressorNode.generated.xml' path='docs/DynamicsCompressorNodeDynamicsCompressorNode/*'/>
	public DynamicsCompressorNode(BaseAudioContext context, DynamicsCompressorOptions options) { }
	///<include file='Utils/Docs/DynamicsCompressorNodeThreshold/DynamicsCompressorNodeThreshold.generated.xml' path='docs/DynamicsCompressorNodeThreshold/*'/>
	public AudioParam Threshold { get; }
	///<include file='Utils/Docs/DynamicsCompressorNodeKnee/DynamicsCompressorNodeKnee.generated.xml' path='docs/DynamicsCompressorNodeKnee/*'/>
	public AudioParam Knee { get; }
	///<include file='Utils/Docs/DynamicsCompressorNodeRatio/DynamicsCompressorNodeRatio.generated.xml' path='docs/DynamicsCompressorNodeRatio/*'/>
	public AudioParam Ratio { get; }
	///<include file='Utils/Docs/DynamicsCompressorNodeReduction/DynamicsCompressorNodeReduction.generated.xml' path='docs/DynamicsCompressorNodeReduction/*'/>
	public Number Reduction { get; }
	///<include file='Utils/Docs/DynamicsCompressorNodeAttack/DynamicsCompressorNodeAttack.generated.xml' path='docs/DynamicsCompressorNodeAttack/*'/>
	public AudioParam Attack { get; }
	///<include file='Utils/Docs/DynamicsCompressorNodeRelease/DynamicsCompressorNodeRelease.generated.xml' path='docs/DynamicsCompressorNodeRelease/*'/>
	public AudioParam Release { get; }
	public DynamicsCompressorNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class DynamicsCompressorOptions : AudioNodeOptions
{
		public Number Attack;
		public Number Knee;
		public Number Ratio;
		public Number Release;
		public Number Threshold;
}

///<include file='Utils/Docs/GainNode/GainNode.generated.xml' path='docs/GainNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GainNode : AudioNode
{
	///<include file='Utils/Docs/GainNodeGainNode/GainNodeGainNode.generated.xml' path='docs/GainNodeGainNode/*'/>
	public GainNode(BaseAudioContext context, GainOptions options) { }
	///<include file='Utils/Docs/GainNodeGain/GainNodeGain.generated.xml' path='docs/GainNodeGain/*'/>
	public AudioParam Gain { get; }
	public GainNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GainOptions : AudioNodeOptions
{
		public Number Gain;
}

///<include file='Utils/Docs/IIRFilterNode/IIRFilterNode.generated.xml' path='docs/IIRFilterNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class IIRFilterNode : AudioNode
{
	///<include file='Utils/Docs/IIRFilterNodeIIRFilterNode/IIRFilterNodeIIRFilterNode.generated.xml' path='docs/IIRFilterNodeIIRFilterNode/*'/>
	public IIRFilterNode(BaseAudioContext context, IIRFilterOptions options) { }
	///<include file='Utils/Docs/IIRFilterNodeGetFrequencyResponse/IIRFilterNodeGetFrequencyResponse.generated.xml' path='docs/IIRFilterNodeGetFrequencyResponse/*'/>
	public Undefined GetFrequencyResponse(System.Single frequencyHz, System.Single magResponse, System.Single phaseResponse) { throw new System.NotImplementedException(); }
	public IIRFilterNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class IIRFilterOptions : AudioNodeOptions
{
		public required List<Number> Feedforward;
		public required List<Number> Feedback;
}

///<include file='Utils/Docs/MediaElementAudioSourceNode/MediaElementAudioSourceNode.generated.xml' path='docs/MediaElementAudioSourceNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaElementAudioSourceNode : AudioNode
{
	///<include file='Utils/Docs/MediaElementAudioSourceNodeMediaElementAudioSourceNode/MediaElementAudioSourceNodeMediaElementAudioSourceNode.generated.xml' path='docs/MediaElementAudioSourceNodeMediaElementAudioSourceNode/*'/>
	public MediaElementAudioSourceNode(AudioContext context, MediaElementAudioSourceOptions options) { }
	///<include file='Utils/Docs/MediaElementAudioSourceNodeMediaElement/MediaElementAudioSourceNodeMediaElement.generated.xml' path='docs/MediaElementAudioSourceNodeMediaElement/*'/>
	public HTMLMediaElement MediaElement { get; }
	public MediaElementAudioSourceNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaElementAudioSourceOptions
{
		public required HTMLMediaElement MediaElement;
}

///<include file='Utils/Docs/MediaStreamAudioDestinationNode/MediaStreamAudioDestinationNode.generated.xml' path='docs/MediaStreamAudioDestinationNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamAudioDestinationNode : AudioNode
{
	///<include file='Utils/Docs/MediaStreamAudioDestinationNodeMediaStreamAudioDestinationNo/MediaStreamAudioDestinationNodeMediaStreamAudioDestinationNo.generated.xml' path='docs/MediaStreamAudioDestinationNodeMediaStreamAudioDestinationNo/*'/>
	public MediaStreamAudioDestinationNode(AudioContext context, AudioNodeOptions options) { }
	///<include file='Utils/Docs/MediaStreamAudioDestinationNodeStream/MediaStreamAudioDestinationNodeStream.generated.xml' path='docs/MediaStreamAudioDestinationNodeStream/*'/>
	public MediaStream Stream { get; }
	public MediaStreamAudioDestinationNode() { }
}

///<include file='Utils/Docs/MediaStreamAudioSourceNode/MediaStreamAudioSourceNode.generated.xml' path='docs/MediaStreamAudioSourceNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamAudioSourceNode : AudioNode
{
	///<include file='Utils/Docs/MediaStreamAudioSourceNodeMediaStreamAudioSourceNode/MediaStreamAudioSourceNodeMediaStreamAudioSourceNode.generated.xml' path='docs/MediaStreamAudioSourceNodeMediaStreamAudioSourceNode/*'/>
	public MediaStreamAudioSourceNode(AudioContext context, MediaStreamAudioSourceOptions options) { }
	///<include file='Utils/Docs/MediaStreamAudioSourceNodeMediaStream/MediaStreamAudioSourceNodeMediaStream.generated.xml' path='docs/MediaStreamAudioSourceNodeMediaStream/*'/>
	public MediaStream MediaStream { get; }
	public MediaStreamAudioSourceNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamAudioSourceOptions
{
		public required MediaStream MediaStream;
}

///<include file='Utils/Docs/MediaStreamTrackAudioSourceNode/MediaStreamTrackAudioSourceNode.generated.xml' path='docs/MediaStreamTrackAudioSourceNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamTrackAudioSourceNode : AudioNode
{
	///<include file='Utils/Docs/MediaStreamTrackAudioSourceNodeMediaStreamTrackAudioSourceNo/MediaStreamTrackAudioSourceNodeMediaStreamTrackAudioSourceNo.generated.xml' path='docs/MediaStreamTrackAudioSourceNodeMediaStreamTrackAudioSourceNo/*'/>
	public MediaStreamTrackAudioSourceNode(AudioContext context, MediaStreamTrackAudioSourceOptions options) { }
	public MediaStreamTrackAudioSourceNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MediaStreamTrackAudioSourceOptions
{
		public required MediaStreamTrack MediaStreamTrack;
}

///<include file='Utils/Docs/OscillatorNode/OscillatorNode.generated.xml' path='docs/OscillatorNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class OscillatorNode : AudioScheduledSourceNode
{
	///<include file='Utils/Docs/OscillatorNodeOscillatorNode/OscillatorNodeOscillatorNode.generated.xml' path='docs/OscillatorNodeOscillatorNode/*'/>
	public OscillatorNode(BaseAudioContext context, OscillatorOptions options) { }
	///<include file='Utils/Docs/OscillatorNodeType/OscillatorNodeType.generated.xml' path='docs/OscillatorNodeType/*'/>
	public OscillatorType Type { get; set; }
	///<include file='Utils/Docs/OscillatorNodeFrequency/OscillatorNodeFrequency.generated.xml' path='docs/OscillatorNodeFrequency/*'/>
	public AudioParam Frequency { get; }
	///<include file='Utils/Docs/OscillatorNodeDetune/OscillatorNodeDetune.generated.xml' path='docs/OscillatorNodeDetune/*'/>
	public AudioParam Detune { get; }
	///<include file='Utils/Docs/OscillatorNodeSetPeriodicWave/OscillatorNodeSetPeriodicWave.generated.xml' path='docs/OscillatorNodeSetPeriodicWave/*'/>
	public Undefined SetPeriodicWave(PeriodicWave periodicWave) { throw new System.NotImplementedException(); }
	public OscillatorNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OscillatorOptions : AudioNodeOptions
{
		public OscillatorType Type;
		public Number Frequency;
		public Number Detune;
		public PeriodicWave PeriodicWave;
}

///<include file='Utils/Docs/PannerNode/PannerNode.generated.xml' path='docs/PannerNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PannerNode : AudioNode
{
	///<include file='Utils/Docs/PannerNodePannerNode/PannerNodePannerNode.generated.xml' path='docs/PannerNodePannerNode/*'/>
	public PannerNode(BaseAudioContext context, PannerOptions options) { }
	///<include file='Utils/Docs/PannerNodePanningModel/PannerNodePanningModel.generated.xml' path='docs/PannerNodePanningModel/*'/>
	public PanningModelType PanningModel { get; set; }
	///<include file='Utils/Docs/PannerNodePositionX/PannerNodePositionX.generated.xml' path='docs/PannerNodePositionX/*'/>
	public AudioParam PositionX { get; }
	///<include file='Utils/Docs/PannerNodePositionY/PannerNodePositionY.generated.xml' path='docs/PannerNodePositionY/*'/>
	public AudioParam PositionY { get; }
	///<include file='Utils/Docs/PannerNodePositionZ/PannerNodePositionZ.generated.xml' path='docs/PannerNodePositionZ/*'/>
	public AudioParam PositionZ { get; }
	///<include file='Utils/Docs/PannerNodeOrientationX/PannerNodeOrientationX.generated.xml' path='docs/PannerNodeOrientationX/*'/>
	public AudioParam OrientationX { get; }
	///<include file='Utils/Docs/PannerNodeOrientationY/PannerNodeOrientationY.generated.xml' path='docs/PannerNodeOrientationY/*'/>
	public AudioParam OrientationY { get; }
	///<include file='Utils/Docs/PannerNodeOrientationZ/PannerNodeOrientationZ.generated.xml' path='docs/PannerNodeOrientationZ/*'/>
	public AudioParam OrientationZ { get; }
	///<include file='Utils/Docs/PannerNodeDistanceModel/PannerNodeDistanceModel.generated.xml' path='docs/PannerNodeDistanceModel/*'/>
	public DistanceModelType DistanceModel { get; set; }
	///<include file='Utils/Docs/PannerNodeRefDistance/PannerNodeRefDistance.generated.xml' path='docs/PannerNodeRefDistance/*'/>
	public Number RefDistance { get; set; }
	///<include file='Utils/Docs/PannerNodeMaxDistance/PannerNodeMaxDistance.generated.xml' path='docs/PannerNodeMaxDistance/*'/>
	public Number MaxDistance { get; set; }
	///<include file='Utils/Docs/PannerNodeRolloffFactor/PannerNodeRolloffFactor.generated.xml' path='docs/PannerNodeRolloffFactor/*'/>
	public Number RolloffFactor { get; set; }
	///<include file='Utils/Docs/PannerNodeConeInnerAngle/PannerNodeConeInnerAngle.generated.xml' path='docs/PannerNodeConeInnerAngle/*'/>
	public Number ConeInnerAngle { get; set; }
	///<include file='Utils/Docs/PannerNodeConeOuterAngle/PannerNodeConeOuterAngle.generated.xml' path='docs/PannerNodeConeOuterAngle/*'/>
	public Number ConeOuterAngle { get; set; }
	///<include file='Utils/Docs/PannerNodeConeOuterGain/PannerNodeConeOuterGain.generated.xml' path='docs/PannerNodeConeOuterGain/*'/>
	public Number ConeOuterGain { get; set; }
	///<include file='Utils/Docs/PannerNodeSetPosition/PannerNodeSetPosition.generated.xml' path='docs/PannerNodeSetPosition/*'/>
	public Undefined SetPosition(Number x, Number y, Number z) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PannerNodeSetOrientation/PannerNodeSetOrientation.generated.xml' path='docs/PannerNodeSetOrientation/*'/>
	public Undefined SetOrientation(Number x, Number y, Number z) { throw new System.NotImplementedException(); }
	public PannerNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PannerOptions : AudioNodeOptions
{
		public PanningModelType PanningModel;
		public DistanceModelType DistanceModel;
		public Number PositionX;
		public Number PositionY;
		public Number PositionZ;
		public Number OrientationX;
		public Number OrientationY;
		public Number OrientationZ;
		public Number RefDistance;
		public Number MaxDistance;
		public Number RolloffFactor;
		public Number ConeInnerAngle;
		public Number ConeOuterAngle;
		public Number ConeOuterGain;
}

///<include file='Utils/Docs/PeriodicWave/PeriodicWave.generated.xml' path='docs/PeriodicWave/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PeriodicWave
{
	///<include file='Utils/Docs/PeriodicWavePeriodicWave/PeriodicWavePeriodicWave.generated.xml' path='docs/PeriodicWavePeriodicWave/*'/>
	public PeriodicWave(BaseAudioContext context, PeriodicWaveOptions options) { }
	public PeriodicWave() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PeriodicWaveConstraints
{
		public bool DisableNormalization;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PeriodicWaveOptions : PeriodicWaveConstraints
{
		public List<Number> Real;
		public List<Number> Imag;
}

///<include file='Utils/Docs/ScriptProcessorNode/ScriptProcessorNode.generated.xml' path='docs/ScriptProcessorNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScriptProcessorNode : AudioNode
{
		public EventHandler Onaudioprocess { get; set; }
	///<include file='Utils/Docs/ScriptProcessorNodeBufferSize/ScriptProcessorNodeBufferSize.generated.xml' path='docs/ScriptProcessorNodeBufferSize/*'/>
	public long BufferSize { get; }
}

///<include file='Utils/Docs/StereoPannerNode/StereoPannerNode.generated.xml' path='docs/StereoPannerNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class StereoPannerNode : AudioNode
{
	///<include file='Utils/Docs/StereoPannerNodeStereoPannerNode/StereoPannerNodeStereoPannerNode.generated.xml' path='docs/StereoPannerNodeStereoPannerNode/*'/>
	public StereoPannerNode(BaseAudioContext context, StereoPannerOptions options) { }
	///<include file='Utils/Docs/StereoPannerNodePan/StereoPannerNodePan.generated.xml' path='docs/StereoPannerNodePan/*'/>
	public AudioParam Pan { get; }
	public StereoPannerNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class StereoPannerOptions : AudioNodeOptions
{
		public Number Pan;
}

///<include file='Utils/Docs/WaveShaperNode/WaveShaperNode.generated.xml' path='docs/WaveShaperNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WaveShaperNode : AudioNode
{
	///<include file='Utils/Docs/WaveShaperNodeWaveShaperNode/WaveShaperNodeWaveShaperNode.generated.xml' path='docs/WaveShaperNodeWaveShaperNode/*'/>
	public WaveShaperNode(BaseAudioContext context, WaveShaperOptions options) { }
	///<include file='Utils/Docs/WaveShaperNodeCurve/WaveShaperNodeCurve.generated.xml' path='docs/WaveShaperNodeCurve/*'/>
	public System.Single? Curve { get; set; }
	///<include file='Utils/Docs/WaveShaperNodeOversample/WaveShaperNodeOversample.generated.xml' path='docs/WaveShaperNodeOversample/*'/>
	public OverSampleType Oversample { get; set; }
	public WaveShaperNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WaveShaperOptions : AudioNodeOptions
{
		public List<Number> Curve;
		public OverSampleType Oversample;
}

///<include file='Utils/Docs/AudioWorklet/AudioWorklet.generated.xml' path='docs/AudioWorklet/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioWorklet : Worklet
{
		public MessagePort Port { get; }
}

///<include file='Utils/Docs/AudioWorkletGlobalScope/AudioWorkletGlobalScope.generated.xml' path='docs/AudioWorkletGlobalScope/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioWorkletGlobalScope : WorkletGlobalScope
{
	///<include file='Utils/Docs/AudioWorkletGlobalScopeRegisterProcessor/AudioWorkletGlobalScopeRegisterProcessor.generated.xml' path='docs/AudioWorkletGlobalScopeRegisterProcessor/*'/>
	public Undefined RegisterProcessor(DOMString name, AudioWorkletProcessorConstructor processorCtor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioWorkletGlobalScopeCurrentFrame/AudioWorkletGlobalScopeCurrentFrame.generated.xml' path='docs/AudioWorkletGlobalScopeCurrentFrame/*'/>
	public ulong CurrentFrame { get; }
	///<include file='Utils/Docs/AudioWorkletGlobalScopeCurrentTime/AudioWorkletGlobalScopeCurrentTime.generated.xml' path='docs/AudioWorkletGlobalScopeCurrentTime/*'/>
	public Number CurrentTime { get; }
	///<include file='Utils/Docs/AudioWorkletGlobalScopeSampleRate/AudioWorkletGlobalScopeSampleRate.generated.xml' path='docs/AudioWorkletGlobalScopeSampleRate/*'/>
	public Number SampleRate { get; }
		public ulong RenderQuantumSize { get; }
		public MessagePort Port { get; }
}

///<include file='Utils/Docs/AudioParamMap/AudioParamMap.generated.xml' path='docs/AudioParamMap/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioParamMap
{
	
}

///<include file='Utils/Docs/AudioWorkletNode/AudioWorkletNode.generated.xml' path='docs/AudioWorkletNode/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioWorkletNode : AudioNode
{
	///<include file='Utils/Docs/AudioWorkletNodeAudioWorkletNode/AudioWorkletNodeAudioWorkletNode.generated.xml' path='docs/AudioWorkletNodeAudioWorkletNode/*'/>
	public AudioWorkletNode(BaseAudioContext context, DOMString name, AudioWorkletNodeOptions options) { }
	///<include file='Utils/Docs/AudioWorkletNodeParameters/AudioWorkletNodeParameters.generated.xml' path='docs/AudioWorkletNodeParameters/*'/>
	public AudioParamMap Parameters { get; }
	///<include file='Utils/Docs/AudioWorkletNodePort/AudioWorkletNodePort.generated.xml' path='docs/AudioWorkletNodePort/*'/>
	public MessagePort Port { get; }
		public EventHandler Onprocessorerror { get; set; }
	public AudioWorkletNode() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioWorkletNodeOptions : AudioNodeOptions
{
		public ulong NumberOfInputs;
		public ulong NumberOfOutputs;
		public List<ulong> OutputChannelCount;
		public Dictionary<DOMString, Number> ParameterData;
		public Object ProcessorOptions;
}

///<include file='Utils/Docs/AudioWorkletProcessor/AudioWorkletProcessor.generated.xml' path='docs/AudioWorkletProcessor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioWorkletProcessor
{
	///<include file='Utils/Docs/AudioWorkletProcessorAudioWorkletProcessor/AudioWorkletProcessorAudioWorkletProcessor.generated.xml' path='docs/AudioWorkletProcessorAudioWorkletProcessor/*'/>
	public AudioWorkletProcessor() { }
	///<include file='Utils/Docs/AudioWorkletProcessorPort/AudioWorkletProcessorPort.generated.xml' path='docs/AudioWorkletProcessorPort/*'/>
	public MessagePort Port { get; }
}

///<include file='Utils/Docs/AudioParamDescriptor/AudioParamDescriptor.generated.xml' path='docs/AudioParamDescriptor/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioParamDescriptor
{
		public required DOMString Name;
		public Number DefaultValue;
		public Number MinValue;
		public Number MaxValue;
		public AutomationRate AutomationRate;
}

///<include file='Utils/Docs/PublicKeyCredential/PublicKeyCredential.generated.xml' path='docs/PublicKeyCredential/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredential : Credential
{
	///<include file='Utils/Docs/PublicKeyCredentialRawId/PublicKeyCredentialRawId.generated.xml' path='docs/PublicKeyCredentialRawId/*'/>
	public byte[] RawId { get; }
	///<include file='Utils/Docs/PublicKeyCredentialResponse/PublicKeyCredentialResponse.generated.xml' path='docs/PublicKeyCredentialResponse/*'/>
	public AuthenticatorResponse Response { get; }
	///<include file='Utils/Docs/PublicKeyCredentialAuthenticatorAttachment/PublicKeyCredentialAuthenticatorAttachment.generated.xml' path='docs/PublicKeyCredentialAuthenticatorAttachment/*'/>
	public DOMString? AuthenticatorAttachment { get; }
	///<include file='Utils/Docs/PublicKeyCredentialGetClientExtensionResults/PublicKeyCredentialGetClientExtensionResults.generated.xml' path='docs/PublicKeyCredentialGetClientExtensionResults/*'/>
	public AuthenticationExtensionsClientOutputs GetClientExtensionResults() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PublicKeyCredentialIsConditionalMediationAvailable/PublicKeyCredentialIsConditionalMediationAvailable.generated.xml' path='docs/PublicKeyCredentialIsConditionalMediationAvailable/*'/>
	public static Task<bool> IsConditionalMediationAvailable() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/PublicKeyCredentialToJSON/PublicKeyCredentialToJSON.generated.xml' path='docs/PublicKeyCredentialToJSON/*'/>
	public PublicKeyCredentialJSON ToJSON() { throw new System.NotImplementedException(); }
}



[To(ToAttribute.FirstCharToLowerCase)]
public partial class RegistrationResponseJSON
{
		public required DOMString Id;
		public required Base64URLString RawId;
		public required AuthenticatorAttestationResponseJSON Response;
		public DOMString AuthenticatorAttachment;
		public required AuthenticationExtensionsClientOutputsJSON ClientExtensionResults;
		public required DOMString Type;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticatorAttestationResponseJSON
{
		public required Base64URLString ClientDataJSON;
		public required Base64URLString AuthenticatorData;
		public required List<DOMString> Transports;
		public Base64URLString PublicKey;
		public required COSEAlgorithmIdentifier PublicKeyAlgorithm;
		public required Base64URLString AttestationObject;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationResponseJSON
{
		public required DOMString Id;
		public required Base64URLString RawId;
		public required AuthenticatorAssertionResponseJSON Response;
		public DOMString AuthenticatorAttachment;
		public required AuthenticationExtensionsClientOutputsJSON ClientExtensionResults;
		public required DOMString Type;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticatorAssertionResponseJSON
{
		public required Base64URLString ClientDataJSON;
		public required Base64URLString AuthenticatorData;
		public required Base64URLString Signature;
		public Base64URLString UserHandle;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationExtensionsClientOutputsJSON
{
}

public partial class CredentialCreationOptions
{
		public PublicKeyCredentialCreationOptions PublicKey;
}

public partial class CredentialRequestOptions
{
		public PublicKeyCredentialRequestOptions PublicKey;
}

///<include file='Utils/Docs/PublicKeyCredential/PublicKeyCredential.generated.xml' path='docs/PublicKeyCredential/*'/>
public partial class PublicKeyCredential
{
	///<include file='Utils/Docs/PublicKeyCredentialIsUserVerifyingPlatformAuthenticatorAvail/PublicKeyCredentialIsUserVerifyingPlatformAuthenticatorAvail.generated.xml' path='docs/PublicKeyCredentialIsUserVerifyingPlatformAuthenticatorAvail/*'/>
	public static Task<bool> IsUserVerifyingPlatformAuthenticatorAvailable() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/PublicKeyCredential/PublicKeyCredential.generated.xml' path='docs/PublicKeyCredential/*'/>
public partial class PublicKeyCredential
{
		public static Task<PublicKeyCredentialClientCapabilities> GetClientCapabilities() { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/PublicKeyCredential/PublicKeyCredential.generated.xml' path='docs/PublicKeyCredential/*'/>
public partial class PublicKeyCredential
{
	///<include file='Utils/Docs/PublicKeyCredentialParseCreationOptionsFromJSON/PublicKeyCredentialParseCreationOptionsFromJSON.generated.xml' path='docs/PublicKeyCredentialParseCreationOptionsFromJSON/*'/>
	public static PublicKeyCredentialCreationOptions ParseCreationOptionsFromJSON(PublicKeyCredentialCreationOptionsJSON options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialCreationOptionsJSON
{
		public required PublicKeyCredentialRpEntity Rp;
		public required PublicKeyCredentialUserEntityJSON User;
		public required Base64URLString Challenge;
		public required List<PublicKeyCredentialParameters> PubKeyCredParams;
		public ulong Timeout;
		public List<PublicKeyCredentialDescriptorJSON> ExcludeCredentials;
		public AuthenticatorSelectionCriteria AuthenticatorSelection;
		public List<DOMString> Hints;
		public DOMString Attestation;
		public List<DOMString> AttestationFormats;
		public AuthenticationExtensionsClientInputsJSON Extensions;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialUserEntityJSON
{
		public required Base64URLString Id;
		public required DOMString Name;
		public required DOMString DisplayName;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialDescriptorJSON
{
		public required DOMString Type;
		public required Base64URLString Id;
		public List<DOMString> Transports;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationExtensionsClientInputsJSON
{
}

///<include file='Utils/Docs/PublicKeyCredential/PublicKeyCredential.generated.xml' path='docs/PublicKeyCredential/*'/>
public partial class PublicKeyCredential
{
	///<include file='Utils/Docs/PublicKeyCredentialParseRequestOptionsFromJSON/PublicKeyCredentialParseRequestOptionsFromJSON.generated.xml' path='docs/PublicKeyCredentialParseRequestOptionsFromJSON/*'/>
	public static PublicKeyCredentialRequestOptions ParseRequestOptionsFromJSON(PublicKeyCredentialRequestOptionsJSON options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialRequestOptionsJSON
{
		public required Base64URLString Challenge;
		public ulong Timeout;
		public DOMString RpId;
		public List<PublicKeyCredentialDescriptorJSON> AllowCredentials;
		public DOMString UserVerification;
		public List<DOMString> Hints;
		public AuthenticationExtensionsClientInputsJSON Extensions;
}

///<include file='Utils/Docs/PublicKeyCredential/PublicKeyCredential.generated.xml' path='docs/PublicKeyCredential/*'/>
public partial class PublicKeyCredential
{
		public static Task<Undefined> SignalUnknownCredential(UnknownCredentialOptions options) { throw new System.NotImplementedException(); }
		public static Task<Undefined> SignalAllAcceptedCredentials(AllAcceptedCredentialsOptions options) { throw new System.NotImplementedException(); }
		public static Task<Undefined> SignalCurrentUserDetails(CurrentUserDetailsOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class UnknownCredentialOptions
{
		public required DOMString RpId;
		public required Base64URLString CredentialId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AllAcceptedCredentialsOptions
{
		public required DOMString RpId;
		public required Base64URLString UserId;
		public required List<Base64URLString> AllAcceptedCredentialIds;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CurrentUserDetailsOptions
{
		public required DOMString RpId;
		public required Base64URLString UserId;
		public required DOMString Name;
		public required DOMString DisplayName;
}

///<include file='Utils/Docs/AuthenticatorResponse/AuthenticatorResponse.generated.xml' path='docs/AuthenticatorResponse/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticatorResponse
{
	///<include file='Utils/Docs/AuthenticatorResponseClientDataJSON/AuthenticatorResponseClientDataJSON.generated.xml' path='docs/AuthenticatorResponseClientDataJSON/*'/>
	public byte[] ClientDataJSON { get; }
}

///<include file='Utils/Docs/AuthenticatorAttestationResponse/AuthenticatorAttestationResponse.generated.xml' path='docs/AuthenticatorAttestationResponse/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticatorAttestationResponse : AuthenticatorResponse
{
	///<include file='Utils/Docs/AuthenticatorAttestationResponseAttestationObject/AuthenticatorAttestationResponseAttestationObject.generated.xml' path='docs/AuthenticatorAttestationResponseAttestationObject/*'/>
	public byte[] AttestationObject { get; }
	///<include file='Utils/Docs/AuthenticatorAttestationResponseGetTransports/AuthenticatorAttestationResponseGetTransports.generated.xml' path='docs/AuthenticatorAttestationResponseGetTransports/*'/>
	public List<DOMString> GetTransports() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AuthenticatorAttestationResponseGetAuthenticatorData/AuthenticatorAttestationResponseGetAuthenticatorData.generated.xml' path='docs/AuthenticatorAttestationResponseGetAuthenticatorData/*'/>
	public byte[] GetAuthenticatorData() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AuthenticatorAttestationResponseGetPublicKey/AuthenticatorAttestationResponseGetPublicKey.generated.xml' path='docs/AuthenticatorAttestationResponseGetPublicKey/*'/>
	public byte[]? GetPublicKey() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AuthenticatorAttestationResponseGetPublicKeyAlgorithm/AuthenticatorAttestationResponseGetPublicKeyAlgorithm.generated.xml' path='docs/AuthenticatorAttestationResponseGetPublicKeyAlgorithm/*'/>
	public COSEAlgorithmIdentifier GetPublicKeyAlgorithm() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/AuthenticatorAssertionResponse/AuthenticatorAssertionResponse.generated.xml' path='docs/AuthenticatorAssertionResponse/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticatorAssertionResponse : AuthenticatorResponse
{
	///<include file='Utils/Docs/AuthenticatorAssertionResponseAuthenticatorData/AuthenticatorAssertionResponseAuthenticatorData.generated.xml' path='docs/AuthenticatorAssertionResponseAuthenticatorData/*'/>
	public byte[] AuthenticatorData { get; }
	///<include file='Utils/Docs/AuthenticatorAssertionResponseSignature/AuthenticatorAssertionResponseSignature.generated.xml' path='docs/AuthenticatorAssertionResponseSignature/*'/>
	public byte[] Signature { get; }
	///<include file='Utils/Docs/AuthenticatorAssertionResponseUserHandle/AuthenticatorAssertionResponseUserHandle.generated.xml' path='docs/AuthenticatorAssertionResponseUserHandle/*'/>
	public byte[]? UserHandle { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialParameters
{
		public required DOMString Type;
		public required COSEAlgorithmIdentifier Alg;
}

///<include file='Utils/Docs/PublicKeyCredentialCreationOptions/PublicKeyCredentialCreationOptions.generated.xml' path='docs/PublicKeyCredentialCreationOptions/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialCreationOptions
{
		public required PublicKeyCredentialRpEntity Rp;
		public required PublicKeyCredentialUserEntity User;
		public required BufferSource Challenge;
		public required List<PublicKeyCredentialParameters> PubKeyCredParams;
		public ulong Timeout;
		public List<PublicKeyCredentialDescriptor> ExcludeCredentials;
		public AuthenticatorSelectionCriteria AuthenticatorSelection;
		public List<DOMString> Hints;
		public DOMString Attestation;
		public List<DOMString> AttestationFormats;
		public AuthenticationExtensionsClientInputs Extensions;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialEntity
{
		public required DOMString Name;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialRpEntity : PublicKeyCredentialEntity
{
		public DOMString Id;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialUserEntity : PublicKeyCredentialEntity
{
		public required BufferSource Id;
		public required DOMString DisplayName;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticatorSelectionCriteria
{
		public DOMString AuthenticatorAttachment;
		public DOMString ResidentKey;
		public bool RequireResidentKey;
		public DOMString UserVerification;
}

///<include file='Utils/Docs/PublicKeyCredentialRequestOptions/PublicKeyCredentialRequestOptions.generated.xml' path='docs/PublicKeyCredentialRequestOptions/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialRequestOptions
{
		public required BufferSource Challenge;
		public ulong Timeout;
		public DOMString RpId;
		public List<PublicKeyCredentialDescriptor> AllowCredentials;
		public DOMString UserVerification;
		public List<DOMString> Hints;
		public AuthenticationExtensionsClientInputs Extensions;
}

public partial class AuthenticationExtensionsClientInputs
{
}

public partial class AuthenticationExtensionsClientOutputs
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CollectedClientData
{
		public required DOMString Type;
		public required DOMString Challenge;
		public required DOMString Origin;
		public bool CrossOrigin;
		public DOMString TopOrigin;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class TokenBinding
{
		public required DOMString Status;
		public DOMString Id;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PublicKeyCredentialDescriptor
{
		public required DOMString Type;
		public required BufferSource Id;
		public List<DOMString> Transports;
}

public partial class AuthenticationExtensionsClientInputs
{
		public DOMString Appid;
}

public partial class AuthenticationExtensionsClientOutputs
{
		public bool Appid;
}

public partial class AuthenticationExtensionsClientInputs
{
		public DOMString AppidExclude;
}

public partial class AuthenticationExtensionsClientOutputs
{
		public bool AppidExclude;
}

public partial class AuthenticationExtensionsClientInputs
{
		public bool CredProps;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CredentialPropertiesOutput
{
		public bool Rk;
}

public partial class AuthenticationExtensionsClientOutputs
{
		public CredentialPropertiesOutput CredProps;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationExtensionsPRFValues
{
		public required BufferSource First;
		public BufferSource Second;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationExtensionsPRFInputs
{
		public AuthenticationExtensionsPRFValues Eval;
		public Dictionary<DOMString, AuthenticationExtensionsPRFValues> EvalByCredential;
}

public partial class AuthenticationExtensionsClientInputs
{
		public AuthenticationExtensionsPRFInputs Prf;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationExtensionsPRFOutputs
{
		public bool Enabled;
		public AuthenticationExtensionsPRFValues Results;
}

public partial class AuthenticationExtensionsClientOutputs
{
		public AuthenticationExtensionsPRFOutputs Prf;
}

public partial class AuthenticationExtensionsClientInputs
{
		public AuthenticationExtensionsLargeBlobInputs LargeBlob;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationExtensionsLargeBlobInputs
{
		public DOMString Support;
		public bool Read;
		public BufferSource Write;
}

public partial class AuthenticationExtensionsClientOutputs
{
		public AuthenticationExtensionsLargeBlobOutputs LargeBlob;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AuthenticationExtensionsLargeBlobOutputs
{
		public bool Supported;
		public byte[] Blob;
		public bool Written;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioEncoderConfig
{
		public AacEncoderConfig Aac;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AacEncoderConfig
{
		public AacBitstreamFormat Format;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoEncoderEncodeOptions
{
		public VideoEncoderEncodeOptionsForAv1 Av1;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoEncoderEncodeOptionsForAv1
{
		public ushort? Quantizer;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoEncoderConfig
{
		public AvcEncoderConfig Avc;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AvcEncoderConfig
{
		public AvcBitstreamFormat Format;
}

public partial class VideoEncoderEncodeOptions
{
		public VideoEncoderEncodeOptionsForAvc Avc;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoEncoderEncodeOptionsForAvc
{
		public ushort? Quantizer;
}

public partial class AudioEncoderConfig
{
		public FlacEncoderConfig Flac;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class FlacEncoderConfig
{
		public ulong BlockSize;
		public ulong CompressLevel;
}

public partial class VideoEncoderConfig
{
		public HevcEncoderConfig Hevc;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HevcEncoderConfig
{
		public HevcBitstreamFormat Format;
}

public partial class VideoEncoderEncodeOptions
{
		public VideoEncoderEncodeOptionsForHevc Hevc;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoEncoderEncodeOptionsForHevc
{
		public ushort? Quantizer;
}

public partial class AudioEncoderConfig
{
		public OpusEncoderConfig Opus;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class OpusEncoderConfig
{
		public OpusBitstreamFormat Format;
		public OpusSignal Signal;
		public OpusApplication Application;
		public ulong FrameDuration;
		public ulong Complexity;
		public ulong Packetlossperc;
		public bool Useinbandfec;
		public bool Usedtx;
}

public partial class VideoEncoderEncodeOptions
{
		public VideoEncoderEncodeOptionsForVp9 Vp9;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoEncoderEncodeOptionsForVp9
{
		public ushort? Quantizer;
}

///<include file='Utils/Docs/AudioDecoder/AudioDecoder.generated.xml' path='docs/AudioDecoder/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioDecoder : EventTarget
{
	///<include file='Utils/Docs/AudioDecoderAudioDecoder/AudioDecoderAudioDecoder.generated.xml' path='docs/AudioDecoderAudioDecoder/*'/>
	public AudioDecoder(AudioDecoderInit init) { }
	///<include file='Utils/Docs/AudioDecoderState/AudioDecoderState.generated.xml' path='docs/AudioDecoderState/*'/>
	public CodecState State { get; }
	///<include file='Utils/Docs/AudioDecoderDecodeQueueSize/AudioDecoderDecodeQueueSize.generated.xml' path='docs/AudioDecoderDecodeQueueSize/*'/>
	public ulong DecodeQueueSize { get; }
		public EventHandler Ondequeue { get; set; }
	///<include file='Utils/Docs/AudioDecoderConfigure/AudioDecoderConfigure.generated.xml' path='docs/AudioDecoderConfigure/*'/>
	public Undefined Configure(AudioDecoderConfig config) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioDecoderDecode/AudioDecoderDecode.generated.xml' path='docs/AudioDecoderDecode/*'/>
	public Undefined Decode(EncodedAudioChunk chunk) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioDecoderFlush/AudioDecoderFlush.generated.xml' path='docs/AudioDecoderFlush/*'/>
	public Task<Undefined> Flush() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioDecoderReset/AudioDecoderReset.generated.xml' path='docs/AudioDecoderReset/*'/>
	public Undefined Reset() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioDecoderClose/AudioDecoderClose.generated.xml' path='docs/AudioDecoderClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioDecoderIsConfigSupported/AudioDecoderIsConfigSupported.generated.xml' path='docs/AudioDecoderIsConfigSupported/*'/>
	public static Task<AudioDecoderSupport> IsConfigSupported(AudioDecoderConfig config) { throw new System.NotImplementedException(); }
	public AudioDecoder() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioDecoderInit
{
		public required AudioDataOutputCallback Output;
		public required WebCodecsErrorCallback Error;
}

///<include file='Utils/Docs/VideoDecoder/VideoDecoder.generated.xml' path='docs/VideoDecoder/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoDecoder : EventTarget
{
	///<include file='Utils/Docs/VideoDecoderVideoDecoder/VideoDecoderVideoDecoder.generated.xml' path='docs/VideoDecoderVideoDecoder/*'/>
	public VideoDecoder(VideoDecoderInit init) { }
	///<include file='Utils/Docs/VideoDecoderState/VideoDecoderState.generated.xml' path='docs/VideoDecoderState/*'/>
	public CodecState State { get; }
	///<include file='Utils/Docs/VideoDecoderDecodeQueueSize/VideoDecoderDecodeQueueSize.generated.xml' path='docs/VideoDecoderDecodeQueueSize/*'/>
	public ulong DecodeQueueSize { get; }
		public EventHandler Ondequeue { get; set; }
	///<include file='Utils/Docs/VideoDecoderConfigure/VideoDecoderConfigure.generated.xml' path='docs/VideoDecoderConfigure/*'/>
	public Undefined Configure(VideoDecoderConfig config) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoDecoderDecode/VideoDecoderDecode.generated.xml' path='docs/VideoDecoderDecode/*'/>
	public Undefined Decode(EncodedVideoChunk chunk) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoDecoderFlush/VideoDecoderFlush.generated.xml' path='docs/VideoDecoderFlush/*'/>
	public Task<Undefined> Flush() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoDecoderReset/VideoDecoderReset.generated.xml' path='docs/VideoDecoderReset/*'/>
	public Undefined Reset() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoDecoderClose/VideoDecoderClose.generated.xml' path='docs/VideoDecoderClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoDecoderIsConfigSupported/VideoDecoderIsConfigSupported.generated.xml' path='docs/VideoDecoderIsConfigSupported/*'/>
	public static Task<VideoDecoderSupport> IsConfigSupported(VideoDecoderConfig config) { throw new System.NotImplementedException(); }
	public VideoDecoder() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoDecoderInit
{
		public required VideoFrameOutputCallback Output;
		public required WebCodecsErrorCallback Error;
}

///<include file='Utils/Docs/AudioEncoder/AudioEncoder.generated.xml' path='docs/AudioEncoder/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioEncoder : EventTarget
{
	///<include file='Utils/Docs/AudioEncoderAudioEncoder/AudioEncoderAudioEncoder.generated.xml' path='docs/AudioEncoderAudioEncoder/*'/>
	public AudioEncoder(AudioEncoderInit init) { }
	///<include file='Utils/Docs/AudioEncoderState/AudioEncoderState.generated.xml' path='docs/AudioEncoderState/*'/>
	public CodecState State { get; }
	///<include file='Utils/Docs/AudioEncoderEncodeQueueSize/AudioEncoderEncodeQueueSize.generated.xml' path='docs/AudioEncoderEncodeQueueSize/*'/>
	public ulong EncodeQueueSize { get; }
		public EventHandler Ondequeue { get; set; }
	///<include file='Utils/Docs/AudioEncoderConfigure/AudioEncoderConfigure.generated.xml' path='docs/AudioEncoderConfigure/*'/>
	public Undefined Configure(AudioEncoderConfig config) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioEncoderEncode/AudioEncoderEncode.generated.xml' path='docs/AudioEncoderEncode/*'/>
	public Undefined Encode(AudioData data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioEncoderFlush/AudioEncoderFlush.generated.xml' path='docs/AudioEncoderFlush/*'/>
	public Task<Undefined> Flush() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioEncoderReset/AudioEncoderReset.generated.xml' path='docs/AudioEncoderReset/*'/>
	public Undefined Reset() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioEncoderClose/AudioEncoderClose.generated.xml' path='docs/AudioEncoderClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioEncoderIsConfigSupported/AudioEncoderIsConfigSupported.generated.xml' path='docs/AudioEncoderIsConfigSupported/*'/>
	public static Task<AudioEncoderSupport> IsConfigSupported(AudioEncoderConfig config) { throw new System.NotImplementedException(); }
	public AudioEncoder() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioEncoderInit
{
		public required EncodedAudioChunkOutputCallback Output;
		public required WebCodecsErrorCallback Error;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EncodedAudioChunkMetadata
{
		public AudioDecoderConfig DecoderConfig;
}

///<include file='Utils/Docs/VideoEncoder/VideoEncoder.generated.xml' path='docs/VideoEncoder/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoEncoder : EventTarget
{
	///<include file='Utils/Docs/VideoEncoderVideoEncoder/VideoEncoderVideoEncoder.generated.xml' path='docs/VideoEncoderVideoEncoder/*'/>
	public VideoEncoder(VideoEncoderInit init) { }
	///<include file='Utils/Docs/VideoEncoderState/VideoEncoderState.generated.xml' path='docs/VideoEncoderState/*'/>
	public CodecState State { get; }
	///<include file='Utils/Docs/VideoEncoderEncodeQueueSize/VideoEncoderEncodeQueueSize.generated.xml' path='docs/VideoEncoderEncodeQueueSize/*'/>
	public ulong EncodeQueueSize { get; }
		public EventHandler Ondequeue { get; set; }
	///<include file='Utils/Docs/VideoEncoderConfigure/VideoEncoderConfigure.generated.xml' path='docs/VideoEncoderConfigure/*'/>
	public Undefined Configure(VideoEncoderConfig config) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoEncoderEncode/VideoEncoderEncode.generated.xml' path='docs/VideoEncoderEncode/*'/>
	public Undefined Encode(VideoFrame frame, VideoEncoderEncodeOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoEncoderFlush/VideoEncoderFlush.generated.xml' path='docs/VideoEncoderFlush/*'/>
	public Task<Undefined> Flush() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoEncoderReset/VideoEncoderReset.generated.xml' path='docs/VideoEncoderReset/*'/>
	public Undefined Reset() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoEncoderClose/VideoEncoderClose.generated.xml' path='docs/VideoEncoderClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoEncoderIsConfigSupported/VideoEncoderIsConfigSupported.generated.xml' path='docs/VideoEncoderIsConfigSupported/*'/>
	public static Task<VideoEncoderSupport> IsConfigSupported(VideoEncoderConfig config) { throw new System.NotImplementedException(); }
	public VideoEncoder() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoEncoderInit
{
		public required EncodedVideoChunkOutputCallback Output;
		public required WebCodecsErrorCallback Error;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EncodedVideoChunkMetadata
{
		public VideoDecoderConfig DecoderConfig;
		public SvcOutputMetadata Svc;
		public BufferSource AlphaSideData;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SvcOutputMetadata
{
		public ulong TemporalLayerId;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioDecoderSupport
{
		public bool Supported;
		public AudioDecoderConfig Config;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoDecoderSupport
{
		public bool Supported;
		public VideoDecoderConfig Config;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioEncoderSupport
{
		public bool Supported;
		public AudioEncoderConfig Config;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoEncoderSupport
{
		public bool Supported;
		public VideoEncoderConfig Config;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioDecoderConfig
{
		public required DOMString Codec;
		public required ulong SampleRate;
		public required ulong NumberOfChannels;
		public BufferSource Description;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoDecoderConfig
{
		public required DOMString Codec;
		public AllowSharedBufferSource Description;
		public ulong CodedWidth;
		public ulong CodedHeight;
		public ulong DisplayAspectWidth;
		public ulong DisplayAspectHeight;
		public VideoColorSpaceInit ColorSpace;
		public HardwareAcceleration HardwareAcceleration;
		public bool OptimizeForLatency;
}

public partial class AudioEncoderConfig
{
		public required DOMString Codec;
		public required ulong SampleRate;
		public required ulong NumberOfChannels;
		public ulong Bitrate;
		public BitrateMode BitrateMode;
}

public partial class VideoEncoderConfig
{
		public required DOMString Codec;
		public required ulong Width;
		public required ulong Height;
		public ulong DisplayWidth;
		public ulong DisplayHeight;
		public ulong Bitrate;
		public Number Framerate;
		public HardwareAcceleration HardwareAcceleration;
		public AlphaOption Alpha;
		public DOMString ScalabilityMode;
		public VideoEncoderBitrateMode BitrateMode;
		public LatencyMode LatencyMode;
		public DOMString ContentHint;
}

public partial class VideoEncoderEncodeOptions
{
		public bool KeyFrame;
}

///<include file='Utils/Docs/EncodedAudioChunk/EncodedAudioChunk.generated.xml' path='docs/EncodedAudioChunk/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EncodedAudioChunk
{
	///<include file='Utils/Docs/EncodedAudioChunkEncodedAudioChunk/EncodedAudioChunkEncodedAudioChunk.generated.xml' path='docs/EncodedAudioChunkEncodedAudioChunk/*'/>
	public EncodedAudioChunk(EncodedAudioChunkInit init) { }
	///<include file='Utils/Docs/EncodedAudioChunkType/EncodedAudioChunkType.generated.xml' path='docs/EncodedAudioChunkType/*'/>
	public EncodedAudioChunkType Type { get; }
	///<include file='Utils/Docs/EncodedAudioChunkTimestamp/EncodedAudioChunkTimestamp.generated.xml' path='docs/EncodedAudioChunkTimestamp/*'/>
	public long Timestamp { get; }
	///<include file='Utils/Docs/EncodedAudioChunkDuration/EncodedAudioChunkDuration.generated.xml' path='docs/EncodedAudioChunkDuration/*'/>
	public ulong? Duration { get; }
	///<include file='Utils/Docs/EncodedAudioChunkByteLength/EncodedAudioChunkByteLength.generated.xml' path='docs/EncodedAudioChunkByteLength/*'/>
	public ulong ByteLength { get; }
	///<include file='Utils/Docs/EncodedAudioChunkCopyTo/EncodedAudioChunkCopyTo.generated.xml' path='docs/EncodedAudioChunkCopyTo/*'/>
	public Undefined CopyTo(AllowSharedBufferSource destination) { throw new System.NotImplementedException(); }
	public EncodedAudioChunk() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EncodedAudioChunkInit
{
		public required EncodedAudioChunkType Type;
		public required long Timestamp;
		public ulong Duration;
		public required AllowSharedBufferSource Data;
		public List<byte[]> Transfer;
}

///<include file='Utils/Docs/EncodedVideoChunk/EncodedVideoChunk.generated.xml' path='docs/EncodedVideoChunk/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EncodedVideoChunk
{
	///<include file='Utils/Docs/EncodedVideoChunkEncodedVideoChunk/EncodedVideoChunkEncodedVideoChunk.generated.xml' path='docs/EncodedVideoChunkEncodedVideoChunk/*'/>
	public EncodedVideoChunk(EncodedVideoChunkInit init) { }
	///<include file='Utils/Docs/EncodedVideoChunkType/EncodedVideoChunkType.generated.xml' path='docs/EncodedVideoChunkType/*'/>
	public EncodedVideoChunkType Type { get; }
	///<include file='Utils/Docs/EncodedVideoChunkTimestamp/EncodedVideoChunkTimestamp.generated.xml' path='docs/EncodedVideoChunkTimestamp/*'/>
	public long Timestamp { get; }
	///<include file='Utils/Docs/EncodedVideoChunkDuration/EncodedVideoChunkDuration.generated.xml' path='docs/EncodedVideoChunkDuration/*'/>
	public ulong? Duration { get; }
	///<include file='Utils/Docs/EncodedVideoChunkByteLength/EncodedVideoChunkByteLength.generated.xml' path='docs/EncodedVideoChunkByteLength/*'/>
	public ulong ByteLength { get; }
	///<include file='Utils/Docs/EncodedVideoChunkCopyTo/EncodedVideoChunkCopyTo.generated.xml' path='docs/EncodedVideoChunkCopyTo/*'/>
	public Undefined CopyTo(AllowSharedBufferSource destination) { throw new System.NotImplementedException(); }
	public EncodedVideoChunk() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EncodedVideoChunkInit
{
		public required EncodedVideoChunkType Type;
		public required long Timestamp;
		public ulong Duration;
		public required AllowSharedBufferSource Data;
		public List<byte[]> Transfer;
}

///<include file='Utils/Docs/AudioData/AudioData.generated.xml' path='docs/AudioData/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioData
{
	///<include file='Utils/Docs/AudioDataAudioData/AudioDataAudioData.generated.xml' path='docs/AudioDataAudioData/*'/>
	public AudioData(AudioDataInit init) { }
	///<include file='Utils/Docs/AudioDataFormat/AudioDataFormat.generated.xml' path='docs/AudioDataFormat/*'/>
	public AudioSampleFormat? Format { get; }
	///<include file='Utils/Docs/AudioDataSampleRate/AudioDataSampleRate.generated.xml' path='docs/AudioDataSampleRate/*'/>
	public Number SampleRate { get; }
	///<include file='Utils/Docs/AudioDataNumberOfFrames/AudioDataNumberOfFrames.generated.xml' path='docs/AudioDataNumberOfFrames/*'/>
	public ulong NumberOfFrames { get; }
	///<include file='Utils/Docs/AudioDataNumberOfChannels/AudioDataNumberOfChannels.generated.xml' path='docs/AudioDataNumberOfChannels/*'/>
	public ulong NumberOfChannels { get; }
	///<include file='Utils/Docs/AudioDataDuration/AudioDataDuration.generated.xml' path='docs/AudioDataDuration/*'/>
	public ulong Duration { get; }
	///<include file='Utils/Docs/AudioDataTimestamp/AudioDataTimestamp.generated.xml' path='docs/AudioDataTimestamp/*'/>
	public long Timestamp { get; }
	///<include file='Utils/Docs/AudioDataAllocationSize/AudioDataAllocationSize.generated.xml' path='docs/AudioDataAllocationSize/*'/>
	public ulong AllocationSize(AudioDataCopyToOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioDataCopyTo/AudioDataCopyTo.generated.xml' path='docs/AudioDataCopyTo/*'/>
	public Undefined CopyTo(AllowSharedBufferSource destination, AudioDataCopyToOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioDataClone/AudioDataClone.generated.xml' path='docs/AudioDataClone/*'/>
	public AudioData Clone() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/AudioDataClose/AudioDataClose.generated.xml' path='docs/AudioDataClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	public AudioData() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioDataInit
{
		public required AudioSampleFormat Format;
		public required Number SampleRate;
		public required ulong NumberOfFrames;
		public required ulong NumberOfChannels;
		public required long Timestamp;
		public required BufferSource Data;
		public List<byte[]> Transfer;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AudioDataCopyToOptions
{
		public required ulong PlaneIndex;
		public ulong FrameOffset;
		public ulong FrameCount;
		public AudioSampleFormat Format;
}

///<include file='Utils/Docs/VideoFrame/VideoFrame.generated.xml' path='docs/VideoFrame/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoFrame
{
	///<include file='Utils/Docs/VideoFrameVideoFrame/VideoFrameVideoFrame.generated.xml' path='docs/VideoFrameVideoFrame/*'/>
	public VideoFrame(CanvasImageSource image, VideoFrameInit init) { }
	///<include file='Utils/Docs/VideoFrameVideoFrame/VideoFrameVideoFrame.generated.xml' path='docs/VideoFrameVideoFrame/*'/>
	public VideoFrame(AllowSharedBufferSource data, VideoFrameBufferInit init) { }
	///<include file='Utils/Docs/VideoFrameFormat/VideoFrameFormat.generated.xml' path='docs/VideoFrameFormat/*'/>
	public VideoPixelFormat? Format { get; }
	///<include file='Utils/Docs/VideoFrameCodedWidth/VideoFrameCodedWidth.generated.xml' path='docs/VideoFrameCodedWidth/*'/>
	public ulong CodedWidth { get; }
	///<include file='Utils/Docs/VideoFrameCodedHeight/VideoFrameCodedHeight.generated.xml' path='docs/VideoFrameCodedHeight/*'/>
	public ulong CodedHeight { get; }
	///<include file='Utils/Docs/VideoFrameCodedRect/VideoFrameCodedRect.generated.xml' path='docs/VideoFrameCodedRect/*'/>
	public DOMRectReadOnly? CodedRect { get; }
	///<include file='Utils/Docs/VideoFrameVisibleRect/VideoFrameVisibleRect.generated.xml' path='docs/VideoFrameVisibleRect/*'/>
	public DOMRectReadOnly? VisibleRect { get; }
		public Number Rotation { get; }
		public bool Flip { get; }
	///<include file='Utils/Docs/VideoFrameDisplayWidth/VideoFrameDisplayWidth.generated.xml' path='docs/VideoFrameDisplayWidth/*'/>
	public ulong DisplayWidth { get; }
	///<include file='Utils/Docs/VideoFrameDisplayHeight/VideoFrameDisplayHeight.generated.xml' path='docs/VideoFrameDisplayHeight/*'/>
	public ulong DisplayHeight { get; }
	///<include file='Utils/Docs/VideoFrameDuration/VideoFrameDuration.generated.xml' path='docs/VideoFrameDuration/*'/>
	public ulong? Duration { get; }
	///<include file='Utils/Docs/VideoFrameTimestamp/VideoFrameTimestamp.generated.xml' path='docs/VideoFrameTimestamp/*'/>
	public long Timestamp { get; }
	///<include file='Utils/Docs/VideoFrameColorSpace/VideoFrameColorSpace.generated.xml' path='docs/VideoFrameColorSpace/*'/>
	public VideoColorSpace ColorSpace { get; }
		public VideoFrameMetadata Metadata() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoFrameAllocationSize/VideoFrameAllocationSize.generated.xml' path='docs/VideoFrameAllocationSize/*'/>
	public ulong AllocationSize(VideoFrameCopyToOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoFrameCopyTo/VideoFrameCopyTo.generated.xml' path='docs/VideoFrameCopyTo/*'/>
	public Task<List<PlaneLayout>> CopyTo(AllowSharedBufferSource destination, VideoFrameCopyToOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoFrameClone/VideoFrameClone.generated.xml' path='docs/VideoFrameClone/*'/>
	public VideoFrame Clone() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/VideoFrameClose/VideoFrameClose.generated.xml' path='docs/VideoFrameClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	public VideoFrame() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoFrameInit
{
		public ulong Duration;
		public long Timestamp;
		public AlphaOption Alpha;
		public DOMRectInit VisibleRect;
		public Number Rotation;
		public bool Flip;
		public ulong DisplayWidth;
		public ulong DisplayHeight;
		public VideoFrameMetadata Metadata;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoFrameBufferInit
{
		public required VideoPixelFormat Format;
		public required ulong CodedWidth;
		public required ulong CodedHeight;
		public required long Timestamp;
		public ulong Duration;
		public List<PlaneLayout> Layout;
		public DOMRectInit VisibleRect;
		public Number Rotation;
		public bool Flip;
		public ulong DisplayWidth;
		public ulong DisplayHeight;
		public VideoColorSpaceInit ColorSpace;
		public List<byte[]> Transfer;
		public VideoFrameMetadata Metadata;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoFrameMetadata
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoFrameCopyToOptions
{
		public DOMRectInit Rect;
		public List<PlaneLayout> Layout;
		public VideoPixelFormat Format;
		public PredefinedColorSpace ColorSpace;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class PlaneLayout
{
		public required ulong Offset;
		public required ulong Stride;
}

///<include file='Utils/Docs/VideoColorSpace/VideoColorSpace.generated.xml' path='docs/VideoColorSpace/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoColorSpace
{
	///<include file='Utils/Docs/VideoColorSpaceVideoColorSpace/VideoColorSpaceVideoColorSpace.generated.xml' path='docs/VideoColorSpaceVideoColorSpace/*'/>
	public VideoColorSpace(VideoColorSpaceInit init) { }
	///<include file='Utils/Docs/VideoColorSpacePrimaries/VideoColorSpacePrimaries.generated.xml' path='docs/VideoColorSpacePrimaries/*'/>
	public VideoColorPrimaries? Primaries { get; }
	///<include file='Utils/Docs/VideoColorSpaceTransfer/VideoColorSpaceTransfer.generated.xml' path='docs/VideoColorSpaceTransfer/*'/>
	public VideoTransferCharacteristics? Transfer { get; }
	///<include file='Utils/Docs/VideoColorSpaceMatrix/VideoColorSpaceMatrix.generated.xml' path='docs/VideoColorSpaceMatrix/*'/>
	public VideoMatrixCoefficients? Matrix { get; }
	///<include file='Utils/Docs/VideoColorSpaceFullRange/VideoColorSpaceFullRange.generated.xml' path='docs/VideoColorSpaceFullRange/*'/>
	public bool? FullRange { get; }
	///<include file='Utils/Docs/VideoColorSpaceToJSON/VideoColorSpaceToJSON.generated.xml' path='docs/VideoColorSpaceToJSON/*'/>
	public VideoColorSpaceInit ToJSON() { throw new System.NotImplementedException(); }
	public VideoColorSpace() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class VideoColorSpaceInit
{
		public VideoColorPrimaries? Primaries;
		public VideoTransferCharacteristics? Transfer;
		public VideoMatrixCoefficients? Matrix;
		public bool? FullRange;
}

///<include file='Utils/Docs/ImageDecoder/ImageDecoder.generated.xml' path='docs/ImageDecoder/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageDecoder
{
	///<include file='Utils/Docs/ImageDecoderImageDecoder/ImageDecoderImageDecoder.generated.xml' path='docs/ImageDecoderImageDecoder/*'/>
	public ImageDecoder(ImageDecoderInit init) { }
	///<include file='Utils/Docs/ImageDecoderType/ImageDecoderType.generated.xml' path='docs/ImageDecoderType/*'/>
	public DOMString Type { get; }
	///<include file='Utils/Docs/ImageDecoderComplete/ImageDecoderComplete.generated.xml' path='docs/ImageDecoderComplete/*'/>
	public bool Complete { get; }
	///<include file='Utils/Docs/ImageDecoderCompleted/ImageDecoderCompleted.generated.xml' path='docs/ImageDecoderCompleted/*'/>
	public Task<Undefined> Completed { get; }
	///<include file='Utils/Docs/ImageDecoderTracks/ImageDecoderTracks.generated.xml' path='docs/ImageDecoderTracks/*'/>
	public ImageTrackList Tracks { get; }
	///<include file='Utils/Docs/ImageDecoderDecode/ImageDecoderDecode.generated.xml' path='docs/ImageDecoderDecode/*'/>
	public Task<ImageDecodeResult> Decode(ImageDecodeOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ImageDecoderReset/ImageDecoderReset.generated.xml' path='docs/ImageDecoderReset/*'/>
	public Undefined Reset() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ImageDecoderClose/ImageDecoderClose.generated.xml' path='docs/ImageDecoderClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/ImageDecoderIsTypeSupported/ImageDecoderIsTypeSupported.generated.xml' path='docs/ImageDecoderIsTypeSupported/*'/>
	public static Task<bool> IsTypeSupported(DOMString type) { throw new System.NotImplementedException(); }
	public ImageDecoder() { }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageDecoderInit
{
		public required DOMString Type;
		public required ImageBufferSource Data;
		public ColorSpaceConversion ColorSpaceConversion;
		public ulong DesiredWidth;
		public ulong DesiredHeight;
		public bool PreferAnimation;
		public List<byte[]> Transfer;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageDecodeOptions
{
		public ulong FrameIndex;
		public bool CompleteFramesOnly;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageDecodeResult
{
		public required VideoFrame Image;
		public required bool Complete;
}

///<include file='Utils/Docs/ImageTrackList/ImageTrackList.generated.xml' path='docs/ImageTrackList/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageTrackList
{
	
	///<include file='Utils/Docs/ImageTrackListReady/ImageTrackListReady.generated.xml' path='docs/ImageTrackListReady/*'/>
	public Task<Undefined> Ready { get; }
	///<include file='Utils/Docs/ImageTrackListLength/ImageTrackListLength.generated.xml' path='docs/ImageTrackListLength/*'/>
	public ulong Length { get; }
	///<include file='Utils/Docs/ImageTrackListSelectedIndex/ImageTrackListSelectedIndex.generated.xml' path='docs/ImageTrackListSelectedIndex/*'/>
	public long SelectedIndex { get; }
	///<include file='Utils/Docs/ImageTrackListSelectedTrack/ImageTrackListSelectedTrack.generated.xml' path='docs/ImageTrackListSelectedTrack/*'/>
	public ImageTrack? SelectedTrack { get; }
}

///<include file='Utils/Docs/ImageTrack/ImageTrack.generated.xml' path='docs/ImageTrack/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ImageTrack
{
	///<include file='Utils/Docs/ImageTrackAnimated/ImageTrackAnimated.generated.xml' path='docs/ImageTrackAnimated/*'/>
	public bool Animated { get; }
	///<include file='Utils/Docs/ImageTrackFrameCount/ImageTrackFrameCount.generated.xml' path='docs/ImageTrackFrameCount/*'/>
	public ulong FrameCount { get; }
	///<include file='Utils/Docs/ImageTrackRepetitionCount/ImageTrackRepetitionCount.generated.xml' path='docs/ImageTrackRepetitionCount/*'/>
	public float RepetitionCount { get; }
	///<include file='Utils/Docs/ImageTrackSelected/ImageTrackSelected.generated.xml' path='docs/ImageTrackSelected/*'/>
	public bool Selected { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class Ed448Params : Algorithm
{
		public BufferSource Context;
}

///<include file='Utils/Docs/Crypto/Crypto.generated.xml' path='docs/Crypto/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Crypto
{
	///<include file='Utils/Docs/CryptoSubtle/CryptoSubtle.generated.xml' path='docs/CryptoSubtle/*'/>
	public SubtleCrypto Subtle { get; }
	///<include file='Utils/Docs/CryptoGetRandomValues/CryptoGetRandomValues.generated.xml' path='docs/CryptoGetRandomValues/*'/>
	public ArrayBufferView GetRandomValues(ArrayBufferView array) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/CryptoRandomUUID/CryptoRandomUUID.generated.xml' path='docs/CryptoRandomUUID/*'/>
	public DOMString RandomUUID() { throw new System.NotImplementedException(); }
}



[To(ToAttribute.FirstCharToLowerCase)]
public partial class Algorithm
{
		public required DOMString Name;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class KeyAlgorithm
{
		public required DOMString Name;
}

///<include file='Utils/Docs/CryptoKey/CryptoKey.generated.xml' path='docs/CryptoKey/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CryptoKey
{
	///<include file='Utils/Docs/CryptoKeyType/CryptoKeyType.generated.xml' path='docs/CryptoKeyType/*'/>
	public KeyType Type { get; }
	///<include file='Utils/Docs/CryptoKeyExtractable/CryptoKeyExtractable.generated.xml' path='docs/CryptoKeyExtractable/*'/>
	public bool Extractable { get; }
	///<include file='Utils/Docs/CryptoKeyAlgorithm/CryptoKeyAlgorithm.generated.xml' path='docs/CryptoKeyAlgorithm/*'/>
	public Object Algorithm { get; }
	///<include file='Utils/Docs/CryptoKeyUsages/CryptoKeyUsages.generated.xml' path='docs/CryptoKeyUsages/*'/>
	public Object Usages { get; }
}

///<include file='Utils/Docs/SubtleCrypto/SubtleCrypto.generated.xml' path='docs/SubtleCrypto/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class SubtleCrypto
{
	///<include file='Utils/Docs/SubtleCryptoEncrypt/SubtleCryptoEncrypt.generated.xml' path='docs/SubtleCryptoEncrypt/*'/>
	public Task<byte[]> Encrypt(AlgorithmIdentifier algorithm, CryptoKey key, BufferSource data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoDecrypt/SubtleCryptoDecrypt.generated.xml' path='docs/SubtleCryptoDecrypt/*'/>
	public Task<byte[]> Decrypt(AlgorithmIdentifier algorithm, CryptoKey key, BufferSource data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoSign/SubtleCryptoSign.generated.xml' path='docs/SubtleCryptoSign/*'/>
	public Task<byte[]> Sign(AlgorithmIdentifier algorithm, CryptoKey key, BufferSource data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoVerify/SubtleCryptoVerify.generated.xml' path='docs/SubtleCryptoVerify/*'/>
	public Task<bool> Verify(AlgorithmIdentifier algorithm, CryptoKey key, BufferSource signature, BufferSource data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoDigest/SubtleCryptoDigest.generated.xml' path='docs/SubtleCryptoDigest/*'/>
	public Task<byte[]> Digest(AlgorithmIdentifier algorithm, BufferSource data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoGenerateKey/SubtleCryptoGenerateKey.generated.xml' path='docs/SubtleCryptoGenerateKey/*'/>
	public Task<CryptoKey> GenerateKey(AlgorithmIdentifier algorithm, bool extractable, List<KeyUsage> keyUsages) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoDeriveKey/SubtleCryptoDeriveKey.generated.xml' path='docs/SubtleCryptoDeriveKey/*'/>
	public Task<CryptoKey> DeriveKey(AlgorithmIdentifier algorithm, CryptoKey baseKey, AlgorithmIdentifier derivedKeyType, bool extractable, List<KeyUsage> keyUsages) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoDeriveBits/SubtleCryptoDeriveBits.generated.xml' path='docs/SubtleCryptoDeriveBits/*'/>
	public Task<byte[]> DeriveBits(AlgorithmIdentifier algorithm, CryptoKey baseKey, ulong? length) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoImportKey/SubtleCryptoImportKey.generated.xml' path='docs/SubtleCryptoImportKey/*'/>
	public Task<CryptoKey> ImportKey(KeyFormat format, Union188 keyData, AlgorithmIdentifier algorithm, bool extractable, List<KeyUsage> keyUsages) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoExportKey/SubtleCryptoExportKey.generated.xml' path='docs/SubtleCryptoExportKey/*'/>
	public Task<byte[]> ExportKey(KeyFormat format, CryptoKey key) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoWrapKey/SubtleCryptoWrapKey.generated.xml' path='docs/SubtleCryptoWrapKey/*'/>
	public Task<byte[]> WrapKey(KeyFormat format, CryptoKey key, CryptoKey wrappingKey, AlgorithmIdentifier wrapAlgorithm) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/SubtleCryptoUnwrapKey/SubtleCryptoUnwrapKey.generated.xml' path='docs/SubtleCryptoUnwrapKey/*'/>
	public Task<CryptoKey> UnwrapKey(KeyFormat format, BufferSource wrappedKey, CryptoKey unwrappingKey, AlgorithmIdentifier unwrapAlgorithm, AlgorithmIdentifier unwrappedKeyAlgorithm, bool extractable, List<KeyUsage> keyUsages) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RsaOtherPrimesInfo
{
		public DOMString R;
		public DOMString D;
		public DOMString T;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class JsonWebKey
{
		public DOMString Kty;
		public DOMString Use;
		public List<DOMString> Key_ops;
		public DOMString Alg;
		public bool Ext;
		public DOMString Crv;
		public DOMString X;
		public DOMString Y;
		public DOMString D;
		public DOMString N;
		public DOMString E;
		public DOMString P;
		public DOMString Q;
		public DOMString Dp;
		public DOMString Dq;
		public DOMString Qi;
		public List<RsaOtherPrimesInfo> Oth;
		public DOMString K;
}


///<include file='Utils/Docs/CryptoKeyPair/CryptoKeyPair.generated.xml' path='docs/CryptoKeyPair/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CryptoKeyPair
{
		public CryptoKey PublicKey;
		public CryptoKey PrivateKey;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RsaKeyGenParams : Algorithm
{
		public required ulong ModulusLength;
		public required BigInteger PublicExponent;
}

///<include file='Utils/Docs/RsaHashedKeyGenParams/RsaHashedKeyGenParams.generated.xml' path='docs/RsaHashedKeyGenParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RsaHashedKeyGenParams : RsaKeyGenParams
{
		public required HashAlgorithmIdentifier Hash;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RsaKeyAlgorithm : KeyAlgorithm
{
		public required ulong ModulusLength;
		public required BigInteger PublicExponent;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RsaHashedKeyAlgorithm : RsaKeyAlgorithm
{
		public required KeyAlgorithm Hash;
}

///<include file='Utils/Docs/RsaHashedImportParams/RsaHashedImportParams.generated.xml' path='docs/RsaHashedImportParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RsaHashedImportParams : Algorithm
{
		public required HashAlgorithmIdentifier Hash;
}

///<include file='Utils/Docs/RsaPssParams/RsaPssParams.generated.xml' path='docs/RsaPssParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RsaPssParams : Algorithm
{
		public required ulong SaltLength;
}

///<include file='Utils/Docs/RsaOaepParams/RsaOaepParams.generated.xml' path='docs/RsaOaepParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RsaOaepParams : Algorithm
{
		public BufferSource Label;
}

///<include file='Utils/Docs/EcdsaParams/EcdsaParams.generated.xml' path='docs/EcdsaParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EcdsaParams : Algorithm
{
		public required HashAlgorithmIdentifier Hash;
}


///<include file='Utils/Docs/EcKeyGenParams/EcKeyGenParams.generated.xml' path='docs/EcKeyGenParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EcKeyGenParams : Algorithm
{
		public required NamedCurve NamedCurve;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class EcKeyAlgorithm : KeyAlgorithm
{
		public required NamedCurve NamedCurve;
}

///<include file='Utils/Docs/EcKeyImportParams/EcKeyImportParams.generated.xml' path='docs/EcKeyImportParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EcKeyImportParams : Algorithm
{
		public required NamedCurve NamedCurve;
}

///<include file='Utils/Docs/EcdhKeyDeriveParams/EcdhKeyDeriveParams.generated.xml' path='docs/EcdhKeyDeriveParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class EcdhKeyDeriveParams : Algorithm
{
		public required CryptoKey Public;
}

///<include file='Utils/Docs/AesCtrParams/AesCtrParams.generated.xml' path='docs/AesCtrParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AesCtrParams : Algorithm
{
		public required BufferSource Counter;
		public required byte Length;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AesKeyAlgorithm : KeyAlgorithm
{
		public required ushort Length;
}

///<include file='Utils/Docs/AesKeyGenParams/AesKeyGenParams.generated.xml' path='docs/AesKeyGenParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AesKeyGenParams : Algorithm
{
		public required ushort Length;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AesDerivedKeyParams : Algorithm
{
		public required ushort Length;
}

///<include file='Utils/Docs/AesCbcParams/AesCbcParams.generated.xml' path='docs/AesCbcParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AesCbcParams : Algorithm
{
		public required BufferSource Iv;
}

///<include file='Utils/Docs/AesGcmParams/AesGcmParams.generated.xml' path='docs/AesGcmParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class AesGcmParams : Algorithm
{
		public required BufferSource Iv;
		public BufferSource AdditionalData;
		public byte TagLength;
}

///<include file='Utils/Docs/HmacImportParams/HmacImportParams.generated.xml' path='docs/HmacImportParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class HmacImportParams : Algorithm
{
		public required HashAlgorithmIdentifier Hash;
		public ulong Length;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HmacKeyAlgorithm : KeyAlgorithm
{
		public required KeyAlgorithm Hash;
		public required ulong Length;
}

///<include file='Utils/Docs/HmacKeyGenParams/HmacKeyGenParams.generated.xml' path='docs/HmacKeyGenParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class HmacKeyGenParams : Algorithm
{
		public required HashAlgorithmIdentifier Hash;
		public ulong Length;
}

///<include file='Utils/Docs/HkdfParams/HkdfParams.generated.xml' path='docs/HkdfParams/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class HkdfParams : Algorithm
{
		public required HashAlgorithmIdentifier Hash;
		public required BufferSource Salt;
		public required BufferSource Info;
}

///<include file='Utils/Docs/Pbkdf2Params/Pbkdf2Params.generated.xml' path='docs/Pbkdf2Params/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class Pbkdf2Params : Algorithm
{
		public required BufferSource Salt;
		public required ulong Iterations;
		public required HashAlgorithmIdentifier Hash;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLContextAttributes
{
		public bool Alpha;
		public bool Depth;
		public bool Stencil;
		public bool Antialias;
		public bool PremultipliedAlpha;
		public bool PreserveDrawingBuffer;
		public WebGLPowerPreference PowerPreference;
		public bool FailIfMajorPerformanceCaveat;
		public bool Desynchronized;
}

///<include file='Utils/Docs/WebGLObject/WebGLObject.generated.xml' path='docs/WebGLObject/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLObject
{
		public USVString Label { get; set; }
}

///<include file='Utils/Docs/WebGLBuffer/WebGLBuffer.generated.xml' path='docs/WebGLBuffer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLBuffer : WebGLObject
{
}

///<include file='Utils/Docs/WebGLFramebuffer/WebGLFramebuffer.generated.xml' path='docs/WebGLFramebuffer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLFramebuffer : WebGLObject
{
}

///<include file='Utils/Docs/WebGLProgram/WebGLProgram.generated.xml' path='docs/WebGLProgram/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLProgram : WebGLObject
{
}

///<include file='Utils/Docs/WebGLRenderbuffer/WebGLRenderbuffer.generated.xml' path='docs/WebGLRenderbuffer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLRenderbuffer : WebGLObject
{
}

///<include file='Utils/Docs/WebGLShader/WebGLShader.generated.xml' path='docs/WebGLShader/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLShader : WebGLObject
{
}

///<include file='Utils/Docs/WebGLTexture/WebGLTexture.generated.xml' path='docs/WebGLTexture/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLTexture : WebGLObject
{
}

///<include file='Utils/Docs/WebGLUniformLocation/WebGLUniformLocation.generated.xml' path='docs/WebGLUniformLocation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLUniformLocation
{
}

///<include file='Utils/Docs/WebGLActiveInfo/WebGLActiveInfo.generated.xml' path='docs/WebGLActiveInfo/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLActiveInfo
{
	///<include file='Utils/Docs/WebGLActiveInfoSize/WebGLActiveInfoSize.generated.xml' path='docs/WebGLActiveInfoSize/*'/>
	public GLint Size { get; }
	///<include file='Utils/Docs/WebGLActiveInfoType/WebGLActiveInfoType.generated.xml' path='docs/WebGLActiveInfoType/*'/>
	public GLenum Type { get; }
	///<include file='Utils/Docs/WebGLActiveInfoName/WebGLActiveInfoName.generated.xml' path='docs/WebGLActiveInfoName/*'/>
	public DOMString Name { get; }
}

///<include file='Utils/Docs/WebGLShaderPrecisionFormat/WebGLShaderPrecisionFormat.generated.xml' path='docs/WebGLShaderPrecisionFormat/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLShaderPrecisionFormat
{
	///<include file='Utils/Docs/WebGLShaderPrecisionFormatRangeMin/WebGLShaderPrecisionFormatRangeMin.generated.xml' path='docs/WebGLShaderPrecisionFormatRangeMin/*'/>
	public GLint RangeMin { get; }
	///<include file='Utils/Docs/WebGLShaderPrecisionFormatRangeMax/WebGLShaderPrecisionFormatRangeMax.generated.xml' path='docs/WebGLShaderPrecisionFormatRangeMax/*'/>
	public GLint RangeMax { get; }
	///<include file='Utils/Docs/WebGLShaderPrecisionFormatPrecision/WebGLShaderPrecisionFormatPrecision.generated.xml' path='docs/WebGLShaderPrecisionFormatPrecision/*'/>
	public GLint Precision { get; }
}




///<include file='Utils/Docs/WebGLRenderingContext/WebGLRenderingContext.generated.xml' path='docs/WebGLRenderingContext/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLRenderingContext
{
}



///<include file='Utils/Docs/WebGLContextEvent/WebGLContextEvent.generated.xml' path='docs/WebGLContextEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLContextEvent : Event
{
	///<include file='Utils/Docs/WebGLContextEventWebGLContextEvent/WebGLContextEventWebGLContextEvent.generated.xml' path='docs/WebGLContextEventWebGLContextEvent/*'/>
	public WebGLContextEvent(DOMString type, WebGLContextEventInit eventInit) { }
	///<include file='Utils/Docs/WebGLContextEventStatusMessage/WebGLContextEventStatusMessage.generated.xml' path='docs/WebGLContextEventStatusMessage/*'/>
	public DOMString StatusMessage { get; }
	public WebGLContextEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLContextEventInit : EventInit
{
		public DOMString StatusMessage;
}



///<include file='Utils/Docs/WebGLQuery/WebGLQuery.generated.xml' path='docs/WebGLQuery/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLQuery : WebGLObject
{
}

///<include file='Utils/Docs/WebGLSampler/WebGLSampler.generated.xml' path='docs/WebGLSampler/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLSampler : WebGLObject
{
}

///<include file='Utils/Docs/WebGLSync/WebGLSync.generated.xml' path='docs/WebGLSync/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLSync : WebGLObject
{
}

///<include file='Utils/Docs/WebGLTransformFeedback/WebGLTransformFeedback.generated.xml' path='docs/WebGLTransformFeedback/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLTransformFeedback : WebGLObject
{
}

///<include file='Utils/Docs/WebGLVertexArrayObject/WebGLVertexArrayObject.generated.xml' path='docs/WebGLVertexArrayObject/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGLVertexArrayObject : WebGLObject
{
}


///<include file='Utils/Docs/WebGL2RenderingContext/WebGL2RenderingContext.generated.xml' path='docs/WebGL2RenderingContext/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebGL2RenderingContext
{
}




[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_blend_equation_advanced_coherent
{
		public const GLenum MULTIPLY = 0x9294;
		public const GLenum SCREEN = 0x9295;
		public const GLenum OVERLAY = 0x9296;
		public const GLenum DARKEN = 0x9297;
		public const GLenum LIGHTEN = 0x9298;
		public const GLenum COLORDODGE = 0x9299;
		public const GLenum COLORBURN = 0x929A;
		public const GLenum HARDLIGHT = 0x929B;
		public const GLenum SOFTLIGHT = 0x929C;
		public const GLenum DIFFERENCE = 0x929E;
		public const GLenum EXCLUSION = 0x92A0;
		public const GLenum HSL_HUE = 0x92AD;
		public const GLenum HSL_SATURATION = 0x92AE;
		public const GLenum HSL_COLOR = 0x92AF;
		public const GLenum HSL_LUMINOSITY = 0x92B0;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_clip_cull_distance
{
		public const GLenum MAX_CLIP_DISTANCES_WEBGL = 0x0D32;
		public const GLenum MAX_CULL_DISTANCES_WEBGL = 0x82F9;
		public const GLenum MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL = 0x82FA;
		public const GLenum CLIP_DISTANCE0_WEBGL = 0x3000;
		public const GLenum CLIP_DISTANCE1_WEBGL = 0x3001;
		public const GLenum CLIP_DISTANCE2_WEBGL = 0x3002;
		public const GLenum CLIP_DISTANCE3_WEBGL = 0x3003;
		public const GLenum CLIP_DISTANCE4_WEBGL = 0x3004;
		public const GLenum CLIP_DISTANCE5_WEBGL = 0x3005;
		public const GLenum CLIP_DISTANCE6_WEBGL = 0x3006;
		public const GLenum CLIP_DISTANCE7_WEBGL = 0x3007;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_color_buffer_float
{
		public const GLenum RGBA32F_EXT = 0x8814;
		public const GLenum FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211;
		public const GLenum UNSIGNED_NORMALIZED_EXT = 0x8C17;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_compressed_texture_astc
{
		public const GLenum COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
		public const GLenum COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
		public const GLenum COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
		public const GLenum COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
		public const GLenum COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
		public const GLenum COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
		public const GLenum COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
		public const GLenum COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
		public const GLenum COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
		public const GLenum COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
		public const GLenum COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
		public const GLenum COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
		public const GLenum COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
		public const GLenum COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
		public List<DOMString> GetSupportedProfiles() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_compressed_texture_etc
{
		public const GLenum COMPRESSED_R11_EAC = 0x9270;
		public const GLenum COMPRESSED_SIGNED_R11_EAC = 0x9271;
		public const GLenum COMPRESSED_RG11_EAC = 0x9272;
		public const GLenum COMPRESSED_SIGNED_RG11_EAC = 0x9273;
		public const GLenum COMPRESSED_RGB8_ETC2 = 0x9274;
		public const GLenum COMPRESSED_SRGB8_ETC2 = 0x9275;
		public const GLenum COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
		public const GLenum COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
		public const GLenum COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
		public const GLenum COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_compressed_texture_etc1
{
		public const GLenum COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_compressed_texture_pvrtc
{
		public const GLenum COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
		public const GLenum COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
		public const GLenum COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
		public const GLenum COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_compressed_texture_s3tc
{
		public const GLenum COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
		public const GLenum COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
		public const GLenum COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
		public const GLenum COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_compressed_texture_s3tc_srgb
{
		public const GLenum COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
		public const GLenum COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
		public const GLenum COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
		public const GLenum COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_debug_renderer_info
{
		public const GLenum UNMASKED_VENDOR_WEBGL = 0x9245;
		public const GLenum UNMASKED_RENDERER_WEBGL = 0x9246;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_debug_shaders
{
		public DOMString GetTranslatedShaderSource(WebGLShader shader) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_depth_texture
{
		public const GLenum UNSIGNED_INT_24_8_WEBGL = 0x84FA;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_draw_buffers
{
		public const GLenum COLOR_ATTACHMENT0_WEBGL = 0x8CE0;
		public const GLenum COLOR_ATTACHMENT1_WEBGL = 0x8CE1;
		public const GLenum COLOR_ATTACHMENT2_WEBGL = 0x8CE2;
		public const GLenum COLOR_ATTACHMENT3_WEBGL = 0x8CE3;
		public const GLenum COLOR_ATTACHMENT4_WEBGL = 0x8CE4;
		public const GLenum COLOR_ATTACHMENT5_WEBGL = 0x8CE5;
		public const GLenum COLOR_ATTACHMENT6_WEBGL = 0x8CE6;
		public const GLenum COLOR_ATTACHMENT7_WEBGL = 0x8CE7;
		public const GLenum COLOR_ATTACHMENT8_WEBGL = 0x8CE8;
		public const GLenum COLOR_ATTACHMENT9_WEBGL = 0x8CE9;
		public const GLenum COLOR_ATTACHMENT10_WEBGL = 0x8CEA;
		public const GLenum COLOR_ATTACHMENT11_WEBGL = 0x8CEB;
		public const GLenum COLOR_ATTACHMENT12_WEBGL = 0x8CEC;
		public const GLenum COLOR_ATTACHMENT13_WEBGL = 0x8CED;
		public const GLenum COLOR_ATTACHMENT14_WEBGL = 0x8CEE;
		public const GLenum COLOR_ATTACHMENT15_WEBGL = 0x8CEF;
		public const GLenum DRAW_BUFFER0_WEBGL = 0x8825;
		public const GLenum DRAW_BUFFER1_WEBGL = 0x8826;
		public const GLenum DRAW_BUFFER2_WEBGL = 0x8827;
		public const GLenum DRAW_BUFFER3_WEBGL = 0x8828;
		public const GLenum DRAW_BUFFER4_WEBGL = 0x8829;
		public const GLenum DRAW_BUFFER5_WEBGL = 0x882A;
		public const GLenum DRAW_BUFFER6_WEBGL = 0x882B;
		public const GLenum DRAW_BUFFER7_WEBGL = 0x882C;
		public const GLenum DRAW_BUFFER8_WEBGL = 0x882D;
		public const GLenum DRAW_BUFFER9_WEBGL = 0x882E;
		public const GLenum DRAW_BUFFER10_WEBGL = 0x882F;
		public const GLenum DRAW_BUFFER11_WEBGL = 0x8830;
		public const GLenum DRAW_BUFFER12_WEBGL = 0x8831;
		public const GLenum DRAW_BUFFER13_WEBGL = 0x8832;
		public const GLenum DRAW_BUFFER14_WEBGL = 0x8833;
		public const GLenum DRAW_BUFFER15_WEBGL = 0x8834;
		public const GLenum MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;
		public const GLenum MAX_DRAW_BUFFERS_WEBGL = 0x8824;
		public Undefined DrawBuffersWEBGL(List<GLenum> buffers) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_draw_instanced_base_vertex_base_instance
{
		public Undefined DrawArraysInstancedBaseInstanceWEBGL(GLenum mode, GLint first, GLsizei count, GLsizei instanceCount, GLuint baseInstance) { throw new System.NotImplementedException(); }
		public Undefined DrawElementsInstancedBaseVertexBaseInstanceWEBGL(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei instanceCount, GLint baseVertex, GLuint baseInstance) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_lose_context
{
		public Undefined LoseContext() { throw new System.NotImplementedException(); }
		public Undefined RestoreContext() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_multi_draw
{
		public Undefined MultiDrawArraysWEBGL(GLenum mode, Union194 firstsList, ulong firstsOffset, Union195 countsList, ulong countsOffset, GLsizei drawcount) { throw new System.NotImplementedException(); }
		public Undefined MultiDrawElementsWEBGL(GLenum mode, Union196 countsList, ulong countsOffset, GLenum type, Union197 offsetsList, ulong offsetsOffset, GLsizei drawcount) { throw new System.NotImplementedException(); }
		public Undefined MultiDrawArraysInstancedWEBGL(GLenum mode, Union198 firstsList, ulong firstsOffset, Union199 countsList, ulong countsOffset, Union200 instanceCountsList, ulong instanceCountsOffset, GLsizei drawcount) { throw new System.NotImplementedException(); }
		public Undefined MultiDrawElementsInstancedWEBGL(GLenum mode, Union201 countsList, ulong countsOffset, GLenum type, Union202 offsetsList, ulong offsetsOffset, Union203 instanceCountsList, ulong instanceCountsOffset, GLsizei drawcount) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_multi_draw_instanced_base_vertex_base_instance
{
		public Undefined MultiDrawArraysInstancedBaseInstanceWEBGL(GLenum mode, Union204 firstsList, ulong firstsOffset, Union205 countsList, ulong countsOffset, Union206 instanceCountsList, ulong instanceCountsOffset, Union207 baseInstancesList, ulong baseInstancesOffset, GLsizei drawcount) { throw new System.NotImplementedException(); }
		public Undefined MultiDrawElementsInstancedBaseVertexBaseInstanceWEBGL(GLenum mode, Union208 countsList, ulong countsOffset, GLenum type, Union209 offsetsList, ulong offsetsOffset, Union210 instanceCountsList, ulong instanceCountsOffset, Union211 baseVerticesList, ulong baseVerticesOffset, Union212 baseInstancesList, ulong baseInstancesOffset, GLsizei drawcount) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WEBGL_provoking_vertex
{
		public const GLenum FIRST_VERTEX_CONVENTION_WEBGL = 0x8E4D;
		public const GLenum LAST_VERTEX_CONVENTION_WEBGL = 0x8E4E;
		public const GLenum PROVOKING_VERTEX_WEBGL = 0x8E4F;
		public Undefined ProvokingVertexWEBGL(GLenum provokeMode) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUObjectDescriptorBase
{
		public USVString Label;
}

///<include file='Utils/Docs/GPUSupportedLimits/GPUSupportedLimits.generated.xml' path='docs/GPUSupportedLimits/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUSupportedLimits
{
		public ulong MaxTextureDimension1D { get; }
		public ulong MaxTextureDimension2D { get; }
		public ulong MaxTextureDimension3D { get; }
		public ulong MaxTextureArrayLayers { get; }
		public ulong MaxBindGroups { get; }
		public ulong MaxBindGroupsPlusVertexBuffers { get; }
		public ulong MaxBindingsPerBindGroup { get; }
		public ulong MaxDynamicUniformBuffersPerPipelineLayout { get; }
		public ulong MaxDynamicStorageBuffersPerPipelineLayout { get; }
		public ulong MaxSampledTexturesPerShaderStage { get; }
		public ulong MaxSamplersPerShaderStage { get; }
		public ulong MaxStorageBuffersPerShaderStage { get; }
		public ulong MaxStorageTexturesPerShaderStage { get; }
		public ulong MaxUniformBuffersPerShaderStage { get; }
		public ulong MaxUniformBufferBindingSize { get; }
		public ulong MaxStorageBufferBindingSize { get; }
		public ulong MinUniformBufferOffsetAlignment { get; }
		public ulong MinStorageBufferOffsetAlignment { get; }
		public ulong MaxVertexBuffers { get; }
		public ulong MaxBufferSize { get; }
		public ulong MaxVertexAttributes { get; }
		public ulong MaxVertexBufferArrayStride { get; }
		public ulong MaxInterStageShaderVariables { get; }
		public ulong MaxColorAttachments { get; }
		public ulong MaxColorAttachmentBytesPerSample { get; }
		public ulong MaxComputeWorkgroupStorageSize { get; }
		public ulong MaxComputeInvocationsPerWorkgroup { get; }
		public ulong MaxComputeWorkgroupSizeX { get; }
		public ulong MaxComputeWorkgroupSizeY { get; }
		public ulong MaxComputeWorkgroupSizeZ { get; }
		public ulong MaxComputeWorkgroupsPerDimension { get; }
}

///<include file='Utils/Docs/GPUSupportedFeatures/GPUSupportedFeatures.generated.xml' path='docs/GPUSupportedFeatures/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUSupportedFeatures
{
	
}

///<include file='Utils/Docs/WGSLLanguageFeatures/WGSLLanguageFeatures.generated.xml' path='docs/WGSLLanguageFeatures/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WGSLLanguageFeatures
{
	
}

///<include file='Utils/Docs/GPUAdapterInfo/GPUAdapterInfo.generated.xml' path='docs/GPUAdapterInfo/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUAdapterInfo
{
	///<include file='Utils/Docs/GPUAdapterInfoVendor/GPUAdapterInfoVendor.generated.xml' path='docs/GPUAdapterInfoVendor/*'/>
	public DOMString Vendor { get; }
	///<include file='Utils/Docs/GPUAdapterInfoArchitecture/GPUAdapterInfoArchitecture.generated.xml' path='docs/GPUAdapterInfoArchitecture/*'/>
	public DOMString Architecture { get; }
	///<include file='Utils/Docs/GPUAdapterInfoDevice/GPUAdapterInfoDevice.generated.xml' path='docs/GPUAdapterInfoDevice/*'/>
	public DOMString Device { get; }
	///<include file='Utils/Docs/GPUAdapterInfoDescription/GPUAdapterInfoDescription.generated.xml' path='docs/GPUAdapterInfoDescription/*'/>
	public DOMString Description { get; }
}

///<include file='Utils/Docs/GPU/GPU.generated.xml' path='docs/GPU/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPU
{
	///<include file='Utils/Docs/GPURequestAdapter/GPURequestAdapter.generated.xml' path='docs/GPURequestAdapter/*'/>
	public Task<GPUAdapter?> RequestAdapter(GPURequestAdapterOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUGetPreferredCanvasFormat/GPUGetPreferredCanvasFormat.generated.xml' path='docs/GPUGetPreferredCanvasFormat/*'/>
	public GPUTextureFormat GetPreferredCanvasFormat() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUWgslLanguageFeatures/GPUWgslLanguageFeatures.generated.xml' path='docs/GPUWgslLanguageFeatures/*'/>
	public WGSLLanguageFeatures WgslLanguageFeatures { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURequestAdapterOptions
{
		public DOMString FeatureLevel;
		public GPUPowerPreference PowerPreference;
		public bool ForceFallbackAdapter;
		public bool XrCompatible;
}

///<include file='Utils/Docs/GPUAdapter/GPUAdapter.generated.xml' path='docs/GPUAdapter/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUAdapter
{
	///<include file='Utils/Docs/GPUAdapterFeatures/GPUAdapterFeatures.generated.xml' path='docs/GPUAdapterFeatures/*'/>
	public GPUSupportedFeatures Features { get; }
	///<include file='Utils/Docs/GPUAdapterLimits/GPUAdapterLimits.generated.xml' path='docs/GPUAdapterLimits/*'/>
	public GPUSupportedLimits Limits { get; }
	///<include file='Utils/Docs/GPUAdapterInfo/GPUAdapterInfo.generated.xml' path='docs/GPUAdapterInfo/*'/>
	public GPUAdapterInfo Info { get; }
	///<include file='Utils/Docs/GPUAdapterIsFallbackAdapter/GPUAdapterIsFallbackAdapter.generated.xml' path='docs/GPUAdapterIsFallbackAdapter/*'/>
	public bool IsFallbackAdapter { get; }
	///<include file='Utils/Docs/GPUAdapterRequestDevice/GPUAdapterRequestDevice.generated.xml' path='docs/GPUAdapterRequestDevice/*'/>
	public Task<GPUDevice> RequestDevice(GPUDeviceDescriptor descriptor) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUDeviceDescriptor : GPUObjectDescriptorBase
{
		public List<GPUFeatureName> RequiredFeatures;
		public Dictionary<DOMString, GPUSize64> RequiredLimits;
		public GPUQueueDescriptor DefaultQueue;
}

///<include file='Utils/Docs/GPUDevice/GPUDevice.generated.xml' path='docs/GPUDevice/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUDevice : EventTarget, GPUObjectBase
{
	///<include file='Utils/Docs/GPUDeviceFeatures/GPUDeviceFeatures.generated.xml' path='docs/GPUDeviceFeatures/*'/>
	public GPUSupportedFeatures Features { get; }
	///<include file='Utils/Docs/GPUDeviceLimits/GPUDeviceLimits.generated.xml' path='docs/GPUDeviceLimits/*'/>
	public GPUSupportedLimits Limits { get; }
		public GPUAdapterInfo AdapterInfo { get; }
	///<include file='Utils/Docs/GPUDeviceQueue/GPUDeviceQueue.generated.xml' path='docs/GPUDeviceQueue/*'/>
	public GPUQueue Queue { get; }
	///<include file='Utils/Docs/GPUDeviceDestroy/GPUDeviceDestroy.generated.xml' path='docs/GPUDeviceDestroy/*'/>
	public Undefined Destroy() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateBuffer/GPUDeviceCreateBuffer.generated.xml' path='docs/GPUDeviceCreateBuffer/*'/>
	public GPUBuffer CreateBuffer(GPUBufferDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateTexture/GPUDeviceCreateTexture.generated.xml' path='docs/GPUDeviceCreateTexture/*'/>
	public GPUTexture CreateTexture(GPUTextureDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateSampler/GPUDeviceCreateSampler.generated.xml' path='docs/GPUDeviceCreateSampler/*'/>
	public GPUSampler CreateSampler(GPUSamplerDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceImportExternalTexture/GPUDeviceImportExternalTexture.generated.xml' path='docs/GPUDeviceImportExternalTexture/*'/>
	public GPUExternalTexture ImportExternalTexture(GPUExternalTextureDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateBindGroupLayout/GPUDeviceCreateBindGroupLayout.generated.xml' path='docs/GPUDeviceCreateBindGroupLayout/*'/>
	public GPUBindGroupLayout CreateBindGroupLayout(GPUBindGroupLayoutDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreatePipelineLayout/GPUDeviceCreatePipelineLayout.generated.xml' path='docs/GPUDeviceCreatePipelineLayout/*'/>
	public GPUPipelineLayout CreatePipelineLayout(GPUPipelineLayoutDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateBindGroup/GPUDeviceCreateBindGroup.generated.xml' path='docs/GPUDeviceCreateBindGroup/*'/>
	public GPUBindGroup CreateBindGroup(GPUBindGroupDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateShaderModule/GPUDeviceCreateShaderModule.generated.xml' path='docs/GPUDeviceCreateShaderModule/*'/>
	public GPUShaderModule CreateShaderModule(GPUShaderModuleDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateComputePipeline/GPUDeviceCreateComputePipeline.generated.xml' path='docs/GPUDeviceCreateComputePipeline/*'/>
	public GPUComputePipeline CreateComputePipeline(GPUComputePipelineDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateRenderPipeline/GPUDeviceCreateRenderPipeline.generated.xml' path='docs/GPUDeviceCreateRenderPipeline/*'/>
	public GPURenderPipeline CreateRenderPipeline(GPURenderPipelineDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateComputePipelineAsync/GPUDeviceCreateComputePipelineAsync.generated.xml' path='docs/GPUDeviceCreateComputePipelineAsync/*'/>
	public Task<GPUComputePipeline> CreateComputePipelineAsync(GPUComputePipelineDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateRenderPipelineAsync/GPUDeviceCreateRenderPipelineAsync.generated.xml' path='docs/GPUDeviceCreateRenderPipelineAsync/*'/>
	public Task<GPURenderPipeline> CreateRenderPipelineAsync(GPURenderPipelineDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateCommandEncoder/GPUDeviceCreateCommandEncoder.generated.xml' path='docs/GPUDeviceCreateCommandEncoder/*'/>
	public GPUCommandEncoder CreateCommandEncoder(GPUCommandEncoderDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateRenderBundleEncoder/GPUDeviceCreateRenderBundleEncoder.generated.xml' path='docs/GPUDeviceCreateRenderBundleEncoder/*'/>
	public GPURenderBundleEncoder CreateRenderBundleEncoder(GPURenderBundleEncoderDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDeviceCreateQuerySet/GPUDeviceCreateQuerySet.generated.xml' path='docs/GPUDeviceCreateQuerySet/*'/>
	public GPUQuerySet CreateQuerySet(GPUQuerySetDescriptor descriptor) { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/GPUBuffer/GPUBuffer.generated.xml' path='docs/GPUBuffer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBuffer
{
	///<include file='Utils/Docs/GPUBufferSize/GPUBufferSize.generated.xml' path='docs/GPUBufferSize/*'/>
	public GPUSize64Out Size { get; }
	///<include file='Utils/Docs/GPUBufferUsage/GPUBufferUsage.generated.xml' path='docs/GPUBufferUsage/*'/>
	public GPUFlagsConstant Usage { get; }
	///<include file='Utils/Docs/GPUBufferMapState/GPUBufferMapState.generated.xml' path='docs/GPUBufferMapState/*'/>
	public GPUBufferMapState MapState { get; }
	///<include file='Utils/Docs/GPUBufferMapAsync/GPUBufferMapAsync.generated.xml' path='docs/GPUBufferMapAsync/*'/>
	public Task<Undefined> MapAsync(GPUMapModeFlags mode, GPUSize64 offset, GPUSize64 size) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUBufferGetMappedRange/GPUBufferGetMappedRange.generated.xml' path='docs/GPUBufferGetMappedRange/*'/>
	public byte[] GetMappedRange(GPUSize64 offset, GPUSize64 size) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUBufferUnmap/GPUBufferUnmap.generated.xml' path='docs/GPUBufferUnmap/*'/>
	public Undefined Unmap() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUBufferDestroy/GPUBufferDestroy.generated.xml' path='docs/GPUBufferDestroy/*'/>
	public Undefined Destroy() { throw new System.NotImplementedException(); }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBufferDescriptor : GPUObjectDescriptorBase
{
		public required GPUSize64 Size;
		public required GPUBufferUsageFlags Usage;
		public bool MappedAtCreation;
}


///<include file='Utils/Docs/GPUBufferUsage/GPUBufferUsage.generated.xml' path='docs/GPUBufferUsage/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBufferUsage
{
		public const GPUFlagsConstant MAP_READ = 0x0001;
		public const GPUFlagsConstant MAP_WRITE = 0x0002;
		public const GPUFlagsConstant COPY_SRC = 0x0004;
		public const GPUFlagsConstant COPY_DST = 0x0008;
		public const GPUFlagsConstant INDEX = 0x0010;
		public const GPUFlagsConstant VERTEX = 0x0020;
		public const GPUFlagsConstant UNIFORM = 0x0040;
		public const GPUFlagsConstant STORAGE = 0x0080;
		public const GPUFlagsConstant INDIRECT = 0x0100;
		public const GPUFlagsConstant QUERY_RESOLVE = 0x0200;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUMapMode
{
		public const GPUFlagsConstant READ = 0x0001;
		public const GPUFlagsConstant WRITE = 0x0002;
}

///<include file='Utils/Docs/GPUTexture/GPUTexture.generated.xml' path='docs/GPUTexture/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUTexture
{
	///<include file='Utils/Docs/GPUTextureCreateView/GPUTextureCreateView.generated.xml' path='docs/GPUTextureCreateView/*'/>
	public GPUTextureView CreateView(GPUTextureViewDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUTextureDestroy/GPUTextureDestroy.generated.xml' path='docs/GPUTextureDestroy/*'/>
	public Undefined Destroy() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUTextureWidth/GPUTextureWidth.generated.xml' path='docs/GPUTextureWidth/*'/>
	public GPUIntegerCoordinateOut Width { get; }
	///<include file='Utils/Docs/GPUTextureHeight/GPUTextureHeight.generated.xml' path='docs/GPUTextureHeight/*'/>
	public GPUIntegerCoordinateOut Height { get; }
	///<include file='Utils/Docs/GPUTextureDepthOrArrayLayers/GPUTextureDepthOrArrayLayers.generated.xml' path='docs/GPUTextureDepthOrArrayLayers/*'/>
	public GPUIntegerCoordinateOut DepthOrArrayLayers { get; }
	///<include file='Utils/Docs/GPUTextureMipLevelCount/GPUTextureMipLevelCount.generated.xml' path='docs/GPUTextureMipLevelCount/*'/>
	public GPUIntegerCoordinateOut MipLevelCount { get; }
	///<include file='Utils/Docs/GPUTextureSampleCount/GPUTextureSampleCount.generated.xml' path='docs/GPUTextureSampleCount/*'/>
	public GPUSize32Out SampleCount { get; }
	///<include file='Utils/Docs/GPUTextureDimension/GPUTextureDimension.generated.xml' path='docs/GPUTextureDimension/*'/>
	public GPUTextureDimension Dimension { get; }
	///<include file='Utils/Docs/GPUTextureFormat/GPUTextureFormat.generated.xml' path='docs/GPUTextureFormat/*'/>
	public GPUTextureFormat Format { get; }
	///<include file='Utils/Docs/GPUTextureUsage/GPUTextureUsage.generated.xml' path='docs/GPUTextureUsage/*'/>
	public GPUFlagsConstant Usage { get; }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUTextureDescriptor : GPUObjectDescriptorBase
{
		public required GPUExtent3D Size;
		public GPUIntegerCoordinate MipLevelCount;
		public GPUSize32 SampleCount;
		public GPUTextureDimension Dimension;
		public required GPUTextureFormat Format;
		public required GPUTextureUsageFlags Usage;
		public List<GPUTextureFormat> ViewFormats;
}

///<include file='Utils/Docs/GPUTextureUsage/GPUTextureUsage.generated.xml' path='docs/GPUTextureUsage/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUTextureUsage
{
		public const GPUFlagsConstant COPY_SRC = 0x01;
		public const GPUFlagsConstant COPY_DST = 0x02;
		public const GPUFlagsConstant TEXTURE_BINDING = 0x04;
		public const GPUFlagsConstant STORAGE_BINDING = 0x08;
		public const GPUFlagsConstant RENDER_ATTACHMENT = 0x10;
}

///<include file='Utils/Docs/GPUTextureView/GPUTextureView.generated.xml' path='docs/GPUTextureView/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUTextureView
{
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUTextureViewDescriptor : GPUObjectDescriptorBase
{
		public GPUTextureFormat Format;
		public GPUTextureViewDimension Dimension;
		public GPUTextureUsageFlags Usage;
		public GPUTextureAspect Aspect;
		public GPUIntegerCoordinate BaseMipLevel;
		public GPUIntegerCoordinate MipLevelCount;
		public GPUIntegerCoordinate BaseArrayLayer;
		public GPUIntegerCoordinate ArrayLayerCount;
}

///<include file='Utils/Docs/GPUExternalTexture/GPUExternalTexture.generated.xml' path='docs/GPUExternalTexture/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUExternalTexture
{
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUExternalTextureDescriptor : GPUObjectDescriptorBase
{
		public required Union213 Source;
		public PredefinedColorSpace ColorSpace;
}

///<include file='Utils/Docs/GPUSampler/GPUSampler.generated.xml' path='docs/GPUSampler/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUSampler
{
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUSamplerDescriptor : GPUObjectDescriptorBase
{
		public GPUAddressMode AddressModeU;
		public GPUAddressMode AddressModeV;
		public GPUAddressMode AddressModeW;
		public GPUFilterMode MagFilter;
		public GPUFilterMode MinFilter;
		public GPUMipmapFilterMode MipmapFilter;
		public Number LodMinClamp;
		public Number LodMaxClamp;
		public GPUCompareFunction Compare;
		public ushort MaxAnisotropy;
}

///<include file='Utils/Docs/GPUBindGroupLayout/GPUBindGroupLayout.generated.xml' path='docs/GPUBindGroupLayout/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBindGroupLayout
{
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBindGroupLayoutDescriptor : GPUObjectDescriptorBase
{
		public required List<GPUBindGroupLayoutEntry> Entries;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBindGroupLayoutEntry
{
		public required GPUIndex32 Binding;
		public required GPUShaderStageFlags Visibility;
		public GPUBufferBindingLayout Buffer;
		public GPUSamplerBindingLayout Sampler;
		public GPUTextureBindingLayout Texture;
		public GPUStorageTextureBindingLayout StorageTexture;
		public GPUExternalTextureBindingLayout ExternalTexture;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUShaderStage
{
		public const GPUFlagsConstant VERTEX = 0x1;
		public const GPUFlagsConstant FRAGMENT = 0x2;
		public const GPUFlagsConstant COMPUTE = 0x4;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBufferBindingLayout
{
		public GPUBufferBindingType Type;
		public bool HasDynamicOffset;
		public GPUSize64 MinBindingSize;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUSamplerBindingLayout
{
		public GPUSamplerBindingType Type;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUTextureBindingLayout
{
		public GPUTextureSampleType SampleType;
		public GPUTextureViewDimension ViewDimension;
		public bool Multisampled;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUStorageTextureBindingLayout
{
		public GPUStorageTextureAccess Access;
		public required GPUTextureFormat Format;
		public GPUTextureViewDimension ViewDimension;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUExternalTextureBindingLayout
{
}

///<include file='Utils/Docs/GPUBindGroup/GPUBindGroup.generated.xml' path='docs/GPUBindGroup/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBindGroup
{
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBindGroupDescriptor : GPUObjectDescriptorBase
{
		public required GPUBindGroupLayout Layout;
		public required List<GPUBindGroupEntry> Entries;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBindGroupEntry
{
		public required GPUIndex32 Binding;
		public required GPUBindingResource Resource;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBufferBinding
{
		public required GPUBuffer Buffer;
		public GPUSize64 Offset;
		public GPUSize64 Size;
}

///<include file='Utils/Docs/GPUPipelineLayout/GPUPipelineLayout.generated.xml' path='docs/GPUPipelineLayout/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUPipelineLayout
{
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUPipelineLayoutDescriptor : GPUObjectDescriptorBase
{
		public required List<GPUBindGroupLayout?> BindGroupLayouts;
}

///<include file='Utils/Docs/GPUShaderModule/GPUShaderModule.generated.xml' path='docs/GPUShaderModule/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUShaderModule
{
	///<include file='Utils/Docs/GPUShaderModuleGetCompilationInfo/GPUShaderModuleGetCompilationInfo.generated.xml' path='docs/GPUShaderModuleGetCompilationInfo/*'/>
	public Task<GPUCompilationInfo> GetCompilationInfo() { throw new System.NotImplementedException(); }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUShaderModuleDescriptor : GPUObjectDescriptorBase
{
		public required USVString Code;
		public List<GPUShaderModuleCompilationHint> CompilationHints;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUShaderModuleCompilationHint
{
		public required USVString EntryPoint;
		public Union215 Layout;
}

///<include file='Utils/Docs/GPUCompilationMessage/GPUCompilationMessage.generated.xml' path='docs/GPUCompilationMessage/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCompilationMessage
{
	///<include file='Utils/Docs/GPUCompilationMessageMessage/GPUCompilationMessageMessage.generated.xml' path='docs/GPUCompilationMessageMessage/*'/>
	public DOMString Message { get; }
	///<include file='Utils/Docs/GPUCompilationMessageType/GPUCompilationMessageType.generated.xml' path='docs/GPUCompilationMessageType/*'/>
	public GPUCompilationMessageType Type { get; }
	///<include file='Utils/Docs/GPUCompilationMessageLineNum/GPUCompilationMessageLineNum.generated.xml' path='docs/GPUCompilationMessageLineNum/*'/>
	public ulong LineNum { get; }
	///<include file='Utils/Docs/GPUCompilationMessageLinePos/GPUCompilationMessageLinePos.generated.xml' path='docs/GPUCompilationMessageLinePos/*'/>
	public ulong LinePos { get; }
	///<include file='Utils/Docs/GPUCompilationMessageOffset/GPUCompilationMessageOffset.generated.xml' path='docs/GPUCompilationMessageOffset/*'/>
	public ulong Offset { get; }
	///<include file='Utils/Docs/GPUCompilationMessageLength/GPUCompilationMessageLength.generated.xml' path='docs/GPUCompilationMessageLength/*'/>
	public ulong Length { get; }
}

///<include file='Utils/Docs/GPUCompilationInfo/GPUCompilationInfo.generated.xml' path='docs/GPUCompilationInfo/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCompilationInfo
{
	///<include file='Utils/Docs/GPUCompilationInfoMessages/GPUCompilationInfoMessages.generated.xml' path='docs/GPUCompilationInfoMessages/*'/>
	public GPUCompilationMessage[] Messages { get; }
}

///<include file='Utils/Docs/GPUPipelineError/GPUPipelineError.generated.xml' path='docs/GPUPipelineError/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUPipelineError : DOMException
{
	///<include file='Utils/Docs/GPUPipelineErrorGPUPipelineError/GPUPipelineErrorGPUPipelineError.generated.xml' path='docs/GPUPipelineErrorGPUPipelineError/*'/>
	public GPUPipelineError(DOMString message, GPUPipelineErrorInit options) { }
	///<include file='Utils/Docs/GPUPipelineErrorReason/GPUPipelineErrorReason.generated.xml' path='docs/GPUPipelineErrorReason/*'/>
	public GPUPipelineErrorReason Reason { get; }
	public GPUPipelineError() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUPipelineErrorInit
{
		public required GPUPipelineErrorReason Reason;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUPipelineDescriptorBase : GPUObjectDescriptorBase
{
		public required Union216 Layout;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUProgrammableStage
{
		public required GPUShaderModule Module;
		public USVString EntryPoint;
		public Dictionary<USVString, GPUPipelineConstantValue> Constants;
}


///<include file='Utils/Docs/GPUComputePipeline/GPUComputePipeline.generated.xml' path='docs/GPUComputePipeline/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUComputePipeline
{
}



[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUComputePipelineDescriptor : GPUPipelineDescriptorBase
{
		public required GPUProgrammableStage Compute;
}

///<include file='Utils/Docs/GPURenderPipeline/GPURenderPipeline.generated.xml' path='docs/GPURenderPipeline/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderPipeline
{
}



[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderPipelineDescriptor : GPUPipelineDescriptorBase
{
		public required GPUVertexState Vertex;
		public GPUPrimitiveState Primitive;
		public GPUDepthStencilState DepthStencil;
		public GPUMultisampleState Multisample;
		public GPUFragmentState Fragment;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUPrimitiveState
{
		public GPUPrimitiveTopology Topology;
		public GPUIndexFormat StripIndexFormat;
		public GPUFrontFace FrontFace;
		public GPUCullMode CullMode;
		public bool UnclippedDepth;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUMultisampleState
{
		public GPUSize32 Count;
		public GPUSampleMask Mask;
		public bool AlphaToCoverageEnabled;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUFragmentState : GPUProgrammableStage
{
		public required List<GPUColorTargetState?> Targets;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUColorTargetState
{
		public required GPUTextureFormat Format;
		public GPUBlendState Blend;
		public GPUColorWriteFlags WriteMask;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBlendState
{
		public required GPUBlendComponent Color;
		public required GPUBlendComponent Alpha;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUColorWrite
{
		public const GPUFlagsConstant RED = 0x1;
		public const GPUFlagsConstant GREEN = 0x2;
		public const GPUFlagsConstant BLUE = 0x4;
		public const GPUFlagsConstant ALPHA = 0x8;
		public const GPUFlagsConstant ALL = 0xF;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUBlendComponent
{
		public GPUBlendOperation Operation;
		public GPUBlendFactor SrcFactor;
		public GPUBlendFactor DstFactor;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUDepthStencilState
{
		public required GPUTextureFormat Format;
		public bool DepthWriteEnabled;
		public GPUCompareFunction DepthCompare;
		public GPUStencilFaceState StencilFront;
		public GPUStencilFaceState StencilBack;
		public GPUStencilValue StencilReadMask;
		public GPUStencilValue StencilWriteMask;
		public GPUDepthBias DepthBias;
		public Number DepthBiasSlopeScale;
		public Number DepthBiasClamp;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUStencilFaceState
{
		public GPUCompareFunction Compare;
		public GPUStencilOperation FailOp;
		public GPUStencilOperation DepthFailOp;
		public GPUStencilOperation PassOp;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUVertexState : GPUProgrammableStage
{
		public List<GPUVertexBufferLayout?> Buffers;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUVertexBufferLayout
{
		public required GPUSize64 ArrayStride;
		public GPUVertexStepMode StepMode;
		public required List<GPUVertexAttribute> Attributes;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUVertexAttribute
{
		public required GPUVertexFormat Format;
		public required GPUSize64 Offset;
		public required GPUIndex32 ShaderLocation;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUTexelCopyBufferLayout
{
		public GPUSize64 Offset;
		public GPUSize32 BytesPerRow;
		public GPUSize32 RowsPerImage;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUTexelCopyBufferInfo : GPUTexelCopyBufferLayout
{
		public required GPUBuffer Buffer;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUTexelCopyTextureInfo
{
		public required GPUTexture Texture;
		public GPUIntegerCoordinate MipLevel;
		public GPUOrigin3D Origin;
		public GPUTextureAspect Aspect;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCopyExternalImageDestInfo : GPUTexelCopyTextureInfo
{
		public PredefinedColorSpace ColorSpace;
		public bool PremultipliedAlpha;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCopyExternalImageSourceInfo
{
		public required GPUCopyExternalImageSource Source;
		public GPUOrigin2D Origin;
		public bool FlipY;
}

///<include file='Utils/Docs/GPUCommandBuffer/GPUCommandBuffer.generated.xml' path='docs/GPUCommandBuffer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCommandBuffer
{
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCommandBufferDescriptor : GPUObjectDescriptorBase
{
}

///<include file='Utils/Docs/GPUCommandEncoder/GPUCommandEncoder.generated.xml' path='docs/GPUCommandEncoder/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCommandEncoder
{
	///<include file='Utils/Docs/GPUCommandEncoderBeginRenderPass/GPUCommandEncoderBeginRenderPass.generated.xml' path='docs/GPUCommandEncoderBeginRenderPass/*'/>
	public GPURenderPassEncoder BeginRenderPass(GPURenderPassDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCommandEncoderBeginComputePass/GPUCommandEncoderBeginComputePass.generated.xml' path='docs/GPUCommandEncoderBeginComputePass/*'/>
	public GPUComputePassEncoder BeginComputePass(GPUComputePassDescriptor descriptor) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCommandEncoderCopyBufferToBuffer/GPUCommandEncoderCopyBufferToBuffer.generated.xml' path='docs/GPUCommandEncoderCopyBufferToBuffer/*'/>
	public Undefined CopyBufferToBuffer(GPUBuffer source, GPUSize64 sourceOffset, GPUBuffer destination, GPUSize64 destinationOffset, GPUSize64 size) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCommandEncoderCopyBufferToTexture/GPUCommandEncoderCopyBufferToTexture.generated.xml' path='docs/GPUCommandEncoderCopyBufferToTexture/*'/>
	public Undefined CopyBufferToTexture(GPUTexelCopyBufferInfo source, GPUTexelCopyTextureInfo destination, GPUExtent3D copySize) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCommandEncoderCopyTextureToBuffer/GPUCommandEncoderCopyTextureToBuffer.generated.xml' path='docs/GPUCommandEncoderCopyTextureToBuffer/*'/>
	public Undefined CopyTextureToBuffer(GPUTexelCopyTextureInfo source, GPUTexelCopyBufferInfo destination, GPUExtent3D copySize) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCommandEncoderCopyTextureToTexture/GPUCommandEncoderCopyTextureToTexture.generated.xml' path='docs/GPUCommandEncoderCopyTextureToTexture/*'/>
	public Undefined CopyTextureToTexture(GPUTexelCopyTextureInfo source, GPUTexelCopyTextureInfo destination, GPUExtent3D copySize) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCommandEncoderClearBuffer/GPUCommandEncoderClearBuffer.generated.xml' path='docs/GPUCommandEncoderClearBuffer/*'/>
	public Undefined ClearBuffer(GPUBuffer buffer, GPUSize64 offset, GPUSize64 size) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCommandEncoderResolveQuerySet/GPUCommandEncoderResolveQuerySet.generated.xml' path='docs/GPUCommandEncoderResolveQuerySet/*'/>
	public Undefined ResolveQuerySet(GPUQuerySet querySet, GPUSize32 firstQuery, GPUSize32 queryCount, GPUBuffer destination, GPUSize64 destinationOffset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCommandEncoderFinish/GPUCommandEncoderFinish.generated.xml' path='docs/GPUCommandEncoderFinish/*'/>
	public GPUCommandBuffer Finish(GPUCommandBufferDescriptor descriptor) { throw new System.NotImplementedException(); }
}




[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCommandEncoderDescriptor : GPUObjectDescriptorBase
{
}

///<include file='Utils/Docs/GPUComputePassEncoder/GPUComputePassEncoder.generated.xml' path='docs/GPUComputePassEncoder/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUComputePassEncoder
{
	///<include file='Utils/Docs/GPUComputePassEncoderSetPipeline/GPUComputePassEncoderSetPipeline.generated.xml' path='docs/GPUComputePassEncoderSetPipeline/*'/>
	public Undefined SetPipeline(GPUComputePipeline pipeline) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUComputePassEncoderDispatchWorkgroups/GPUComputePassEncoderDispatchWorkgroups.generated.xml' path='docs/GPUComputePassEncoderDispatchWorkgroups/*'/>
	public Undefined DispatchWorkgroups(GPUSize32 workgroupCountX, GPUSize32 workgroupCountY, GPUSize32 workgroupCountZ) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUComputePassEncoderDispatchWorkgroupsIndirect/GPUComputePassEncoderDispatchWorkgroupsIndirect.generated.xml' path='docs/GPUComputePassEncoderDispatchWorkgroupsIndirect/*'/>
	public Undefined DispatchWorkgroupsIndirect(GPUBuffer indirectBuffer, GPUSize64 indirectOffset) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUComputePassEncoderEnd/GPUComputePassEncoderEnd.generated.xml' path='docs/GPUComputePassEncoderEnd/*'/>
	public Undefined End() { throw new System.NotImplementedException(); }
}





[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUComputePassTimestampWrites
{
		public required GPUQuerySet QuerySet;
		public GPUSize32 BeginningOfPassWriteIndex;
		public GPUSize32 EndOfPassWriteIndex;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUComputePassDescriptor : GPUObjectDescriptorBase
{
		public GPUComputePassTimestampWrites TimestampWrites;
}

///<include file='Utils/Docs/GPURenderPassEncoder/GPURenderPassEncoder.generated.xml' path='docs/GPURenderPassEncoder/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderPassEncoder
{
	///<include file='Utils/Docs/GPURenderPassEncoderSetViewport/GPURenderPassEncoderSetViewport.generated.xml' path='docs/GPURenderPassEncoderSetViewport/*'/>
	public Undefined SetViewport(Number x, Number y, Number width, Number height, Number minDepth, Number maxDepth) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPURenderPassEncoderSetScissorRect/GPURenderPassEncoderSetScissorRect.generated.xml' path='docs/GPURenderPassEncoderSetScissorRect/*'/>
	public Undefined SetScissorRect(GPUIntegerCoordinate x, GPUIntegerCoordinate y, GPUIntegerCoordinate width, GPUIntegerCoordinate height) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPURenderPassEncoderSetBlendConstant/GPURenderPassEncoderSetBlendConstant.generated.xml' path='docs/GPURenderPassEncoderSetBlendConstant/*'/>
	public Undefined SetBlendConstant(GPUColor color) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPURenderPassEncoderSetStencilReference/GPURenderPassEncoderSetStencilReference.generated.xml' path='docs/GPURenderPassEncoderSetStencilReference/*'/>
	public Undefined SetStencilReference(GPUStencilValue reference) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPURenderPassEncoderBeginOcclusionQuery/GPURenderPassEncoderBeginOcclusionQuery.generated.xml' path='docs/GPURenderPassEncoderBeginOcclusionQuery/*'/>
	public Undefined BeginOcclusionQuery(GPUSize32 queryIndex) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPURenderPassEncoderEndOcclusionQuery/GPURenderPassEncoderEndOcclusionQuery.generated.xml' path='docs/GPURenderPassEncoderEndOcclusionQuery/*'/>
	public Undefined EndOcclusionQuery() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPURenderPassEncoderExecuteBundles/GPURenderPassEncoderExecuteBundles.generated.xml' path='docs/GPURenderPassEncoderExecuteBundles/*'/>
	public Undefined ExecuteBundles(List<GPURenderBundle> bundles) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPURenderPassEncoderEnd/GPURenderPassEncoderEnd.generated.xml' path='docs/GPURenderPassEncoderEnd/*'/>
	public Undefined End() { throw new System.NotImplementedException(); }
}






[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderPassTimestampWrites
{
		public required GPUQuerySet QuerySet;
		public GPUSize32 BeginningOfPassWriteIndex;
		public GPUSize32 EndOfPassWriteIndex;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderPassDescriptor : GPUObjectDescriptorBase
{
		public required List<GPURenderPassColorAttachment?> ColorAttachments;
		public GPURenderPassDepthStencilAttachment DepthStencilAttachment;
		public GPUQuerySet OcclusionQuerySet;
		public GPURenderPassTimestampWrites TimestampWrites;
		public GPUSize64 MaxDrawCount;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderPassColorAttachment
{
		public required GPUTextureView View;
		public GPUIntegerCoordinate DepthSlice;
		public GPUTextureView ResolveTarget;
		public GPUColor ClearValue;
		public required GPULoadOp LoadOp;
		public required GPUStoreOp StoreOp;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderPassDepthStencilAttachment
{
		public required GPUTextureView View;
		public Number DepthClearValue;
		public GPULoadOp DepthLoadOp;
		public GPUStoreOp DepthStoreOp;
		public bool DepthReadOnly;
		public GPUStencilValue StencilClearValue;
		public GPULoadOp StencilLoadOp;
		public GPUStoreOp StencilStoreOp;
		public bool StencilReadOnly;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderPassLayout : GPUObjectDescriptorBase
{
		public required List<GPUTextureFormat?> ColorFormats;
		public GPUTextureFormat DepthStencilFormat;
		public GPUSize32 SampleCount;
}

///<include file='Utils/Docs/GPURenderBundle/GPURenderBundle.generated.xml' path='docs/GPURenderBundle/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderBundle
{
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderBundleDescriptor : GPUObjectDescriptorBase
{
}

///<include file='Utils/Docs/GPURenderBundleEncoder/GPURenderBundleEncoder.generated.xml' path='docs/GPURenderBundleEncoder/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderBundleEncoder
{
	///<include file='Utils/Docs/GPURenderBundleEncoderFinish/GPURenderBundleEncoderFinish.generated.xml' path='docs/GPURenderBundleEncoderFinish/*'/>
	public GPURenderBundle Finish(GPURenderBundleDescriptor descriptor) { throw new System.NotImplementedException(); }
}






[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPURenderBundleEncoderDescriptor : GPURenderPassLayout
{
		public bool DepthReadOnly;
		public bool StencilReadOnly;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUQueueDescriptor : GPUObjectDescriptorBase
{
}

///<include file='Utils/Docs/GPUQueue/GPUQueue.generated.xml' path='docs/GPUQueue/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUQueue
{
	///<include file='Utils/Docs/GPUQueueSubmit/GPUQueueSubmit.generated.xml' path='docs/GPUQueueSubmit/*'/>
	public Undefined Submit(List<GPUCommandBuffer> commandBuffers) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUQueueOnSubmittedWorkDone/GPUQueueOnSubmittedWorkDone.generated.xml' path='docs/GPUQueueOnSubmittedWorkDone/*'/>
	public Task<Undefined> OnSubmittedWorkDone() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUQueueWriteBuffer/GPUQueueWriteBuffer.generated.xml' path='docs/GPUQueueWriteBuffer/*'/>
	public Undefined WriteBuffer(GPUBuffer buffer, GPUSize64 bufferOffset, AllowSharedBufferSource data, GPUSize64 dataOffset, GPUSize64 size) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUQueueWriteTexture/GPUQueueWriteTexture.generated.xml' path='docs/GPUQueueWriteTexture/*'/>
	public Undefined WriteTexture(GPUTexelCopyTextureInfo destination, AllowSharedBufferSource data, GPUTexelCopyBufferLayout dataLayout, GPUExtent3D size) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUQueueCopyExternalImageToTexture/GPUQueueCopyExternalImageToTexture.generated.xml' path='docs/GPUQueueCopyExternalImageToTexture/*'/>
	public Undefined CopyExternalImageToTexture(GPUCopyExternalImageSourceInfo source, GPUCopyExternalImageDestInfo destination, GPUExtent3D copySize) { throw new System.NotImplementedException(); }
}


///<include file='Utils/Docs/GPUQuerySet/GPUQuerySet.generated.xml' path='docs/GPUQuerySet/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUQuerySet
{
	///<include file='Utils/Docs/GPUQuerySetDestroy/GPUQuerySetDestroy.generated.xml' path='docs/GPUQuerySetDestroy/*'/>
	public Undefined Destroy() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUQuerySetType/GPUQuerySetType.generated.xml' path='docs/GPUQuerySetType/*'/>
	public GPUQueryType Type { get; }
	///<include file='Utils/Docs/GPUQuerySetCount/GPUQuerySetCount.generated.xml' path='docs/GPUQuerySetCount/*'/>
	public GPUSize32Out Count { get; }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUQuerySetDescriptor : GPUObjectDescriptorBase
{
		public required GPUQueryType Type;
		public required GPUSize32 Count;
}

///<include file='Utils/Docs/GPUCanvasContext/GPUCanvasContext.generated.xml' path='docs/GPUCanvasContext/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCanvasContext
{
	///<include file='Utils/Docs/GPUCanvasContextCanvas/GPUCanvasContextCanvas.generated.xml' path='docs/GPUCanvasContextCanvas/*'/>
	public Union218 Canvas { get; }
	///<include file='Utils/Docs/GPUCanvasContextConfigure/GPUCanvasContextConfigure.generated.xml' path='docs/GPUCanvasContextConfigure/*'/>
	public Undefined Configure(GPUCanvasConfiguration configuration) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCanvasContextUnconfigure/GPUCanvasContextUnconfigure.generated.xml' path='docs/GPUCanvasContextUnconfigure/*'/>
	public Undefined Unconfigure() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCanvasContextGetConfiguration/GPUCanvasContextGetConfiguration.generated.xml' path='docs/GPUCanvasContextGetConfiguration/*'/>
	public GPUCanvasConfiguration? GetConfiguration() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUCanvasContextGetCurrentTexture/GPUCanvasContextGetCurrentTexture.generated.xml' path='docs/GPUCanvasContextGetCurrentTexture/*'/>
	public GPUTexture GetCurrentTexture() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCanvasToneMapping
{
		public GPUCanvasToneMappingMode Mode;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUCanvasConfiguration
{
		public required GPUDevice Device;
		public required GPUTextureFormat Format;
		public GPUTextureUsageFlags Usage;
		public List<GPUTextureFormat> ViewFormats;
		public PredefinedColorSpace ColorSpace;
		public GPUCanvasToneMapping ToneMapping;
		public GPUCanvasAlphaMode AlphaMode;
}

///<include file='Utils/Docs/GPUDeviceLostInfo/GPUDeviceLostInfo.generated.xml' path='docs/GPUDeviceLostInfo/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUDeviceLostInfo
{
	///<include file='Utils/Docs/GPUDeviceLostInfoReason/GPUDeviceLostInfoReason.generated.xml' path='docs/GPUDeviceLostInfoReason/*'/>
	public GPUDeviceLostReason Reason { get; }
	///<include file='Utils/Docs/GPUDeviceLostInfoMessage/GPUDeviceLostInfoMessage.generated.xml' path='docs/GPUDeviceLostInfoMessage/*'/>
	public DOMString Message { get; }
}

///<include file='Utils/Docs/GPUDevice/GPUDevice.generated.xml' path='docs/GPUDevice/*'/>
public partial class GPUDevice
{
	///<include file='Utils/Docs/GPUDeviceLost/GPUDeviceLost.generated.xml' path='docs/GPUDeviceLost/*'/>
	public Task<GPUDeviceLostInfo> Lost { get; }
}

///<include file='Utils/Docs/GPUError/GPUError.generated.xml' path='docs/GPUError/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUError
{
	///<include file='Utils/Docs/GPUErrorMessage/GPUErrorMessage.generated.xml' path='docs/GPUErrorMessage/*'/>
	public DOMString Message { get; }
}

///<include file='Utils/Docs/GPUValidationError/GPUValidationError.generated.xml' path='docs/GPUValidationError/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUValidationError : GPUError
{
	///<include file='Utils/Docs/GPUValidationErrorGPUValidationError/GPUValidationErrorGPUValidationError.generated.xml' path='docs/GPUValidationErrorGPUValidationError/*'/>
	public GPUValidationError(DOMString message) { }
	public GPUValidationError() { }
}

///<include file='Utils/Docs/GPUOutOfMemoryError/GPUOutOfMemoryError.generated.xml' path='docs/GPUOutOfMemoryError/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUOutOfMemoryError : GPUError
{
	///<include file='Utils/Docs/GPUOutOfMemoryErrorGPUOutOfMemoryError/GPUOutOfMemoryErrorGPUOutOfMemoryError.generated.xml' path='docs/GPUOutOfMemoryErrorGPUOutOfMemoryError/*'/>
	public GPUOutOfMemoryError(DOMString message) { }
	public GPUOutOfMemoryError() { }
}

///<include file='Utils/Docs/GPUInternalError/GPUInternalError.generated.xml' path='docs/GPUInternalError/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUInternalError : GPUError
{
	///<include file='Utils/Docs/GPUInternalErrorGPUInternalError/GPUInternalErrorGPUInternalError.generated.xml' path='docs/GPUInternalErrorGPUInternalError/*'/>
	public GPUInternalError(DOMString message) { }
	public GPUInternalError() { }
}

///<include file='Utils/Docs/GPUDevice/GPUDevice.generated.xml' path='docs/GPUDevice/*'/>
public partial class GPUDevice
{
	///<include file='Utils/Docs/GPUDevicePushErrorScope/GPUDevicePushErrorScope.generated.xml' path='docs/GPUDevicePushErrorScope/*'/>
	public Undefined PushErrorScope(GPUErrorFilter filter) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/GPUDevicePopErrorScope/GPUDevicePopErrorScope.generated.xml' path='docs/GPUDevicePopErrorScope/*'/>
	public Task<GPUError?> PopErrorScope() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/GPUUncapturedErrorEvent/GPUUncapturedErrorEvent.generated.xml' path='docs/GPUUncapturedErrorEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUUncapturedErrorEvent : Event
{
	///<include file='Utils/Docs/GPUUncapturedErrorEventGPUUncapturedErrorEvent/GPUUncapturedErrorEventGPUUncapturedErrorEvent.generated.xml' path='docs/GPUUncapturedErrorEventGPUUncapturedErrorEvent/*'/>
	public GPUUncapturedErrorEvent(DOMString type, GPUUncapturedErrorEventInit gpuUncapturedErrorEventInitDict) { }
	///<include file='Utils/Docs/GPUUncapturedErrorEventError/GPUUncapturedErrorEventError.generated.xml' path='docs/GPUUncapturedErrorEventError/*'/>
	public GPUError Error { get; }
	public GPUUncapturedErrorEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUUncapturedErrorEventInit : EventInit
{
		public required GPUError Error;
}

///<include file='Utils/Docs/GPUDevice/GPUDevice.generated.xml' path='docs/GPUDevice/*'/>
public partial class GPUDevice
{
		public EventHandler Onuncapturederror { get; set; }
}














[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUColorDict
{
		public required Number R;
		public required Number G;
		public required Number B;
		public required Number A;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUOrigin2DDict
{
		public GPUIntegerCoordinate X;
		public GPUIntegerCoordinate Y;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUOrigin3DDict
{
		public GPUIntegerCoordinate X;
		public GPUIntegerCoordinate Y;
		public GPUIntegerCoordinate Z;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class GPUExtent3DDict
{
		public required GPUIntegerCoordinate Width;
		public GPUIntegerCoordinate Height;
		public GPUIntegerCoordinate DepthOrArrayLayers;
}


///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorHid/NavigatorHid.generated.xml' path='docs/NavigatorHid/*'/>
	public HID Hid { get; }
}

///<include file='Utils/Docs/WorkerNavigator/WorkerNavigator.generated.xml' path='docs/WorkerNavigator/*'/>
public partial class WorkerNavigator
{
	///<include file='Utils/Docs/WorkerNavigatorHid/WorkerNavigatorHid.generated.xml' path='docs/WorkerNavigatorHid/*'/>
	public HID Hid { get; }
}

///<include file='Utils/Docs/HID/HID.generated.xml' path='docs/HID/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class HID : EventTarget
{
		public EventHandler Onconnect { get; set; }
		public EventHandler Ondisconnect { get; set; }
	///<include file='Utils/Docs/HIDGetDevices/HIDGetDevices.generated.xml' path='docs/HIDGetDevices/*'/>
	public Task<List<HIDDevice>> GetDevices() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HIDRequestDevice/HIDRequestDevice.generated.xml' path='docs/HIDRequestDevice/*'/>
	public Task<List<HIDDevice>> RequestDevice(HIDDeviceRequestOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HIDDeviceRequestOptions
{
		public required List<HIDDeviceFilter> Filters;
		public List<HIDDeviceFilter> ExclusionFilters;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HIDDeviceFilter
{
		public ulong VendorId;
		public ushort ProductId;
		public ushort UsagePage;
		public ushort Usage;
}

///<include file='Utils/Docs/HIDDevice/HIDDevice.generated.xml' path='docs/HIDDevice/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class HIDDevice : EventTarget
{
		public EventHandler Oninputreport { get; set; }
	///<include file='Utils/Docs/HIDDeviceOpened/HIDDeviceOpened.generated.xml' path='docs/HIDDeviceOpened/*'/>
	public bool Opened { get; }
	///<include file='Utils/Docs/HIDDeviceVendorId/HIDDeviceVendorId.generated.xml' path='docs/HIDDeviceVendorId/*'/>
	public ushort VendorId { get; }
	///<include file='Utils/Docs/HIDDeviceProductId/HIDDeviceProductId.generated.xml' path='docs/HIDDeviceProductId/*'/>
	public ushort ProductId { get; }
	///<include file='Utils/Docs/HIDDeviceProductName/HIDDeviceProductName.generated.xml' path='docs/HIDDeviceProductName/*'/>
	public DOMString ProductName { get; }
	///<include file='Utils/Docs/HIDDeviceCollections/HIDDeviceCollections.generated.xml' path='docs/HIDDeviceCollections/*'/>
	public HIDCollectionInfo[] Collections { get; }
	///<include file='Utils/Docs/HIDDeviceOpen/HIDDeviceOpen.generated.xml' path='docs/HIDDeviceOpen/*'/>
	public Task<Undefined> Open() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HIDDeviceClose/HIDDeviceClose.generated.xml' path='docs/HIDDeviceClose/*'/>
	public Task<Undefined> Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HIDDeviceForget/HIDDeviceForget.generated.xml' path='docs/HIDDeviceForget/*'/>
	public Task<Undefined> Forget() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HIDDeviceSendReport/HIDDeviceSendReport.generated.xml' path='docs/HIDDeviceSendReport/*'/>
	public Task<Undefined> SendReport(byte reportId, BufferSource data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HIDDeviceSendFeatureReport/HIDDeviceSendFeatureReport.generated.xml' path='docs/HIDDeviceSendFeatureReport/*'/>
	public Task<Undefined> SendFeatureReport(byte reportId, BufferSource data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/HIDDeviceReceiveFeatureReport/HIDDeviceReceiveFeatureReport.generated.xml' path='docs/HIDDeviceReceiveFeatureReport/*'/>
	public Task<Unsupported /*DataView*/> ReceiveFeatureReport(byte reportId) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/HIDConnectionEvent/HIDConnectionEvent.generated.xml' path='docs/HIDConnectionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class HIDConnectionEvent : Event
{
	///<include file='Utils/Docs/HIDConnectionEventHIDConnectionEvent/HIDConnectionEventHIDConnectionEvent.generated.xml' path='docs/HIDConnectionEventHIDConnectionEvent/*'/>
	public HIDConnectionEvent(DOMString type, HIDConnectionEventInit eventInitDict) { }
	///<include file='Utils/Docs/HIDConnectionEventDevice/HIDConnectionEventDevice.generated.xml' path='docs/HIDConnectionEventDevice/*'/>
	public HIDDevice Device { get; }
	public HIDConnectionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HIDConnectionEventInit : EventInit
{
		public required HIDDevice Device;
}

///<include file='Utils/Docs/HIDInputReportEvent/HIDInputReportEvent.generated.xml' path='docs/HIDInputReportEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class HIDInputReportEvent : Event
{
		public HIDInputReportEvent(DOMString type, HIDInputReportEventInit eventInitDict) { }
	///<include file='Utils/Docs/HIDInputReportEventDevice/HIDInputReportEventDevice.generated.xml' path='docs/HIDInputReportEventDevice/*'/>
	public HIDDevice Device { get; }
	///<include file='Utils/Docs/HIDInputReportEventReportId/HIDInputReportEventReportId.generated.xml' path='docs/HIDInputReportEventReportId/*'/>
	public byte ReportId { get; }
	///<include file='Utils/Docs/HIDInputReportEventData/HIDInputReportEventData.generated.xml' path='docs/HIDInputReportEventData/*'/>
	public Unsupported /*DataView*/ Data { get; }
	public HIDInputReportEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HIDInputReportEventInit : EventInit
{
		public required HIDDevice Device;
		public required byte ReportId;
		public required Unsupported /*DataView*/ Data;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HIDCollectionInfo
{
		public ushort UsagePage;
		public ushort Usage;
		public byte Type;
		public List<HIDCollectionInfo> Children;
		public List<HIDReportInfo> InputReports;
		public List<HIDReportInfo> OutputReports;
		public List<HIDReportInfo> FeatureReports;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HIDReportInfo
{
		public byte ReportId;
		public List<HIDReportItem> Items;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class HIDReportItem
{
		public bool IsAbsolute;
		public bool IsArray;
		public bool IsBufferedBytes;
		public bool IsConstant;
		public bool IsLinear;
		public bool IsRange;
		public bool IsVolatile;
		public bool HasNull;
		public bool HasPreferredState;
		public bool Wrap;
		public List<ulong> Usages;
		public ulong UsageMinimum;
		public ulong UsageMaximum;
		public ushort ReportSize;
		public ushort ReportCount;
		public byte UnitExponent;
		public HIDUnitSystem UnitSystem;
		public byte UnitFactorLengthExponent;
		public byte UnitFactorMassExponent;
		public byte UnitFactorTimeExponent;
		public byte UnitFactorTemperatureExponent;
		public byte UnitFactorCurrentExponent;
		public byte UnitFactorLuminousIntensityExponent;
		public long LogicalMinimum;
		public long LogicalMaximum;
		public long PhysicalMinimum;
		public long PhysicalMaximum;
		public List<DOMString> Strings;
}

///<include file='Utils/Docs/DOMException/DOMException.generated.xml' path='docs/DOMException/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class DOMException
{
	///<include file='Utils/Docs/DOMExceptionDOMException/DOMExceptionDOMException.generated.xml' path='docs/DOMExceptionDOMException/*'/>
	public DOMException(DOMString message, DOMString name) { }
	///<include file='Utils/Docs/DOMExceptionName/DOMExceptionName.generated.xml' path='docs/DOMExceptionName/*'/>
	public DOMString Name { get; }
	///<include file='Utils/Docs/DOMExceptionMessage/DOMExceptionMessage.generated.xml' path='docs/DOMExceptionMessage/*'/>
	public DOMString Message { get; }
	///<include file='Utils/Docs/DOMExceptionCode/DOMExceptionCode.generated.xml' path='docs/DOMExceptionCode/*'/>
	public ushort Code { get; }
		public const ushort INDEX_SIZE_ERR = 1;
		public const ushort DOMSTRING_SIZE_ERR = 2;
		public const ushort HIERARCHY_REQUEST_ERR = 3;
		public const ushort WRONG_DOCUMENT_ERR = 4;
		public const ushort INVALID_CHARACTER_ERR = 5;
		public const ushort NO_DATA_ALLOWED_ERR = 6;
		public const ushort NO_MODIFICATION_ALLOWED_ERR = 7;
		public const ushort NOT_FOUND_ERR = 8;
		public const ushort NOT_SUPPORTED_ERR = 9;
		public const ushort INUSE_ATTRIBUTE_ERR = 10;
		public const ushort INVALID_STATE_ERR = 11;
		public const ushort SYNTAX_ERR = 12;
		public const ushort INVALID_MODIFICATION_ERR = 13;
		public const ushort NAMESPACE_ERR = 14;
		public const ushort INVALID_ACCESS_ERR = 15;
		public const ushort VALIDATION_ERR = 16;
		public const ushort TYPE_MISMATCH_ERR = 17;
		public const ushort SECURITY_ERR = 18;
		public const ushort NETWORK_ERR = 19;
		public const ushort ABORT_ERR = 20;
		public const ushort URL_MISMATCH_ERR = 21;
		public const ushort QUOTA_EXCEEDED_ERR = 22;
		public const ushort TIMEOUT_ERR = 23;
		public const ushort INVALID_NODE_TYPE_ERR = 24;
		public const ushort DATA_CLONE_ERR = 25;
	public DOMException() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MidiPermissionDescriptor : PermissionDescriptor
{
		public bool Sysex;
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorRequestMIDIAccess/NavigatorRequestMIDIAccess.generated.xml' path='docs/NavigatorRequestMIDIAccess/*'/>
	public Task<MIDIAccess> RequestMIDIAccess(MIDIOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIOptions
{
		public bool Sysex;
		public bool Software;
}

///<include file='Utils/Docs/MIDIInputMap/MIDIInputMap.generated.xml' path='docs/MIDIInputMap/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIInputMap
{
	
}

///<include file='Utils/Docs/MIDIOutputMap/MIDIOutputMap.generated.xml' path='docs/MIDIOutputMap/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIOutputMap
{
	
}

///<include file='Utils/Docs/MIDIAccess/MIDIAccess.generated.xml' path='docs/MIDIAccess/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIAccess : EventTarget
{
	///<include file='Utils/Docs/MIDIAccessInputs/MIDIAccessInputs.generated.xml' path='docs/MIDIAccessInputs/*'/>
	public MIDIInputMap Inputs { get; }
	///<include file='Utils/Docs/MIDIAccessOutputs/MIDIAccessOutputs.generated.xml' path='docs/MIDIAccessOutputs/*'/>
	public MIDIOutputMap Outputs { get; }
		public EventHandler Onstatechange { get; set; }
	///<include file='Utils/Docs/MIDIAccessSysexEnabled/MIDIAccessSysexEnabled.generated.xml' path='docs/MIDIAccessSysexEnabled/*'/>
	public bool SysexEnabled { get; }
}

///<include file='Utils/Docs/MIDIPort/MIDIPort.generated.xml' path='docs/MIDIPort/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIPort : EventTarget
{
	///<include file='Utils/Docs/MIDIPortId/MIDIPortId.generated.xml' path='docs/MIDIPortId/*'/>
	public DOMString Id { get; }
	///<include file='Utils/Docs/MIDIPortManufacturer/MIDIPortManufacturer.generated.xml' path='docs/MIDIPortManufacturer/*'/>
	public DOMString? Manufacturer { get; }
	///<include file='Utils/Docs/MIDIPortName/MIDIPortName.generated.xml' path='docs/MIDIPortName/*'/>
	public DOMString? Name { get; }
	///<include file='Utils/Docs/MIDIPortType/MIDIPortType.generated.xml' path='docs/MIDIPortType/*'/>
	public MIDIPortType Type { get; }
	///<include file='Utils/Docs/MIDIPortVersion/MIDIPortVersion.generated.xml' path='docs/MIDIPortVersion/*'/>
	public DOMString? Version { get; }
	///<include file='Utils/Docs/MIDIPortState/MIDIPortState.generated.xml' path='docs/MIDIPortState/*'/>
	public MIDIPortDeviceState State { get; }
	///<include file='Utils/Docs/MIDIPortConnection/MIDIPortConnection.generated.xml' path='docs/MIDIPortConnection/*'/>
	public MIDIPortConnectionState Connection { get; }
		public EventHandler Onstatechange { get; set; }
	///<include file='Utils/Docs/MIDIPortOpen/MIDIPortOpen.generated.xml' path='docs/MIDIPortOpen/*'/>
	public Task<MIDIPort> Open() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MIDIPortClose/MIDIPortClose.generated.xml' path='docs/MIDIPortClose/*'/>
	public Task<MIDIPort> Close() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MIDIInput/MIDIInput.generated.xml' path='docs/MIDIInput/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIInput : MIDIPort
{
		public EventHandler Onmidimessage { get; set; }
}

///<include file='Utils/Docs/MIDIOutput/MIDIOutput.generated.xml' path='docs/MIDIOutput/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIOutput : MIDIPort
{
	///<include file='Utils/Docs/MIDIOutputSend/MIDIOutputSend.generated.xml' path='docs/MIDIOutputSend/*'/>
	public Undefined Send(List<byte> data, DOMHighResTimeStamp timestamp) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/MIDIOutputClear/MIDIOutputClear.generated.xml' path='docs/MIDIOutputClear/*'/>
	public Undefined Clear() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/MIDIMessageEvent/MIDIMessageEvent.generated.xml' path='docs/MIDIMessageEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIMessageEvent : Event
{
	///<include file='Utils/Docs/MIDIMessageEventMIDIMessageEvent/MIDIMessageEventMIDIMessageEvent.generated.xml' path='docs/MIDIMessageEventMIDIMessageEvent/*'/>
	public MIDIMessageEvent(DOMString type, MIDIMessageEventInit eventInitDict) { }
	///<include file='Utils/Docs/MIDIMessageEventData/MIDIMessageEventData.generated.xml' path='docs/MIDIMessageEventData/*'/>
	public System.Byte? Data { get; }
	public MIDIMessageEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIMessageEventInit : EventInit
{
		public System.Byte Data;
}

///<include file='Utils/Docs/MIDIConnectionEvent/MIDIConnectionEvent.generated.xml' path='docs/MIDIConnectionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIConnectionEvent : Event
{
	///<include file='Utils/Docs/MIDIConnectionEventMIDIConnectionEvent/MIDIConnectionEventMIDIConnectionEvent.generated.xml' path='docs/MIDIConnectionEventMIDIConnectionEvent/*'/>
	public MIDIConnectionEvent(DOMString type, MIDIConnectionEventInit eventInitDict) { }
	///<include file='Utils/Docs/MIDIConnectionEventPort/MIDIConnectionEventPort.generated.xml' path='docs/MIDIConnectionEventPort/*'/>
	public MIDIPort? Port { get; }
	public MIDIConnectionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MIDIConnectionEventInit : EventInit
{
		public MIDIPort Port;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLContextOptions
{
		public MLDeviceType DeviceType;
		public MLPowerPreference PowerPreference;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ML
{
		public Task<MLContext> CreateContext(MLContextOptions options) { throw new System.NotImplementedException(); }
		public Task<MLContext> CreateContext(GPUDevice gpuDevice) { throw new System.NotImplementedException(); }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLContextLostInfo
{
		public DOMString Message;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLContext
{
		public Undefined Dispatch(MLGraph graph, MLNamedTensors inputs, MLNamedTensors outputs) { throw new System.NotImplementedException(); }
		public Task<MLTensor> CreateTensor(MLTensorDescriptor descriptor) { throw new System.NotImplementedException(); }
		public Task<byte[]> ReadTensor(MLTensor tensor) { throw new System.NotImplementedException(); }
		public Task<Undefined> ReadTensor(MLTensor tensor, AllowSharedBufferSource outputData) { throw new System.NotImplementedException(); }
		public Undefined WriteTensor(MLTensor tensor, AllowSharedBufferSource inputData) { throw new System.NotImplementedException(); }
		public MLOpSupportLimits OpSupportLimits() { throw new System.NotImplementedException(); }
		public Undefined Destroy() { throw new System.NotImplementedException(); }
		public Task<MLContextLostInfo> Lost { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLOpSupportLimits
{
		public MLInputOperandLayout PreferredInputLayout;
		public MLSupportLimits Input;
		public MLSupportLimits Constant;
		public MLSupportLimits Output;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLSupportLimits
{
		public List<MLOperandDataType> DataTypes;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLBinarySupportLimits
{
		public MLSupportLimits A;
		public MLSupportLimits B;
		public MLSupportLimits Output;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLSingleInputSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Output;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLGraph
{
		public Undefined Destroy() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLOperandDescriptor
{
		public required MLOperandDataType DataType;
		public required List<ulong> Shape;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLOperand
{
		public MLOperandDataType DataType { get; }
		public ulong[] Shape { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLOperatorOptions
{
		public USVString Label;
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLTensorDescriptor : MLOperandDescriptor
{
		public bool Readable;
		public bool Writable;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLTensor
{
		public MLOperandDataType DataType { get; }
		public ulong[] Shape { get; }
		public bool Readable { get; }
		public bool Writable { get; }
		public Undefined Destroy() { throw new System.NotImplementedException(); }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLGraphBuilder
{
		public MLGraphBuilder(MLContext context) { }
		public MLOperand Input(USVString name, MLOperandDescriptor descriptor) { throw new System.NotImplementedException(); }
		public MLOperand Constant(MLOperandDescriptor descriptor, AllowSharedBufferSource buffer) { throw new System.NotImplementedException(); }
		public MLOperand Constant(MLOperandDataType type, MLNumber value) { throw new System.NotImplementedException(); }
		public Task<MLGraph> Build(MLNamedOperands outputs) { throw new System.NotImplementedException(); }
	public MLGraphBuilder() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLArgMinMaxOptions : MLOperatorOptions
{
		public bool KeepDimensions;
		public MLOperandDataType OutputDataType;
}

public partial class MLGraphBuilder
{
		public MLOperand ArgMin(MLOperand input, ulong axis, MLArgMinMaxOptions options) { throw new System.NotImplementedException(); }
		public MLOperand ArgMax(MLOperand input, ulong axis, MLArgMinMaxOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits ArgMin;
		public MLSingleInputSupportLimits ArgMax;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLBatchNormalizationOptions : MLOperatorOptions
{
		public MLOperand Scale;
		public MLOperand Bias;
		public ulong Axis;
		public Number Epsilon;
}

public partial class MLGraphBuilder
{
		public MLOperand BatchNormalization(MLOperand input, MLOperand mean, MLOperand variance, MLBatchNormalizationOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLBatchNormalizationSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Mean;
		public MLSupportLimits Variance;
		public MLSupportLimits Scale;
		public MLSupportLimits Bias;
		public MLSupportLimits Output;
}

public partial class MLOpSupportLimits
{
		public MLBatchNormalizationSupportLimits BatchNormalization;
}

public partial class MLGraphBuilder
{
		public MLOperand Cast(MLOperand input, MLOperandDataType type, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Cast;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLClampOptions : MLOperatorOptions
{
		public MLNumber MinValue;
		public MLNumber MaxValue;
}

public partial class MLGraphBuilder
{
		public MLOperand Clamp(MLOperand input, MLClampOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Clamp;
}

public partial class MLGraphBuilder
{
		public MLOperand Concat(List<MLOperand> inputs, ulong axis, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLConcatSupportLimits
{
		public MLSupportLimits Inputs;
		public MLSupportLimits Output;
}

public partial class MLOpSupportLimits
{
		public MLConcatSupportLimits Concat;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLConv2dOptions : MLOperatorOptions
{
		public List<ulong> Padding;
		public List<ulong> Strides;
		public List<ulong> Dilations;
		public ulong Groups;
		public MLInputOperandLayout InputLayout;
		public MLConv2dFilterOperandLayout FilterLayout;
		public MLOperand Bias;
}

public partial class MLGraphBuilder
{
		public MLOperand Conv2d(MLOperand input, MLOperand filter, MLConv2dOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLConv2dSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Filter;
		public MLSupportLimits Bias;
		public MLSupportLimits Output;
}

public partial class MLOpSupportLimits
{
		public MLConv2dSupportLimits Conv2d;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLConvTranspose2dOptions : MLOperatorOptions
{
		public List<ulong> Padding;
		public List<ulong> Strides;
		public List<ulong> Dilations;
		public List<ulong> OutputPadding;
		public List<ulong> OutputSizes;
		public ulong Groups;
		public MLInputOperandLayout InputLayout;
		public MLConvTranspose2dFilterOperandLayout FilterLayout;
		public MLOperand Bias;
}

public partial class MLGraphBuilder
{
		public MLOperand ConvTranspose2d(MLOperand input, MLOperand filter, MLConvTranspose2dOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLConv2dSupportLimits ConvTranspose2d;
}

public partial class MLGraphBuilder
{
		public MLOperand Add(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Sub(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Mul(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Div(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Max(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Min(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Pow(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLBinarySupportLimits Add;
		public MLBinarySupportLimits Sub;
		public MLBinarySupportLimits Mul;
		public MLBinarySupportLimits Div;
		public MLBinarySupportLimits Max;
		public MLBinarySupportLimits Min;
		public MLBinarySupportLimits Pow;
}

public partial class MLGraphBuilder
{
		public MLOperand Equal(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Greater(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand GreaterOrEqual(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Lesser(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand LesserOrEqual(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand LogicalNot(MLOperand a, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLLogicalNotSupportLimits
{
		public MLSupportLimits A;
		public MLSupportLimits Output;
}

public partial class MLOpSupportLimits
{
		public MLBinarySupportLimits Equal;
		public MLBinarySupportLimits Greater;
		public MLBinarySupportLimits GreaterOrEqual;
		public MLBinarySupportLimits Lesser;
		public MLBinarySupportLimits LesserOrEqual;
		public MLLogicalNotSupportLimits LogicalNot;
}

public partial class MLGraphBuilder
{
		public MLOperand Abs(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Ceil(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Cos(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Erf(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Exp(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Floor(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Identity(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Log(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Neg(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Reciprocal(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Sin(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Sqrt(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
		public MLOperand Tan(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Abs;
		public MLSingleInputSupportLimits Ceil;
		public MLSingleInputSupportLimits Cos;
		public MLSingleInputSupportLimits Erf;
		public MLSingleInputSupportLimits Exp;
		public MLSingleInputSupportLimits Floor;
		public MLSingleInputSupportLimits Identity;
		public MLSingleInputSupportLimits Log;
		public MLSingleInputSupportLimits Neg;
		public MLSingleInputSupportLimits Reciprocal;
		public MLSingleInputSupportLimits Sin;
		public MLSingleInputSupportLimits Sqrt;
		public MLSingleInputSupportLimits Tan;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLEluOptions : MLOperatorOptions
{
		public Number Alpha;
}

public partial class MLGraphBuilder
{
		public MLOperand Elu(MLOperand input, MLEluOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Elu;
}

public partial class MLGraphBuilder
{
		public MLOperand Expand(MLOperand input, List<ulong> newShape, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Expand;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLGatherOptions : MLOperatorOptions
{
		public ulong Axis;
}

public partial class MLGraphBuilder
{
		public MLOperand Gather(MLOperand input, MLOperand indices, MLGatherOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLGatherSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Indices;
		public MLSupportLimits Output;
}

public partial class MLOpSupportLimits
{
		public MLGatherSupportLimits Gather;
}

public partial class MLGraphBuilder
{
		public MLOperand Gelu(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Gelu;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLGemmOptions : MLOperatorOptions
{
		public MLOperand C;
		public Number Alpha;
		public Number Beta;
		public bool ATranspose;
		public bool BTranspose;
}

public partial class MLGraphBuilder
{
		public MLOperand Gemm(MLOperand a, MLOperand b, MLGemmOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLGemmSupportLimits
{
		public MLSupportLimits A;
		public MLSupportLimits B;
		public MLSupportLimits C;
		public MLSupportLimits Output;
}

public partial class MLOpSupportLimits
{
		public MLGemmSupportLimits Gemm;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLGruOptions : MLOperatorOptions
{
		public MLOperand Bias;
		public MLOperand RecurrentBias;
		public MLOperand InitialHiddenState;
		public bool ResetAfter;
		public bool ReturnSequence;
		public MLRecurrentNetworkDirection Direction;
		public MLGruWeightLayout Layout;
		public List<MLRecurrentNetworkActivation> Activations;
}

public partial class MLGraphBuilder
{
		public List<MLOperand> Gru(MLOperand input, MLOperand weight, MLOperand recurrentWeight, ulong steps, ulong hiddenSize, MLGruOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLGruSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Weight;
		public MLSupportLimits RecurrentWeight;
		public MLSupportLimits Bias;
		public MLSupportLimits RecurrentBias;
		public MLSupportLimits InitialHiddenState;
		public MLSupportLimits Outputs;
}

public partial class MLOpSupportLimits
{
		public MLGruSupportLimits Gru;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLGruCellOptions : MLOperatorOptions
{
		public MLOperand Bias;
		public MLOperand RecurrentBias;
		public bool ResetAfter;
		public MLGruWeightLayout Layout;
		public List<MLRecurrentNetworkActivation> Activations;
}

public partial class MLGraphBuilder
{
		public MLOperand GruCell(MLOperand input, MLOperand weight, MLOperand recurrentWeight, MLOperand hiddenState, ulong hiddenSize, MLGruCellOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLGruCellSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Weight;
		public MLSupportLimits RecurrentWeight;
		public MLSupportLimits HiddenState;
		public MLSupportLimits Bias;
		public MLSupportLimits RecurrentBias;
		public MLSupportLimits Output;
}

public partial class MLOpSupportLimits
{
		public MLGruCellSupportLimits GruCell;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLHardSigmoidOptions : MLOperatorOptions
{
		public Number Alpha;
		public Number Beta;
}

public partial class MLGraphBuilder
{
		public MLOperand HardSigmoid(MLOperand input, MLHardSigmoidOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits HardSigmoid;
}

public partial class MLGraphBuilder
{
		public MLOperand HardSwish(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits HardSwish;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLInstanceNormalizationOptions : MLOperatorOptions
{
		public MLOperand Scale;
		public MLOperand Bias;
		public Number Epsilon;
		public MLInputOperandLayout Layout;
}

public partial class MLGraphBuilder
{
		public MLOperand InstanceNormalization(MLOperand input, MLInstanceNormalizationOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLNormalizationSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Scale;
		public MLSupportLimits Bias;
		public MLSupportLimits Output;
}

public partial class MLOpSupportLimits
{
		public MLNormalizationSupportLimits InstanceNormalization;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLLayerNormalizationOptions : MLOperatorOptions
{
		public MLOperand Scale;
		public MLOperand Bias;
		public List<ulong> Axes;
		public Number Epsilon;
}

public partial class MLGraphBuilder
{
		public MLOperand LayerNormalization(MLOperand input, MLLayerNormalizationOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLNormalizationSupportLimits LayerNormalization;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLLeakyReluOptions : MLOperatorOptions
{
		public Number Alpha;
}

public partial class MLGraphBuilder
{
		public MLOperand LeakyRelu(MLOperand input, MLLeakyReluOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits LeakyRelu;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLLinearOptions : MLOperatorOptions
{
		public Number Alpha;
		public Number Beta;
}

public partial class MLGraphBuilder
{
		public MLOperand Linear(MLOperand input, MLLinearOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Linear;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLLstmOptions : MLOperatorOptions
{
		public MLOperand Bias;
		public MLOperand RecurrentBias;
		public MLOperand PeepholeWeight;
		public MLOperand InitialHiddenState;
		public MLOperand InitialCellState;
		public bool ReturnSequence;
		public MLRecurrentNetworkDirection Direction;
		public MLLstmWeightLayout Layout;
		public List<MLRecurrentNetworkActivation> Activations;
}

public partial class MLGraphBuilder
{
		public List<MLOperand> Lstm(MLOperand input, MLOperand weight, MLOperand recurrentWeight, ulong steps, ulong hiddenSize, MLLstmOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLLstmSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Weight;
		public MLSupportLimits RecurrentWeight;
		public MLSupportLimits Bias;
		public MLSupportLimits RecurrentBias;
		public MLSupportLimits PeepholeWeight;
		public MLSupportLimits InitialHiddenState;
		public MLSupportLimits InitialCellState;
		public MLSupportLimits Outputs;
}

public partial class MLOpSupportLimits
{
		public MLLstmSupportLimits Lstm;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLLstmCellOptions : MLOperatorOptions
{
		public MLOperand Bias;
		public MLOperand RecurrentBias;
		public MLOperand PeepholeWeight;
		public MLLstmWeightLayout Layout;
		public List<MLRecurrentNetworkActivation> Activations;
}

public partial class MLGraphBuilder
{
		public List<MLOperand> LstmCell(MLOperand input, MLOperand weight, MLOperand recurrentWeight, MLOperand hiddenState, MLOperand cellState, ulong hiddenSize, MLLstmCellOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLLstmCellSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Weight;
		public MLSupportLimits RecurrentWeight;
		public MLSupportLimits HiddenState;
		public MLSupportLimits CellState;
		public MLSupportLimits Bias;
		public MLSupportLimits RecurrentBias;
		public MLSupportLimits PeepholeWeight;
		public MLSupportLimits Outputs;
}

public partial class MLOpSupportLimits
{
		public MLLstmCellSupportLimits LstmCell;
}

public partial class MLGraphBuilder
{
		public MLOperand Matmul(MLOperand a, MLOperand b, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLBinarySupportLimits Matmul;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLPadOptions : MLOperatorOptions
{
		public MLPaddingMode Mode;
		public MLNumber Value;
}

public partial class MLGraphBuilder
{
		public MLOperand Pad(MLOperand input, List<ulong> beginningPadding, List<ulong> endingPadding, MLPadOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Pad;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLPool2dOptions : MLOperatorOptions
{
		public List<ulong> WindowDimensions;
		public List<ulong> Padding;
		public List<ulong> Strides;
		public List<ulong> Dilations;
		public MLInputOperandLayout Layout;
		public MLRoundingType RoundingType;
		public List<ulong> OutputSizes;
}

public partial class MLGraphBuilder
{
		public MLOperand AveragePool2d(MLOperand input, MLPool2dOptions options) { throw new System.NotImplementedException(); }
		public MLOperand L2Pool2d(MLOperand input, MLPool2dOptions options) { throw new System.NotImplementedException(); }
		public MLOperand MaxPool2d(MLOperand input, MLPool2dOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits AveragePool2d;
		public MLSingleInputSupportLimits L2Pool2d;
		public MLSingleInputSupportLimits MaxPool2d;
}

public partial class MLGraphBuilder
{
		public MLOperand Prelu(MLOperand input, MLOperand slope, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLPreluSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Slope;
		public MLSupportLimits Output;
}

public partial class MLOpSupportLimits
{
		public MLPreluSupportLimits Prelu;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLReduceOptions : MLOperatorOptions
{
		public List<ulong> Axes;
		public bool KeepDimensions;
}

public partial class MLGraphBuilder
{
		public MLOperand ReduceL1(MLOperand input, MLReduceOptions options) { throw new System.NotImplementedException(); }
		public MLOperand ReduceL2(MLOperand input, MLReduceOptions options) { throw new System.NotImplementedException(); }
		public MLOperand ReduceLogSum(MLOperand input, MLReduceOptions options) { throw new System.NotImplementedException(); }
		public MLOperand ReduceLogSumExp(MLOperand input, MLReduceOptions options) { throw new System.NotImplementedException(); }
		public MLOperand ReduceMax(MLOperand input, MLReduceOptions options) { throw new System.NotImplementedException(); }
		public MLOperand ReduceMean(MLOperand input, MLReduceOptions options) { throw new System.NotImplementedException(); }
		public MLOperand ReduceMin(MLOperand input, MLReduceOptions options) { throw new System.NotImplementedException(); }
		public MLOperand ReduceProduct(MLOperand input, MLReduceOptions options) { throw new System.NotImplementedException(); }
		public MLOperand ReduceSum(MLOperand input, MLReduceOptions options) { throw new System.NotImplementedException(); }
		public MLOperand ReduceSumSquare(MLOperand input, MLReduceOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits ReduceL1;
		public MLSingleInputSupportLimits ReduceL2;
		public MLSingleInputSupportLimits ReduceLogSum;
		public MLSingleInputSupportLimits ReduceLogSumExp;
		public MLSingleInputSupportLimits ReduceMax;
		public MLSingleInputSupportLimits ReduceMean;
		public MLSingleInputSupportLimits ReduceMin;
		public MLSingleInputSupportLimits ReduceProduct;
		public MLSingleInputSupportLimits ReduceSum;
		public MLSingleInputSupportLimits ReduceSumSquare;
}

public partial class MLGraphBuilder
{
		public MLOperand Relu(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Relu;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLResample2dOptions : MLOperatorOptions
{
		public MLInterpolationMode Mode;
		public List<Number> Scales;
		public List<ulong> Sizes;
		public List<ulong> Axes;
}

public partial class MLGraphBuilder
{
		public MLOperand Resample2d(MLOperand input, MLResample2dOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Resample2d;
}

public partial class MLGraphBuilder
{
		public MLOperand Reshape(MLOperand input, List<ulong> newShape, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Reshape;
}

public partial class MLGraphBuilder
{
		public MLOperand Sigmoid(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Sigmoid;
}

public partial class MLGraphBuilder
{
		public MLOperand Slice(MLOperand input, List<ulong> starts, List<ulong> sizes, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Slice;
}

public partial class MLGraphBuilder
{
		public MLOperand Softmax(MLOperand input, ulong axis, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Softmax;
}

public partial class MLGraphBuilder
{
		public MLOperand Softplus(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Softplus;
}

public partial class MLGraphBuilder
{
		public MLOperand Softsign(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Softsign;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLSplitOptions : MLOperatorOptions
{
		public ulong Axis;
}

public partial class MLGraphBuilder
{
		public List<MLOperand> Split(MLOperand input, Union227 splits, MLSplitOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLSplitSupportLimits
{
		public MLSupportLimits Input;
		public MLSupportLimits Outputs;
}

public partial class MLOpSupportLimits
{
		public MLSplitSupportLimits Split;
}

public partial class MLGraphBuilder
{
		public MLOperand Tanh(MLOperand input, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Tanh;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLTransposeOptions : MLOperatorOptions
{
		public List<ulong> Permutation;
}

public partial class MLGraphBuilder
{
		public MLOperand Transpose(MLOperand input, MLTransposeOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Transpose;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLTriangularOptions : MLOperatorOptions
{
		public bool Upper;
		public long Diagonal;
}

public partial class MLGraphBuilder
{
		public MLOperand Triangular(MLOperand input, MLTriangularOptions options) { throw new System.NotImplementedException(); }
}

public partial class MLOpSupportLimits
{
		public MLSingleInputSupportLimits Triangular;
}

public partial class MLGraphBuilder
{
		public MLOperand Where(MLOperand condition, MLOperand trueValue, MLOperand falseValue, MLOperatorOptions options) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class MLWhereSupportLimits
{
		public MLSupportLimits Condition;
		public MLSupportLimits TrueValue;
		public MLSupportLimits FalseValue;
		public MLSupportLimits Output;
}

public partial class MLOpSupportLimits
{
		public MLWhereSupportLimits Where;
}


///<include file='Utils/Docs/RTCRtpSender/RTCRtpSender.generated.xml' path='docs/RTCRtpSender/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpSender
{
	///<include file='Utils/Docs/RTCRtpSenderTransform/RTCRtpSenderTransform.generated.xml' path='docs/RTCRtpSenderTransform/*'/>
	public RTCRtpTransform? Transform { get; set; }
}

///<include file='Utils/Docs/RTCRtpReceiver/RTCRtpReceiver.generated.xml' path='docs/RTCRtpReceiver/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpReceiver
{
	///<include file='Utils/Docs/RTCRtpReceiverTransform/RTCRtpReceiverTransform.generated.xml' path='docs/RTCRtpReceiverTransform/*'/>
	public RTCRtpTransform? Transform { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SFrameTransformOptions
{
		public SFrameTransformRole Role;
}



[To(ToAttribute.FirstCharToLowerCase)]
public partial class SFrameTransform : EventTarget, GenericTransformStream
{
		public SFrameTransform(SFrameTransformOptions options) { }
		public Task<Undefined> SetEncryptionKey(CryptoKey key, CryptoKeyID keyID) { throw new System.NotImplementedException(); }
		public EventHandler Onerror { get; set; }
	public SFrameTransform() { }
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class SFrameTransformErrorEvent : Event
{
		public SFrameTransformErrorEvent(DOMString type, SFrameTransformErrorEventInit eventInitDict) { }
		public SFrameTransformErrorEventType ErrorType { get; }
		public CryptoKeyID? KeyID { get; }
		public dynamic Frame { get; }
	public SFrameTransformErrorEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class SFrameTransformErrorEventInit : EventInit
{
		public required SFrameTransformErrorEventType ErrorType;
		public required dynamic Frame;
		public CryptoKeyID? KeyID;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCEncodedVideoFrameMetadata
{
		public ulong FrameId;
		public List<ulong> Dependencies;
		public ushort Width;
		public ushort Height;
		public ulong SpatialIndex;
		public ulong TemporalIndex;
		public ulong SynchronizationSource;
		public byte PayloadType;
		public List<ulong> ContributingSources;
		public long Timestamp;
		public ulong RtpTimestamp;
		public DOMString MimeType;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCEncodedVideoFrameOptions
{
		public RTCEncodedVideoFrameMetadata Metadata;
}

///<include file='Utils/Docs/RTCEncodedVideoFrame/RTCEncodedVideoFrame.generated.xml' path='docs/RTCEncodedVideoFrame/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCEncodedVideoFrame
{
		public RTCEncodedVideoFrame(RTCEncodedVideoFrame originalFrame, RTCEncodedVideoFrameOptions options) { }
	///<include file='Utils/Docs/RTCEncodedVideoFrameType/RTCEncodedVideoFrameType.generated.xml' path='docs/RTCEncodedVideoFrameType/*'/>
	public RTCEncodedVideoFrameType Type { get; }
	///<include file='Utils/Docs/RTCEncodedVideoFrameData/RTCEncodedVideoFrameData.generated.xml' path='docs/RTCEncodedVideoFrameData/*'/>
	public byte[] Data { get; set; }
	///<include file='Utils/Docs/RTCEncodedVideoFrameGetMetadata/RTCEncodedVideoFrameGetMetadata.generated.xml' path='docs/RTCEncodedVideoFrameGetMetadata/*'/>
	public RTCEncodedVideoFrameMetadata GetMetadata() { throw new System.NotImplementedException(); }
	public RTCEncodedVideoFrame() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCEncodedAudioFrameMetadata
{
		public ulong SynchronizationSource;
		public byte PayloadType;
		public List<ulong> ContributingSources;
		public Number SequenceNumber;
		public ulong RtpTimestamp;
		public DOMString MimeType;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCEncodedAudioFrameOptions
{
		public RTCEncodedAudioFrameMetadata Metadata;
}

///<include file='Utils/Docs/RTCEncodedAudioFrame/RTCEncodedAudioFrame.generated.xml' path='docs/RTCEncodedAudioFrame/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCEncodedAudioFrame
{
		public RTCEncodedAudioFrame(RTCEncodedAudioFrame originalFrame, RTCEncodedAudioFrameOptions options) { }
	///<include file='Utils/Docs/RTCEncodedAudioFrameData/RTCEncodedAudioFrameData.generated.xml' path='docs/RTCEncodedAudioFrameData/*'/>
	public byte[] Data { get; set; }
	///<include file='Utils/Docs/RTCEncodedAudioFrameGetMetadata/RTCEncodedAudioFrameGetMetadata.generated.xml' path='docs/RTCEncodedAudioFrameGetMetadata/*'/>
	public RTCEncodedAudioFrameMetadata GetMetadata() { throw new System.NotImplementedException(); }
	public RTCEncodedAudioFrame() { }
}

///<include file='Utils/Docs/RTCTransformEvent/RTCTransformEvent.generated.xml' path='docs/RTCTransformEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCTransformEvent : Event
{
	///<include file='Utils/Docs/RTCTransformEventTransformer/RTCTransformEventTransformer.generated.xml' path='docs/RTCTransformEventTransformer/*'/>
	public RTCRtpScriptTransformer Transformer { get; }
}

///<include file='Utils/Docs/DedicatedWorkerGlobalScope/DedicatedWorkerGlobalScope.generated.xml' path='docs/DedicatedWorkerGlobalScope/*'/>
public partial class DedicatedWorkerGlobalScope
{
		public EventHandler Onrtctransform { get; set; }
}

///<include file='Utils/Docs/RTCRtpScriptTransformer/RTCRtpScriptTransformer.generated.xml' path='docs/RTCRtpScriptTransformer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpScriptTransformer : EventTarget
{
	///<include file='Utils/Docs/RTCRtpScriptTransformerReadable/RTCRtpScriptTransformerReadable.generated.xml' path='docs/RTCRtpScriptTransformerReadable/*'/>
	public ReadableStream Readable { get; }
	///<include file='Utils/Docs/RTCRtpScriptTransformerGenerateKeyFrame/RTCRtpScriptTransformerGenerateKeyFrame.generated.xml' path='docs/RTCRtpScriptTransformerGenerateKeyFrame/*'/>
	public Task<ulong> GenerateKeyFrame(DOMString rid) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpScriptTransformerSendKeyFrameRequest/RTCRtpScriptTransformerSendKeyFrameRequest.generated.xml' path='docs/RTCRtpScriptTransformerSendKeyFrameRequest/*'/>
	public Task<Undefined> SendKeyFrameRequest() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpScriptTransformerWritable/RTCRtpScriptTransformerWritable.generated.xml' path='docs/RTCRtpScriptTransformerWritable/*'/>
	public WritableStream Writable { get; }
		public EventHandler Onkeyframerequest { get; set; }
	///<include file='Utils/Docs/RTCRtpScriptTransformerOptions/RTCRtpScriptTransformerOptions.generated.xml' path='docs/RTCRtpScriptTransformerOptions/*'/>
	public dynamic Options { get; }
}

///<include file='Utils/Docs/RTCRtpScriptTransform/RTCRtpScriptTransform.generated.xml' path='docs/RTCRtpScriptTransform/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpScriptTransform
{
	///<include file='Utils/Docs/RTCRtpScriptTransformRTCRtpScriptTransform/RTCRtpScriptTransformRTCRtpScriptTransform.generated.xml' path='docs/RTCRtpScriptTransformRTCRtpScriptTransform/*'/>
	public RTCRtpScriptTransform(Worker worker, dynamic options, List<Object> transfer) { }
	public RTCRtpScriptTransform() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class KeyFrameRequestEvent : Event
{
		public KeyFrameRequestEvent(DOMString type, DOMString rid) { }
		public DOMString? Rid { get; }
	public KeyFrameRequestEvent() { }
}

///<include file='Utils/Docs/RTCRtpSender/RTCRtpSender.generated.xml' path='docs/RTCRtpSender/*'/>
public partial class RTCRtpSender
{
		public Task<Undefined> GenerateKeyFrame(List<DOMString> rids) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/RTCIceParameters/RTCIceParameters.generated.xml' path='docs/RTCIceParameters/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIceParameters
{
		public bool IceLite;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIceGatherOptions
{
		public RTCIceTransportPolicy GatherPolicy;
		public List<RTCIceServer> IceServers;
}

///<include file='Utils/Docs/RTCIceTransport/RTCIceTransport.generated.xml' path='docs/RTCIceTransport/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIceTransport
{
		public RTCIceTransport() { }
		public Undefined Gather(RTCIceGatherOptions options) { throw new System.NotImplementedException(); }
		public Undefined Start(RTCIceParameters remoteParameters, RTCIceRole role) { throw new System.NotImplementedException(); }
		public Undefined Stop() { throw new System.NotImplementedException(); }
		public Undefined AddRemoteCandidate(RTCIceCandidateInit remoteCandidate) { throw new System.NotImplementedException(); }
		public EventHandler Onerror { get; set; }
		public EventHandler Onicecandidate { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIdentityProviderGlobalScope : WorkerGlobalScope
{
		public RTCIdentityProviderRegistrar RtcIdentityProvider { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIdentityProviderRegistrar
{
		public Undefined Register(RTCIdentityProvider idp) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIdentityProvider
{
		public required GenerateAssertionCallback GenerateAssertion;
		public required ValidateAssertionCallback ValidateAssertion;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIdentityAssertionResult
{
		public required RTCIdentityProviderDetails Idp;
		public required DOMString Assertion;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIdentityProviderDetails
{
		public required DOMString Domain;
		public DOMString Protocol;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIdentityValidationResult
{
		public required DOMString Identity;
		public required DOMString Contents;
}

///<include file='Utils/Docs/RTCPeerConnection/RTCPeerConnection.generated.xml' path='docs/RTCPeerConnection/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCPeerConnection
{
	///<include file='Utils/Docs/RTCPeerConnectionSetIdentityProvider/RTCPeerConnectionSetIdentityProvider.generated.xml' path='docs/RTCPeerConnectionSetIdentityProvider/*'/>
	public Undefined SetIdentityProvider(DOMString provider, RTCIdentityProviderOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionGetIdentityAssertion/RTCPeerConnectionGetIdentityAssertion.generated.xml' path='docs/RTCPeerConnectionGetIdentityAssertion/*'/>
	public Task<DOMString> GetIdentityAssertion() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionPeerIdentity/RTCPeerConnectionPeerIdentity.generated.xml' path='docs/RTCPeerConnectionPeerIdentity/*'/>
	public Task<RTCIdentityAssertion> PeerIdentity { get; }
		public DOMString? IdpLoginUrl { get; }
		public DOMString? IdpErrorInfo { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCConfiguration
{
		public DOMString PeerIdentity;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIdentityProviderOptions
{
		public DOMString Protocol;
		public DOMString UsernameHint;
		public DOMString PeerIdentity;
}

///<include file='Utils/Docs/RTCIdentityAssertion/RTCIdentityAssertion.generated.xml' path='docs/RTCIdentityAssertion/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIdentityAssertion
{
		public RTCIdentityAssertion(DOMString idp, DOMString name) { }
		public DOMString Idp { get; set; }
		public DOMString Name { get; set; }
	public RTCIdentityAssertion() { }
}

///<include file='Utils/Docs/RTCError/RTCError.generated.xml' path='docs/RTCError/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCError
{
		public long? HttpRequestStatusCode { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCErrorInit
{
		public long HttpRequestStatusCode;
}

public partial class MediaStreamConstraints
{
		public DOMString PeerIdentity;
}

///<include file='Utils/Docs/MediaStreamTrack/MediaStreamTrack.generated.xml' path='docs/MediaStreamTrack/*'/>
public partial class MediaStreamTrack
{
		public bool Isolated { get; }
		public EventHandler Onisolationchange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpEncodingParameters
{
		public RTCPriorityType Priority;
		public RTCPriorityType NetworkPriority;
}

///<include file='Utils/Docs/RTCDataChannel/RTCDataChannel.generated.xml' path='docs/RTCDataChannel/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCDataChannel
{
		public RTCPriorityType Priority { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCDataChannelInit
{
		public RTCPriorityType Priority;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpStreamStats : RTCStats
{
		public required ulong Ssrc;
		public required DOMString Kind;
		public DOMString TransportId;
		public DOMString CodecId;
}

///<include file='Utils/Docs/RTCCodecStats/RTCCodecStats.generated.xml' path='docs/RTCCodecStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCCodecStats : RTCStats
{
	///<include file='Utils/Docs/RTCCodecStatsPayloadType/RTCCodecStatsPayloadType.generated.xml' path='docs/RTCCodecStatsPayloadType/*'/>
	public required ulong PayloadType;
	///<include file='Utils/Docs/RTCCodecStatsTransportId/RTCCodecStatsTransportId.generated.xml' path='docs/RTCCodecStatsTransportId/*'/>
	public required DOMString TransportId;
	///<include file='Utils/Docs/RTCCodecStatsMimeType/RTCCodecStatsMimeType.generated.xml' path='docs/RTCCodecStatsMimeType/*'/>
	public required DOMString MimeType;
	///<include file='Utils/Docs/RTCCodecStatsClockRate/RTCCodecStatsClockRate.generated.xml' path='docs/RTCCodecStatsClockRate/*'/>
	public ulong ClockRate;
	///<include file='Utils/Docs/RTCCodecStatsChannels/RTCCodecStatsChannels.generated.xml' path='docs/RTCCodecStatsChannels/*'/>
	public ulong Channels;
	///<include file='Utils/Docs/RTCCodecStatsSdpFmtpLine/RTCCodecStatsSdpFmtpLine.generated.xml' path='docs/RTCCodecStatsSdpFmtpLine/*'/>
	public DOMString SdpFmtpLine;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCReceivedRtpStreamStats : RTCRtpStreamStats
{
		public ulong PacketsReceived;
		public long PacketsLost;
		public Number Jitter;
}

///<include file='Utils/Docs/RTCInboundRtpStreamStats/RTCInboundRtpStreamStats.generated.xml' path='docs/RTCInboundRtpStreamStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCInboundRtpStreamStats : RTCReceivedRtpStreamStats
{
		public required DOMString TrackIdentifier;
		public DOMString Mid;
	///<include file='Utils/Docs/RTCInboundRtpStreamStatsRemoteId/RTCInboundRtpStreamStatsRemoteId.generated.xml' path='docs/RTCInboundRtpStreamStatsRemoteId/*'/>
	public DOMString RemoteId;
	///<include file='Utils/Docs/RTCInboundRtpStreamStatsFramesDecoded/RTCInboundRtpStreamStatsFramesDecoded.generated.xml' path='docs/RTCInboundRtpStreamStatsFramesDecoded/*'/>
	public ulong FramesDecoded;
		public ulong KeyFramesDecoded;
		public ulong FramesRendered;
		public ulong FramesDropped;
		public ulong FrameWidth;
		public ulong FrameHeight;
		public Number FramesPerSecond;
	///<include file='Utils/Docs/RTCInboundRtpStreamStatsQpSum/RTCInboundRtpStreamStatsQpSum.generated.xml' path='docs/RTCInboundRtpStreamStatsQpSum/*'/>
	public ulong QpSum;
		public Number TotalDecodeTime;
		public Number TotalInterFrameDelay;
		public Number TotalSquaredInterFrameDelay;
		public ulong PauseCount;
		public Number TotalPausesDuration;
		public ulong FreezeCount;
		public Number TotalFreezesDuration;
	///<include file='Utils/Docs/RTCInboundRtpStreamStatsLastPacketReceivedTimestamp/RTCInboundRtpStreamStatsLastPacketReceivedTimestamp.generated.xml' path='docs/RTCInboundRtpStreamStatsLastPacketReceivedTimestamp/*'/>
	public DOMHighResTimeStamp LastPacketReceivedTimestamp;
		public ulong HeaderBytesReceived;
		public ulong PacketsDiscarded;
		public ulong FecBytesReceived;
	///<include file='Utils/Docs/RTCInboundRtpStreamStatsFecPacketsReceived/RTCInboundRtpStreamStatsFecPacketsReceived.generated.xml' path='docs/RTCInboundRtpStreamStatsFecPacketsReceived/*'/>
	public ulong FecPacketsReceived;
	///<include file='Utils/Docs/RTCInboundRtpStreamStatsFecPacketsDiscarded/RTCInboundRtpStreamStatsFecPacketsDiscarded.generated.xml' path='docs/RTCInboundRtpStreamStatsFecPacketsDiscarded/*'/>
	public ulong FecPacketsDiscarded;
	///<include file='Utils/Docs/RTCInboundRtpStreamStatsBytesReceived/RTCInboundRtpStreamStatsBytesReceived.generated.xml' path='docs/RTCInboundRtpStreamStatsBytesReceived/*'/>
	public ulong BytesReceived;
	///<include file='Utils/Docs/RTCInboundRtpStreamStatsNackCount/RTCInboundRtpStreamStatsNackCount.generated.xml' path='docs/RTCInboundRtpStreamStatsNackCount/*'/>
	public ulong NackCount;
		public ulong FirCount;
		public ulong PliCount;
		public Number TotalProcessingDelay;
		public DOMHighResTimeStamp EstimatedPlayoutTimestamp;
		public Number JitterBufferDelay;
		public Number JitterBufferTargetDelay;
		public ulong JitterBufferEmittedCount;
		public Number JitterBufferMinimumDelay;
		public ulong TotalSamplesReceived;
		public ulong ConcealedSamples;
		public ulong SilentConcealedSamples;
		public ulong ConcealmentEvents;
		public ulong InsertedSamplesForDeceleration;
		public ulong RemovedSamplesForAcceleration;
		public Number AudioLevel;
		public Number TotalAudioEnergy;
		public Number TotalSamplesDuration;
		public ulong FramesReceived;
		public DOMString DecoderImplementation;
		public DOMString PlayoutId;
		public bool PowerEfficientDecoder;
		public ulong FramesAssembledFromMultiplePackets;
		public Number TotalAssemblyTime;
		public ulong RetransmittedPacketsReceived;
		public ulong RetransmittedBytesReceived;
		public ulong RtxSsrc;
		public ulong FecSsrc;
		public Number TotalCorruptionProbability;
		public Number TotalSquaredCorruptionProbability;
		public ulong CorruptionMeasurements;
}

///<include file='Utils/Docs/RTCRemoteInboundRtpStreamStats/RTCRemoteInboundRtpStreamStats.generated.xml' path='docs/RTCRemoteInboundRtpStreamStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRemoteInboundRtpStreamStats : RTCReceivedRtpStreamStats
{
	///<include file='Utils/Docs/RTCRemoteInboundRtpStreamStatsLocalId/RTCRemoteInboundRtpStreamStatsLocalId.generated.xml' path='docs/RTCRemoteInboundRtpStreamStatsLocalId/*'/>
	public DOMString LocalId;
	///<include file='Utils/Docs/RTCRemoteInboundRtpStreamStatsRoundTripTime/RTCRemoteInboundRtpStreamStatsRoundTripTime.generated.xml' path='docs/RTCRemoteInboundRtpStreamStatsRoundTripTime/*'/>
	public Number RoundTripTime;
	///<include file='Utils/Docs/RTCRemoteInboundRtpStreamStatsTotalRoundTripTime/RTCRemoteInboundRtpStreamStatsTotalRoundTripTime.generated.xml' path='docs/RTCRemoteInboundRtpStreamStatsTotalRoundTripTime/*'/>
	public Number TotalRoundTripTime;
	///<include file='Utils/Docs/RTCRemoteInboundRtpStreamStatsFractionLost/RTCRemoteInboundRtpStreamStatsFractionLost.generated.xml' path='docs/RTCRemoteInboundRtpStreamStatsFractionLost/*'/>
	public Number FractionLost;
	///<include file='Utils/Docs/RTCRemoteInboundRtpStreamStatsRoundTripTimeMeasurements/RTCRemoteInboundRtpStreamStatsRoundTripTimeMeasurements.generated.xml' path='docs/RTCRemoteInboundRtpStreamStatsRoundTripTimeMeasurements/*'/>
	public ulong RoundTripTimeMeasurements;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCSentRtpStreamStats : RTCRtpStreamStats
{
		public ulong PacketsSent;
		public ulong BytesSent;
}

///<include file='Utils/Docs/RTCOutboundRtpStreamStats/RTCOutboundRtpStreamStats.generated.xml' path='docs/RTCOutboundRtpStreamStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCOutboundRtpStreamStats : RTCSentRtpStreamStats
{
		public DOMString Mid;
		public DOMString MediaSourceId;
	///<include file='Utils/Docs/RTCOutboundRtpStreamStatsRemoteId/RTCOutboundRtpStreamStatsRemoteId.generated.xml' path='docs/RTCOutboundRtpStreamStatsRemoteId/*'/>
	public DOMString RemoteId;
		public DOMString Rid;
		public ulong HeaderBytesSent;
		public ulong RetransmittedPacketsSent;
		public ulong RetransmittedBytesSent;
		public ulong RtxSsrc;
		public Number TargetBitrate;
		public ulong TotalEncodedBytesTarget;
		public ulong FrameWidth;
		public ulong FrameHeight;
		public Number FramesPerSecond;
		public ulong FramesSent;
		public ulong HugeFramesSent;
	///<include file='Utils/Docs/RTCOutboundRtpStreamStatsFramesEncoded/RTCOutboundRtpStreamStatsFramesEncoded.generated.xml' path='docs/RTCOutboundRtpStreamStatsFramesEncoded/*'/>
	public ulong FramesEncoded;
		public ulong KeyFramesEncoded;
	///<include file='Utils/Docs/RTCOutboundRtpStreamStatsQpSum/RTCOutboundRtpStreamStatsQpSum.generated.xml' path='docs/RTCOutboundRtpStreamStatsQpSum/*'/>
	public ulong QpSum;
		public Number TotalEncodeTime;
		public Number TotalPacketSendDelay;
	///<include file='Utils/Docs/RTCOutboundRtpStreamStatsQualityLimitationReason/RTCOutboundRtpStreamStatsQualityLimitationReason.generated.xml' path='docs/RTCOutboundRtpStreamStatsQualityLimitationReason/*'/>
	public RTCQualityLimitationReason QualityLimitationReason;
		public Dictionary<DOMString, Number> QualityLimitationDurations;
		public ulong QualityLimitationResolutionChanges;
	///<include file='Utils/Docs/RTCOutboundRtpStreamStatsNackCount/RTCOutboundRtpStreamStatsNackCount.generated.xml' path='docs/RTCOutboundRtpStreamStatsNackCount/*'/>
	public ulong NackCount;
		public ulong FirCount;
		public ulong PliCount;
		public DOMString EncoderImplementation;
		public bool PowerEfficientEncoder;
		public bool Active;
		public DOMString ScalabilityMode;
}

///<include file='Utils/Docs/RTCRemoteOutboundRtpStreamStats/RTCRemoteOutboundRtpStreamStats.generated.xml' path='docs/RTCRemoteOutboundRtpStreamStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRemoteOutboundRtpStreamStats : RTCSentRtpStreamStats
{
	///<include file='Utils/Docs/RTCRemoteOutboundRtpStreamStatsLocalId/RTCRemoteOutboundRtpStreamStatsLocalId.generated.xml' path='docs/RTCRemoteOutboundRtpStreamStatsLocalId/*'/>
	public DOMString LocalId;
	///<include file='Utils/Docs/RTCRemoteOutboundRtpStreamStatsRemoteTimestamp/RTCRemoteOutboundRtpStreamStatsRemoteTimestamp.generated.xml' path='docs/RTCRemoteOutboundRtpStreamStatsRemoteTimestamp/*'/>
	public DOMHighResTimeStamp RemoteTimestamp;
		public ulong ReportsSent;
		public Number RoundTripTime;
	///<include file='Utils/Docs/RTCRemoteOutboundRtpStreamStatsTotalRoundTripTime/RTCRemoteOutboundRtpStreamStatsTotalRoundTripTime.generated.xml' path='docs/RTCRemoteOutboundRtpStreamStatsTotalRoundTripTime/*'/>
	public Number TotalRoundTripTime;
	///<include file='Utils/Docs/RTCRemoteOutboundRtpStreamStatsRoundTripTimeMeasurements/RTCRemoteOutboundRtpStreamStatsRoundTripTimeMeasurements.generated.xml' path='docs/RTCRemoteOutboundRtpStreamStatsRoundTripTimeMeasurements/*'/>
	public ulong RoundTripTimeMeasurements;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCMediaSourceStats : RTCStats
{
		public required DOMString TrackIdentifier;
		public required DOMString Kind;
}

///<include file='Utils/Docs/RTCAudioSourceStats/RTCAudioSourceStats.generated.xml' path='docs/RTCAudioSourceStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCAudioSourceStats : RTCMediaSourceStats
{
	///<include file='Utils/Docs/RTCAudioSourceStatsAudioLevel/RTCAudioSourceStatsAudioLevel.generated.xml' path='docs/RTCAudioSourceStatsAudioLevel/*'/>
	public Number AudioLevel;
	///<include file='Utils/Docs/RTCAudioSourceStatsTotalAudioEnergy/RTCAudioSourceStatsTotalAudioEnergy.generated.xml' path='docs/RTCAudioSourceStatsTotalAudioEnergy/*'/>
	public Number TotalAudioEnergy;
	///<include file='Utils/Docs/RTCAudioSourceStatsTotalSamplesDuration/RTCAudioSourceStatsTotalSamplesDuration.generated.xml' path='docs/RTCAudioSourceStatsTotalSamplesDuration/*'/>
	public Number TotalSamplesDuration;
		public Number EchoReturnLoss;
		public Number EchoReturnLossEnhancement;
}

///<include file='Utils/Docs/RTCVideoSourceStats/RTCVideoSourceStats.generated.xml' path='docs/RTCVideoSourceStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCVideoSourceStats : RTCMediaSourceStats
{
	///<include file='Utils/Docs/RTCVideoSourceStatsWidth/RTCVideoSourceStatsWidth.generated.xml' path='docs/RTCVideoSourceStatsWidth/*'/>
	public ulong Width;
	///<include file='Utils/Docs/RTCVideoSourceStatsHeight/RTCVideoSourceStatsHeight.generated.xml' path='docs/RTCVideoSourceStatsHeight/*'/>
	public ulong Height;
	///<include file='Utils/Docs/RTCVideoSourceStatsFrames/RTCVideoSourceStatsFrames.generated.xml' path='docs/RTCVideoSourceStatsFrames/*'/>
	public ulong Frames;
	///<include file='Utils/Docs/RTCVideoSourceStatsFramesPerSecond/RTCVideoSourceStatsFramesPerSecond.generated.xml' path='docs/RTCVideoSourceStatsFramesPerSecond/*'/>
	public Number FramesPerSecond;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCAudioPlayoutStats : RTCStats
{
		public required DOMString Kind;
		public Number SynthesizedSamplesDuration;
		public ulong SynthesizedSamplesEvents;
		public Number TotalSamplesDuration;
		public Number TotalPlayoutDelay;
		public ulong TotalSamplesCount;
}

///<include file='Utils/Docs/RTCPeerConnectionStats/RTCPeerConnectionStats.generated.xml' path='docs/RTCPeerConnectionStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCPeerConnectionStats : RTCStats
{
	///<include file='Utils/Docs/RTCPeerConnectionStatsDataChannelsOpened/RTCPeerConnectionStatsDataChannelsOpened.generated.xml' path='docs/RTCPeerConnectionStatsDataChannelsOpened/*'/>
	public ulong DataChannelsOpened;
	///<include file='Utils/Docs/RTCPeerConnectionStatsDataChannelsClosed/RTCPeerConnectionStatsDataChannelsClosed.generated.xml' path='docs/RTCPeerConnectionStatsDataChannelsClosed/*'/>
	public ulong DataChannelsClosed;
}

///<include file='Utils/Docs/RTCDataChannelStats/RTCDataChannelStats.generated.xml' path='docs/RTCDataChannelStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCDataChannelStats : RTCStats
{
	///<include file='Utils/Docs/RTCDataChannelStatsLabel/RTCDataChannelStatsLabel.generated.xml' path='docs/RTCDataChannelStatsLabel/*'/>
	public DOMString Label;
	///<include file='Utils/Docs/RTCDataChannelStatsProtocol/RTCDataChannelStatsProtocol.generated.xml' path='docs/RTCDataChannelStatsProtocol/*'/>
	public DOMString Protocol;
	///<include file='Utils/Docs/RTCDataChannelStatsDataChannelIdentifier/RTCDataChannelStatsDataChannelIdentifier.generated.xml' path='docs/RTCDataChannelStatsDataChannelIdentifier/*'/>
	public ushort DataChannelIdentifier;
	///<include file='Utils/Docs/RTCDataChannelStatsState/RTCDataChannelStatsState.generated.xml' path='docs/RTCDataChannelStatsState/*'/>
	public required RTCDataChannelState State;
	///<include file='Utils/Docs/RTCDataChannelStatsMessagesSent/RTCDataChannelStatsMessagesSent.generated.xml' path='docs/RTCDataChannelStatsMessagesSent/*'/>
	public ulong MessagesSent;
	///<include file='Utils/Docs/RTCDataChannelStatsBytesSent/RTCDataChannelStatsBytesSent.generated.xml' path='docs/RTCDataChannelStatsBytesSent/*'/>
	public ulong BytesSent;
	///<include file='Utils/Docs/RTCDataChannelStatsMessagesReceived/RTCDataChannelStatsMessagesReceived.generated.xml' path='docs/RTCDataChannelStatsMessagesReceived/*'/>
	public ulong MessagesReceived;
	///<include file='Utils/Docs/RTCDataChannelStatsBytesReceived/RTCDataChannelStatsBytesReceived.generated.xml' path='docs/RTCDataChannelStatsBytesReceived/*'/>
	public ulong BytesReceived;
}

///<include file='Utils/Docs/RTCTransportStats/RTCTransportStats.generated.xml' path='docs/RTCTransportStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCTransportStats : RTCStats
{
		public ulong PacketsSent;
		public ulong PacketsReceived;
		public ulong BytesSent;
		public ulong BytesReceived;
		public RTCIceRole IceRole;
		public DOMString IceLocalUsernameFragment;
		public required RTCDtlsTransportState DtlsState;
		public RTCIceTransportState IceState;
		public DOMString SelectedCandidatePairId;
		public DOMString LocalCertificateId;
		public DOMString RemoteCertificateId;
		public DOMString TlsVersion;
		public DOMString DtlsCipher;
		public RTCDtlsRole DtlsRole;
		public DOMString SrtpCipher;
		public ulong SelectedCandidatePairChanges;
}

///<include file='Utils/Docs/RTCIceCandidateStats/RTCIceCandidateStats.generated.xml' path='docs/RTCIceCandidateStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIceCandidateStats : RTCStats
{
	///<include file='Utils/Docs/RTCIceCandidateStatsTransportId/RTCIceCandidateStatsTransportId.generated.xml' path='docs/RTCIceCandidateStatsTransportId/*'/>
	public required DOMString TransportId;
	///<include file='Utils/Docs/RTCIceCandidateStatsAddress/RTCIceCandidateStatsAddress.generated.xml' path='docs/RTCIceCandidateStatsAddress/*'/>
	public DOMString? Address;
	///<include file='Utils/Docs/RTCIceCandidateStatsPort/RTCIceCandidateStatsPort.generated.xml' path='docs/RTCIceCandidateStatsPort/*'/>
	public long Port;
	///<include file='Utils/Docs/RTCIceCandidateStatsProtocol/RTCIceCandidateStatsProtocol.generated.xml' path='docs/RTCIceCandidateStatsProtocol/*'/>
	public DOMString Protocol;
	///<include file='Utils/Docs/RTCIceCandidateStatsCandidateType/RTCIceCandidateStatsCandidateType.generated.xml' path='docs/RTCIceCandidateStatsCandidateType/*'/>
	public required RTCIceCandidateType CandidateType;
	///<include file='Utils/Docs/RTCIceCandidateStatsPriority/RTCIceCandidateStatsPriority.generated.xml' path='docs/RTCIceCandidateStatsPriority/*'/>
	public long Priority;
	///<include file='Utils/Docs/RTCIceCandidateStatsUrl/RTCIceCandidateStatsUrl.generated.xml' path='docs/RTCIceCandidateStatsUrl/*'/>
	public DOMString Url;
	///<include file='Utils/Docs/RTCIceCandidateStatsRelayProtocol/RTCIceCandidateStatsRelayProtocol.generated.xml' path='docs/RTCIceCandidateStatsRelayProtocol/*'/>
	public RTCIceServerTransportProtocol RelayProtocol;
		public DOMString Foundation;
		public DOMString RelatedAddress;
		public long RelatedPort;
		public DOMString UsernameFragment;
		public RTCIceTcpCandidateType TcpType;
}

///<include file='Utils/Docs/RTCIceCandidatePairStats/RTCIceCandidatePairStats.generated.xml' path='docs/RTCIceCandidatePairStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIceCandidatePairStats : RTCStats
{
	///<include file='Utils/Docs/RTCIceCandidatePairStatsTransportId/RTCIceCandidatePairStatsTransportId.generated.xml' path='docs/RTCIceCandidatePairStatsTransportId/*'/>
	public required DOMString TransportId;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsLocalCandidateId/RTCIceCandidatePairStatsLocalCandidateId.generated.xml' path='docs/RTCIceCandidatePairStatsLocalCandidateId/*'/>
	public required DOMString LocalCandidateId;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsRemoteCandidateId/RTCIceCandidatePairStatsRemoteCandidateId.generated.xml' path='docs/RTCIceCandidatePairStatsRemoteCandidateId/*'/>
	public required DOMString RemoteCandidateId;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsState/RTCIceCandidatePairStatsState.generated.xml' path='docs/RTCIceCandidatePairStatsState/*'/>
	public required RTCStatsIceCandidatePairState State;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsNominated/RTCIceCandidatePairStatsNominated.generated.xml' path='docs/RTCIceCandidatePairStatsNominated/*'/>
	public bool Nominated;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsPacketsSent/RTCIceCandidatePairStatsPacketsSent.generated.xml' path='docs/RTCIceCandidatePairStatsPacketsSent/*'/>
	public ulong PacketsSent;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsPacketsReceived/RTCIceCandidatePairStatsPacketsReceived.generated.xml' path='docs/RTCIceCandidatePairStatsPacketsReceived/*'/>
	public ulong PacketsReceived;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsBytesSent/RTCIceCandidatePairStatsBytesSent.generated.xml' path='docs/RTCIceCandidatePairStatsBytesSent/*'/>
	public ulong BytesSent;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsBytesReceived/RTCIceCandidatePairStatsBytesReceived.generated.xml' path='docs/RTCIceCandidatePairStatsBytesReceived/*'/>
	public ulong BytesReceived;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsLastPacketSentTimestamp/RTCIceCandidatePairStatsLastPacketSentTimestamp.generated.xml' path='docs/RTCIceCandidatePairStatsLastPacketSentTimestamp/*'/>
	public DOMHighResTimeStamp LastPacketSentTimestamp;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsLastPacketReceivedTimestamp/RTCIceCandidatePairStatsLastPacketReceivedTimestamp.generated.xml' path='docs/RTCIceCandidatePairStatsLastPacketReceivedTimestamp/*'/>
	public DOMHighResTimeStamp LastPacketReceivedTimestamp;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsTotalRoundTripTime/RTCIceCandidatePairStatsTotalRoundTripTime.generated.xml' path='docs/RTCIceCandidatePairStatsTotalRoundTripTime/*'/>
	public Number TotalRoundTripTime;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsCurrentRoundTripTime/RTCIceCandidatePairStatsCurrentRoundTripTime.generated.xml' path='docs/RTCIceCandidatePairStatsCurrentRoundTripTime/*'/>
	public Number CurrentRoundTripTime;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsAvailableOutgoingBitrate/RTCIceCandidatePairStatsAvailableOutgoingBitrate.generated.xml' path='docs/RTCIceCandidatePairStatsAvailableOutgoingBitrate/*'/>
	public Number AvailableOutgoingBitrate;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsAvailableIncomingBitrate/RTCIceCandidatePairStatsAvailableIncomingBitrate.generated.xml' path='docs/RTCIceCandidatePairStatsAvailableIncomingBitrate/*'/>
	public Number AvailableIncomingBitrate;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsRequestsReceived/RTCIceCandidatePairStatsRequestsReceived.generated.xml' path='docs/RTCIceCandidatePairStatsRequestsReceived/*'/>
	public ulong RequestsReceived;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsRequestsSent/RTCIceCandidatePairStatsRequestsSent.generated.xml' path='docs/RTCIceCandidatePairStatsRequestsSent/*'/>
	public ulong RequestsSent;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsResponsesReceived/RTCIceCandidatePairStatsResponsesReceived.generated.xml' path='docs/RTCIceCandidatePairStatsResponsesReceived/*'/>
	public ulong ResponsesReceived;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsResponsesSent/RTCIceCandidatePairStatsResponsesSent.generated.xml' path='docs/RTCIceCandidatePairStatsResponsesSent/*'/>
	public ulong ResponsesSent;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsConsentRequestsSent/RTCIceCandidatePairStatsConsentRequestsSent.generated.xml' path='docs/RTCIceCandidatePairStatsConsentRequestsSent/*'/>
	public ulong ConsentRequestsSent;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsPacketsDiscardedOnSend/RTCIceCandidatePairStatsPacketsDiscardedOnSend.generated.xml' path='docs/RTCIceCandidatePairStatsPacketsDiscardedOnSend/*'/>
	public ulong PacketsDiscardedOnSend;
	///<include file='Utils/Docs/RTCIceCandidatePairStatsBytesDiscardedOnSend/RTCIceCandidatePairStatsBytesDiscardedOnSend.generated.xml' path='docs/RTCIceCandidatePairStatsBytesDiscardedOnSend/*'/>
	public ulong BytesDiscardedOnSend;
}

///<include file='Utils/Docs/RTCCertificateStats/RTCCertificateStats.generated.xml' path='docs/RTCCertificateStats/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCCertificateStats : RTCStats
{
	///<include file='Utils/Docs/RTCCertificateStatsFingerprint/RTCCertificateStatsFingerprint.generated.xml' path='docs/RTCCertificateStatsFingerprint/*'/>
	public required DOMString Fingerprint;
	///<include file='Utils/Docs/RTCCertificateStatsFingerprintAlgorithm/RTCCertificateStatsFingerprintAlgorithm.generated.xml' path='docs/RTCCertificateStatsFingerprintAlgorithm/*'/>
	public required DOMString FingerprintAlgorithm;
	///<include file='Utils/Docs/RTCCertificateStatsBase64Certificate/RTCCertificateStatsBase64Certificate.generated.xml' path='docs/RTCCertificateStatsBase64Certificate/*'/>
	public required DOMString Base64Certificate;
		public DOMString IssuerCertificateId;
}

public partial class RTCRtpEncodingParameters
{
		public DOMString ScalabilityMode;
}

public partial class RTCConfiguration
{
		public List<RTCIceServer> IceServers;
		public RTCIceTransportPolicy IceTransportPolicy;
		public RTCBundlePolicy BundlePolicy;
		public RTCRtcpMuxPolicy RtcpMuxPolicy;
		public List<RTCCertificate> Certificates;
		public byte IceCandidatePoolSize;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIceServer
{
		public required Union230 Urls;
		public DOMString Username;
		public DOMString Credential;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCOfferAnswerOptions
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCOfferOptions : RTCOfferAnswerOptions
{
		public bool IceRestart;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCAnswerOptions : RTCOfferAnswerOptions
{
}

///<include file='Utils/Docs/RTCPeerConnection/RTCPeerConnection.generated.xml' path='docs/RTCPeerConnection/*'/>
public partial class RTCPeerConnection : EventTarget
{
	///<include file='Utils/Docs/RTCPeerConnectionRTCPeerConnection/RTCPeerConnectionRTCPeerConnection.generated.xml' path='docs/RTCPeerConnectionRTCPeerConnection/*'/>
	public RTCPeerConnection(RTCConfiguration configuration) { }
	///<include file='Utils/Docs/RTCPeerConnectionCreateOffer/RTCPeerConnectionCreateOffer.generated.xml' path='docs/RTCPeerConnectionCreateOffer/*'/>
	public Task<RTCSessionDescriptionInit> CreateOffer(RTCOfferOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionCreateAnswer/RTCPeerConnectionCreateAnswer.generated.xml' path='docs/RTCPeerConnectionCreateAnswer/*'/>
	public Task<RTCSessionDescriptionInit> CreateAnswer(RTCAnswerOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionSetLocalDescription/RTCPeerConnectionSetLocalDescription.generated.xml' path='docs/RTCPeerConnectionSetLocalDescription/*'/>
	public Task<Undefined> SetLocalDescription(RTCLocalSessionDescriptionInit description) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionLocalDescription/RTCPeerConnectionLocalDescription.generated.xml' path='docs/RTCPeerConnectionLocalDescription/*'/>
	public RTCSessionDescription? LocalDescription { get; }
	///<include file='Utils/Docs/RTCPeerConnectionCurrentLocalDescription/RTCPeerConnectionCurrentLocalDescription.generated.xml' path='docs/RTCPeerConnectionCurrentLocalDescription/*'/>
	public RTCSessionDescription? CurrentLocalDescription { get; }
	///<include file='Utils/Docs/RTCPeerConnectionPendingLocalDescription/RTCPeerConnectionPendingLocalDescription.generated.xml' path='docs/RTCPeerConnectionPendingLocalDescription/*'/>
	public RTCSessionDescription? PendingLocalDescription { get; }
	///<include file='Utils/Docs/RTCPeerConnectionSetRemoteDescription/RTCPeerConnectionSetRemoteDescription.generated.xml' path='docs/RTCPeerConnectionSetRemoteDescription/*'/>
	public Task<Undefined> SetRemoteDescription(RTCSessionDescriptionInit description) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionRemoteDescription/RTCPeerConnectionRemoteDescription.generated.xml' path='docs/RTCPeerConnectionRemoteDescription/*'/>
	public RTCSessionDescription? RemoteDescription { get; }
	///<include file='Utils/Docs/RTCPeerConnectionCurrentRemoteDescription/RTCPeerConnectionCurrentRemoteDescription.generated.xml' path='docs/RTCPeerConnectionCurrentRemoteDescription/*'/>
	public RTCSessionDescription? CurrentRemoteDescription { get; }
	///<include file='Utils/Docs/RTCPeerConnectionPendingRemoteDescription/RTCPeerConnectionPendingRemoteDescription.generated.xml' path='docs/RTCPeerConnectionPendingRemoteDescription/*'/>
	public RTCSessionDescription? PendingRemoteDescription { get; }
	///<include file='Utils/Docs/RTCPeerConnectionAddIceCandidate/RTCPeerConnectionAddIceCandidate.generated.xml' path='docs/RTCPeerConnectionAddIceCandidate/*'/>
	public Task<Undefined> AddIceCandidate(RTCIceCandidateInit candidate) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionSignalingState/RTCPeerConnectionSignalingState.generated.xml' path='docs/RTCPeerConnectionSignalingState/*'/>
	public RTCSignalingState SignalingState { get; }
	///<include file='Utils/Docs/RTCPeerConnectionIceGatheringState/RTCPeerConnectionIceGatheringState.generated.xml' path='docs/RTCPeerConnectionIceGatheringState/*'/>
	public RTCIceGatheringState IceGatheringState { get; }
	///<include file='Utils/Docs/RTCPeerConnectionIceConnectionState/RTCPeerConnectionIceConnectionState.generated.xml' path='docs/RTCPeerConnectionIceConnectionState/*'/>
	public RTCIceConnectionState IceConnectionState { get; }
	///<include file='Utils/Docs/RTCPeerConnectionConnectionState/RTCPeerConnectionConnectionState.generated.xml' path='docs/RTCPeerConnectionConnectionState/*'/>
	public RTCPeerConnectionState ConnectionState { get; }
	///<include file='Utils/Docs/RTCPeerConnectionCanTrickleIceCandidates/RTCPeerConnectionCanTrickleIceCandidates.generated.xml' path='docs/RTCPeerConnectionCanTrickleIceCandidates/*'/>
	public bool? CanTrickleIceCandidates { get; }
	///<include file='Utils/Docs/RTCPeerConnectionRestartIce/RTCPeerConnectionRestartIce.generated.xml' path='docs/RTCPeerConnectionRestartIce/*'/>
	public Undefined RestartIce() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionGetConfiguration/RTCPeerConnectionGetConfiguration.generated.xml' path='docs/RTCPeerConnectionGetConfiguration/*'/>
	public RTCConfiguration GetConfiguration() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionSetConfiguration/RTCPeerConnectionSetConfiguration.generated.xml' path='docs/RTCPeerConnectionSetConfiguration/*'/>
	public Undefined SetConfiguration(RTCConfiguration configuration) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionClose/RTCPeerConnectionClose.generated.xml' path='docs/RTCPeerConnectionClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
		public EventHandler Onnegotiationneeded { get; set; }
		public EventHandler Onicecandidate { get; set; }
		public EventHandler Onicecandidateerror { get; set; }
		public EventHandler Onsignalingstatechange { get; set; }
		public EventHandler Oniceconnectionstatechange { get; set; }
		public EventHandler Onicegatheringstatechange { get; set; }
		public EventHandler Onconnectionstatechange { get; set; }
	///<include file='Utils/Docs/RTCPeerConnectionCreateOffer/RTCPeerConnectionCreateOffer.generated.xml' path='docs/RTCPeerConnectionCreateOffer/*'/>
	public Task<Undefined> CreateOffer(RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback, RTCOfferOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionSetLocalDescription/RTCPeerConnectionSetLocalDescription.generated.xml' path='docs/RTCPeerConnectionSetLocalDescription/*'/>
	public Task<Undefined> SetLocalDescription(RTCLocalSessionDescriptionInit description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionCreateAnswer/RTCPeerConnectionCreateAnswer.generated.xml' path='docs/RTCPeerConnectionCreateAnswer/*'/>
	public Task<Undefined> CreateAnswer(RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionSetRemoteDescription/RTCPeerConnectionSetRemoteDescription.generated.xml' path='docs/RTCPeerConnectionSetRemoteDescription/*'/>
	public Task<Undefined> SetRemoteDescription(RTCSessionDescriptionInit description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionAddIceCandidate/RTCPeerConnectionAddIceCandidate.generated.xml' path='docs/RTCPeerConnectionAddIceCandidate/*'/>
	public Task<Undefined> AddIceCandidate(RTCIceCandidateInit candidate, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback) { throw new System.NotImplementedException(); }
	public RTCPeerConnection() { }
}

public partial class RTCOfferOptions
{
		public bool OfferToReceiveAudio;
		public bool OfferToReceiveVideo;
}

///<include file='Utils/Docs/RTCSessionDescription/RTCSessionDescription.generated.xml' path='docs/RTCSessionDescription/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCSessionDescription
{
	///<include file='Utils/Docs/RTCSessionDescriptionRTCSessionDescription/RTCSessionDescriptionRTCSessionDescription.generated.xml' path='docs/RTCSessionDescriptionRTCSessionDescription/*'/>
	public RTCSessionDescription(RTCSessionDescriptionInit descriptionInitDict) { }
	///<include file='Utils/Docs/RTCSessionDescriptionType/RTCSessionDescriptionType.generated.xml' path='docs/RTCSessionDescriptionType/*'/>
	public RTCSdpType Type { get; }
	///<include file='Utils/Docs/RTCSessionDescriptionSdp/RTCSessionDescriptionSdp.generated.xml' path='docs/RTCSessionDescriptionSdp/*'/>
	public DOMString Sdp { get; }
	///<include file='Utils/Docs/RTCSessionDescriptionToJSON/RTCSessionDescriptionToJSON.generated.xml' path='docs/RTCSessionDescriptionToJSON/*'/>
	public RTCSessionDescriptionInit ToJSON() { throw new System.NotImplementedException(); }
	public RTCSessionDescription() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCSessionDescriptionInit
{
		public required RTCSdpType Type;
		public DOMString Sdp;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCLocalSessionDescriptionInit
{
		public RTCSdpType Type;
		public DOMString Sdp;
}

///<include file='Utils/Docs/RTCIceCandidate/RTCIceCandidate.generated.xml' path='docs/RTCIceCandidate/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIceCandidate
{
	///<include file='Utils/Docs/RTCIceCandidateRTCIceCandidate/RTCIceCandidateRTCIceCandidate.generated.xml' path='docs/RTCIceCandidateRTCIceCandidate/*'/>
	public RTCIceCandidate(RTCIceCandidateInit candidateInitDict) { }
	///<include file='Utils/Docs/RTCIceCandidateCandidate/RTCIceCandidateCandidate.generated.xml' path='docs/RTCIceCandidateCandidate/*'/>
	public DOMString Candidate { get; }
	///<include file='Utils/Docs/RTCIceCandidateSdpMid/RTCIceCandidateSdpMid.generated.xml' path='docs/RTCIceCandidateSdpMid/*'/>
	public DOMString? SdpMid { get; }
	///<include file='Utils/Docs/RTCIceCandidateSdpMLineIndex/RTCIceCandidateSdpMLineIndex.generated.xml' path='docs/RTCIceCandidateSdpMLineIndex/*'/>
	public ushort? SdpMLineIndex { get; }
	///<include file='Utils/Docs/RTCIceCandidateFoundation/RTCIceCandidateFoundation.generated.xml' path='docs/RTCIceCandidateFoundation/*'/>
	public DOMString? Foundation { get; }
	///<include file='Utils/Docs/RTCIceCandidateComponent/RTCIceCandidateComponent.generated.xml' path='docs/RTCIceCandidateComponent/*'/>
	public RTCIceComponent? Component { get; }
	///<include file='Utils/Docs/RTCIceCandidatePriority/RTCIceCandidatePriority.generated.xml' path='docs/RTCIceCandidatePriority/*'/>
	public ulong? Priority { get; }
	///<include file='Utils/Docs/RTCIceCandidateAddress/RTCIceCandidateAddress.generated.xml' path='docs/RTCIceCandidateAddress/*'/>
	public DOMString? Address { get; }
	///<include file='Utils/Docs/RTCIceCandidateProtocol/RTCIceCandidateProtocol.generated.xml' path='docs/RTCIceCandidateProtocol/*'/>
	public RTCIceProtocol? Protocol { get; }
	///<include file='Utils/Docs/RTCIceCandidatePort/RTCIceCandidatePort.generated.xml' path='docs/RTCIceCandidatePort/*'/>
	public ushort? Port { get; }
	///<include file='Utils/Docs/RTCIceCandidateType/RTCIceCandidateType.generated.xml' path='docs/RTCIceCandidateType/*'/>
	public RTCIceCandidateType? Type { get; }
	///<include file='Utils/Docs/RTCIceCandidateTcpType/RTCIceCandidateTcpType.generated.xml' path='docs/RTCIceCandidateTcpType/*'/>
	public RTCIceTcpCandidateType? TcpType { get; }
	///<include file='Utils/Docs/RTCIceCandidateRelatedAddress/RTCIceCandidateRelatedAddress.generated.xml' path='docs/RTCIceCandidateRelatedAddress/*'/>
	public DOMString? RelatedAddress { get; }
	///<include file='Utils/Docs/RTCIceCandidateRelatedPort/RTCIceCandidateRelatedPort.generated.xml' path='docs/RTCIceCandidateRelatedPort/*'/>
	public ushort? RelatedPort { get; }
	///<include file='Utils/Docs/RTCIceCandidateUsernameFragment/RTCIceCandidateUsernameFragment.generated.xml' path='docs/RTCIceCandidateUsernameFragment/*'/>
	public DOMString? UsernameFragment { get; }
		public RTCIceServerTransportProtocol? RelayProtocol { get; }
		public DOMString? Url { get; }
	///<include file='Utils/Docs/RTCIceCandidateToJSON/RTCIceCandidateToJSON.generated.xml' path='docs/RTCIceCandidateToJSON/*'/>
	public RTCIceCandidateInit ToJSON() { throw new System.NotImplementedException(); }
	public RTCIceCandidate() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIceCandidateInit
{
		public DOMString Candidate;
		public DOMString? SdpMid;
		public ushort? SdpMLineIndex;
		public DOMString? UsernameFragment;
}

///<include file='Utils/Docs/RTCPeerConnectionIceEvent/RTCPeerConnectionIceEvent.generated.xml' path='docs/RTCPeerConnectionIceEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCPeerConnectionIceEvent : Event
{
	///<include file='Utils/Docs/RTCPeerConnectionIceEventRTCPeerConnectionIceEvent/RTCPeerConnectionIceEventRTCPeerConnectionIceEvent.generated.xml' path='docs/RTCPeerConnectionIceEventRTCPeerConnectionIceEvent/*'/>
	public RTCPeerConnectionIceEvent(DOMString type, RTCPeerConnectionIceEventInit eventInitDict) { }
	///<include file='Utils/Docs/RTCPeerConnectionIceEventCandidate/RTCPeerConnectionIceEventCandidate.generated.xml' path='docs/RTCPeerConnectionIceEventCandidate/*'/>
	public RTCIceCandidate? Candidate { get; }
		public DOMString? Url { get; }
	public RTCPeerConnectionIceEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCPeerConnectionIceEventInit : EventInit
{
		public RTCIceCandidate? Candidate;
		public DOMString? Url;
}

///<include file='Utils/Docs/RTCPeerConnectionIceErrorEvent/RTCPeerConnectionIceErrorEvent.generated.xml' path='docs/RTCPeerConnectionIceErrorEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCPeerConnectionIceErrorEvent : Event
{
		public RTCPeerConnectionIceErrorEvent(DOMString type, RTCPeerConnectionIceErrorEventInit eventInitDict) { }
	///<include file='Utils/Docs/RTCPeerConnectionIceErrorEventAddress/RTCPeerConnectionIceErrorEventAddress.generated.xml' path='docs/RTCPeerConnectionIceErrorEventAddress/*'/>
	public DOMString? Address { get; }
		public ushort? Port { get; }
		public DOMString Url { get; }
		public ushort ErrorCode { get; }
		public USVString ErrorText { get; }
	public RTCPeerConnectionIceErrorEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCPeerConnectionIceErrorEventInit : EventInit
{
		public DOMString? Address;
		public ushort? Port;
		public DOMString Url;
		public required ushort ErrorCode;
		public USVString ErrorText;
}

///<include file='Utils/Docs/RTCPeerConnection/RTCPeerConnection.generated.xml' path='docs/RTCPeerConnection/*'/>
public partial class RTCPeerConnection
{
	///<include file='Utils/Docs/RTCPeerConnectionGenerateCertificate/RTCPeerConnectionGenerateCertificate.generated.xml' path='docs/RTCPeerConnectionGenerateCertificate/*'/>
	public static Task<RTCCertificate> GenerateCertificate(AlgorithmIdentifier keygenAlgorithm) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCCertificateExpiration
{
		public ulong Expires;
}

///<include file='Utils/Docs/RTCCertificate/RTCCertificate.generated.xml' path='docs/RTCCertificate/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCCertificate
{
	///<include file='Utils/Docs/RTCCertificateExpires/RTCCertificateExpires.generated.xml' path='docs/RTCCertificateExpires/*'/>
	public EpochTimeStamp Expires { get; }
	///<include file='Utils/Docs/RTCCertificateGetFingerprints/RTCCertificateGetFingerprints.generated.xml' path='docs/RTCCertificateGetFingerprints/*'/>
	public List<RTCDtlsFingerprint> GetFingerprints() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/RTCPeerConnection/RTCPeerConnection.generated.xml' path='docs/RTCPeerConnection/*'/>
public partial class RTCPeerConnection
{
	///<include file='Utils/Docs/RTCPeerConnectionGetSenders/RTCPeerConnectionGetSenders.generated.xml' path='docs/RTCPeerConnectionGetSenders/*'/>
	public List<RTCRtpSender> GetSenders() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionGetReceivers/RTCPeerConnectionGetReceivers.generated.xml' path='docs/RTCPeerConnectionGetReceivers/*'/>
	public List<RTCRtpReceiver> GetReceivers() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionGetTransceivers/RTCPeerConnectionGetTransceivers.generated.xml' path='docs/RTCPeerConnectionGetTransceivers/*'/>
	public List<RTCRtpTransceiver> GetTransceivers() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionAddTrack/RTCPeerConnectionAddTrack.generated.xml' path='docs/RTCPeerConnectionAddTrack/*'/>
	public RTCRtpSender AddTrack(MediaStreamTrack track, params MediaStream[] streams) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionRemoveTrack/RTCPeerConnectionRemoveTrack.generated.xml' path='docs/RTCPeerConnectionRemoveTrack/*'/>
	public Undefined RemoveTrack(RTCRtpSender sender) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCPeerConnectionAddTransceiver/RTCPeerConnectionAddTransceiver.generated.xml' path='docs/RTCPeerConnectionAddTransceiver/*'/>
	public RTCRtpTransceiver AddTransceiver(Union231 trackOrKind, RTCRtpTransceiverInit init) { throw new System.NotImplementedException(); }
		public EventHandler Ontrack { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpTransceiverInit
{
		public RTCRtpTransceiverDirection Direction;
		public List<MediaStream> Streams;
		public List<RTCRtpEncodingParameters> SendEncodings;
}

///<include file='Utils/Docs/RTCRtpSender/RTCRtpSender.generated.xml' path='docs/RTCRtpSender/*'/>
public partial class RTCRtpSender
{
	///<include file='Utils/Docs/RTCRtpSenderTrack/RTCRtpSenderTrack.generated.xml' path='docs/RTCRtpSenderTrack/*'/>
	public MediaStreamTrack? Track { get; }
	///<include file='Utils/Docs/RTCRtpSenderTransport/RTCRtpSenderTransport.generated.xml' path='docs/RTCRtpSenderTransport/*'/>
	public RTCDtlsTransport? Transport { get; }
	///<include file='Utils/Docs/RTCRtpSenderGetCapabilities/RTCRtpSenderGetCapabilities.generated.xml' path='docs/RTCRtpSenderGetCapabilities/*'/>
	public static RTCRtpCapabilities? GetCapabilities(DOMString kind) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpSenderSetParameters/RTCRtpSenderSetParameters.generated.xml' path='docs/RTCRtpSenderSetParameters/*'/>
	public Task<Undefined> SetParameters(RTCRtpSendParameters parameters, RTCSetParameterOptions setParameterOptions) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpSenderGetParameters/RTCRtpSenderGetParameters.generated.xml' path='docs/RTCRtpSenderGetParameters/*'/>
	public RTCRtpSendParameters GetParameters() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpSenderReplaceTrack/RTCRtpSenderReplaceTrack.generated.xml' path='docs/RTCRtpSenderReplaceTrack/*'/>
	public Task<Undefined> ReplaceTrack(MediaStreamTrack? withTrack) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpSenderSetStreams/RTCRtpSenderSetStreams.generated.xml' path='docs/RTCRtpSenderSetStreams/*'/>
	public Undefined SetStreams(params MediaStream[] streams) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpSenderGetStats/RTCRtpSenderGetStats.generated.xml' path='docs/RTCRtpSenderGetStats/*'/>
	public Task<RTCStatsReport> GetStats() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpParameters
{
		public required List<RTCRtpHeaderExtensionParameters> HeaderExtensions;
		public required RTCRtcpParameters Rtcp;
		public required List<RTCRtpCodecParameters> Codecs;
}

public partial class RTCRtpSendParameters : RTCRtpParameters
{
		public required DOMString TransactionId;
		public required List<RTCRtpEncodingParameters> Encodings;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpReceiveParameters : RTCRtpParameters
{
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpCodingParameters
{
		public DOMString Rid;
}

public partial class RTCRtpEncodingParameters : RTCRtpCodingParameters
{
		public bool Active;
		public RTCRtpCodec Codec;
		public ulong MaxBitrate;
		public Number MaxFramerate;
		public Number ScaleResolutionDownBy;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtcpParameters
{
		public DOMString Cname;
		public bool ReducedSize;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpHeaderExtensionParameters
{
		public required DOMString Uri;
		public required ushort Id;
		public bool Encrypted;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpCodec
{
		public required DOMString MimeType;
		public required ulong ClockRate;
		public ushort Channels;
		public DOMString SdpFmtpLine;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpCodecParameters : RTCRtpCodec
{
		public required byte PayloadType;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpCapabilities
{
		public required List<RTCRtpCodec> Codecs;
		public required List<RTCRtpHeaderExtensionCapability> HeaderExtensions;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpHeaderExtensionCapability
{
		public required DOMString Uri;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCSetParameterOptions
{
}

///<include file='Utils/Docs/RTCRtpReceiver/RTCRtpReceiver.generated.xml' path='docs/RTCRtpReceiver/*'/>
public partial class RTCRtpReceiver
{
	///<include file='Utils/Docs/RTCRtpReceiverTrack/RTCRtpReceiverTrack.generated.xml' path='docs/RTCRtpReceiverTrack/*'/>
	public MediaStreamTrack Track { get; }
	///<include file='Utils/Docs/RTCRtpReceiverTransport/RTCRtpReceiverTransport.generated.xml' path='docs/RTCRtpReceiverTransport/*'/>
	public RTCDtlsTransport? Transport { get; }
	///<include file='Utils/Docs/RTCRtpReceiverGetCapabilities/RTCRtpReceiverGetCapabilities.generated.xml' path='docs/RTCRtpReceiverGetCapabilities/*'/>
	public static RTCRtpCapabilities? GetCapabilities(DOMString kind) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpReceiverGetParameters/RTCRtpReceiverGetParameters.generated.xml' path='docs/RTCRtpReceiverGetParameters/*'/>
	public RTCRtpReceiveParameters GetParameters() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpReceiverGetContributingSources/RTCRtpReceiverGetContributingSources.generated.xml' path='docs/RTCRtpReceiverGetContributingSources/*'/>
	public List<RTCRtpContributingSource> GetContributingSources() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpReceiverGetSynchronizationSources/RTCRtpReceiverGetSynchronizationSources.generated.xml' path='docs/RTCRtpReceiverGetSynchronizationSources/*'/>
	public List<RTCRtpSynchronizationSource> GetSynchronizationSources() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpReceiverGetStats/RTCRtpReceiverGetStats.generated.xml' path='docs/RTCRtpReceiverGetStats/*'/>
	public Task<RTCStatsReport> GetStats() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpReceiverJitterBufferTarget/RTCRtpReceiverJitterBufferTarget.generated.xml' path='docs/RTCRtpReceiverJitterBufferTarget/*'/>
	public DOMHighResTimeStamp? JitterBufferTarget { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpContributingSource
{
		public required DOMHighResTimeStamp Timestamp;
		public required ulong Source;
		public Number AudioLevel;
		public required ulong RtpTimestamp;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpSynchronizationSource : RTCRtpContributingSource
{
}

///<include file='Utils/Docs/RTCRtpTransceiver/RTCRtpTransceiver.generated.xml' path='docs/RTCRtpTransceiver/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCRtpTransceiver
{
	///<include file='Utils/Docs/RTCRtpTransceiverMid/RTCRtpTransceiverMid.generated.xml' path='docs/RTCRtpTransceiverMid/*'/>
	public DOMString? Mid { get; }
	///<include file='Utils/Docs/RTCRtpTransceiverSender/RTCRtpTransceiverSender.generated.xml' path='docs/RTCRtpTransceiverSender/*'/>
	public RTCRtpSender Sender { get; }
	///<include file='Utils/Docs/RTCRtpTransceiverReceiver/RTCRtpTransceiverReceiver.generated.xml' path='docs/RTCRtpTransceiverReceiver/*'/>
	public RTCRtpReceiver Receiver { get; }
	///<include file='Utils/Docs/RTCRtpTransceiverDirection/RTCRtpTransceiverDirection.generated.xml' path='docs/RTCRtpTransceiverDirection/*'/>
	public RTCRtpTransceiverDirection Direction { get; set; }
	///<include file='Utils/Docs/RTCRtpTransceiverCurrentDirection/RTCRtpTransceiverCurrentDirection.generated.xml' path='docs/RTCRtpTransceiverCurrentDirection/*'/>
	public RTCRtpTransceiverDirection? CurrentDirection { get; }
	///<include file='Utils/Docs/RTCRtpTransceiverStop/RTCRtpTransceiverStop.generated.xml' path='docs/RTCRtpTransceiverStop/*'/>
	public Undefined Stop() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCRtpTransceiverSetCodecPreferences/RTCRtpTransceiverSetCodecPreferences.generated.xml' path='docs/RTCRtpTransceiverSetCodecPreferences/*'/>
	public Undefined SetCodecPreferences(List<RTCRtpCodec> codecs) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/RTCDtlsTransport/RTCDtlsTransport.generated.xml' path='docs/RTCDtlsTransport/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCDtlsTransport : EventTarget
{
	///<include file='Utils/Docs/RTCDtlsTransportIceTransport/RTCDtlsTransportIceTransport.generated.xml' path='docs/RTCDtlsTransportIceTransport/*'/>
	public RTCIceTransport IceTransport { get; }
	///<include file='Utils/Docs/RTCDtlsTransportState/RTCDtlsTransportState.generated.xml' path='docs/RTCDtlsTransportState/*'/>
	public RTCDtlsTransportState State { get; }
		public List<byte[]> GetRemoteCertificates() { throw new System.NotImplementedException(); }
		public EventHandler Onstatechange { get; set; }
		public EventHandler Onerror { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCDtlsFingerprint
{
		public DOMString Algorithm;
		public DOMString Value;
}

///<include file='Utils/Docs/RTCIceTransport/RTCIceTransport.generated.xml' path='docs/RTCIceTransport/*'/>
public partial class RTCIceTransport : EventTarget
{
	///<include file='Utils/Docs/RTCIceTransportRole/RTCIceTransportRole.generated.xml' path='docs/RTCIceTransportRole/*'/>
	public RTCIceRole Role { get; }
	///<include file='Utils/Docs/RTCIceTransportComponent/RTCIceTransportComponent.generated.xml' path='docs/RTCIceTransportComponent/*'/>
	public RTCIceComponent Component { get; }
	///<include file='Utils/Docs/RTCIceTransportState/RTCIceTransportState.generated.xml' path='docs/RTCIceTransportState/*'/>
	public RTCIceTransportState State { get; }
	///<include file='Utils/Docs/RTCIceTransportGatheringState/RTCIceTransportGatheringState.generated.xml' path='docs/RTCIceTransportGatheringState/*'/>
	public RTCIceGathererState GatheringState { get; }
	///<include file='Utils/Docs/RTCIceTransportGetLocalCandidates/RTCIceTransportGetLocalCandidates.generated.xml' path='docs/RTCIceTransportGetLocalCandidates/*'/>
	public List<RTCIceCandidate> GetLocalCandidates() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCIceTransportGetRemoteCandidates/RTCIceTransportGetRemoteCandidates.generated.xml' path='docs/RTCIceTransportGetRemoteCandidates/*'/>
	public List<RTCIceCandidate> GetRemoteCandidates() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCIceTransportGetSelectedCandidatePair/RTCIceTransportGetSelectedCandidatePair.generated.xml' path='docs/RTCIceTransportGetSelectedCandidatePair/*'/>
	public RTCIceCandidatePair? GetSelectedCandidatePair() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCIceTransportGetLocalParameters/RTCIceTransportGetLocalParameters.generated.xml' path='docs/RTCIceTransportGetLocalParameters/*'/>
	public RTCIceParameters? GetLocalParameters() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCIceTransportGetRemoteParameters/RTCIceTransportGetRemoteParameters.generated.xml' path='docs/RTCIceTransportGetRemoteParameters/*'/>
	public RTCIceParameters? GetRemoteParameters() { throw new System.NotImplementedException(); }
		public EventHandler Onstatechange { get; set; }
		public EventHandler Ongatheringstatechange { get; set; }
		public EventHandler Onselectedcandidatepairchange { get; set; }
}

///<include file='Utils/Docs/RTCIceParameters/RTCIceParameters.generated.xml' path='docs/RTCIceParameters/*'/>
public partial class RTCIceParameters
{
	///<include file='Utils/Docs/RTCIceParametersUsernameFragment/RTCIceParametersUsernameFragment.generated.xml' path='docs/RTCIceParametersUsernameFragment/*'/>
	public DOMString UsernameFragment;
	///<include file='Utils/Docs/RTCIceParametersPassword/RTCIceParametersPassword.generated.xml' path='docs/RTCIceParametersPassword/*'/>
	public DOMString Password;
}

///<include file='Utils/Docs/RTCIceCandidatePair/RTCIceCandidatePair.generated.xml' path='docs/RTCIceCandidatePair/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCIceCandidatePair
{
	///<include file='Utils/Docs/RTCIceCandidatePairLocal/RTCIceCandidatePairLocal.generated.xml' path='docs/RTCIceCandidatePairLocal/*'/>
	public RTCIceCandidate Local { get; }
	///<include file='Utils/Docs/RTCIceCandidatePairRemote/RTCIceCandidatePairRemote.generated.xml' path='docs/RTCIceCandidatePairRemote/*'/>
	public RTCIceCandidate Remote { get; }
}

///<include file='Utils/Docs/RTCTrackEvent/RTCTrackEvent.generated.xml' path='docs/RTCTrackEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCTrackEvent : Event
{
	///<include file='Utils/Docs/RTCTrackEventRTCTrackEvent/RTCTrackEventRTCTrackEvent.generated.xml' path='docs/RTCTrackEventRTCTrackEvent/*'/>
	public RTCTrackEvent(DOMString type, RTCTrackEventInit eventInitDict) { }
	///<include file='Utils/Docs/RTCTrackEventReceiver/RTCTrackEventReceiver.generated.xml' path='docs/RTCTrackEventReceiver/*'/>
	public RTCRtpReceiver Receiver { get; }
	///<include file='Utils/Docs/RTCTrackEventTrack/RTCTrackEventTrack.generated.xml' path='docs/RTCTrackEventTrack/*'/>
	public MediaStreamTrack Track { get; }
	///<include file='Utils/Docs/RTCTrackEventStreams/RTCTrackEventStreams.generated.xml' path='docs/RTCTrackEventStreams/*'/>
	public MediaStream[] Streams { get; }
	///<include file='Utils/Docs/RTCTrackEventTransceiver/RTCTrackEventTransceiver.generated.xml' path='docs/RTCTrackEventTransceiver/*'/>
	public RTCRtpTransceiver Transceiver { get; }
	public RTCTrackEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCTrackEventInit : EventInit
{
		public required RTCRtpReceiver Receiver;
		public required MediaStreamTrack Track;
		public List<MediaStream> Streams;
		public required RTCRtpTransceiver Transceiver;
}

///<include file='Utils/Docs/RTCPeerConnection/RTCPeerConnection.generated.xml' path='docs/RTCPeerConnection/*'/>
public partial class RTCPeerConnection
{
	///<include file='Utils/Docs/RTCPeerConnectionSctp/RTCPeerConnectionSctp.generated.xml' path='docs/RTCPeerConnectionSctp/*'/>
	public RTCSctpTransport? Sctp { get; }
	///<include file='Utils/Docs/RTCPeerConnectionCreateDataChannel/RTCPeerConnectionCreateDataChannel.generated.xml' path='docs/RTCPeerConnectionCreateDataChannel/*'/>
	public RTCDataChannel CreateDataChannel(USVString label, RTCDataChannelInit dataChannelDict) { throw new System.NotImplementedException(); }
		public EventHandler Ondatachannel { get; set; }
}

///<include file='Utils/Docs/RTCSctpTransport/RTCSctpTransport.generated.xml' path='docs/RTCSctpTransport/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCSctpTransport : EventTarget
{
	///<include file='Utils/Docs/RTCSctpTransportTransport/RTCSctpTransportTransport.generated.xml' path='docs/RTCSctpTransportTransport/*'/>
	public RTCDtlsTransport Transport { get; }
	///<include file='Utils/Docs/RTCSctpTransportState/RTCSctpTransportState.generated.xml' path='docs/RTCSctpTransportState/*'/>
	public RTCSctpTransportState State { get; }
	///<include file='Utils/Docs/RTCSctpTransportMaxMessageSize/RTCSctpTransportMaxMessageSize.generated.xml' path='docs/RTCSctpTransportMaxMessageSize/*'/>
	public double MaxMessageSize { get; }
	///<include file='Utils/Docs/RTCSctpTransportMaxChannels/RTCSctpTransportMaxChannels.generated.xml' path='docs/RTCSctpTransportMaxChannels/*'/>
	public ushort? MaxChannels { get; }
		public EventHandler Onstatechange { get; set; }
}

///<include file='Utils/Docs/RTCDataChannel/RTCDataChannel.generated.xml' path='docs/RTCDataChannel/*'/>
public partial class RTCDataChannel : EventTarget
{
	///<include file='Utils/Docs/RTCDataChannelLabel/RTCDataChannelLabel.generated.xml' path='docs/RTCDataChannelLabel/*'/>
	public USVString Label { get; }
	///<include file='Utils/Docs/RTCDataChannelOrdered/RTCDataChannelOrdered.generated.xml' path='docs/RTCDataChannelOrdered/*'/>
	public bool Ordered { get; }
	///<include file='Utils/Docs/RTCDataChannelMaxPacketLifeTime/RTCDataChannelMaxPacketLifeTime.generated.xml' path='docs/RTCDataChannelMaxPacketLifeTime/*'/>
	public ushort? MaxPacketLifeTime { get; }
	///<include file='Utils/Docs/RTCDataChannelMaxRetransmits/RTCDataChannelMaxRetransmits.generated.xml' path='docs/RTCDataChannelMaxRetransmits/*'/>
	public ushort? MaxRetransmits { get; }
	///<include file='Utils/Docs/RTCDataChannelProtocol/RTCDataChannelProtocol.generated.xml' path='docs/RTCDataChannelProtocol/*'/>
	public USVString Protocol { get; }
	///<include file='Utils/Docs/RTCDataChannelNegotiated/RTCDataChannelNegotiated.generated.xml' path='docs/RTCDataChannelNegotiated/*'/>
	public bool Negotiated { get; }
	///<include file='Utils/Docs/RTCDataChannelId/RTCDataChannelId.generated.xml' path='docs/RTCDataChannelId/*'/>
	public ushort? Id { get; }
	///<include file='Utils/Docs/RTCDataChannelReadyState/RTCDataChannelReadyState.generated.xml' path='docs/RTCDataChannelReadyState/*'/>
	public RTCDataChannelState ReadyState { get; }
	///<include file='Utils/Docs/RTCDataChannelBufferedAmount/RTCDataChannelBufferedAmount.generated.xml' path='docs/RTCDataChannelBufferedAmount/*'/>
	public ulong BufferedAmount { get; }
	///<include file='Utils/Docs/RTCDataChannelBufferedAmountLowThreshold/RTCDataChannelBufferedAmountLowThreshold.generated.xml' path='docs/RTCDataChannelBufferedAmountLowThreshold/*'/>
	public ulong BufferedAmountLowThreshold { get; set; }
		public EventHandler Onopen { get; set; }
		public EventHandler Onbufferedamountlow { get; set; }
		public EventHandler Onerror { get; set; }
		public EventHandler Onclosing { get; set; }
		public EventHandler Onclose { get; set; }
	///<include file='Utils/Docs/RTCDataChannelClose/RTCDataChannelClose.generated.xml' path='docs/RTCDataChannelClose/*'/>
	public Undefined Close() { throw new System.NotImplementedException(); }
		public EventHandler Onmessage { get; set; }
	///<include file='Utils/Docs/RTCDataChannelBinaryType/RTCDataChannelBinaryType.generated.xml' path='docs/RTCDataChannelBinaryType/*'/>
	public BinaryType BinaryType { get; set; }
	///<include file='Utils/Docs/RTCDataChannelSend/RTCDataChannelSend.generated.xml' path='docs/RTCDataChannelSend/*'/>
	public Undefined Send(USVString data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCDataChannelSend/RTCDataChannelSend.generated.xml' path='docs/RTCDataChannelSend/*'/>
	public Undefined Send(Blob data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCDataChannelSend/RTCDataChannelSend.generated.xml' path='docs/RTCDataChannelSend/*'/>
	public Undefined Send(byte[] data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/RTCDataChannelSend/RTCDataChannelSend.generated.xml' path='docs/RTCDataChannelSend/*'/>
	public Undefined Send(ArrayBufferView data) { throw new System.NotImplementedException(); }
}

public partial class RTCDataChannelInit
{
		public bool Ordered;
		public ushort MaxPacketLifeTime;
		public ushort MaxRetransmits;
		public USVString Protocol;
		public bool Negotiated;
		public ushort Id;
}

///<include file='Utils/Docs/RTCDataChannelEvent/RTCDataChannelEvent.generated.xml' path='docs/RTCDataChannelEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCDataChannelEvent : Event
{
	///<include file='Utils/Docs/RTCDataChannelEventRTCDataChannelEvent/RTCDataChannelEventRTCDataChannelEvent.generated.xml' path='docs/RTCDataChannelEventRTCDataChannelEvent/*'/>
	public RTCDataChannelEvent(DOMString type, RTCDataChannelEventInit eventInitDict) { }
	///<include file='Utils/Docs/RTCDataChannelEventChannel/RTCDataChannelEventChannel.generated.xml' path='docs/RTCDataChannelEventChannel/*'/>
	public RTCDataChannel Channel { get; }
	public RTCDataChannelEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCDataChannelEventInit : EventInit
{
		public required RTCDataChannel Channel;
}

///<include file='Utils/Docs/RTCRtpSender/RTCRtpSender.generated.xml' path='docs/RTCRtpSender/*'/>
public partial class RTCRtpSender
{
	///<include file='Utils/Docs/RTCRtpSenderDtmf/RTCRtpSenderDtmf.generated.xml' path='docs/RTCRtpSenderDtmf/*'/>
	public RTCDTMFSender? Dtmf { get; }
}

///<include file='Utils/Docs/RTCDTMFSender/RTCDTMFSender.generated.xml' path='docs/RTCDTMFSender/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCDTMFSender : EventTarget
{
	///<include file='Utils/Docs/RTCDTMFSenderInsertDTMF/RTCDTMFSenderInsertDTMF.generated.xml' path='docs/RTCDTMFSenderInsertDTMF/*'/>
	public Undefined InsertDTMF(DOMString tones, ulong duration, ulong interToneGap) { throw new System.NotImplementedException(); }
		public EventHandler Ontonechange { get; set; }
	///<include file='Utils/Docs/RTCDTMFSenderCanInsertDTMF/RTCDTMFSenderCanInsertDTMF.generated.xml' path='docs/RTCDTMFSenderCanInsertDTMF/*'/>
	public bool CanInsertDTMF { get; }
	///<include file='Utils/Docs/RTCDTMFSenderToneBuffer/RTCDTMFSenderToneBuffer.generated.xml' path='docs/RTCDTMFSenderToneBuffer/*'/>
	public DOMString ToneBuffer { get; }
}

///<include file='Utils/Docs/RTCDTMFToneChangeEvent/RTCDTMFToneChangeEvent.generated.xml' path='docs/RTCDTMFToneChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCDTMFToneChangeEvent : Event
{
	///<include file='Utils/Docs/RTCDTMFToneChangeEventRTCDTMFToneChangeEvent/RTCDTMFToneChangeEventRTCDTMFToneChangeEvent.generated.xml' path='docs/RTCDTMFToneChangeEventRTCDTMFToneChangeEvent/*'/>
	public RTCDTMFToneChangeEvent(DOMString type, RTCDTMFToneChangeEventInit eventInitDict) { }
	///<include file='Utils/Docs/RTCDTMFToneChangeEventTone/RTCDTMFToneChangeEventTone.generated.xml' path='docs/RTCDTMFToneChangeEventTone/*'/>
	public DOMString Tone { get; }
	public RTCDTMFToneChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCDTMFToneChangeEventInit : EventInit
{
		public DOMString Tone;
}

///<include file='Utils/Docs/RTCPeerConnection/RTCPeerConnection.generated.xml' path='docs/RTCPeerConnection/*'/>
public partial class RTCPeerConnection
{
	///<include file='Utils/Docs/RTCPeerConnectionGetStats/RTCPeerConnectionGetStats.generated.xml' path='docs/RTCPeerConnectionGetStats/*'/>
	public Task<RTCStatsReport> GetStats(MediaStreamTrack? selector) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/RTCStatsReport/RTCStatsReport.generated.xml' path='docs/RTCStatsReport/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCStatsReport
{
	
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCStats
{
		public required DOMHighResTimeStamp Timestamp;
		public required RTCStatsType Type;
		public required DOMString Id;
}

///<include file='Utils/Docs/RTCError/RTCError.generated.xml' path='docs/RTCError/*'/>
public partial class RTCError : DOMException
{
		public RTCError(RTCErrorInit init, DOMString message) { }
	///<include file='Utils/Docs/RTCErrorErrorDetail/RTCErrorErrorDetail.generated.xml' path='docs/RTCErrorErrorDetail/*'/>
	public RTCErrorDetailType ErrorDetail { get; }
	///<include file='Utils/Docs/RTCErrorSdpLineNumber/RTCErrorSdpLineNumber.generated.xml' path='docs/RTCErrorSdpLineNumber/*'/>
	public long? SdpLineNumber { get; }
	///<include file='Utils/Docs/RTCErrorSctpCauseCode/RTCErrorSctpCauseCode.generated.xml' path='docs/RTCErrorSctpCauseCode/*'/>
	public long? SctpCauseCode { get; }
	///<include file='Utils/Docs/RTCErrorReceivedAlert/RTCErrorReceivedAlert.generated.xml' path='docs/RTCErrorReceivedAlert/*'/>
	public ulong? ReceivedAlert { get; }
	///<include file='Utils/Docs/RTCErrorSentAlert/RTCErrorSentAlert.generated.xml' path='docs/RTCErrorSentAlert/*'/>
	public ulong? SentAlert { get; }
	public RTCError() { }
}

public partial class RTCErrorInit
{
		public required RTCErrorDetailType ErrorDetail;
		public long SdpLineNumber;
		public long SctpCauseCode;
		public ulong ReceivedAlert;
		public ulong SentAlert;
}

///<include file='Utils/Docs/RTCErrorEvent/RTCErrorEvent.generated.xml' path='docs/RTCErrorEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCErrorEvent : Event
{
		public RTCErrorEvent(DOMString type, RTCErrorEventInit eventInitDict) { }
	///<include file='Utils/Docs/RTCErrorEventError/RTCErrorEventError.generated.xml' path='docs/RTCErrorEventError/*'/>
	public RTCError Error { get; }
	public RTCErrorEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class RTCErrorEventInit : EventInit
{
		public required RTCError Error;
}

///<include file='Utils/Docs/WebSocket/WebSocket.generated.xml' path='docs/WebSocket/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebSocket : EventTarget
{
	///<include file='Utils/Docs/WebSocketWebSocket/WebSocketWebSocket.generated.xml' path='docs/WebSocketWebSocket/*'/>
	public WebSocket(USVString url, Union232 protocols) { }
	///<include file='Utils/Docs/WebSocketUrl/WebSocketUrl.generated.xml' path='docs/WebSocketUrl/*'/>
	public USVString Url { get; }
		public const ushort CONNECTING = 0;
		public const ushort OPEN = 1;
		public const ushort CLOSING = 2;
		public const ushort CLOSED = 3;
	///<include file='Utils/Docs/WebSocketReadyState/WebSocketReadyState.generated.xml' path='docs/WebSocketReadyState/*'/>
	public ushort ReadyState { get; }
	///<include file='Utils/Docs/WebSocketBufferedAmount/WebSocketBufferedAmount.generated.xml' path='docs/WebSocketBufferedAmount/*'/>
	public ulong BufferedAmount { get; }
		public EventHandler Onopen { get; set; }
		public EventHandler Onerror { get; set; }
		public EventHandler Onclose { get; set; }
	///<include file='Utils/Docs/WebSocketExtensions/WebSocketExtensions.generated.xml' path='docs/WebSocketExtensions/*'/>
	public DOMString Extensions { get; }
	///<include file='Utils/Docs/WebSocketProtocol/WebSocketProtocol.generated.xml' path='docs/WebSocketProtocol/*'/>
	public DOMString Protocol { get; }
	///<include file='Utils/Docs/WebSocketClose/WebSocketClose.generated.xml' path='docs/WebSocketClose/*'/>
	public Undefined Close(ushort code, USVString reason) { throw new System.NotImplementedException(); }
		public EventHandler Onmessage { get; set; }
	///<include file='Utils/Docs/WebSocketBinaryType/WebSocketBinaryType.generated.xml' path='docs/WebSocketBinaryType/*'/>
	public BinaryType BinaryType { get; set; }
	///<include file='Utils/Docs/WebSocketSend/WebSocketSend.generated.xml' path='docs/WebSocketSend/*'/>
	public Undefined Send(Union233 data) { throw new System.NotImplementedException(); }
	public WebSocket() { }
}

///<include file='Utils/Docs/CloseEvent/CloseEvent.generated.xml' path='docs/CloseEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class CloseEvent : Event
{
	///<include file='Utils/Docs/CloseEventCloseEvent/CloseEventCloseEvent.generated.xml' path='docs/CloseEventCloseEvent/*'/>
	public CloseEvent(DOMString type, CloseEventInit eventInitDict) { }
	///<include file='Utils/Docs/CloseEventWasClean/CloseEventWasClean.generated.xml' path='docs/CloseEventWasClean/*'/>
	public bool WasClean { get; }
	///<include file='Utils/Docs/CloseEventCode/CloseEventCode.generated.xml' path='docs/CloseEventCode/*'/>
	public ushort Code { get; }
	///<include file='Utils/Docs/CloseEventReason/CloseEventReason.generated.xml' path='docs/CloseEventReason/*'/>
	public USVString Reason { get; }
	public CloseEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class CloseEventInit : EventInit
{
		public bool WasClean;
		public ushort Code;
		public USVString Reason;
}

///<include file='Utils/Docs/WebTransportDatagramDuplexStream/WebTransportDatagramDuplexStream.generated.xml' path='docs/WebTransportDatagramDuplexStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportDatagramDuplexStream
{
	///<include file='Utils/Docs/WebTransportDatagramDuplexStreamReadable/WebTransportDatagramDuplexStreamReadable.generated.xml' path='docs/WebTransportDatagramDuplexStreamReadable/*'/>
	public ReadableStream Readable { get; }
	///<include file='Utils/Docs/WebTransportDatagramDuplexStreamWritable/WebTransportDatagramDuplexStreamWritable.generated.xml' path='docs/WebTransportDatagramDuplexStreamWritable/*'/>
	public WritableStream Writable { get; }
	///<include file='Utils/Docs/WebTransportDatagramDuplexStreamMaxDatagramSize/WebTransportDatagramDuplexStreamMaxDatagramSize.generated.xml' path='docs/WebTransportDatagramDuplexStreamMaxDatagramSize/*'/>
	public ulong MaxDatagramSize { get; }
	///<include file='Utils/Docs/WebTransportDatagramDuplexStreamIncomingMaxAge/WebTransportDatagramDuplexStreamIncomingMaxAge.generated.xml' path='docs/WebTransportDatagramDuplexStreamIncomingMaxAge/*'/>
	public double? IncomingMaxAge { get; set; }
	///<include file='Utils/Docs/WebTransportDatagramDuplexStreamOutgoingMaxAge/WebTransportDatagramDuplexStreamOutgoingMaxAge.generated.xml' path='docs/WebTransportDatagramDuplexStreamOutgoingMaxAge/*'/>
	public double? OutgoingMaxAge { get; set; }
	///<include file='Utils/Docs/WebTransportDatagramDuplexStreamIncomingHighWaterMark/WebTransportDatagramDuplexStreamIncomingHighWaterMark.generated.xml' path='docs/WebTransportDatagramDuplexStreamIncomingHighWaterMark/*'/>
	public double IncomingHighWaterMark { get; set; }
	///<include file='Utils/Docs/WebTransportDatagramDuplexStreamOutgoingHighWaterMark/WebTransportDatagramDuplexStreamOutgoingHighWaterMark.generated.xml' path='docs/WebTransportDatagramDuplexStreamOutgoingHighWaterMark/*'/>
	public double OutgoingHighWaterMark { get; set; }
}

///<include file='Utils/Docs/WebTransport/WebTransport.generated.xml' path='docs/WebTransport/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransport
{
	///<include file='Utils/Docs/WebTransportWebTransport/WebTransportWebTransport.generated.xml' path='docs/WebTransportWebTransport/*'/>
	public WebTransport(USVString url, WebTransportOptions options) { }
	///<include file='Utils/Docs/WebTransportGetStats/WebTransportGetStats.generated.xml' path='docs/WebTransportGetStats/*'/>
	public Task<WebTransportConnectionStats> GetStats() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WebTransportReady/WebTransportReady.generated.xml' path='docs/WebTransportReady/*'/>
	public Task<Undefined> Ready { get; }
	///<include file='Utils/Docs/WebTransportReliability/WebTransportReliability.generated.xml' path='docs/WebTransportReliability/*'/>
	public WebTransportReliabilityMode Reliability { get; }
	///<include file='Utils/Docs/WebTransportCongestionControl/WebTransportCongestionControl.generated.xml' path='docs/WebTransportCongestionControl/*'/>
	public WebTransportCongestionControl CongestionControl { get; }
		public ushort? AnticipatedConcurrentIncomingUnidirectionalStreams { get; set; }
		public ushort? AnticipatedConcurrentIncomingBidirectionalStreams { get; set; }
		public DOMString Protocol { get; }
	///<include file='Utils/Docs/WebTransportClosed/WebTransportClosed.generated.xml' path='docs/WebTransportClosed/*'/>
	public Task<WebTransportCloseInfo> Closed { get; }
		public Task<Undefined> Draining { get; }
	///<include file='Utils/Docs/WebTransportClose/WebTransportClose.generated.xml' path='docs/WebTransportClose/*'/>
	public Undefined Close(WebTransportCloseInfo closeInfo) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WebTransportDatagrams/WebTransportDatagrams.generated.xml' path='docs/WebTransportDatagrams/*'/>
	public WebTransportDatagramDuplexStream Datagrams { get; }
	///<include file='Utils/Docs/WebTransportCreateBidirectionalStream/WebTransportCreateBidirectionalStream.generated.xml' path='docs/WebTransportCreateBidirectionalStream/*'/>
	public Task<WebTransportBidirectionalStream> CreateBidirectionalStream(WebTransportSendStreamOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WebTransportIncomingBidirectionalStreams/WebTransportIncomingBidirectionalStreams.generated.xml' path='docs/WebTransportIncomingBidirectionalStreams/*'/>
	public ReadableStream IncomingBidirectionalStreams { get; }
	///<include file='Utils/Docs/WebTransportCreateUnidirectionalStream/WebTransportCreateUnidirectionalStream.generated.xml' path='docs/WebTransportCreateUnidirectionalStream/*'/>
	public Task<WebTransportSendStream> CreateUnidirectionalStream(WebTransportSendStreamOptions options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/WebTransportIncomingUnidirectionalStreams/WebTransportIncomingUnidirectionalStreams.generated.xml' path='docs/WebTransportIncomingUnidirectionalStreams/*'/>
	public ReadableStream IncomingUnidirectionalStreams { get; }
		public WebTransportSendGroup CreateSendGroup() { throw new System.NotImplementedException(); }
		public static bool SupportsReliableOnly { get; }
	public WebTransport() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportHash
{
		public DOMString Algorithm;
		public BufferSource Value;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportOptions
{
		public bool AllowPooling;
		public bool RequireUnreliable;
		public List<WebTransportHash> ServerCertificateHashes;
		public WebTransportCongestionControl CongestionControl;
		public ushort? AnticipatedConcurrentIncomingUnidirectionalStreams;
		public ushort? AnticipatedConcurrentIncomingBidirectionalStreams;
		public List<DOMString> Protocols;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportCloseInfo
{
		public ulong CloseCode;
		public USVString Reason;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportSendStreamOptions
{
		public WebTransportSendGroup? SendGroup;
		public long SendOrder;
		public bool WaitUntilAvailable;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportConnectionStats
{
		public ulong BytesSent;
		public ulong PacketsSent;
		public ulong BytesLost;
		public ulong PacketsLost;
		public ulong BytesReceived;
		public ulong PacketsReceived;
		public required DOMHighResTimeStamp SmoothedRtt;
		public required DOMHighResTimeStamp RttVariation;
		public required DOMHighResTimeStamp MinRtt;
		public required WebTransportDatagramStats Datagrams;
		public ulong? EstimatedSendRate;
		public bool AtSendCapacity;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportDatagramStats
{
		public ulong DroppedIncoming;
		public ulong ExpiredIncoming;
		public ulong ExpiredOutgoing;
		public ulong LostOutgoing;
}

///<include file='Utils/Docs/WebTransportSendStream/WebTransportSendStream.generated.xml' path='docs/WebTransportSendStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportSendStream : WritableStream
{
		public WebTransportSendGroup? SendGroup { get; set; }
	///<include file='Utils/Docs/WebTransportSendStreamSendOrder/WebTransportSendStreamSendOrder.generated.xml' path='docs/WebTransportSendStreamSendOrder/*'/>
	public long SendOrder { get; set; }
	///<include file='Utils/Docs/WebTransportSendStreamGetStats/WebTransportSendStreamGetStats.generated.xml' path='docs/WebTransportSendStreamGetStats/*'/>
	public Task<WebTransportSendStreamStats> GetStats() { throw new System.NotImplementedException(); }
		public WebTransportWriter GetWriter() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportSendStreamStats
{
		public ulong BytesWritten;
		public ulong BytesSent;
		public ulong BytesAcknowledged;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportSendGroup
{
		public Task<WebTransportSendStreamStats> GetStats() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/WebTransportReceiveStream/WebTransportReceiveStream.generated.xml' path='docs/WebTransportReceiveStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportReceiveStream : ReadableStream
{
	///<include file='Utils/Docs/WebTransportReceiveStreamGetStats/WebTransportReceiveStreamGetStats.generated.xml' path='docs/WebTransportReceiveStreamGetStats/*'/>
	public Task<WebTransportReceiveStreamStats> GetStats() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportReceiveStreamStats
{
		public ulong BytesReceived;
		public ulong BytesRead;
}

///<include file='Utils/Docs/WebTransportBidirectionalStream/WebTransportBidirectionalStream.generated.xml' path='docs/WebTransportBidirectionalStream/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportBidirectionalStream
{
	///<include file='Utils/Docs/WebTransportBidirectionalStreamReadable/WebTransportBidirectionalStreamReadable.generated.xml' path='docs/WebTransportBidirectionalStreamReadable/*'/>
	public WebTransportReceiveStream Readable { get; }
	///<include file='Utils/Docs/WebTransportBidirectionalStreamWritable/WebTransportBidirectionalStreamWritable.generated.xml' path='docs/WebTransportBidirectionalStreamWritable/*'/>
	public WebTransportSendStream Writable { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportWriter : WritableStreamDefaultWriter
{
		public Task<Undefined> AtomicWrite(dynamic chunk) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/WebTransportError/WebTransportError.generated.xml' path='docs/WebTransportError/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportError : DOMException
{
	///<include file='Utils/Docs/WebTransportErrorWebTransportError/WebTransportErrorWebTransportError.generated.xml' path='docs/WebTransportErrorWebTransportError/*'/>
	public WebTransportError(DOMString message, WebTransportErrorOptions options) { }
	///<include file='Utils/Docs/WebTransportErrorSource/WebTransportErrorSource.generated.xml' path='docs/WebTransportErrorSource/*'/>
	public WebTransportErrorSource Source { get; }
	///<include file='Utils/Docs/WebTransportErrorStreamErrorCode/WebTransportErrorStreamErrorCode.generated.xml' path='docs/WebTransportErrorStreamErrorCode/*'/>
	public ulong? StreamErrorCode { get; }
	public WebTransportError() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WebTransportErrorOptions
{
		public WebTransportErrorSource Source;
		public ulong? StreamErrorCode;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBDeviceFilter
{
		public ushort VendorId;
		public ushort ProductId;
		public byte ClassCode;
		public byte SubclassCode;
		public byte ProtocolCode;
		public DOMString SerialNumber;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBDeviceRequestOptions
{
		public required List<USBDeviceFilter> Filters;
		public List<USBDeviceFilter> ExclusionFilters;
}

///<include file='Utils/Docs/USB/USB.generated.xml' path='docs/USB/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USB : EventTarget
{
		public EventHandler Onconnect { get; set; }
		public EventHandler Ondisconnect { get; set; }
	///<include file='Utils/Docs/USBGetDevices/USBGetDevices.generated.xml' path='docs/USBGetDevices/*'/>
	public Task<List<USBDevice>> GetDevices() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBRequestDevice/USBRequestDevice.generated.xml' path='docs/USBRequestDevice/*'/>
	public Task<USBDevice> RequestDevice(USBDeviceRequestOptions options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorUsb/NavigatorUsb.generated.xml' path='docs/NavigatorUsb/*'/>
	public USB Usb { get; }
}

///<include file='Utils/Docs/WorkerNavigator/WorkerNavigator.generated.xml' path='docs/WorkerNavigator/*'/>
public partial class WorkerNavigator
{
	///<include file='Utils/Docs/WorkerNavigatorUsb/WorkerNavigatorUsb.generated.xml' path='docs/WorkerNavigatorUsb/*'/>
	public USB Usb { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBConnectionEventInit : EventInit
{
		public required USBDevice Device;
}

///<include file='Utils/Docs/USBConnectionEvent/USBConnectionEvent.generated.xml' path='docs/USBConnectionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBConnectionEvent : Event
{
	///<include file='Utils/Docs/USBConnectionEventUSBConnectionEvent/USBConnectionEventUSBConnectionEvent.generated.xml' path='docs/USBConnectionEventUSBConnectionEvent/*'/>
	public USBConnectionEvent(DOMString type, USBConnectionEventInit eventInitDict) { }
	///<include file='Utils/Docs/USBConnectionEventDevice/USBConnectionEventDevice.generated.xml' path='docs/USBConnectionEventDevice/*'/>
	public USBDevice Device { get; }
	public USBConnectionEvent() { }
}

///<include file='Utils/Docs/USBInTransferResult/USBInTransferResult.generated.xml' path='docs/USBInTransferResult/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBInTransferResult
{
		public USBInTransferResult(USBTransferStatus status, Unsupported /*DataView*/? data) { }
		public Unsupported /*DataView*/? Data { get; }
		public USBTransferStatus Status { get; }
	public USBInTransferResult() { }
}

///<include file='Utils/Docs/USBOutTransferResult/USBOutTransferResult.generated.xml' path='docs/USBOutTransferResult/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBOutTransferResult
{
		public USBOutTransferResult(USBTransferStatus status, ulong bytesWritten) { }
		public ulong BytesWritten { get; }
		public USBTransferStatus Status { get; }
	public USBOutTransferResult() { }
}

///<include file='Utils/Docs/USBIsochronousInTransferPacket/USBIsochronousInTransferPacket.generated.xml' path='docs/USBIsochronousInTransferPacket/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBIsochronousInTransferPacket
{
		public USBIsochronousInTransferPacket(USBTransferStatus status, Unsupported /*DataView*/? data) { }
		public Unsupported /*DataView*/? Data { get; }
		public USBTransferStatus Status { get; }
	public USBIsochronousInTransferPacket() { }
}

///<include file='Utils/Docs/USBIsochronousInTransferResult/USBIsochronousInTransferResult.generated.xml' path='docs/USBIsochronousInTransferResult/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBIsochronousInTransferResult
{
		public USBIsochronousInTransferResult(List<USBIsochronousInTransferPacket> packets, Unsupported /*DataView*/? data) { }
		public Unsupported /*DataView*/? Data { get; }
		public USBIsochronousInTransferPacket[] Packets { get; }
	public USBIsochronousInTransferResult() { }
}

///<include file='Utils/Docs/USBIsochronousOutTransferPacket/USBIsochronousOutTransferPacket.generated.xml' path='docs/USBIsochronousOutTransferPacket/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBIsochronousOutTransferPacket
{
		public USBIsochronousOutTransferPacket(USBTransferStatus status, ulong bytesWritten) { }
		public ulong BytesWritten { get; }
		public USBTransferStatus Status { get; }
	public USBIsochronousOutTransferPacket() { }
}

///<include file='Utils/Docs/USBIsochronousOutTransferResult/USBIsochronousOutTransferResult.generated.xml' path='docs/USBIsochronousOutTransferResult/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBIsochronousOutTransferResult
{
		public USBIsochronousOutTransferResult(List<USBIsochronousOutTransferPacket> packets) { }
		public USBIsochronousOutTransferPacket[] Packets { get; }
	public USBIsochronousOutTransferResult() { }
}

///<include file='Utils/Docs/USBDevice/USBDevice.generated.xml' path='docs/USBDevice/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBDevice
{
	///<include file='Utils/Docs/USBDeviceUsbVersionMajor/USBDeviceUsbVersionMajor.generated.xml' path='docs/USBDeviceUsbVersionMajor/*'/>
	public byte UsbVersionMajor { get; }
	///<include file='Utils/Docs/USBDeviceUsbVersionMinor/USBDeviceUsbVersionMinor.generated.xml' path='docs/USBDeviceUsbVersionMinor/*'/>
	public byte UsbVersionMinor { get; }
	///<include file='Utils/Docs/USBDeviceUsbVersionSubminor/USBDeviceUsbVersionSubminor.generated.xml' path='docs/USBDeviceUsbVersionSubminor/*'/>
	public byte UsbVersionSubminor { get; }
	///<include file='Utils/Docs/USBDeviceDeviceClass/USBDeviceDeviceClass.generated.xml' path='docs/USBDeviceDeviceClass/*'/>
	public byte DeviceClass { get; }
	///<include file='Utils/Docs/USBDeviceDeviceSubclass/USBDeviceDeviceSubclass.generated.xml' path='docs/USBDeviceDeviceSubclass/*'/>
	public byte DeviceSubclass { get; }
	///<include file='Utils/Docs/USBDeviceDeviceProtocol/USBDeviceDeviceProtocol.generated.xml' path='docs/USBDeviceDeviceProtocol/*'/>
	public byte DeviceProtocol { get; }
	///<include file='Utils/Docs/USBDeviceVendorId/USBDeviceVendorId.generated.xml' path='docs/USBDeviceVendorId/*'/>
	public ushort VendorId { get; }
	///<include file='Utils/Docs/USBDeviceProductId/USBDeviceProductId.generated.xml' path='docs/USBDeviceProductId/*'/>
	public ushort ProductId { get; }
	///<include file='Utils/Docs/USBDeviceDeviceVersionMajor/USBDeviceDeviceVersionMajor.generated.xml' path='docs/USBDeviceDeviceVersionMajor/*'/>
	public byte DeviceVersionMajor { get; }
	///<include file='Utils/Docs/USBDeviceDeviceVersionMinor/USBDeviceDeviceVersionMinor.generated.xml' path='docs/USBDeviceDeviceVersionMinor/*'/>
	public byte DeviceVersionMinor { get; }
	///<include file='Utils/Docs/USBDeviceDeviceVersionSubminor/USBDeviceDeviceVersionSubminor.generated.xml' path='docs/USBDeviceDeviceVersionSubminor/*'/>
	public byte DeviceVersionSubminor { get; }
	///<include file='Utils/Docs/USBDeviceManufacturerName/USBDeviceManufacturerName.generated.xml' path='docs/USBDeviceManufacturerName/*'/>
	public DOMString? ManufacturerName { get; }
	///<include file='Utils/Docs/USBDeviceProductName/USBDeviceProductName.generated.xml' path='docs/USBDeviceProductName/*'/>
	public DOMString? ProductName { get; }
	///<include file='Utils/Docs/USBDeviceSerialNumber/USBDeviceSerialNumber.generated.xml' path='docs/USBDeviceSerialNumber/*'/>
	public DOMString? SerialNumber { get; }
	///<include file='Utils/Docs/USBDeviceConfiguration/USBDeviceConfiguration.generated.xml' path='docs/USBDeviceConfiguration/*'/>
	public USBConfiguration? Configuration { get; }
	///<include file='Utils/Docs/USBDeviceConfigurations/USBDeviceConfigurations.generated.xml' path='docs/USBDeviceConfigurations/*'/>
	public USBConfiguration[] Configurations { get; }
	///<include file='Utils/Docs/USBDeviceOpened/USBDeviceOpened.generated.xml' path='docs/USBDeviceOpened/*'/>
	public bool Opened { get; }
	///<include file='Utils/Docs/USBDeviceOpen/USBDeviceOpen.generated.xml' path='docs/USBDeviceOpen/*'/>
	public Task<Undefined> Open() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceClose/USBDeviceClose.generated.xml' path='docs/USBDeviceClose/*'/>
	public Task<Undefined> Close() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceForget/USBDeviceForget.generated.xml' path='docs/USBDeviceForget/*'/>
	public Task<Undefined> Forget() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceSelectConfiguration/USBDeviceSelectConfiguration.generated.xml' path='docs/USBDeviceSelectConfiguration/*'/>
	public Task<Undefined> SelectConfiguration(byte configurationValue) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceClaimInterface/USBDeviceClaimInterface.generated.xml' path='docs/USBDeviceClaimInterface/*'/>
	public Task<Undefined> ClaimInterface(byte interfaceNumber) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceReleaseInterface/USBDeviceReleaseInterface.generated.xml' path='docs/USBDeviceReleaseInterface/*'/>
	public Task<Undefined> ReleaseInterface(byte interfaceNumber) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceSelectAlternateInterface/USBDeviceSelectAlternateInterface.generated.xml' path='docs/USBDeviceSelectAlternateInterface/*'/>
	public Task<Undefined> SelectAlternateInterface(byte interfaceNumber, byte alternateSetting) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceControlTransferIn/USBDeviceControlTransferIn.generated.xml' path='docs/USBDeviceControlTransferIn/*'/>
	public Task<USBInTransferResult> ControlTransferIn(USBControlTransferParameters setup, ushort length) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceControlTransferOut/USBDeviceControlTransferOut.generated.xml' path='docs/USBDeviceControlTransferOut/*'/>
	public Task<USBOutTransferResult> ControlTransferOut(USBControlTransferParameters setup, BufferSource data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceClearHalt/USBDeviceClearHalt.generated.xml' path='docs/USBDeviceClearHalt/*'/>
	public Task<Undefined> ClearHalt(USBDirection direction, byte endpointNumber) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceTransferIn/USBDeviceTransferIn.generated.xml' path='docs/USBDeviceTransferIn/*'/>
	public Task<USBInTransferResult> TransferIn(byte endpointNumber, ulong length) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceTransferOut/USBDeviceTransferOut.generated.xml' path='docs/USBDeviceTransferOut/*'/>
	public Task<USBOutTransferResult> TransferOut(byte endpointNumber, BufferSource data) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceIsochronousTransferIn/USBDeviceIsochronousTransferIn.generated.xml' path='docs/USBDeviceIsochronousTransferIn/*'/>
	public Task<USBIsochronousInTransferResult> IsochronousTransferIn(byte endpointNumber, List<ulong> packetLengths) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceIsochronousTransferOut/USBDeviceIsochronousTransferOut.generated.xml' path='docs/USBDeviceIsochronousTransferOut/*'/>
	public Task<USBIsochronousOutTransferResult> IsochronousTransferOut(byte endpointNumber, BufferSource data, List<ulong> packetLengths) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/USBDeviceReset/USBDeviceReset.generated.xml' path='docs/USBDeviceReset/*'/>
	public Task<Undefined> Reset() { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBControlTransferParameters
{
		public required USBRequestType RequestType;
		public required USBRecipient Recipient;
		public required byte Request;
		public required ushort Value;
		public required ushort Index;
}

///<include file='Utils/Docs/USBConfiguration/USBConfiguration.generated.xml' path='docs/USBConfiguration/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBConfiguration
{
	///<include file='Utils/Docs/USBConfigurationUSBConfiguration/USBConfigurationUSBConfiguration.generated.xml' path='docs/USBConfigurationUSBConfiguration/*'/>
	public USBConfiguration(USBDevice device, byte configurationValue) { }
	///<include file='Utils/Docs/USBConfigurationConfigurationValue/USBConfigurationConfigurationValue.generated.xml' path='docs/USBConfigurationConfigurationValue/*'/>
	public byte ConfigurationValue { get; }
	///<include file='Utils/Docs/USBConfigurationConfigurationName/USBConfigurationConfigurationName.generated.xml' path='docs/USBConfigurationConfigurationName/*'/>
	public DOMString? ConfigurationName { get; }
	///<include file='Utils/Docs/USBConfigurationInterfaces/USBConfigurationInterfaces.generated.xml' path='docs/USBConfigurationInterfaces/*'/>
	public USBInterface[] Interfaces { get; }
	public USBConfiguration() { }
}

///<include file='Utils/Docs/USBInterface/USBInterface.generated.xml' path='docs/USBInterface/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBInterface
{
		public USBInterface(USBConfiguration configuration, byte interfaceNumber) { }
		public byte InterfaceNumber { get; }
		public USBAlternateInterface Alternate { get; }
		public USBAlternateInterface[] Alternates { get; }
		public bool Claimed { get; }
	public USBInterface() { }
}

///<include file='Utils/Docs/USBAlternateInterface/USBAlternateInterface.generated.xml' path='docs/USBAlternateInterface/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBAlternateInterface
{
		public USBAlternateInterface(USBInterface deviceInterface, byte alternateSetting) { }
		public byte AlternateSetting { get; }
		public byte InterfaceClass { get; }
		public byte InterfaceSubclass { get; }
		public byte InterfaceProtocol { get; }
		public DOMString? InterfaceName { get; }
		public USBEndpoint[] Endpoints { get; }
	public USBAlternateInterface() { }
}

///<include file='Utils/Docs/USBEndpoint/USBEndpoint.generated.xml' path='docs/USBEndpoint/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBEndpoint
{
		public USBEndpoint(USBAlternateInterface alternate, byte endpointNumber, USBDirection direction) { }
		public byte EndpointNumber { get; }
		public USBDirection Direction { get; }
		public USBEndpointType Type { get; }
		public ulong PacketSize { get; }
	public USBEndpoint() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBBlocklistEntry
{
		public required ushort IdVendor;
		public required ushort IdProduct;
		public required ushort BcdDevice;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBPermissionDescriptor : PermissionDescriptor
{
		public List<USBDeviceFilter> Filters;
		public List<USBDeviceFilter> ExclusionFilters;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class AllowedUSBDevice
{
		public required byte VendorId;
		public required byte ProductId;
		public DOMString SerialNumber;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBPermissionStorage
{
		public List<AllowedUSBDevice> AllowedDevices;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class USBPermissionResult : PermissionStatus
{
		public USBDevice[] Devices { get; set; }
}

///<include file='Utils/Docs/VTTCue/VTTCue.generated.xml' path='docs/VTTCue/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VTTCue : TextTrackCue
{
	///<include file='Utils/Docs/VTTCueVTTCue/VTTCueVTTCue.generated.xml' path='docs/VTTCueVTTCue/*'/>
	public VTTCue(Number startTime, double endTime, DOMString text) { }
	///<include file='Utils/Docs/VTTCueRegion/VTTCueRegion.generated.xml' path='docs/VTTCueRegion/*'/>
	public VTTRegion? Region { get; set; }
	///<include file='Utils/Docs/VTTCueVertical/VTTCueVertical.generated.xml' path='docs/VTTCueVertical/*'/>
	public DirectionSetting Vertical { get; set; }
	///<include file='Utils/Docs/VTTCueSnapToLines/VTTCueSnapToLines.generated.xml' path='docs/VTTCueSnapToLines/*'/>
	public bool SnapToLines { get; set; }
	///<include file='Utils/Docs/VTTCueLine/VTTCueLine.generated.xml' path='docs/VTTCueLine/*'/>
	public LineAndPositionSetting Line { get; set; }
	///<include file='Utils/Docs/VTTCueLineAlign/VTTCueLineAlign.generated.xml' path='docs/VTTCueLineAlign/*'/>
	public LineAlignSetting LineAlign { get; set; }
	///<include file='Utils/Docs/VTTCuePosition/VTTCuePosition.generated.xml' path='docs/VTTCuePosition/*'/>
	public LineAndPositionSetting Position { get; set; }
	///<include file='Utils/Docs/VTTCuePositionAlign/VTTCuePositionAlign.generated.xml' path='docs/VTTCuePositionAlign/*'/>
	public PositionAlignSetting PositionAlign { get; set; }
	///<include file='Utils/Docs/VTTCueSize/VTTCueSize.generated.xml' path='docs/VTTCueSize/*'/>
	public Number Size { get; set; }
	///<include file='Utils/Docs/VTTCueAlign/VTTCueAlign.generated.xml' path='docs/VTTCueAlign/*'/>
	public AlignSetting Align { get; set; }
	///<include file='Utils/Docs/VTTCueText/VTTCueText.generated.xml' path='docs/VTTCueText/*'/>
	public DOMString Text { get; set; }
	///<include file='Utils/Docs/VTTCueGetCueAsHTML/VTTCueGetCueAsHTML.generated.xml' path='docs/VTTCueGetCueAsHTML/*'/>
	public DocumentFragment GetCueAsHTML() { throw new System.NotImplementedException(); }
	public VTTCue() { }
}

///<include file='Utils/Docs/VTTRegion/VTTRegion.generated.xml' path='docs/VTTRegion/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class VTTRegion
{
		public VTTRegion() { }
		public DOMString Id { get; set; }
		public Number Width { get; set; }
		public ulong Lines { get; set; }
		public Number RegionAnchorX { get; set; }
		public Number RegionAnchorY { get; set; }
		public Number ViewportAnchorX { get; set; }
		public Number ViewportAnchorY { get; set; }
		public ScrollSetting Scroll { get; set; }
}

///<include file='Utils/Docs/XRSession/XRSession.generated.xml' path='docs/XRSession/*'/>
public partial class XRSession
{
	///<include file='Utils/Docs/XRSessionEnvironmentBlendMode/XRSessionEnvironmentBlendMode.generated.xml' path='docs/XRSessionEnvironmentBlendMode/*'/>
	public XREnvironmentBlendMode EnvironmentBlendMode { get; }
}

///<include file='Utils/Docs/XRSession/XRSession.generated.xml' path='docs/XRSession/*'/>
public partial class XRSession
{
	///<include file='Utils/Docs/XRSessionInteractionMode/XRSessionInteractionMode.generated.xml' path='docs/XRSessionInteractionMode/*'/>
	public XRInteractionMode InteractionMode { get; }
}

///<include file='Utils/Docs/XRView/XRView.generated.xml' path='docs/XRView/*'/>
public partial class XRView
{
	///<include file='Utils/Docs/XRViewIsFirstPersonObserver/XRViewIsFirstPersonObserver.generated.xml' path='docs/XRViewIsFirstPersonObserver/*'/>
	public bool IsFirstPersonObserver { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRDepthStateInit
{
		public required List<XRDepthUsage> UsagePreference;
		public required List<XRDepthDataFormat> DataFormatPreference;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRSessionInit
{
		public XRDepthStateInit DepthSensing;
}

///<include file='Utils/Docs/XRSession/XRSession.generated.xml' path='docs/XRSession/*'/>
public partial class XRSession
{
	///<include file='Utils/Docs/XRSessionDepthUsage/XRSessionDepthUsage.generated.xml' path='docs/XRSessionDepthUsage/*'/>
	public XRDepthUsage DepthUsage { get; }
	///<include file='Utils/Docs/XRSessionDepthDataFormat/XRSessionDepthDataFormat.generated.xml' path='docs/XRSessionDepthDataFormat/*'/>
	public XRDepthDataFormat DepthDataFormat { get; }
}

///<include file='Utils/Docs/XRDepthInformation/XRDepthInformation.generated.xml' path='docs/XRDepthInformation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRDepthInformation
{
	///<include file='Utils/Docs/XRDepthInformationWidth/XRDepthInformationWidth.generated.xml' path='docs/XRDepthInformationWidth/*'/>
	public ulong Width { get; }
	///<include file='Utils/Docs/XRDepthInformationHeight/XRDepthInformationHeight.generated.xml' path='docs/XRDepthInformationHeight/*'/>
	public ulong Height { get; }
	///<include file='Utils/Docs/XRDepthInformationNormDepthBufferFromNormView/XRDepthInformationNormDepthBufferFromNormView.generated.xml' path='docs/XRDepthInformationNormDepthBufferFromNormView/*'/>
	public XRRigidTransform NormDepthBufferFromNormView { get; }
	///<include file='Utils/Docs/XRDepthInformationRawValueToMeters/XRDepthInformationRawValueToMeters.generated.xml' path='docs/XRDepthInformationRawValueToMeters/*'/>
	public Number RawValueToMeters { get; }
}

///<include file='Utils/Docs/XRCPUDepthInformation/XRCPUDepthInformation.generated.xml' path='docs/XRCPUDepthInformation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRCPUDepthInformation : XRDepthInformation
{
	///<include file='Utils/Docs/XRCPUDepthInformationData/XRCPUDepthInformationData.generated.xml' path='docs/XRCPUDepthInformationData/*'/>
	public byte[] Data { get; }
	///<include file='Utils/Docs/XRCPUDepthInformationGetDepthInMeters/XRCPUDepthInformationGetDepthInMeters.generated.xml' path='docs/XRCPUDepthInformationGetDepthInMeters/*'/>
	public Number GetDepthInMeters(Number x, Number y) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRFrame/XRFrame.generated.xml' path='docs/XRFrame/*'/>
public partial class XRFrame
{
	///<include file='Utils/Docs/XRFrameGetDepthInformation/XRFrameGetDepthInformation.generated.xml' path='docs/XRFrameGetDepthInformation/*'/>
	public XRCPUDepthInformation? GetDepthInformation(XRView view) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRWebGLDepthInformation/XRWebGLDepthInformation.generated.xml' path='docs/XRWebGLDepthInformation/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRWebGLDepthInformation : XRDepthInformation
{
	///<include file='Utils/Docs/XRWebGLDepthInformationTexture/XRWebGLDepthInformationTexture.generated.xml' path='docs/XRWebGLDepthInformationTexture/*'/>
	public WebGLTexture Texture { get; }
		public XRTextureType TextureType { get; }
		public ulong? ImageIndex { get; }
}

///<include file='Utils/Docs/XRWebGLBinding/XRWebGLBinding.generated.xml' path='docs/XRWebGLBinding/*'/>
public partial class XRWebGLBinding
{
	///<include file='Utils/Docs/XRWebGLBindingGetDepthInformation/XRWebGLBindingGetDepthInformation.generated.xml' path='docs/XRWebGLBindingGetDepthInformation/*'/>
	public XRWebGLDepthInformation? GetDepthInformation(XRView view) { throw new System.NotImplementedException(); }
}

public partial class XRSessionInit
{
		public XRDOMOverlayInit? DomOverlay;
}

///<include file='Utils/Docs/XRSession/XRSession.generated.xml' path='docs/XRSession/*'/>
public partial class XRSession
{
	///<include file='Utils/Docs/XRSessionDomOverlayState/XRSessionDomOverlayState.generated.xml' path='docs/XRSessionDomOverlayState/*'/>
	public XRDOMOverlayState? DomOverlayState { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRDOMOverlayInit
{
		public required Element Root;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRDOMOverlayState
{
		public XRDOMOverlayType Type;
}

///<include file='Utils/Docs/XRInputSource/XRInputSource.generated.xml' path='docs/XRInputSource/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRInputSource
{
	///<include file='Utils/Docs/XRInputSourceGamepad/XRInputSourceGamepad.generated.xml' path='docs/XRInputSourceGamepad/*'/>
	public Gamepad? Gamepad { get; }
}

///<include file='Utils/Docs/XRInputSource/XRInputSource.generated.xml' path='docs/XRInputSource/*'/>
public partial class XRInputSource
{
	///<include file='Utils/Docs/XRInputSourceHand/XRInputSourceHand.generated.xml' path='docs/XRInputSourceHand/*'/>
	public XRHand? Hand { get; }
}

///<include file='Utils/Docs/XRHand/XRHand.generated.xml' path='docs/XRHand/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRHand
{
	public XRHandJoint this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
		public ulong Size { get; }
		public XRJointSpace Get(XRHandJoint key) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRJointSpace/XRJointSpace.generated.xml' path='docs/XRJointSpace/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRJointSpace : XRSpace
{
	///<include file='Utils/Docs/XRJointSpaceJointName/XRJointSpaceJointName.generated.xml' path='docs/XRJointSpaceJointName/*'/>
	public XRHandJoint JointName { get; }
}

///<include file='Utils/Docs/XRFrame/XRFrame.generated.xml' path='docs/XRFrame/*'/>
public partial class XRFrame
{
	///<include file='Utils/Docs/XRFrameGetJointPose/XRFrameGetJointPose.generated.xml' path='docs/XRFrameGetJointPose/*'/>
	public XRJointPose? GetJointPose(XRJointSpace joint, XRSpace baseSpace) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRFrameFillJointRadii/XRFrameFillJointRadii.generated.xml' path='docs/XRFrameFillJointRadii/*'/>
	public bool FillJointRadii(List<XRJointSpace> jointSpaces, System.Single radii) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRFrameFillPoses/XRFrameFillPoses.generated.xml' path='docs/XRFrameFillPoses/*'/>
	public bool FillPoses(List<XRSpace> spaces, XRSpace baseSpace, System.Single transforms) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRJointPose/XRJointPose.generated.xml' path='docs/XRJointPose/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRJointPose : XRPose
{
	///<include file='Utils/Docs/XRJointPoseRadius/XRJointPoseRadius.generated.xml' path='docs/XRJointPoseRadius/*'/>
	public Number Radius { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRHitTestOptionsInit
{
		public required XRSpace Space;
		public List<XRHitTestTrackableType> EntityTypes;
		public XRRay OffsetRay;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRTransientInputHitTestOptionsInit
{
		public required DOMString Profile;
		public List<XRHitTestTrackableType> EntityTypes;
		public XRRay OffsetRay;
}

///<include file='Utils/Docs/XRHitTestSource/XRHitTestSource.generated.xml' path='docs/XRHitTestSource/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRHitTestSource
{
	///<include file='Utils/Docs/XRHitTestSourceCancel/XRHitTestSourceCancel.generated.xml' path='docs/XRHitTestSourceCancel/*'/>
	public Undefined Cancel() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRTransientInputHitTestSource/XRTransientInputHitTestSource.generated.xml' path='docs/XRTransientInputHitTestSource/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRTransientInputHitTestSource
{
	///<include file='Utils/Docs/XRTransientInputHitTestSourceCancel/XRTransientInputHitTestSourceCancel.generated.xml' path='docs/XRTransientInputHitTestSourceCancel/*'/>
	public Undefined Cancel() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRHitTestResult/XRHitTestResult.generated.xml' path='docs/XRHitTestResult/*'/>
public partial class XRHitTestResult
{
	///<include file='Utils/Docs/XRHitTestResultGetPose/XRHitTestResultGetPose.generated.xml' path='docs/XRHitTestResultGetPose/*'/>
	public XRPose? GetPose(XRSpace baseSpace) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRTransientInputHitTestResult/XRTransientInputHitTestResult.generated.xml' path='docs/XRTransientInputHitTestResult/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRTransientInputHitTestResult
{
	///<include file='Utils/Docs/XRTransientInputHitTestResultInputSource/XRTransientInputHitTestResultInputSource.generated.xml' path='docs/XRTransientInputHitTestResultInputSource/*'/>
	public XRInputSource InputSource { get; }
	///<include file='Utils/Docs/XRTransientInputHitTestResultResults/XRTransientInputHitTestResultResults.generated.xml' path='docs/XRTransientInputHitTestResultResults/*'/>
	public XRHitTestResult[] Results { get; }
}

///<include file='Utils/Docs/XRSession/XRSession.generated.xml' path='docs/XRSession/*'/>
public partial class XRSession
{
	///<include file='Utils/Docs/XRSessionRequestHitTestSource/XRSessionRequestHitTestSource.generated.xml' path='docs/XRSessionRequestHitTestSource/*'/>
	public Task<XRHitTestSource> RequestHitTestSource(XRHitTestOptionsInit options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRSessionRequestHitTestSourceForTransientInput/XRSessionRequestHitTestSourceForTransientInput.generated.xml' path='docs/XRSessionRequestHitTestSourceForTransientInput/*'/>
	public Task<XRTransientInputHitTestSource> RequestHitTestSourceForTransientInput(XRTransientInputHitTestOptionsInit options) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRFrame/XRFrame.generated.xml' path='docs/XRFrame/*'/>
public partial class XRFrame
{
	///<include file='Utils/Docs/XRFrameGetHitTestResults/XRFrameGetHitTestResults.generated.xml' path='docs/XRFrameGetHitTestResults/*'/>
	public List<XRHitTestResult> GetHitTestResults(XRHitTestSource hitTestSource) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRFrameGetHitTestResultsForTransientInput/XRFrameGetHitTestResultsForTransientInput.generated.xml' path='docs/XRFrameGetHitTestResultsForTransientInput/*'/>
	public List<XRTransientInputHitTestResult> GetHitTestResultsForTransientInput(XRTransientInputHitTestSource hitTestSource) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRRayDirectionInit
{
		public Number X;
		public Number Y;
		public Number Z;
		public Number W;
}

///<include file='Utils/Docs/XRRay/XRRay.generated.xml' path='docs/XRRay/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRRay
{
	///<include file='Utils/Docs/XRRayXRRay/XRRayXRRay.generated.xml' path='docs/XRRayXRRay/*'/>
	public XRRay(DOMPointInit origin, XRRayDirectionInit direction) { }
	///<include file='Utils/Docs/XRRayXRRay/XRRayXRRay.generated.xml' path='docs/XRRayXRRay/*'/>
	public XRRay(XRRigidTransform transform) { }
	///<include file='Utils/Docs/XRRayOrigin/XRRayOrigin.generated.xml' path='docs/XRRayOrigin/*'/>
	public DOMPointReadOnly Origin { get; }
	///<include file='Utils/Docs/XRRayDirection/XRRayDirection.generated.xml' path='docs/XRRayDirection/*'/>
	public DOMPointReadOnly Direction { get; }
	///<include file='Utils/Docs/XRRayMatrix/XRRayMatrix.generated.xml' path='docs/XRRayMatrix/*'/>
	public System.Single Matrix { get; }
	public XRRay() { }
}

///<include file='Utils/Docs/XRLightProbe/XRLightProbe.generated.xml' path='docs/XRLightProbe/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRLightProbe : EventTarget
{
	///<include file='Utils/Docs/XRLightProbeProbeSpace/XRLightProbeProbeSpace.generated.xml' path='docs/XRLightProbeProbeSpace/*'/>
	public XRSpace ProbeSpace { get; }
		public EventHandler Onreflectionchange { get; set; }
}

///<include file='Utils/Docs/XRLightEstimate/XRLightEstimate.generated.xml' path='docs/XRLightEstimate/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRLightEstimate
{
	///<include file='Utils/Docs/XRLightEstimateSphericalHarmonicsCoefficients/XRLightEstimateSphericalHarmonicsCoefficients.generated.xml' path='docs/XRLightEstimateSphericalHarmonicsCoefficients/*'/>
	public System.Single SphericalHarmonicsCoefficients { get; }
	///<include file='Utils/Docs/XRLightEstimatePrimaryLightDirection/XRLightEstimatePrimaryLightDirection.generated.xml' path='docs/XRLightEstimatePrimaryLightDirection/*'/>
	public DOMPointReadOnly PrimaryLightDirection { get; }
	///<include file='Utils/Docs/XRLightEstimatePrimaryLightIntensity/XRLightEstimatePrimaryLightIntensity.generated.xml' path='docs/XRLightEstimatePrimaryLightIntensity/*'/>
	public DOMPointReadOnly PrimaryLightIntensity { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRLightProbeInit
{
		public XRReflectionFormat ReflectionFormat;
}

///<include file='Utils/Docs/XRSession/XRSession.generated.xml' path='docs/XRSession/*'/>
public partial class XRSession
{
	///<include file='Utils/Docs/XRSessionRequestLightProbe/XRSessionRequestLightProbe.generated.xml' path='docs/XRSessionRequestLightProbe/*'/>
	public Task<XRLightProbe> RequestLightProbe(XRLightProbeInit options) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRSessionPreferredReflectionFormat/XRSessionPreferredReflectionFormat.generated.xml' path='docs/XRSessionPreferredReflectionFormat/*'/>
	public XRReflectionFormat PreferredReflectionFormat { get; }
}

///<include file='Utils/Docs/XRFrame/XRFrame.generated.xml' path='docs/XRFrame/*'/>
public partial class XRFrame
{
	///<include file='Utils/Docs/XRFrameGetLightEstimate/XRFrameGetLightEstimate.generated.xml' path='docs/XRFrameGetLightEstimate/*'/>
	public XRLightEstimate? GetLightEstimate(XRLightProbe lightProbe) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRWebGLBinding/XRWebGLBinding.generated.xml' path='docs/XRWebGLBinding/*'/>
public partial class XRWebGLBinding
{
	///<include file='Utils/Docs/XRWebGLBindingGetReflectionCubeMap/XRWebGLBindingGetReflectionCubeMap.generated.xml' path='docs/XRWebGLBindingGetReflectionCubeMap/*'/>
	public WebGLTexture? GetReflectionCubeMap(XRLightProbe lightProbe) { throw new System.NotImplementedException(); }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRPlane
{
		public XRSpace PlaneSpace { get; }
		public DOMPointReadOnly[] Polygon { get; }
		public XRPlaneOrientation? Orientation { get; }
		public DOMHighResTimeStamp LastChangedTime { get; }
		public DOMString? SemanticLabel { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRPlaneSet
{
	
}

///<include file='Utils/Docs/XRFrame/XRFrame.generated.xml' path='docs/XRFrame/*'/>
public partial class XRFrame
{
		public XRPlaneSet DetectedPlanes { get; }
}

///<include file='Utils/Docs/XRSession/XRSession.generated.xml' path='docs/XRSession/*'/>
public partial class XRSession
{
		public Task<Undefined> InitiateRoomCapture() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorXr/NavigatorXr.generated.xml' path='docs/NavigatorXr/*'/>
	public XRSystem Xr { get; }
}

///<include file='Utils/Docs/XRSystem/XRSystem.generated.xml' path='docs/XRSystem/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRSystem : EventTarget
{
	///<include file='Utils/Docs/XRSystemIsSessionSupported/XRSystemIsSessionSupported.generated.xml' path='docs/XRSystemIsSessionSupported/*'/>
	public Task<bool> IsSessionSupported(XRSessionMode mode) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRSystemRequestSession/XRSystemRequestSession.generated.xml' path='docs/XRSystemRequestSession/*'/>
	public Task<XRSession> RequestSession(XRSessionMode mode, XRSessionInit options) { throw new System.NotImplementedException(); }
		public EventHandler Ondevicechange { get; set; }
}

public partial class XRSessionInit
{
		public List<DOMString> RequiredFeatures;
		public List<DOMString> OptionalFeatures;
}

///<include file='Utils/Docs/XRSession/XRSession.generated.xml' path='docs/XRSession/*'/>
public partial class XRSession : EventTarget
{
	///<include file='Utils/Docs/XRSessionVisibilityState/XRSessionVisibilityState.generated.xml' path='docs/XRSessionVisibilityState/*'/>
	public XRVisibilityState VisibilityState { get; }
		public Number? FrameRate { get; }
		public System.Single? SupportedFrameRates { get; }
	///<include file='Utils/Docs/XRSessionRenderState/XRSessionRenderState.generated.xml' path='docs/XRSessionRenderState/*'/>
	public XRRenderState RenderState { get; }
	///<include file='Utils/Docs/XRSessionInputSources/XRSessionInputSources.generated.xml' path='docs/XRSessionInputSources/*'/>
	public XRInputSourceArray InputSources { get; }
		public XRInputSourceArray TrackedSources { get; }
		public DOMString[] EnabledFeatures { get; }
		public bool IsSystemKeyboardSupported { get; }
	///<include file='Utils/Docs/XRSessionUpdateRenderState/XRSessionUpdateRenderState.generated.xml' path='docs/XRSessionUpdateRenderState/*'/>
	public Undefined UpdateRenderState(XRRenderStateInit state) { throw new System.NotImplementedException(); }
		public Task<Undefined> UpdateTargetFrameRate(Number rate) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRSessionRequestReferenceSpace/XRSessionRequestReferenceSpace.generated.xml' path='docs/XRSessionRequestReferenceSpace/*'/>
	public Task<XRReferenceSpace> RequestReferenceSpace(XRReferenceSpaceType type) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRSessionRequestAnimationFrame/XRSessionRequestAnimationFrame.generated.xml' path='docs/XRSessionRequestAnimationFrame/*'/>
	public ulong RequestAnimationFrame(XRFrameRequestCallback callback) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRSessionCancelAnimationFrame/XRSessionCancelAnimationFrame.generated.xml' path='docs/XRSessionCancelAnimationFrame/*'/>
	public Undefined CancelAnimationFrame(ulong handle) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRSessionEnd/XRSessionEnd.generated.xml' path='docs/XRSessionEnd/*'/>
	public Task<Undefined> End() { throw new System.NotImplementedException(); }
		public EventHandler Onend { get; set; }
		public EventHandler Oninputsourceschange { get; set; }
		public EventHandler Onselect { get; set; }
		public EventHandler Onselectstart { get; set; }
		public EventHandler Onselectend { get; set; }
		public EventHandler Onsqueeze { get; set; }
		public EventHandler Onsqueezestart { get; set; }
		public EventHandler Onsqueezeend { get; set; }
		public EventHandler Onvisibilitychange { get; set; }
		public EventHandler Onframeratechange { get; set; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRRenderStateInit
{
		public Number DepthNear;
		public Number DepthFar;
		public Number InlineVerticalFieldOfView;
		public XRWebGLLayer? BaseLayer;
		public List<XRLayer>? Layers;
}

///<include file='Utils/Docs/XRRenderState/XRRenderState.generated.xml' path='docs/XRRenderState/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRRenderState
{
	///<include file='Utils/Docs/XRRenderStateDepthNear/XRRenderStateDepthNear.generated.xml' path='docs/XRRenderStateDepthNear/*'/>
	public Number DepthNear { get; }
	///<include file='Utils/Docs/XRRenderStateDepthFar/XRRenderStateDepthFar.generated.xml' path='docs/XRRenderStateDepthFar/*'/>
	public Number DepthFar { get; }
	///<include file='Utils/Docs/XRRenderStateInlineVerticalFieldOfView/XRRenderStateInlineVerticalFieldOfView.generated.xml' path='docs/XRRenderStateInlineVerticalFieldOfView/*'/>
	public Number? InlineVerticalFieldOfView { get; }
	///<include file='Utils/Docs/XRRenderStateBaseLayer/XRRenderStateBaseLayer.generated.xml' path='docs/XRRenderStateBaseLayer/*'/>
	public XRWebGLLayer? BaseLayer { get; }
}

///<include file='Utils/Docs/XRFrame/XRFrame.generated.xml' path='docs/XRFrame/*'/>
public partial class XRFrame
{
	///<include file='Utils/Docs/XRFrameSession/XRFrameSession.generated.xml' path='docs/XRFrameSession/*'/>
	public XRSession Session { get; }
		public DOMHighResTimeStamp PredictedDisplayTime { get; }
	///<include file='Utils/Docs/XRFrameGetViewerPose/XRFrameGetViewerPose.generated.xml' path='docs/XRFrameGetViewerPose/*'/>
	public XRViewerPose? GetViewerPose(XRReferenceSpace referenceSpace) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRFrameGetPose/XRFrameGetPose.generated.xml' path='docs/XRFrameGetPose/*'/>
	public XRPose? GetPose(XRSpace space, XRSpace baseSpace) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRSpace/XRSpace.generated.xml' path='docs/XRSpace/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRSpace : EventTarget
{
}

///<include file='Utils/Docs/XRReferenceSpace/XRReferenceSpace.generated.xml' path='docs/XRReferenceSpace/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRReferenceSpace : XRSpace
{
	///<include file='Utils/Docs/XRReferenceSpaceGetOffsetReferenceSpace/XRReferenceSpaceGetOffsetReferenceSpace.generated.xml' path='docs/XRReferenceSpaceGetOffsetReferenceSpace/*'/>
	public XRReferenceSpace GetOffsetReferenceSpace(XRRigidTransform originOffset) { throw new System.NotImplementedException(); }
		public EventHandler Onreset { get; set; }
}

///<include file='Utils/Docs/XRBoundedReferenceSpace/XRBoundedReferenceSpace.generated.xml' path='docs/XRBoundedReferenceSpace/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRBoundedReferenceSpace : XRReferenceSpace
{
	///<include file='Utils/Docs/XRBoundedReferenceSpaceBoundsGeometry/XRBoundedReferenceSpaceBoundsGeometry.generated.xml' path='docs/XRBoundedReferenceSpaceBoundsGeometry/*'/>
	public DOMPointReadOnly[] BoundsGeometry { get; }
}

///<include file='Utils/Docs/XRView/XRView.generated.xml' path='docs/XRView/*'/>
public partial class XRView
{
	///<include file='Utils/Docs/XRViewEye/XRViewEye.generated.xml' path='docs/XRViewEye/*'/>
	public XREye Eye { get; }
	///<include file='Utils/Docs/XRViewProjectionMatrix/XRViewProjectionMatrix.generated.xml' path='docs/XRViewProjectionMatrix/*'/>
	public System.Single ProjectionMatrix { get; }
	///<include file='Utils/Docs/XRViewTransform/XRViewTransform.generated.xml' path='docs/XRViewTransform/*'/>
	public XRRigidTransform Transform { get; }
	///<include file='Utils/Docs/XRViewRecommendedViewportScale/XRViewRecommendedViewportScale.generated.xml' path='docs/XRViewRecommendedViewportScale/*'/>
	public Number? RecommendedViewportScale { get; }
	///<include file='Utils/Docs/XRViewRequestViewportScale/XRViewRequestViewportScale.generated.xml' path='docs/XRViewRequestViewportScale/*'/>
	public Undefined RequestViewportScale(Number? scale) { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRViewport/XRViewport.generated.xml' path='docs/XRViewport/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRViewport
{
	///<include file='Utils/Docs/XRViewportX/XRViewportX.generated.xml' path='docs/XRViewportX/*'/>
	public long X { get; }
	///<include file='Utils/Docs/XRViewportY/XRViewportY.generated.xml' path='docs/XRViewportY/*'/>
	public long Y { get; }
	///<include file='Utils/Docs/XRViewportWidth/XRViewportWidth.generated.xml' path='docs/XRViewportWidth/*'/>
	public long Width { get; }
	///<include file='Utils/Docs/XRViewportHeight/XRViewportHeight.generated.xml' path='docs/XRViewportHeight/*'/>
	public long Height { get; }
}

///<include file='Utils/Docs/XRRigidTransform/XRRigidTransform.generated.xml' path='docs/XRRigidTransform/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRRigidTransform
{
	///<include file='Utils/Docs/XRRigidTransformXRRigidTransform/XRRigidTransformXRRigidTransform.generated.xml' path='docs/XRRigidTransformXRRigidTransform/*'/>
	public XRRigidTransform(DOMPointInit position, DOMPointInit orientation) { }
	///<include file='Utils/Docs/XRRigidTransformPosition/XRRigidTransformPosition.generated.xml' path='docs/XRRigidTransformPosition/*'/>
	public DOMPointReadOnly Position { get; }
	///<include file='Utils/Docs/XRRigidTransformOrientation/XRRigidTransformOrientation.generated.xml' path='docs/XRRigidTransformOrientation/*'/>
	public DOMPointReadOnly Orientation { get; }
	///<include file='Utils/Docs/XRRigidTransformMatrix/XRRigidTransformMatrix.generated.xml' path='docs/XRRigidTransformMatrix/*'/>
	public System.Single Matrix { get; }
	///<include file='Utils/Docs/XRRigidTransformInverse/XRRigidTransformInverse.generated.xml' path='docs/XRRigidTransformInverse/*'/>
	public XRRigidTransform Inverse { get; }
	public XRRigidTransform() { }
}

///<include file='Utils/Docs/XRPose/XRPose.generated.xml' path='docs/XRPose/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRPose
{
	///<include file='Utils/Docs/XRPoseTransform/XRPoseTransform.generated.xml' path='docs/XRPoseTransform/*'/>
	public XRRigidTransform Transform { get; }
	///<include file='Utils/Docs/XRPoseLinearVelocity/XRPoseLinearVelocity.generated.xml' path='docs/XRPoseLinearVelocity/*'/>
	public DOMPointReadOnly? LinearVelocity { get; }
	///<include file='Utils/Docs/XRPoseAngularVelocity/XRPoseAngularVelocity.generated.xml' path='docs/XRPoseAngularVelocity/*'/>
	public DOMPointReadOnly? AngularVelocity { get; }
	///<include file='Utils/Docs/XRPoseEmulatedPosition/XRPoseEmulatedPosition.generated.xml' path='docs/XRPoseEmulatedPosition/*'/>
	public bool EmulatedPosition { get; }
}

///<include file='Utils/Docs/XRViewerPose/XRViewerPose.generated.xml' path='docs/XRViewerPose/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRViewerPose : XRPose
{
	///<include file='Utils/Docs/XRViewerPoseViews/XRViewerPoseViews.generated.xml' path='docs/XRViewerPoseViews/*'/>
	public XRView[] Views { get; }
}

///<include file='Utils/Docs/XRInputSource/XRInputSource.generated.xml' path='docs/XRInputSource/*'/>
public partial class XRInputSource
{
	///<include file='Utils/Docs/XRInputSourceHandedness/XRInputSourceHandedness.generated.xml' path='docs/XRInputSourceHandedness/*'/>
	public XRHandedness Handedness { get; }
	///<include file='Utils/Docs/XRInputSourceTargetRayMode/XRInputSourceTargetRayMode.generated.xml' path='docs/XRInputSourceTargetRayMode/*'/>
	public XRTargetRayMode TargetRayMode { get; }
	///<include file='Utils/Docs/XRInputSourceTargetRaySpace/XRInputSourceTargetRaySpace.generated.xml' path='docs/XRInputSourceTargetRaySpace/*'/>
	public XRSpace TargetRaySpace { get; }
	///<include file='Utils/Docs/XRInputSourceGripSpace/XRInputSourceGripSpace.generated.xml' path='docs/XRInputSourceGripSpace/*'/>
	public XRSpace? GripSpace { get; }
	///<include file='Utils/Docs/XRInputSourceProfiles/XRInputSourceProfiles.generated.xml' path='docs/XRInputSourceProfiles/*'/>
	public DOMString[] Profiles { get; }
		public bool SkipRendering { get; }
}

///<include file='Utils/Docs/XRInputSourceArray/XRInputSourceArray.generated.xml' path='docs/XRInputSourceArray/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRInputSourceArray
{
	public XRInputSource this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	///<include file='Utils/Docs/XRInputSourceArrayLength/XRInputSourceArrayLength.generated.xml' path='docs/XRInputSourceArrayLength/*'/>
	public ulong Length { get; }
	
}

///<include file='Utils/Docs/XRLayer/XRLayer.generated.xml' path='docs/XRLayer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRLayer : EventTarget
{
}


[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRWebGLLayerInit
{
		public bool Antialias;
		public bool Depth;
		public bool Stencil;
		public bool Alpha;
		public bool IgnoreDepthValues;
		public Number FramebufferScaleFactor;
}

///<include file='Utils/Docs/XRWebGLLayer/XRWebGLLayer.generated.xml' path='docs/XRWebGLLayer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRWebGLLayer : XRLayer
{
	///<include file='Utils/Docs/XRWebGLLayerXRWebGLLayer/XRWebGLLayerXRWebGLLayer.generated.xml' path='docs/XRWebGLLayerXRWebGLLayer/*'/>
	public XRWebGLLayer(XRSession session, XRWebGLRenderingContext context, XRWebGLLayerInit layerInit) { }
	///<include file='Utils/Docs/XRWebGLLayerAntialias/XRWebGLLayerAntialias.generated.xml' path='docs/XRWebGLLayerAntialias/*'/>
	public bool Antialias { get; }
	///<include file='Utils/Docs/XRWebGLLayerIgnoreDepthValues/XRWebGLLayerIgnoreDepthValues.generated.xml' path='docs/XRWebGLLayerIgnoreDepthValues/*'/>
	public bool IgnoreDepthValues { get; }
	///<include file='Utils/Docs/XRWebGLLayerFixedFoveation/XRWebGLLayerFixedFoveation.generated.xml' path='docs/XRWebGLLayerFixedFoveation/*'/>
	public Number? FixedFoveation { get; set; }
	///<include file='Utils/Docs/XRWebGLLayerFramebuffer/XRWebGLLayerFramebuffer.generated.xml' path='docs/XRWebGLLayerFramebuffer/*'/>
	public WebGLFramebuffer? Framebuffer { get; }
	///<include file='Utils/Docs/XRWebGLLayerFramebufferWidth/XRWebGLLayerFramebufferWidth.generated.xml' path='docs/XRWebGLLayerFramebufferWidth/*'/>
	public ulong FramebufferWidth { get; }
	///<include file='Utils/Docs/XRWebGLLayerFramebufferHeight/XRWebGLLayerFramebufferHeight.generated.xml' path='docs/XRWebGLLayerFramebufferHeight/*'/>
	public ulong FramebufferHeight { get; }
	///<include file='Utils/Docs/XRWebGLLayerGetViewport/XRWebGLLayerGetViewport.generated.xml' path='docs/XRWebGLLayerGetViewport/*'/>
	public XRViewport? GetViewport(XRView view) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRWebGLLayerGetNativeFramebufferScaleFactor/XRWebGLLayerGetNativeFramebufferScaleFactor.generated.xml' path='docs/XRWebGLLayerGetNativeFramebufferScaleFactor/*'/>
	public static Number GetNativeFramebufferScaleFactor(XRSession session) { throw new System.NotImplementedException(); }
	public XRWebGLLayer() { }
}

public partial class WebGLContextAttributes
{
		public bool XrCompatible;
}

///<include file='Utils/Docs/XRSessionEvent/XRSessionEvent.generated.xml' path='docs/XRSessionEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRSessionEvent : Event
{
	///<include file='Utils/Docs/XRSessionEventXRSessionEvent/XRSessionEventXRSessionEvent.generated.xml' path='docs/XRSessionEventXRSessionEvent/*'/>
	public XRSessionEvent(DOMString type, XRSessionEventInit eventInitDict) { }
	///<include file='Utils/Docs/XRSessionEventSession/XRSessionEventSession.generated.xml' path='docs/XRSessionEventSession/*'/>
	public XRSession Session { get; }
	public XRSessionEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRSessionEventInit : EventInit
{
		public required XRSession Session;
}

///<include file='Utils/Docs/XRInputSourceEvent/XRInputSourceEvent.generated.xml' path='docs/XRInputSourceEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRInputSourceEvent : Event
{
	///<include file='Utils/Docs/XRInputSourceEventXRInputSourceEvent/XRInputSourceEventXRInputSourceEvent.generated.xml' path='docs/XRInputSourceEventXRInputSourceEvent/*'/>
	public XRInputSourceEvent(DOMString type, XRInputSourceEventInit eventInitDict) { }
	///<include file='Utils/Docs/XRInputSourceEventFrame/XRInputSourceEventFrame.generated.xml' path='docs/XRInputSourceEventFrame/*'/>
	public XRFrame Frame { get; }
	///<include file='Utils/Docs/XRInputSourceEventInputSource/XRInputSourceEventInputSource.generated.xml' path='docs/XRInputSourceEventInputSource/*'/>
	public XRInputSource InputSource { get; }
	public XRInputSourceEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRInputSourceEventInit : EventInit
{
		public required XRFrame Frame;
		public required XRInputSource InputSource;
}

///<include file='Utils/Docs/XRInputSourcesChangeEvent/XRInputSourcesChangeEvent.generated.xml' path='docs/XRInputSourcesChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRInputSourcesChangeEvent : Event
{
	///<include file='Utils/Docs/XRInputSourcesChangeEventXRInputSourcesChangeEvent/XRInputSourcesChangeEventXRInputSourcesChangeEvent.generated.xml' path='docs/XRInputSourcesChangeEventXRInputSourcesChangeEvent/*'/>
	public XRInputSourcesChangeEvent(DOMString type, XRInputSourcesChangeEventInit eventInitDict) { }
	///<include file='Utils/Docs/XRInputSourcesChangeEventSession/XRInputSourcesChangeEventSession.generated.xml' path='docs/XRInputSourcesChangeEventSession/*'/>
	public XRSession Session { get; }
	///<include file='Utils/Docs/XRInputSourcesChangeEventAdded/XRInputSourcesChangeEventAdded.generated.xml' path='docs/XRInputSourcesChangeEventAdded/*'/>
	public XRInputSource[] Added { get; }
	///<include file='Utils/Docs/XRInputSourcesChangeEventRemoved/XRInputSourcesChangeEventRemoved.generated.xml' path='docs/XRInputSourcesChangeEventRemoved/*'/>
	public XRInputSource[] Removed { get; }
	public XRInputSourcesChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRInputSourcesChangeEventInit : EventInit
{
		public required XRSession Session;
		public required List<XRInputSource> Added;
		public required List<XRInputSource> Removed;
}

///<include file='Utils/Docs/XRReferenceSpaceEvent/XRReferenceSpaceEvent.generated.xml' path='docs/XRReferenceSpaceEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRReferenceSpaceEvent : Event
{
	///<include file='Utils/Docs/XRReferenceSpaceEventXRReferenceSpaceEvent/XRReferenceSpaceEventXRReferenceSpaceEvent.generated.xml' path='docs/XRReferenceSpaceEventXRReferenceSpaceEvent/*'/>
	public XRReferenceSpaceEvent(DOMString type, XRReferenceSpaceEventInit eventInitDict) { }
	///<include file='Utils/Docs/XRReferenceSpaceEventReferenceSpace/XRReferenceSpaceEventReferenceSpace.generated.xml' path='docs/XRReferenceSpaceEventReferenceSpace/*'/>
	public XRReferenceSpace ReferenceSpace { get; }
	///<include file='Utils/Docs/XRReferenceSpaceEventTransform/XRReferenceSpaceEventTransform.generated.xml' path='docs/XRReferenceSpaceEventTransform/*'/>
	public XRRigidTransform? Transform { get; }
	public XRReferenceSpaceEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRReferenceSpaceEventInit : EventInit
{
		public required XRReferenceSpace ReferenceSpace;
		public XRRigidTransform? Transform;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRSessionSupportedPermissionDescriptor : PermissionDescriptor
{
		public XRSessionMode Mode;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRPermissionDescriptor : PermissionDescriptor
{
		public XRSessionMode Mode;
		public List<DOMString> RequiredFeatures;
		public List<DOMString> OptionalFeatures;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRPermissionStatus : PermissionStatus
{
		public DOMString[] Granted { get; set; }
}

///<include file='Utils/Docs/XRCompositionLayer/XRCompositionLayer.generated.xml' path='docs/XRCompositionLayer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRCompositionLayer : XRLayer
{
	///<include file='Utils/Docs/XRCompositionLayerLayout/XRCompositionLayerLayout.generated.xml' path='docs/XRCompositionLayerLayout/*'/>
	public XRLayerLayout Layout { get; }
	///<include file='Utils/Docs/XRCompositionLayerBlendTextureSourceAlpha/XRCompositionLayerBlendTextureSourceAlpha.generated.xml' path='docs/XRCompositionLayerBlendTextureSourceAlpha/*'/>
	public bool BlendTextureSourceAlpha { get; set; }
		public bool ForceMonoPresentation { get; set; }
		public Number Opacity { get; set; }
	///<include file='Utils/Docs/XRCompositionLayerMipLevels/XRCompositionLayerMipLevels.generated.xml' path='docs/XRCompositionLayerMipLevels/*'/>
	public ulong MipLevels { get; }
		public XRLayerQuality Quality { get; set; }
	///<include file='Utils/Docs/XRCompositionLayerNeedsRedraw/XRCompositionLayerNeedsRedraw.generated.xml' path='docs/XRCompositionLayerNeedsRedraw/*'/>
	public bool NeedsRedraw { get; }
	///<include file='Utils/Docs/XRCompositionLayerDestroy/XRCompositionLayerDestroy.generated.xml' path='docs/XRCompositionLayerDestroy/*'/>
	public Undefined Destroy() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/XRProjectionLayer/XRProjectionLayer.generated.xml' path='docs/XRProjectionLayer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRProjectionLayer : XRCompositionLayer
{
	///<include file='Utils/Docs/XRProjectionLayerTextureWidth/XRProjectionLayerTextureWidth.generated.xml' path='docs/XRProjectionLayerTextureWidth/*'/>
	public ulong TextureWidth { get; }
	///<include file='Utils/Docs/XRProjectionLayerTextureHeight/XRProjectionLayerTextureHeight.generated.xml' path='docs/XRProjectionLayerTextureHeight/*'/>
	public ulong TextureHeight { get; }
	///<include file='Utils/Docs/XRProjectionLayerTextureArrayLength/XRProjectionLayerTextureArrayLength.generated.xml' path='docs/XRProjectionLayerTextureArrayLength/*'/>
	public ulong TextureArrayLength { get; }
	///<include file='Utils/Docs/XRProjectionLayerIgnoreDepthValues/XRProjectionLayerIgnoreDepthValues.generated.xml' path='docs/XRProjectionLayerIgnoreDepthValues/*'/>
	public bool IgnoreDepthValues { get; }
	///<include file='Utils/Docs/XRProjectionLayerFixedFoveation/XRProjectionLayerFixedFoveation.generated.xml' path='docs/XRProjectionLayerFixedFoveation/*'/>
	public Number? FixedFoveation { get; set; }
		public XRRigidTransform? DeltaPose { get; set; }
}

///<include file='Utils/Docs/XRQuadLayer/XRQuadLayer.generated.xml' path='docs/XRQuadLayer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRQuadLayer : XRCompositionLayer
{
	///<include file='Utils/Docs/XRQuadLayerSpace/XRQuadLayerSpace.generated.xml' path='docs/XRQuadLayerSpace/*'/>
	public XRSpace Space { get; set; }
	///<include file='Utils/Docs/XRQuadLayerTransform/XRQuadLayerTransform.generated.xml' path='docs/XRQuadLayerTransform/*'/>
	public XRRigidTransform Transform { get; set; }
	///<include file='Utils/Docs/XRQuadLayerWidth/XRQuadLayerWidth.generated.xml' path='docs/XRQuadLayerWidth/*'/>
	public Number Width { get; set; }
	///<include file='Utils/Docs/XRQuadLayerHeight/XRQuadLayerHeight.generated.xml' path='docs/XRQuadLayerHeight/*'/>
	public Number Height { get; set; }
		public EventHandler Onredraw { get; set; }
}

///<include file='Utils/Docs/XRCylinderLayer/XRCylinderLayer.generated.xml' path='docs/XRCylinderLayer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRCylinderLayer : XRCompositionLayer
{
	///<include file='Utils/Docs/XRCylinderLayerSpace/XRCylinderLayerSpace.generated.xml' path='docs/XRCylinderLayerSpace/*'/>
	public XRSpace Space { get; set; }
	///<include file='Utils/Docs/XRCylinderLayerTransform/XRCylinderLayerTransform.generated.xml' path='docs/XRCylinderLayerTransform/*'/>
	public XRRigidTransform Transform { get; set; }
	///<include file='Utils/Docs/XRCylinderLayerRadius/XRCylinderLayerRadius.generated.xml' path='docs/XRCylinderLayerRadius/*'/>
	public Number Radius { get; set; }
	///<include file='Utils/Docs/XRCylinderLayerCentralAngle/XRCylinderLayerCentralAngle.generated.xml' path='docs/XRCylinderLayerCentralAngle/*'/>
	public Number CentralAngle { get; set; }
	///<include file='Utils/Docs/XRCylinderLayerAspectRatio/XRCylinderLayerAspectRatio.generated.xml' path='docs/XRCylinderLayerAspectRatio/*'/>
	public Number AspectRatio { get; set; }
		public EventHandler Onredraw { get; set; }
}

///<include file='Utils/Docs/XREquirectLayer/XREquirectLayer.generated.xml' path='docs/XREquirectLayer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XREquirectLayer : XRCompositionLayer
{
	///<include file='Utils/Docs/XREquirectLayerSpace/XREquirectLayerSpace.generated.xml' path='docs/XREquirectLayerSpace/*'/>
	public XRSpace Space { get; set; }
	///<include file='Utils/Docs/XREquirectLayerTransform/XREquirectLayerTransform.generated.xml' path='docs/XREquirectLayerTransform/*'/>
	public XRRigidTransform Transform { get; set; }
	///<include file='Utils/Docs/XREquirectLayerRadius/XREquirectLayerRadius.generated.xml' path='docs/XREquirectLayerRadius/*'/>
	public Number Radius { get; set; }
	///<include file='Utils/Docs/XREquirectLayerCentralHorizontalAngle/XREquirectLayerCentralHorizontalAngle.generated.xml' path='docs/XREquirectLayerCentralHorizontalAngle/*'/>
	public Number CentralHorizontalAngle { get; set; }
	///<include file='Utils/Docs/XREquirectLayerUpperVerticalAngle/XREquirectLayerUpperVerticalAngle.generated.xml' path='docs/XREquirectLayerUpperVerticalAngle/*'/>
	public Number UpperVerticalAngle { get; set; }
	///<include file='Utils/Docs/XREquirectLayerLowerVerticalAngle/XREquirectLayerLowerVerticalAngle.generated.xml' path='docs/XREquirectLayerLowerVerticalAngle/*'/>
	public Number LowerVerticalAngle { get; set; }
		public EventHandler Onredraw { get; set; }
}

///<include file='Utils/Docs/XRCubeLayer/XRCubeLayer.generated.xml' path='docs/XRCubeLayer/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRCubeLayer : XRCompositionLayer
{
	///<include file='Utils/Docs/XRCubeLayerSpace/XRCubeLayerSpace.generated.xml' path='docs/XRCubeLayerSpace/*'/>
	public XRSpace Space { get; set; }
	///<include file='Utils/Docs/XRCubeLayerOrientation/XRCubeLayerOrientation.generated.xml' path='docs/XRCubeLayerOrientation/*'/>
	public DOMPointReadOnly Orientation { get; set; }
		public EventHandler Onredraw { get; set; }
}

///<include file='Utils/Docs/XRSubImage/XRSubImage.generated.xml' path='docs/XRSubImage/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRSubImage
{
	///<include file='Utils/Docs/XRSubImageViewport/XRSubImageViewport.generated.xml' path='docs/XRSubImageViewport/*'/>
	public XRViewport Viewport { get; }
}

///<include file='Utils/Docs/XRWebGLSubImage/XRWebGLSubImage.generated.xml' path='docs/XRWebGLSubImage/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRWebGLSubImage : XRSubImage
{
	///<include file='Utils/Docs/XRWebGLSubImageColorTexture/XRWebGLSubImageColorTexture.generated.xml' path='docs/XRWebGLSubImageColorTexture/*'/>
	public WebGLTexture ColorTexture { get; }
	///<include file='Utils/Docs/XRWebGLSubImageDepthStencilTexture/XRWebGLSubImageDepthStencilTexture.generated.xml' path='docs/XRWebGLSubImageDepthStencilTexture/*'/>
	public WebGLTexture? DepthStencilTexture { get; }
		public WebGLTexture? MotionVectorTexture { get; }
	///<include file='Utils/Docs/XRWebGLSubImageImageIndex/XRWebGLSubImageImageIndex.generated.xml' path='docs/XRWebGLSubImageImageIndex/*'/>
	public ulong? ImageIndex { get; }
	///<include file='Utils/Docs/XRWebGLSubImageColorTextureWidth/XRWebGLSubImageColorTextureWidth.generated.xml' path='docs/XRWebGLSubImageColorTextureWidth/*'/>
	public ulong ColorTextureWidth { get; }
	///<include file='Utils/Docs/XRWebGLSubImageColorTextureHeight/XRWebGLSubImageColorTextureHeight.generated.xml' path='docs/XRWebGLSubImageColorTextureHeight/*'/>
	public ulong ColorTextureHeight { get; }
		public ulong? DepthStencilTextureWidth { get; }
		public ulong? DepthStencilTextureHeight { get; }
		public ulong? MotionVectorTextureWidth { get; }
		public ulong? MotionVectorTextureHeight { get; }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRProjectionLayerInit
{
		public XRTextureType TextureType;
		public GLenum ColorFormat;
		public GLenum DepthFormat;
		public Number ScaleFactor;
		public bool ClearOnAccess;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRLayerInit
{
		public required XRSpace Space;
		public GLenum ColorFormat;
		public GLenum? DepthFormat;
		public ulong MipLevels;
		public required ulong ViewPixelWidth;
		public required ulong ViewPixelHeight;
		public XRLayerLayout Layout;
		public bool IsStatic;
		public bool ClearOnAccess;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRQuadLayerInit : XRLayerInit
{
		public XRTextureType TextureType;
		public XRRigidTransform? Transform;
		public Number Width;
		public Number Height;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRCylinderLayerInit : XRLayerInit
{
		public XRTextureType TextureType;
		public XRRigidTransform? Transform;
		public Number Radius;
		public Number CentralAngle;
		public Number AspectRatio;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XREquirectLayerInit : XRLayerInit
{
		public XRTextureType TextureType;
		public XRRigidTransform? Transform;
		public Number Radius;
		public Number CentralHorizontalAngle;
		public Number UpperVerticalAngle;
		public Number LowerVerticalAngle;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRCubeLayerInit : XRLayerInit
{
		public DOMPointReadOnly? Orientation;
}

///<include file='Utils/Docs/XRWebGLBinding/XRWebGLBinding.generated.xml' path='docs/XRWebGLBinding/*'/>
public partial class XRWebGLBinding
{
	///<include file='Utils/Docs/XRWebGLBindingXRWebGLBinding/XRWebGLBindingXRWebGLBinding.generated.xml' path='docs/XRWebGLBindingXRWebGLBinding/*'/>
	public XRWebGLBinding(XRSession session, XRWebGLRenderingContext context) { }
	///<include file='Utils/Docs/XRWebGLBindingNativeProjectionScaleFactor/XRWebGLBindingNativeProjectionScaleFactor.generated.xml' path='docs/XRWebGLBindingNativeProjectionScaleFactor/*'/>
	public Number NativeProjectionScaleFactor { get; }
		public bool UsesDepthValues { get; }
	///<include file='Utils/Docs/XRWebGLBindingCreateProjectionLayer/XRWebGLBindingCreateProjectionLayer.generated.xml' path='docs/XRWebGLBindingCreateProjectionLayer/*'/>
	public XRProjectionLayer CreateProjectionLayer(XRProjectionLayerInit init) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRWebGLBindingCreateQuadLayer/XRWebGLBindingCreateQuadLayer.generated.xml' path='docs/XRWebGLBindingCreateQuadLayer/*'/>
	public XRQuadLayer CreateQuadLayer(XRQuadLayerInit init) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRWebGLBindingCreateCylinderLayer/XRWebGLBindingCreateCylinderLayer.generated.xml' path='docs/XRWebGLBindingCreateCylinderLayer/*'/>
	public XRCylinderLayer CreateCylinderLayer(XRCylinderLayerInit init) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRWebGLBindingCreateEquirectLayer/XRWebGLBindingCreateEquirectLayer.generated.xml' path='docs/XRWebGLBindingCreateEquirectLayer/*'/>
	public XREquirectLayer CreateEquirectLayer(XREquirectLayerInit init) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRWebGLBindingCreateCubeLayer/XRWebGLBindingCreateCubeLayer.generated.xml' path='docs/XRWebGLBindingCreateCubeLayer/*'/>
	public XRCubeLayer CreateCubeLayer(XRCubeLayerInit init) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRWebGLBindingGetSubImage/XRWebGLBindingGetSubImage.generated.xml' path='docs/XRWebGLBindingGetSubImage/*'/>
	public XRWebGLSubImage GetSubImage(XRCompositionLayer layer, XRFrame frame, XREye eye) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRWebGLBindingGetViewSubImage/XRWebGLBindingGetViewSubImage.generated.xml' path='docs/XRWebGLBindingGetViewSubImage/*'/>
	public XRWebGLSubImage GetViewSubImage(XRProjectionLayer layer, XRView view) { throw new System.NotImplementedException(); }
	public XRWebGLBinding() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRMediaLayerInit
{
		public required XRSpace Space;
		public XRLayerLayout Layout;
		public bool InvertStereo;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRMediaQuadLayerInit : XRMediaLayerInit
{
		public XRRigidTransform? Transform;
		public Number? Width;
		public Number? Height;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRMediaCylinderLayerInit : XRMediaLayerInit
{
		public XRRigidTransform? Transform;
		public Number Radius;
		public Number CentralAngle;
		public Number? AspectRatio;
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRMediaEquirectLayerInit : XRMediaLayerInit
{
		public XRRigidTransform? Transform;
		public Number Radius;
		public Number CentralHorizontalAngle;
		public Number UpperVerticalAngle;
		public Number LowerVerticalAngle;
}

///<include file='Utils/Docs/XRMediaBinding/XRMediaBinding.generated.xml' path='docs/XRMediaBinding/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRMediaBinding
{
	///<include file='Utils/Docs/XRMediaBindingXRMediaBinding/XRMediaBindingXRMediaBinding.generated.xml' path='docs/XRMediaBindingXRMediaBinding/*'/>
	public XRMediaBinding(XRSession session) { }
	///<include file='Utils/Docs/XRMediaBindingCreateQuadLayer/XRMediaBindingCreateQuadLayer.generated.xml' path='docs/XRMediaBindingCreateQuadLayer/*'/>
	public XRQuadLayer CreateQuadLayer(HTMLVideoElement video, XRMediaQuadLayerInit init) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRMediaBindingCreateCylinderLayer/XRMediaBindingCreateCylinderLayer.generated.xml' path='docs/XRMediaBindingCreateCylinderLayer/*'/>
	public XRCylinderLayer CreateCylinderLayer(HTMLVideoElement video, XRMediaCylinderLayerInit init) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XRMediaBindingCreateEquirectLayer/XRMediaBindingCreateEquirectLayer.generated.xml' path='docs/XRMediaBindingCreateEquirectLayer/*'/>
	public XREquirectLayer CreateEquirectLayer(HTMLVideoElement video, XRMediaEquirectLayerInit init) { throw new System.NotImplementedException(); }
	public XRMediaBinding() { }
}

///<include file='Utils/Docs/XRLayerEvent/XRLayerEvent.generated.xml' path='docs/XRLayerEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRLayerEvent : Event
{
	///<include file='Utils/Docs/XRLayerEventXRLayerEvent/XRLayerEventXRLayerEvent.generated.xml' path='docs/XRLayerEventXRLayerEvent/*'/>
	public XRLayerEvent(DOMString type, XRLayerEventInit eventInitDict) { }
	///<include file='Utils/Docs/XRLayerEventLayer/XRLayerEventLayer.generated.xml' path='docs/XRLayerEventLayer/*'/>
	public XRLayer Layer { get; }
	public XRLayerEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class XRLayerEventInit : EventInit
{
		public required XRLayer Layer;
}

///<include file='Utils/Docs/XRRenderState/XRRenderState.generated.xml' path='docs/XRRenderState/*'/>
public partial class XRRenderState
{
	///<include file='Utils/Docs/XRRenderStateLayers/XRRenderStateLayers.generated.xml' path='docs/XRRenderStateLayers/*'/>
	public XRLayer[] Layers { get; }
}

///<include file='Utils/Docs/Navigator/Navigator.generated.xml' path='docs/Navigator/*'/>
public partial class Navigator
{
	///<include file='Utils/Docs/NavigatorWindowControlsOverlay/NavigatorWindowControlsOverlay.generated.xml' path='docs/NavigatorWindowControlsOverlay/*'/>
	public WindowControlsOverlay WindowControlsOverlay { get; }
}

///<include file='Utils/Docs/WindowControlsOverlay/WindowControlsOverlay.generated.xml' path='docs/WindowControlsOverlay/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WindowControlsOverlay : EventTarget
{
	///<include file='Utils/Docs/WindowControlsOverlayVisible/WindowControlsOverlayVisible.generated.xml' path='docs/WindowControlsOverlayVisible/*'/>
	public bool Visible { get; }
	///<include file='Utils/Docs/WindowControlsOverlayGetTitlebarAreaRect/WindowControlsOverlayGetTitlebarAreaRect.generated.xml' path='docs/WindowControlsOverlayGetTitlebarAreaRect/*'/>
	public DOMRect GetTitlebarAreaRect() { throw new System.NotImplementedException(); }
		public EventHandler Ongeometrychange { get; set; }
}

///<include file='Utils/Docs/WindowControlsOverlayGeometryChangeEvent/WindowControlsOverlayGeometryChangeEvent.generated.xml' path='docs/WindowControlsOverlayGeometryChangeEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class WindowControlsOverlayGeometryChangeEvent : Event
{
	///<include file='Utils/Docs/WindowControlsOverlayGeometryChangeEventWindowControlsOverla/WindowControlsOverlayGeometryChangeEventWindowControlsOverla.generated.xml' path='docs/WindowControlsOverlayGeometryChangeEventWindowControlsOverla/*'/>
	public WindowControlsOverlayGeometryChangeEvent(DOMString type, WindowControlsOverlayGeometryChangeEventInit eventInitDict) { }
	///<include file='Utils/Docs/WindowControlsOverlayGeometryChangeEventTitlebarAreaRect/WindowControlsOverlayGeometryChangeEventTitlebarAreaRect.generated.xml' path='docs/WindowControlsOverlayGeometryChangeEventTitlebarAreaRect/*'/>
	public DOMRect TitlebarAreaRect { get; }
	///<include file='Utils/Docs/WindowControlsOverlayGeometryChangeEventVisible/WindowControlsOverlayGeometryChangeEventVisible.generated.xml' path='docs/WindowControlsOverlayGeometryChangeEventVisible/*'/>
	public bool Visible { get; }
	public WindowControlsOverlayGeometryChangeEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class WindowControlsOverlayGeometryChangeEventInit : EventInit
{
		public required DOMRect TitlebarAreaRect;
		public bool Visible;
}

///<include file='Utils/Docs/Screen/Screen.generated.xml' path='docs/Screen/*'/>
public partial class Screen
{
	///<include file='Utils/Docs/ScreenIsExtended/ScreenIsExtended.generated.xml' path='docs/ScreenIsExtended/*'/>
	public bool IsExtended { get; }
		public EventHandler Onchange { get; set; }
}

///<include file='Utils/Docs/Window/Window.generated.xml' path='docs/Window/*'/>
public partial class Window
{
	///<include file='Utils/Docs/WindowGetScreenDetails/WindowGetScreenDetails.generated.xml' path='docs/WindowGetScreenDetails/*'/>
	[To(ToAttribute.FirstCharToLowerCase)]
	public Task<ScreenDetails> GetScreenDetails() { throw new System.NotImplementedException(); }
}

///<include file='Utils/Docs/ScreenDetails/ScreenDetails.generated.xml' path='docs/ScreenDetails/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScreenDetails : EventTarget
{
	///<include file='Utils/Docs/ScreenDetailsScreens/ScreenDetailsScreens.generated.xml' path='docs/ScreenDetailsScreens/*'/>
	public ScreenDetailed[] Screens { get; }
	///<include file='Utils/Docs/ScreenDetailsCurrentScreen/ScreenDetailsCurrentScreen.generated.xml' path='docs/ScreenDetailsCurrentScreen/*'/>
	public ScreenDetailed CurrentScreen { get; }
		public EventHandler Onscreenschange { get; set; }
		public EventHandler Oncurrentscreenchange { get; set; }
}

///<include file='Utils/Docs/ScreenDetailed/ScreenDetailed.generated.xml' path='docs/ScreenDetailed/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ScreenDetailed : Screen
{
	///<include file='Utils/Docs/ScreenDetailedAvailLeft/ScreenDetailedAvailLeft.generated.xml' path='docs/ScreenDetailedAvailLeft/*'/>
	public long AvailLeft { get; }
	///<include file='Utils/Docs/ScreenDetailedAvailTop/ScreenDetailedAvailTop.generated.xml' path='docs/ScreenDetailedAvailTop/*'/>
	public long AvailTop { get; }
	///<include file='Utils/Docs/ScreenDetailedLeft/ScreenDetailedLeft.generated.xml' path='docs/ScreenDetailedLeft/*'/>
	public long Left { get; }
	///<include file='Utils/Docs/ScreenDetailedTop/ScreenDetailedTop.generated.xml' path='docs/ScreenDetailedTop/*'/>
	public long Top { get; }
	///<include file='Utils/Docs/ScreenDetailedIsPrimary/ScreenDetailedIsPrimary.generated.xml' path='docs/ScreenDetailedIsPrimary/*'/>
	public bool IsPrimary { get; }
	///<include file='Utils/Docs/ScreenDetailedIsInternal/ScreenDetailedIsInternal.generated.xml' path='docs/ScreenDetailedIsInternal/*'/>
	public bool IsInternal { get; }
	///<include file='Utils/Docs/ScreenDetailedDevicePixelRatio/ScreenDetailedDevicePixelRatio.generated.xml' path='docs/ScreenDetailedDevicePixelRatio/*'/>
	public Number DevicePixelRatio { get; }
	///<include file='Utils/Docs/ScreenDetailedLabel/ScreenDetailedLabel.generated.xml' path='docs/ScreenDetailedLabel/*'/>
	public DOMString Label { get; }
}

public partial class FullscreenOptions
{
		public ScreenDetailed Screen;
}

///<include file='Utils/Docs/XMLHttpRequestEventTarget/XMLHttpRequestEventTarget.generated.xml' path='docs/XMLHttpRequestEventTarget/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XMLHttpRequestEventTarget : EventTarget
{
		public EventHandler Onloadstart { get; set; }
		public EventHandler Onprogress { get; set; }
		public EventHandler Onabort { get; set; }
		public EventHandler Onerror { get; set; }
		public EventHandler Onload { get; set; }
		public EventHandler Ontimeout { get; set; }
		public EventHandler Onloadend { get; set; }
}

///<include file='Utils/Docs/XMLHttpRequestUpload/XMLHttpRequestUpload.generated.xml' path='docs/XMLHttpRequestUpload/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class XMLHttpRequestUpload : XMLHttpRequestEventTarget
{
}

///<include file='Utils/Docs/XMLHttpRequest/XMLHttpRequest.generated.xml' path='docs/XMLHttpRequest/*'/>
public partial class XMLHttpRequest : XMLHttpRequestEventTarget
{
	///<include file='Utils/Docs/XMLHttpRequestXMLHttpRequest/XMLHttpRequestXMLHttpRequest.generated.xml' path='docs/XMLHttpRequestXMLHttpRequest/*'/>
	public XMLHttpRequest() { }
		public EventHandler Onreadystatechange { get; set; }
		public const ushort UNSENT = 0;
		public const ushort OPENED = 1;
		public const ushort HEADERS_RECEIVED = 2;
		public const ushort LOADING = 3;
		public const ushort DONE = 4;
	///<include file='Utils/Docs/XMLHttpRequestReadyState/XMLHttpRequestReadyState.generated.xml' path='docs/XMLHttpRequestReadyState/*'/>
	public ushort ReadyState { get; }
	///<include file='Utils/Docs/XMLHttpRequestOpen/XMLHttpRequestOpen.generated.xml' path='docs/XMLHttpRequestOpen/*'/>
	public Undefined Open(ByteString method, USVString url) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XMLHttpRequestOpen/XMLHttpRequestOpen.generated.xml' path='docs/XMLHttpRequestOpen/*'/>
	public Undefined Open(ByteString method, USVString url, bool async, USVString? username, USVString? password) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XMLHttpRequestSetRequestHeader/XMLHttpRequestSetRequestHeader.generated.xml' path='docs/XMLHttpRequestSetRequestHeader/*'/>
	public Undefined SetRequestHeader(ByteString name, ByteString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XMLHttpRequestTimeout/XMLHttpRequestTimeout.generated.xml' path='docs/XMLHttpRequestTimeout/*'/>
	public ulong Timeout { get; set; }
	///<include file='Utils/Docs/XMLHttpRequestWithCredentials/XMLHttpRequestWithCredentials.generated.xml' path='docs/XMLHttpRequestWithCredentials/*'/>
	public bool WithCredentials { get; set; }
	///<include file='Utils/Docs/XMLHttpRequestUpload/XMLHttpRequestUpload.generated.xml' path='docs/XMLHttpRequestUpload/*'/>
	public XMLHttpRequestUpload Upload { get; }
	///<include file='Utils/Docs/XMLHttpRequestSend/XMLHttpRequestSend.generated.xml' path='docs/XMLHttpRequestSend/*'/>
	public Undefined Send(Union236? body) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XMLHttpRequestAbort/XMLHttpRequestAbort.generated.xml' path='docs/XMLHttpRequestAbort/*'/>
	public Undefined Abort() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XMLHttpRequestResponseURL/XMLHttpRequestResponseURL.generated.xml' path='docs/XMLHttpRequestResponseURL/*'/>
	public USVString ResponseURL { get; }
	///<include file='Utils/Docs/XMLHttpRequestStatus/XMLHttpRequestStatus.generated.xml' path='docs/XMLHttpRequestStatus/*'/>
	public ushort Status { get; }
	///<include file='Utils/Docs/XMLHttpRequestStatusText/XMLHttpRequestStatusText.generated.xml' path='docs/XMLHttpRequestStatusText/*'/>
	public ByteString StatusText { get; }
	///<include file='Utils/Docs/XMLHttpRequestGetResponseHeader/XMLHttpRequestGetResponseHeader.generated.xml' path='docs/XMLHttpRequestGetResponseHeader/*'/>
	public ByteString? GetResponseHeader(ByteString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XMLHttpRequestGetAllResponseHeaders/XMLHttpRequestGetAllResponseHeaders.generated.xml' path='docs/XMLHttpRequestGetAllResponseHeaders/*'/>
	public ByteString GetAllResponseHeaders() { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XMLHttpRequestOverrideMimeType/XMLHttpRequestOverrideMimeType.generated.xml' path='docs/XMLHttpRequestOverrideMimeType/*'/>
	public Undefined OverrideMimeType(DOMString mime) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/XMLHttpRequestResponseType/XMLHttpRequestResponseType.generated.xml' path='docs/XMLHttpRequestResponseType/*'/>
	public XMLHttpRequestResponseType ResponseType { get; set; }
	///<include file='Utils/Docs/XMLHttpRequestResponse/XMLHttpRequestResponse.generated.xml' path='docs/XMLHttpRequestResponse/*'/>
	public dynamic Response { get; }
	///<include file='Utils/Docs/XMLHttpRequestResponseText/XMLHttpRequestResponseText.generated.xml' path='docs/XMLHttpRequestResponseText/*'/>
	public USVString ResponseText { get; }
	///<include file='Utils/Docs/XMLHttpRequestResponseXML/XMLHttpRequestResponseXML.generated.xml' path='docs/XMLHttpRequestResponseXML/*'/>
	public Document? ResponseXML { get; }
}


///<include file='Utils/Docs/FormData/FormData.generated.xml' path='docs/FormData/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class FormData
{
	///<include file='Utils/Docs/FormDataFormData/FormDataFormData.generated.xml' path='docs/FormDataFormData/*'/>
	public FormData(HTMLFormElement form, HTMLElement? submitter) { }
	///<include file='Utils/Docs/FormDataAppend/FormDataAppend.generated.xml' path='docs/FormDataAppend/*'/>
	public Undefined Append(USVString name, USVString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FormDataAppend/FormDataAppend.generated.xml' path='docs/FormDataAppend/*'/>
	public Undefined Append(USVString name, Blob blobValue, USVString filename) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FormDataDelete/FormDataDelete.generated.xml' path='docs/FormDataDelete/*'/>
	public Undefined Delete(USVString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FormDataGet/FormDataGet.generated.xml' path='docs/FormDataGet/*'/>
	public FormDataEntryValue? Get(USVString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FormDataGetAll/FormDataGetAll.generated.xml' path='docs/FormDataGetAll/*'/>
	public List<FormDataEntryValue> GetAll(USVString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FormDataHas/FormDataHas.generated.xml' path='docs/FormDataHas/*'/>
	public bool Has(USVString name) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FormDataSet/FormDataSet.generated.xml' path='docs/FormDataSet/*'/>
	public Undefined Set(USVString name, USVString value) { throw new System.NotImplementedException(); }
	///<include file='Utils/Docs/FormDataSet/FormDataSet.generated.xml' path='docs/FormDataSet/*'/>
	public Undefined Set(USVString name, Blob blobValue, USVString filename) { throw new System.NotImplementedException(); }
	public USVString this[int i]  {  get { throw new System.NotImplementedException(); }  set { throw new System.NotImplementedException(); }  } 
	public FormData() { }
}

///<include file='Utils/Docs/ProgressEvent/ProgressEvent.generated.xml' path='docs/ProgressEvent/*'/>
[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProgressEvent : Event
{
	///<include file='Utils/Docs/ProgressEventProgressEvent/ProgressEventProgressEvent.generated.xml' path='docs/ProgressEventProgressEvent/*'/>
	public ProgressEvent(DOMString type, ProgressEventInit eventInitDict) { }
	///<include file='Utils/Docs/ProgressEventLengthComputable/ProgressEventLengthComputable.generated.xml' path='docs/ProgressEventLengthComputable/*'/>
	public bool LengthComputable { get; }
	///<include file='Utils/Docs/ProgressEventLoaded/ProgressEventLoaded.generated.xml' path='docs/ProgressEventLoaded/*'/>
	public ulong Loaded { get; }
	///<include file='Utils/Docs/ProgressEventTotal/ProgressEventTotal.generated.xml' path='docs/ProgressEventTotal/*'/>
	public ulong Total { get; }
	public ProgressEvent() { }
}

[To(ToAttribute.FirstCharToLowerCase)]
public partial class ProgressEventInit : EventInit
{
		public bool LengthComputable;
		public ulong Loaded;
		public ulong Total;
}

