<docs>
<ANGLE_instanced_arrays>
<summary>
The <strong><c>ANGLE_instanced_arrays</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default and the constants and methods are available without the <c>ANGLE_</c> suffix.</para><para>Despite the name &amp;quot;ANGLE&amp;quot;, this extension works on any device if the hardware supports it and not just on Windows when using the ANGLE library. &amp;quot;ANGLE&amp;quot; just indicates that this extension has been written by the ANGLE library authors.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGL2RenderingContext.DrawArraysInstanced"/><br/>-<see cref="WebGL2RenderingContext.DrawElementsInstanced"/><br/>-<see cref="WebGL2RenderingContext.VertexAttribDivisor"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ANGLE_instanced_arrays>
<ANGLE_instanced_arraysDrawArraysInstancedANGLE>
<summary>
The <strong><c>ANGLE_instanced_arrays.drawArraysInstancedANGLE()</c></strong> method of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> renders primitives from array data like the <see cref="WebGLRenderingContext.DrawArrays"/> method. In addition, it can execute multiple instances of the range of elements.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>When using <see cref="WebGL2RenderingContext"/>, this method is available as <see cref="WebGL2RenderingContext.DrawArraysInstanced"/> by default.</para></blockquote>
<para>-<see cref="ANGLE_instanced_arrays.DrawElementsInstancedANGLE"/><br/>-<see cref="ANGLE_instanced_arrays.VertexAttribDivisorANGLE"/><br/>-<see cref="WebGLRenderingContext.DrawArrays"/><br/>-<see cref="WebGLRenderingContext.DrawElements"/><br/>-<see cref="WebGL2RenderingContext.DrawArraysInstanced"/><br/>-<see cref="WebGL2RenderingContext.DrawElementsInstanced"/><br/>-<see cref="WebGL2RenderingContext.VertexAttribDivisor"/><br/>-<see cref="WEBGL_multi_draw.MultiDrawArraysInstancedWEBGL"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/drawArraysInstancedANGLE"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ANGLE_instanced_arraysDrawArraysInstancedANGLE>
<ANGLE_instanced_arraysDrawElementsInstancedANGLE>
<summary>
The <strong><c>ANGLE_instanced_arrays.drawElementsInstancedANGLE()</c></strong> method of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> renders primitives from array data like the <see cref="WebGLRenderingContext.DrawElements"/> method. In addition, it can execute multiple instances of a set of elements.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>When using <see cref="WebGL2RenderingContext"/>, this method is available as <see cref="WebGL2RenderingContext.DrawElementsInstanced"/> by default.</para></blockquote>
<para>-<see cref="ANGLE_instanced_arrays.DrawArraysInstancedANGLE"/><br/>-<see cref="ANGLE_instanced_arrays.VertexAttribDivisorANGLE"/><br/>-<see cref="WebGLRenderingContext.DrawArrays"/><br/>-<see cref="WebGLRenderingContext.DrawElements"/><br/>-<see cref="WebGL2RenderingContext.DrawArraysInstanced"/><br/>-<see cref="WebGL2RenderingContext.DrawElementsInstanced"/><br/>-<see cref="WebGL2RenderingContext.VertexAttribDivisor"/><br/>-<see cref="WEBGL_multi_draw.MultiDrawElementsInstancedWEBGL"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/drawElementsInstancedANGLE"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ANGLE_instanced_arraysDrawElementsInstancedANGLE>
<ANGLE_instanced_arraysVertexAttribDivisorANGLE>
<summary>
The <strong>ANGLE_instanced_arrays.vertexAttribDivisorANGLE()</strong> method of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with <see cref="ANGLE_instanced_arrays.DrawArraysInstancedANGLE"/> and <see cref="ANGLE_instanced_arrays.DrawElementsInstancedANGLE"/>.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>When using <see cref="WebGL2RenderingContext"/>, this method is available as <see cref="WebGL2RenderingContext.VertexAttribDivisor"/> by default.</para></blockquote>
<para>-<see cref="ANGLE_instanced_arrays.DrawArraysInstancedANGLE"/><br/>-<see cref="ANGLE_instanced_arrays.DrawElementsInstancedANGLE"/><br/>-<see cref="WebGLRenderingContext.DrawArrays"/><br/>-<see cref="WebGLRenderingContext.DrawElements"/><br/>-<see cref="WebGL2RenderingContext.DrawArraysInstanced"/><br/>-<see cref="WebGL2RenderingContext.DrawElementsInstanced"/><br/>-<see cref="WebGL2RenderingContext.VertexAttribDivisor"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/vertexAttribDivisorANGLE"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ANGLE_instanced_arraysVertexAttribDivisorANGLE>
</docs><docs>
<Attribution_Reporting_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Attribution Reporting API</strong> enables developers to measure conversions — for example when a user clicks an ad embedded on one site and then proceeds to purchase the item over on the vendor&amp;apos;s site — and then access reports on those conversions. It does this without relying on third-party tracking cookies.
</summary>
<remarks>
<para>-<see href="https://wicg.github.io/attribution-reporting-api/validate-headers">Attribution Reporting Header Validation tool</see><br/>-<see href="https://privacysandbox.google.com/private-advertising/attribution-reporting/">Attribution reporting</see> on privacysandbox.google.com (2023)<br/>-<see href="https://privacysandbox.google.com/private-advertising/attribution-reporting/enable-conversion-measurement">Enable conversion measurement</see> on privacysandbox.google.com (2023)<br/>-<see href="https://privacysandbox.google.com/">The Privacy Sandbox</see> on privacysandbox.google.com (2023)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Attribution_Reporting_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Attribution_Reporting_API>
<Attribution_Reporting_APIGenerating_reports>
<summary>
This article explains how <see href="https://developer.mozilla.org/en-US/docs/Web/API/Attribution_Reporting_API">Attribution Reporting API</see> reports are generated — both attribution reports and debug reports — and how you can control the generated reports. This includes handling noise, prioritizing reports, filtering reports, and generating debug reports.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Attribution_Reporting_API/Generating_reports"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Attribution_Reporting_APIGenerating_reports>
<Attribution_Reporting_APIRegistering_sources>
<summary>
This article explains how to register attribution sources when using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Attribution_Reporting_API">Attribution Reporting API</see>.
</summary>
<remarks>
<para>-<see href="https://wicg.github.io/attribution-reporting-api/validate-headers">Attribution Reporting Header Validation tool</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Attribution_Reporting_API/Registering_sources"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Attribution_Reporting_APIRegistering_sources>
<Attribution_Reporting_APIRegistering_triggers>
<summary>
This article explains how to register attribution triggers.
</summary>
<remarks>
<para>-<see href="https://wicg.github.io/attribution-reporting-api/validate-headers">Attribution Reporting Header Validation tool</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Attribution_Reporting_API/Registering_triggers"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Attribution_Reporting_APIRegistering_triggers>
</docs><docs>
<Audio_Output_Devices_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Audio Output Devices API</strong> allows web applications to prompt users about what output device should be used for audio playback.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Audio_Output_Devices_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Audio_Output_Devices_API>
</docs><docs>
<Background_Fetch_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Background Fetch API</strong> provides a method for managing downloads that may take a significant amount of time such as movies, audio files, and software.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/blog/background-fetch/">Introducing Background Fetch</see><br/>-<see href="https://www.youtube.com/watch?v=cElAoxhQz6w">Background Fetch - HTTP 203</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Background_Fetch_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Background_Fetch_API>
</docs><docs>
<Background_Synchronization_API>
<summary>
The <strong>Background Synchronization API</strong> enables a web app to defer tasks so that they can be run in a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">service worker</see> once the user has a stable network connection.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/blog/background-sync/">Introducing Background Sync</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Background_Synchronization_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Background_Synchronization_API>
</docs><docs>
<Background_Tasks_API>
<summary>
The <strong>Cooperative Scheduling of Background Tasks API</strong> (also referred to as the Background Tasks API or the <c>requestIdleCallback()</c> API) provides the ability to queue tasks to be executed automatically by the user agent when it determines that there is free time to do so.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This API is <strong>not available</strong> in <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers</see>.</para></blockquote>
<para>-<see cref="Window.RequestIdleCallback"/><br/>-<see cref="Window.CancelIdleCallback"/><br/>-<see cref="IdleDeadline"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Background_Tasks_API>
</docs><docs>
<Badging_API>
<summary>
The <strong>Badging API</strong> gives web developers a method of setting a badge on a document or application, to act as a notification that state has changed without displaying a more distracting notification. A common use case for this would be an application with a messaging feature displaying a badge on the app icon to show that new messages have arrived.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/badging-api">Badging for app icons</see><br/>-<see href="https://github.com/w3c/badging/blob/main/explainer.md">Badging API Explainer</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Badging_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Badging_API>
</docs><docs>
<Barcode_Detection_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The Barcode Detection API detects linear and two-dimensional barcodes in images.
</summary>
<remarks>
<para>-<see href="https://www.barcodefaq.com/">barcodefaq.com: A website with information about different barcodes and examples of the different types.</see><br/>-<see href="https://developer.chrome.com/docs/capabilities/shape-detection#barcodedetector">The Shape Detection API: a picture is worth a thousand words, faces, and barcodes</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Barcode_Detection_API>
</docs><docs>
<Battery_Status_API>
<summary>
The <strong>Battery Status API</strong>, more often referred to as the <strong>Battery API</strong>, provides information about the system&amp;apos;s battery charge level and lets you be notified by events that are sent when the battery level or charging status change. This can be used to adjust your app&amp;apos;s resource usage to reduce battery drain when the battery is low, or to save changes before the battery runs out in order to prevent data loss.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This API is <strong>not available</strong> in <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers</see> (not exposed via <see cref="WorkerNavigator"/>).</para></blockquote>
<para>-<see href="https://hacks.mozilla.org/2012/02/using-the-battery-api-part-of-webapi/">Hacks blog post - Using the Battery API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Battery_Status_API>
</docs><docs>
<Beacon_API>
<summary>
The <strong><c>Beacon</c></strong> API is used to send an asynchronous and non-blocking request to a web server. The request does not expect a response. Unlike requests made using <see cref="XMLHttpRequest"/> or the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</see>, the browser guarantees to initiate beacon requests before the page is unloaded and to run them to completion.
</summary>
<remarks>
<para>The main use case for the Beacon API is to send analytics such as client-side events or session data to the server. Historically, websites have used <see cref="XMLHttpRequest"/> for this, but browsers do not guarantee to send these asynchronous requests in some circumstances (for example, if the page is about to be unloaded). To combat this, websites have resorted to various techniques, such as making the request synchronous, that have a bad effect on responsiveness. Because beacon requests are both asynchronous and guaranteed to be sent, they combine good performance characteristics and reliability.</para><para>For more details about the motivation for and usage of this API, see the documentation for the <see cref="Navigator.SendBeacon"/> method.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This API is <strong>not available</strong> in <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers</see> (not exposed via <see cref="WorkerNavigator"/>).</para></blockquote>
<para>-<see href="https://w3c.github.io/beacon/">Beacon standard</see><br/>-<see href="https://caniuse.com/#search=beacon">Beacon CanIUse data</see><br/>-<see href="https://ehsanakhgari.org/blog/2015-04-08/intercepting-beacons-through-service-workers/">Intercepting beacons through service workers</see>; Ehsan Akhgari; 2015-Apr-08<br/>-<see href="https://webkit.org/blog/8821/link-click-analytics-and-privacy/"/><br/>-<see href="https://calendar.perfplanet.com/2020/beaconing-in-practice/">Beaconing in Practice</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Beacon_API>
</docs><docs>
<Broadcast_Channel_API>
<summary>
The <strong>Broadcast Channel API</strong> allows basic communication between <see href="https://developer.mozilla.org/en-US/docs/Glossary/browsing context">browsing context</see> (that is, <strong>windows</strong>, <strong>tabs</strong>, <strong>frames</strong>, or <strong>iframes</strong>) and workers on the same <see href="https://developer.mozilla.org/en-US/docs/Glossary/origin">origin</see>.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>To be exact, communication is allowed between browsing contexts using the same <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/State_Partitioning">storage partition</see>. Storage is first partitioned according to top-level sites—so for example, if you have one opened page at <c>a.com</c> that embeds an iframe from <c>b.com</c>, and another page opened to <c>b.com</c>, then the iframe cannot communicate with the second page despite them being technically same-origin. However, if the first page is also on <c>b.com</c>, then the iframe can communicate with the second page.</para></blockquote><para>By creating a <see cref="BroadcastChannel"/> object, you can receive any messages that are posted to it. You don't have to maintain a reference to the frames or workers you wish to communicate with: they can "subscribe" to a particular channel by constructing their own <see cref="BroadcastChannel"/> with the same name, and have bi-directional communication between all of them.</para><para><see href="https://developer.mozilla.orgbroadcastchannel.png">The principle of the Broadcast Channel API</see></para>
<para>-<see cref="BroadcastChannel"/>, the interface implementing it.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Broadcast_Channel_API>
</docs><docs>
<Canvas_API>
<summary>
The <strong>Canvas API</strong> provides a means for drawing graphics via <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</see> and the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</see> <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas">canvas</see> element. Among other things, it can be used for animation, game graphics, data visualization, photo manipulation, and real-time video processing.
</summary>
<remarks>
<para>The Canvas API largely focuses on 2D graphics. The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see>, which also uses the <c>&amp;lt;canvas&amp;gt;</c> element, draws hardware-accelerated 2D and 3D graphics.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_API>
<Canvas_APIManipulating_video_using_canvas>
<summary>
By combining the capabilities of the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/video"><c>video</c></see> element with a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/canvas"><c>canvas</c></see>, you can manipulate video data in real time to incorporate a variety of visual effects to the video being displayed. This tutorial demonstrates how to perform chroma-keying (also known as the &amp;quot;green screen effect&amp;quot;) using JavaScript code.
</summary>
<remarks>
<para></para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Media">Web media technologies</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Media/Guides/Formats">Guide to media types and formats on the web</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/HTML_video_and_audio">Learning area: HTML video and audio</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Manipulating_video_using_canvas"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APIManipulating_video_using_canvas>
<Canvas_APITutorial>
<summary>
This tutorial describes how to use the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/canvas"><strong><c>&amp;lt;canvas&amp;gt;</c></strong></see> element to draw 2D graphics, starting with the basics. The examples provided should give you some clear ideas about what you can do with canvas, and will provide code snippets that may get you started in building your own content.
</summary>
<remarks>
<para><c>&amp;lt;canvas&amp;gt;</c> is an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</see> element which can be used to draw graphics via scripting (usually <see href="https://developer.mozilla.org/en-US/docs/Glossary/JavaScript">JavaScript</see>). This can, for instance, be used to draw graphs, combine photos, or create simple animations.</para><para>First introduced in WebKit by Apple for the macOS Dashboard, <c>&amp;lt;canvas&amp;gt;</c> has since been implemented in browsers. Today, all major browsers support it.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas topic page</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorial>
<Canvas_APITutorialAdvanced_animations>
<summary>
In the last chapter we made some <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations">basic animations</see> and got to know ways to get things moving. In this part we will have a closer look at the motion itself and are going to add some physics to make our animations more advanced.
</summary>
<remarks>
<para>-<see cref="Window.RequestAnimationFrame"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Advanced_animations"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialAdvanced_animations>
<Canvas_APITutorialApplying_styles_and_colors>
<summary>
In the chapter about <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes">drawing shapes</see>, we used only the default line and fill styles. Here we will explore the canvas options we have at our disposal to make our drawings a little more attractive. You will learn how to add different colors, line styles, gradients, patterns and shadows to your drawings.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Canvas content is not accessible to screen readers. If the canvas is purely decorative, include <c>role=&amp;quot;presentation&amp;quot;</c> on the <c>&amp;lt;canvas&amp;gt;</c> opening tag. Otherwise, include descriptive text as the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-label"><c>aria-label</c></see> attribute directly on the canvas element itself or include fallback content placed within the opening and closing canvas tag. Canvas content is not part of the DOM, but nested fallback content is.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Applying_styles_and_colors"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialApplying_styles_and_colors>
<Canvas_APITutorialBasic_animations>
<summary>
Probably the biggest limitation is, that once a shape gets drawn, it stays that way. If we need to move it we have to redraw it and everything that was drawn before it. It takes a lot of time to redraw complex frames and the performance depends highly on the speed of the computer it&amp;apos;s running on.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialBasic_animations>
<Canvas_APITutorialBasic_usage>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_usage"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialBasic_usage>
<Canvas_APITutorialCompositing>
<summary>
In all of our <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Transformations">previous examples</see>, shapes were always drawn one on top of the other. This is more than adequate for most situations, but it limits the order in which composite shapes are built. We can, however, change this behavior by setting the <c>globalCompositeOperation</c> property. In addition, the <c>clip</c> property allows us to hide unwanted parts of shapes.
</summary>
<remarks>
<c>globalCompositeOperation</c><para>We can not only draw new shapes behind existing shapes but we can also use it to mask off certain areas, clear sections from the canvas (not limited to rectangles like the <see cref="CanvasRenderingContext2D.ClearRect"/> method does) and more.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialCompositing>
<Canvas_APITutorialDrawing_shapes>
<summary>
Now that we have set up our <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_usage">canvas environment</see>, we can get into the details of how to draw on the canvas. By the end of this article, you will have learned how to draw rectangles, triangles, lines, arcs and curves, providing familiarity with some of the basic shapes. Working with paths is essential when drawing objects onto the canvas and we will see how that can be done.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialDrawing_shapes>
<Canvas_APITutorialDrawing_text>
<summary>
After having seen how to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Applying_styles_and_colors">apply styles and colors</see> in the previous chapter, we will now have a look at how to draw text onto the canvas.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_text"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialDrawing_text>
<Canvas_APITutorialFinale>
<summary>
Congratulations! You finished the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial">Canvas tutorial</see>! This knowledge will help you to make great 2D graphics on the web.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Finale"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialFinale>
<Canvas_APITutorialOptimizing_canvas>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialOptimizing_canvas>
<Canvas_APITutorialPixel_manipulation_with_canvas>
<summary>
Until now we haven&amp;apos;t looked at the actual pixels of our canvas. With the <c>ImageData</c> object you can directly read and write a data array to manipulate pixel data. We will also look into how image smoothing (anti-aliasing) can be controlled and how to save images from your canvas.
</summary>
<remarks>
<para>-<see cref="ImageData"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Manipulating_video_using_canvas">Manipulating video using canvas</see><br/>-<see href="https://www.digitalocean.com/community/tutorials/js-canvas-toblob">Download Canvas API-Generated Images Using toBlob</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialPixel_manipulation_with_canvas>
<Canvas_APITutorialTransformations>
<summary>
Earlier in this tutorial we&amp;apos;ve learned about the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes">canvas grid</see> and the <strong>coordinate space</strong>. Until now, we only used the default grid and changed the size of the overall canvas for our needs. With transformations there are more powerful ways to translate the origin to a different position, rotate the grid and even scale it.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Transformations"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialTransformations>
<Canvas_APITutorialUsing_images>
<summary>
Until now we have created our own <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes">shapes</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Applying_styles_and_colors">applied styles</see> to them. One of the more exciting features of <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas">canvas</see> is the ability to use images. These can be used to do dynamic photo compositing or as backdrops of graphs, for sprites in games, and so forth. External images can be used in any format supported by the browser, such as PNG, GIF, or JPEG. You can even use the image produced by other canvas elements on the same page as the source!
</summary>
<remarks>
<para>Importing images into a canvas is basically a two step process:</para><para>Let&amp;apos;s take a look at how to do this.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Canvas_APITutorialUsing_images>
</docs><docs>
<Channel_Messaging_API>
<summary>
The <strong>Channel Messaging API</strong> allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, two documents via a <see cref="SharedWorker"/>, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging">Using channel messaging</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API">Broadcast Channel API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Channel_Messaging_API>
<Channel_Messaging_APIUsing_channel_messaging>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API">Channel Messaging API</see> allows two separate scripts running in different browsing contexts attached to the same document (e.g., two {{HTMLElement("iframe")}} elements, the main document and a single {{HTMLElement("iframe")}}, or two documents via a <see cref="SharedWorker"/>) to communicate directly, passing messages between each other through two-way channels (or pipes) with a port at each end.
</summary>
<remarks>
<para>In this article we&amp;apos;ll explore the basics of using this technology.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API">Channel Messaging API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API">Broadcast Channel API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Channel_Messaging_APIUsing_channel_messaging>
</docs><docs>
<Clipboard_API>
<summary>
The <strong>Clipboard API</strong> provides the ability to respond to clipboard commands (cut, copy, and paste), as well as to asynchronously read from and write to the system clipboard.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Use this API in preference to the deprecated <see cref="Document.ExecCommand"/> method for accessing the clipboard.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para>This API is <strong>not available</strong> in <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers</see> (not exposed via <see cref="WorkerNavigator"/>).</para></blockquote>
<para>-<see href="https://web.dev/articles/async-clipboard">Image support for Async Clipboard article</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Clipboard_API>
</docs><docs>
<Compression_Streams_API>
<summary>
The <strong>Compression Streams API</strong> provides a JavaScript API for compressing and decompressing streams of data using the gzip or deflate formats.
</summary>
<remarks>
<para>Built in compression means that JavaScript applications will not need to include a compression library, which makes the download size of the application smaller.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Compression_Streams_API>
</docs><docs>
<Compute_Pressure_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Compute Pressure API</strong> is a JavaScript API that enables you to observe the pressure of system resources such as the CPU.
</summary>
<remarks>
<para>-<see href="https://w3c.github.io/compute-pressure/demo/">Compute Pressure demo</see>, which uses Mandelbrot sets and workers to create artificial pressure for test purposes.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Compute_Pressure_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Compute_Pressure_API>
</docs><docs>
<Console_API>
<summary>
The Console API provides functionality to allow developers to perform debugging tasks, such as logging messages or the values of variables at set points in your code, or timing how long an operation takes to complete.
</summary>
<remarks>
<para>-<see href="https://firefox-source-docs.mozilla.org/devtools-user/index.html">Tools</see><br/>-<see href="https://firefox-source-docs.mozilla.org/devtools-user/web_console/index.html">Web Console</see> — how the Web Console in Firefox handles console API calls<br/>-<see href="https://firefox-source-docs.mozilla.org/devtools-user/about_colon_debugging/index.html">about:debugging</see> — how to see console output when the debugging target is a mobile device<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Console_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Console_API>
</docs><docs>
<Contact_Picker_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The Contact Picker API allows users to select entries from their contact list and share limited details of the selected entries with a website or application.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This API is <strong>not available</strong> in <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers</see> (not exposed via <see cref="WorkerNavigator"/>).</para></blockquote>
<para>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/contact-picker">A Contact Picker for the Web</see><br/>-<see href="https://mdn.github.io/dom-examples/contact-picker/">Contact Picker API live demo</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Contact_Picker_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Contact_Picker_API>
</docs><docs>
<Content_Index_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Content Index API</strong> allows developers to register their offline enabled content with the browser.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/content-indexing-api">An introductory article on the Content Index API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">Service Worker API, along with information about Cache and CacheStorage</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Content_Index_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Content_Index_API>
</docs><docs>
<Cookie_Store_API>
<summary>
The <strong>Cookie Store API</strong> is an asynchronous API for managing cookies, available in windows and also <see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">service workers</see>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">Service Worker API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cookie_Store_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Cookie_Store_API>
</docs><docs>
<Credential_Management_API>
<summary>

</summary>
<remarks>
<para>-{{domxref(&amp;quot;Web Authentication API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-{{domxref(&amp;quot;WebOTP API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-{{domxref(&amp;quot;FedCM API&amp;quot;, &amp;quot;Federated Credential Management (FedCM) API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Credential_Management_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Credential_Management_API>
<Credential_Management_APICredential_types>
<summary>
<table><tr><td>Type
</summary>
<remarks>
</td><td><para>Interface</para></td></tr><tr><td><para>Password</para></td><td><para><see cref="PasswordCredential"/></para></td></tr><tr><td><para>Federated identity</para></td><td><para><see cref="IdentityCredential"/>, <see cref="FederatedCredential"/> (deprecated)</para></td></tr><tr><td><para>One-time password (OTP)</para></td><td><para><see cref="OTPCredential"/></para></td></tr><tr><td><para>Web Authentication</para></td><td><para><see cref="PublicKeyCredential"/></para></td></tr></table><para>The credential types are all represented as subclasses of the <see cref="Credential"/> interface:</para><para><see href="https://developer.mozilla.orgcredential-types.svg">Class diagram showing the five different credential subclasses.</see></para><para>In this guide we&amp;apos;ll introduce the different credential types and explain at a high level how they are used.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Although we&amp;apos;re describing all the credential types together here, the different credential types are defined in several different specifications, which extend the main Credential Management API specification.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API">Web Authentication API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebOTP_API">WebOTP API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/FedCM_API">Federated Credential Management (FedCM) API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Credential_Management_API/Credential_types"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Credential_Management_APICredential_types>
</docs><docs>
<CSS_Custom_Highlight_API>
<summary>
The CSS Custom Highlight API provides a mechanism for styling arbitrary text ranges on a document by using JavaScript to create the ranges, and CSS to style them.
</summary>
<remarks>
<para>-<see href="https://css-tricks.com/css-custom-highlight-api-early-look/">CSS Custom Highlight API: The Future of Highlighting Text Ranges on the Web</see><br/>-HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/contenteditable"><c>contentEditable</c></see> attribute<br/>-CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/pseudo-elements">pseudo-elements</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_custom_highlight_API">CSS custom highlight API</see> module<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Custom_Highlight_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Custom_Highlight_API>
</docs><docs>
<CSS_Font_Loading_API>
<summary>
The <strong>CSS Font Loading API</strong> provides events and interfaces for dynamically loading font resources.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Font_Loading_API>
</docs><docs>
<CSS_Object_Model>
<summary>
The <strong>CSS Object Model</strong> is a set of APIs allowing the manipulation of CSS from JavaScript. It is much like the DOM, but for the CSS rather than the HTML. It allows users to read and modify CSS style dynamically.
</summary>
<remarks>
<para>The values of CSS are represented untyped, that is using <see cref="String"/> objects.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">Document Object Model (DOM)</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Houdini_APIs">Houdini APIs</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Object_Model>
<CSS_Object_ModelCSS_Declaration>
<summary>
A <strong>CSS declaration</strong> is an abstract concept not exposed as an object in the DOM. It represents a CSS property and value pairing.
</summary>
<remarks>
<para>A CSS declaration has the following associated properties:</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/CSS_Declaration"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Object_ModelCSS_Declaration>
<CSS_Object_ModelCSS_Declaration_Block>
<summary>
A <strong>CSS declaration block</strong> is an ordered collection of CSS properties and values. It is represented in the DOM as a <see cref="CSSStyleDeclaration"/>.
</summary>
<remarks>
<para>Each property and value pairing is known as a <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/CSS_Declaration">CSS declaration</see>. The CSS declaration block has the following associated properties:</para><para>When a <see cref="CSSStyleDeclaration"/> is returned by a <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model">CSS Object Model (CSSOM)</see> interface these properties are set to appropriate values as defined by the specification.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/CSS_Declaration_Block"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Object_ModelCSS_Declaration_Block>
<CSS_Object_ModelDetermining_the_dimensions_of_elements>
<summary>

</summary>
<remarks>
<para>-<see href="https://drafts.csswg.org/cssom-view/">The CSSOM View Module</see> specification<br/>-<see href="https://learn.microsoft.com/en-us/previous-versions/hh781509(v=vs.85)">MSDN: Measuring Element Dimension and Location</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Object_ModelDetermining_the_dimensions_of_elements>
<CSS_Object_ModelManaging_screen_orientation>
<summary>
The term <strong>screen orientation</strong> refers to whether a browser <see href="https://developer.mozilla.org/en-US/docs/Glossary/Viewport">viewport</see> is in landscape mode (that is, the width of the viewport is greater than its height), or else in portrait mode (the height of the viewport is greater than its width)
</summary>
<remarks>
<para>CSS provides the <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/orientation"><c>orientation</c></see> media feature to allow adjusting layout based on screen orientation.</para><para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Orientation_API">Screen Orientation API</see> provides a programmatic JavaScript API for working with screen orientation — including the ability to lock the viewport to a specific orientation.</para>
<para>-<see cref="Screen.Orientation"/><br/>-<see cref="ScreenOrientation"/><br/>-<see cref="ScreenOrientation.Change"/> event of <see cref="ScreenOrientation"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/orientation">The orientation media query</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Managing_screen_orientation"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Object_ModelManaging_screen_orientation>
<CSS_Object_ModelUsing_dynamic_styling_information>
<summary>
The CSS Object Model (CSSOM), part of the DOM, exposes specific interfaces allowing manipulation of a wide amount of information regarding CSS. Initially defined in the <strong>DOM Level 2 Style</strong> recommendation, these interfaces forms now a specification, <strong>CSS Object Model (CSSOM)</strong> which aims at superseding it.
</summary>
<remarks>
<para>In many cases, and where possible, it is best practice to dynamically manipulate classes via the <see cref="Element.ClassName"/> property since the ultimate appearance of all of the styling hooks can be controlled in a single stylesheet. One's JavaScript code also becomes cleaner since instead of being dedicated to styling details, it can focus on the overall semantics of each section it is creating or manipulating, leaving the precise style details to the stylesheet. However, there are cases where actually obtaining or manipulating the rules can be useful (whether for whole stylesheets or individual elements), and that is described in further detail below. Note also that, as with individual element's DOM styles, when speaking of manipulating the stylesheets, this is not actually manipulating the physical document(s), but merely the internal representation of the document.</para><para>The basic <c>style</c> object exposes the <see cref="Stylesheet"/> and the <see cref="CSSStylesheet"/> interfaces. Those interfaces contain members like <c>insertRule</c>, <c>selectorText</c>, and <c>parentStyleSheet</c> for accessing and manipulating the individual style rules that make up a CSS stylesheet.</para><para>To get to the <c>style</c> objects from the <c>document</c>, you can use the <see cref="Document.StyleSheets"/> property and access the individual objects by index (e.g., <c>document.styleSheets[0]</c> is the first stylesheet defined for the document, etc.).</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Object_ModelUsing_dynamic_styling_information>
</docs><docs>
<CSS_Painting_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The CSS Painting API — part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Houdini_APIs">CSS Houdini</see> umbrella of APIs — allows developers to write JavaScript functions that can draw directly into an element&amp;apos;s background, border, or content.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API/Guide">Using the CSS Painting API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API">CSS Typed Object Model API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Houdini_APIs">Houdini APIs</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Painting_API>
<CSS_Painting_APIGuide>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API">CSS Paint API</see> is designed to enable developers to programmatically define images which can then be used anywhere a CSS image can be invoked, such as CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-image">background-image</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-image">border-image</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask-image">mask-image</see>, etc.
</summary>
<remarks>
<para>To programmatically create an image used by a CSS stylesheet we need to work through a few steps:</para><para>To elaborate over these steps, we&amp;apos;re going to start by creating a half-highlight background, like on this header:</para><para><see href="https://developer.mozilla.orgmycoolheader.png">Text reading &amp;apos;My Cool Header&amp;apos; with a solid yellow background image block on the bottom left two thirds of the header</see></para><blockquote class="NOTE"><h5>NOTE</h5><para>See <see href="https://mdn.github.io/dom-examples/css-painting/">CSS Painting API Example</see> for a full working demo along with the <see href="https://github.com/mdn/dom-examples/tree/main/css-painting">source code</see>.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API">CSS Painting API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API">CSS Typed Object Model API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API/Guide"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Painting_APIGuide>
</docs><docs>
<CSS_Properties_and_Values_API>
<summary>
The <strong>CSS Properties and Values API</strong> — part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Houdini_APIs">CSS Houdini</see> umbrella of APIs — allows developers to explicitly define their <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*">CSS custom properties</see>, allowing for property type checking, default values, and properties that do or do not inherit their value.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Properties_and_Values_API/guide">Using the CSS properties and values API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API">CSS Painting API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API">CSS Typed Object Model</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Houdini_APIs">Houdini APIs</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Properties_and_Values_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Properties_and_Values_API>
<CSS_Properties_and_Values_APIGuide>
<summary>
The <strong>CSS Properties and Values API</strong> — part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Houdini_APIs">CSS Houdini</see> umbrella of APIs — allows the registration of <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*">CSS custom properties</see>, allowing for property type checking, default values, and properties that do or do not inherit their value.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Properties_and_Values_API/guide"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Properties_and_Values_APIGuide>
</docs><docs>
<CSS_Typed_OM_API>
<summary>
The CSS Typed Object Model API simplifies CSS property manipulation by exposing CSS values as typed JavaScript objects rather than strings. This not only simplifies CSS manipulation, but also lessens the negative impact on performance as compared to <see cref="'HTMLElement.Style'"/>.
</summary>
<remarks>
<para>Generally, CSS values can be read and written in JavaScript as strings, which can be slow and cumbersome. CSS Typed Object Model API provides interfaces to interact with underlying values, by representing them with specialized JS objects that can be manipulated and understood more easily and more reliably than string parsing and concatenation. This is easier for authors (for example, numeric values are reflected with actual JS numbers, and have unit-aware mathematical operations defined for them). It is also generally faster, as values can be directly manipulated and then cheaply translated back into underlying values without having to both build and parse strings of CSS.</para><para>CSS Typed OM both allows for the performant manipulation of values assigned to CSS properties while enabling maintainable code that is both more understandable and easier to write.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API">CSS Painting API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API/Guide">Using the CSS Typed Object Model</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Houdini_APIs">CSS Houdini</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Typed_OM_API>
<CSS_Typed_OM_APIGuide>
<summary>
The <strong><see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API">CSS Typed Object Model API</see></strong> exposes CSS values as typed JavaScript objects to allow their performant manipulation.
</summary>
<remarks>
<para>Converting <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model">CSS Object Model</see> value strings into meaningfully-typed JavaScript representations and back (via <see cref="HTMLElement.Style"/>) can incur a significant performance overhead.</para><para>The CSS Typed OM makes CSS manipulation more logical and performant by providing object features (rather than CSSOM string manipulation), providing access to types, methods, and an object model for CSS values.</para><para>This article provides an introduction to all of its main features.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API/Guide">Using the CSS Painting API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API/Guide"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSS_Typed_OM_APIGuide>
</docs><docs>
<Device_Memory_API>
<summary>
The capabilities of a client device largely depend on the amount of available RAM. Traditionally, developers had to use heuristics and either benchmark a device or infer device capabilities based on other factors like the device manufacturer or User Agent strings.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Device-Memory">Device-Memory</see> header<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Device_Memory_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Device_Memory_API>
</docs><docs>
<Device_orientations>
<summary>
Device orientation events are events that allow you to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientation_events/Detecting_device_orientation#processing_orientation_events">detect a device&amp;apos;s physical orientation</see>, as well as allowing you to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientation_events/Detecting_device_orientation#processing_motion_events">detect the device&amp;apos;s motion</see>.
</summary>
<remarks>
<para>-<see href="https://web.dev/articles/device-orientation">Device Orientation &amp; Motion</see> at web.dev<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientations"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Device_orientations>
<Device_orientationsDetecting_device_orientation>
<summary>
Increasingly, web-enabled devices are capable of determining their <strong>orientation</strong>; that is, they can report data indicating changes to their orientation with relation to the pull of gravity. In particular, hand-held devices such as mobile phones can use this information to automatically rotate the display to remain upright, presenting a wide-screen view of the web content when the device is rotated so that its width is greater than its height.
</summary>
<remarks>
<para>There are two JavaScript events that handle orientation information. The first one is the <see cref="DeviceOrientationEvent"/>, which is sent when the accelerometer detects a change to the orientation of the device. By receiving and processing the data reported by these orientation events, it's possible to interactively respond to rotation and elevation changes caused by the user moving the device.</para><para>The second event is the <see cref="DeviceMotionEvent"/>, which is sent when a change in acceleration was added. It is different from the <see cref="DeviceOrientationEvent"/> because it is listening for changes in acceleration as opposed to orientation. Sensors that are commonly capable of detecting <see cref="DeviceMotionEvent"/> include sensors in laptops to protect moving storage devices. <see cref="DeviceOrientationEvent"/> is more commonly found in mobile devices.</para>
<para>-<see cref="DeviceOrientationEvent"/><br/>-<see cref="DeviceMotionEvent"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientation_events/Orientation_and_motion_data_explained">Orientation and motion data explained</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientation_events/Using_device_orientation_with_3D_transforms">Using deviceorientation in 3D Transforms</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation">Cyber Orb: 2D maze game with device orientation</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientations/Detecting_device_orientation"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Device_orientationsDetecting_device_orientation>
<Device_orientationsOrientation_and_motion_data_explained>
<summary>
When using orientation and motion events, it&amp;apos;s important to understand what the values you&amp;apos;re given by the browser mean. This article provides details about the coordinate systems at play and how you use them.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientations/Orientation_and_motion_data_explained"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Device_orientationsOrientation_and_motion_data_explained>
<Device_orientationsUsing_device_orientation_with_3D_transforms>
<summary>
This article provides tips on how to use device orientation information in tandem with CSS 3D transforms.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transforms/Using_CSS_transforms">Using CSS transforms</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientation_events/Detecting_device_orientation">Detecting device orientation</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientations/Using_device_orientation_with_3D_transforms"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Device_orientationsUsing_device_orientation_with_3D_transforms>
</docs><docs>
<Device_Posture_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Device Posture API</strong> allows developers to create user interfaces that adapt to a foldable device&amp;apos;s posture and respond to posture changes.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/blog/foldable-apis-ot">Origin trial for Foldable APIs</see> on developer.chrome.com (2024)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Device_Posture_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Device_Posture_API>
</docs><docs>
<Document_Object_Model>
<summary>
The <strong>Document Object Model</strong> (<strong>DOM</strong>) connects web pages to scripts or programming languages by representing the structure of a document—such as the HTML representing a web page—in memory. Usually it refers to JavaScript, even though modeling HTML, SVG, or XML documents as objects are not part of the core JavaScript language.
</summary>
<remarks>
<para>The DOM represents a document with a logical tree. Each branch of the tree ends in a node, and each node contains objects. DOM methods allow programmatic access to the tree. With them, you can change the document&amp;apos;s structure, style, or content.</para><para>Nodes can also have event handlers attached to them. Once an event is triggered, the event handlers get executed.</para><para>To learn more about what the DOM is and how it represents documents, see our article <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">Introduction to the DOM</see>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Examples">DOM Examples</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model">CSS Object Model (CSSOM)</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Object_Model>
<Document_Object_ModelExamples>
<summary>
This chapter provides some longer examples of web and XML development using the DOM. Wherever possible, the examples use common APIs, tricks, and patterns in JavaScript for manipulating the document object.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Examples"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Object_ModelExamples>
<Document_Object_ModelIntroduction>
<summary>
The <strong>Document Object Model</strong> (<strong>DOM</strong>) is the data representation of the objects<br/>that comprise the structure and content of a document on the web.<br/>This guide will introduce the DOM,<br/>look at how the DOM represents an <see href="https://developer.mozilla.org/en-US/docs/Glossary/HTML">HTML</see> document in memory<br/>and how to use APIs to create web content and applications.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Object_ModelIntroduction>
<Document_Object_ModelLocating_DOM_elements_using_selectors>
<summary>
The Selectors API provides methods that make it quick and easy to retrieve <see cref="Element"/> nodes from the DOM by matching against a set of <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors">selectors</see>. This is much faster than past techniques, wherein it was necessary to, for example, use a loop in JavaScript code to locate the specific items you needed to find.
</summary>
<remarks>
<para>-<see href="https://drafts.csswg.org/selectors/">Selectors specification</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors">CSS Selectors</see><br/>-<see cref="Element.QuerySelector"/><br/>-<see cref="Element.QuerySelectorAll"/><br/>-<see cref="Document.QuerySelector"/><br/>-<see cref="Document.QuerySelectorAll"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Locating_DOM_elements_using_selectors"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Object_ModelLocating_DOM_elements_using_selectors>
<Document_Object_ModelReflected_attributes>
<summary>
Many attributes are <strong>reflected</strong> in the corresponding <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">DOM</see> interface.<br/>This means that the value of the attribute can be read or written directly in JavaScript through a property on the corresponding interface, and vice versa.<br/>The reflected properties offer a more natural programming approach than getting and setting attribute values using the <see cref="Element.GetAttribute"/> and <see cref="Element.SetAttribute"/> methods of the <see cref="Element"/> interface.
</summary>
<remarks>
<para>This guide provides an overview of reflected attributes and how they are used.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Reflected_attributes"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Object_ModelReflected_attributes>
<Document_Object_ModelTransforming_with_XSLT>
<summary>
One noticeable trend in W3C standards has been the effort to separate content from style. This would allow the same style to be reused for multiple content, as well as simplify maintenance and allow a quick (only modify one file) way to change the look of content.
</summary>
<remarks>
<para>CSS (Cascade Style Sheets) was one of the first ways proposed by the W3C. CSS is a way to apply style rules to a web document. These style rules define how the document (the content) should be laid out. However, it has several limitations, such as lack of programming structures and ability to create complex layout models. CSS also has limited support for changing the position of an element.</para><para>XSL (Extensible Stylesheet Language) Transformations are composed of two parts: XSL elements, which allow the transformation of an XML tree into another markup tree and XPath, a selection language for trees. XSLT takes an XML document (the content) and creates a brand new document based on the rules in the XSL stylesheet. This allows XSLT to add, remove and reorganize elements from the original XML document and thus allows more fine-grain control of the resulting document&amp;apos;s structure.</para><para>Transformations in XSLT are based on rules that consist of templates. Each template matches (using XPath) a certain fragment of the input XML document and then applies the substitution part on that fragment to create the new resulting document.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Transforming_with_XSLT"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Object_ModelTransforming_with_XSLT>
<Document_Object_ModelTraversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces>
<summary>
This article is an overview of some powerful, fundamental DOM level 1 methods and how to use them from JavaScript. You will learn how to create, access and control, and remove HTML elements dynamically. The DOM methods presented here are not specific to HTML; they also apply to XML. The demonstrations provided here will work fine in any modern browser.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>The DOM methods presented here are part of the Document Object Model (Core) level 1 specification. DOM level 1 includes both methods for generic document access and manipulation (DOM 1 Core) as well as methods specific to HTML documents (DOM 1 HTML).</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Object_ModelTraversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces>
<Document_Object_ModelUsing_the_Document_Object_Model>
<summary>
The <strong>Document Object Model</strong> (DOM) is an API for manipulating DOM trees of HTML and XML documents (among other tree-like documents). This API is at the root of the description of a page and serves as a base for scripting on the web.
</summary>
<remarks>
<para>-The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">Document Object Model</see> (DOM).<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Using_the_Document_Object_Model"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Object_ModelUsing_the_Document_Object_Model>
<Document_Object_ModelWhitespace>
<summary>
The presence of whitespace in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">DOM</see> can cause layout problems and make manipulation of the content tree difficult in unexpected ways, depending on where it is located. This article explores when difficulties can occur, and looks at what can be done to mitigate resulting problems.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Object_ModelWhitespace>
</docs><docs>
<Document_Picture-in-Picture_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Document Picture-in-Picture API</strong> makes it possible to open an always-on-top window that can be populated with arbitrary HTML content — for example a video with custom controls or a set of streams showing the participants of a video conference call. It extends the earlier <see href="https://developer.mozilla.org/en-US/docs/Web/API/Picture-in-Picture_API">Picture-in-Picture API for <c>&amp;lt;video&amp;gt;</c></see>, which specifically enables an HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video">video</see> element to be put into an always-on-top window.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Picture-in-Picture_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Picture-in-Picture_API>
<Document_Picture-in-Picture_APIUsing>
<summary>
This guide provides a walkthrough of typical usage of the {{domxref(&amp;quot;Document Picture-in-Picture API&amp;quot;, &amp;quot;Document Picture-in-Picture API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>You can see the featured demo in action at <see href="https://mdn.github.io/dom-examples/document-picture-in-picture/">Document Picture-in-Picture API Example</see> (see the full <see href="https://github.com/mdn/dom-examples/tree/main/document-picture-in-picture">source code</see> also).</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Picture-in-Picture_API/Using"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document_Picture-in-Picture_APIUsing>
</docs><docs>
<EditContext_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>EditContext API</strong> can be used to build rich text editors on the web that support advanced text input experiences, such as <see href="https://developer.mozilla.org/en-US/docs/Glossary/Input Method Editor">Input Method Editor</see> (IME) composition, emoji picker, or any other platform-specific editing-related UI surfaces.
</summary>
<remarks>
<para>With the EditContext API, you get the flexibility to render your own editable text region using any technology you want.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/EditContext_API/Guide">Using the EditContext API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EditContext_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EditContext_API>
<EditContext_APIGuide>
<summary>
The <strong><see href="https://developer.mozilla.org/en-US/docs/Web/API/EditContext_API">EditContext API</see></strong> can be used to build rich text editors on the web that support advanced text input experiences, such as <see href="https://developer.mozilla.org/en-US/docs/Glossary/Input Method Editor">Input Method Editor</see> (IME) composition, emoji picker, or any other platform-specific editing-related UI surfaces.
</summary>
<remarks>
<para>This article goes over the necessary steps to build a text editor using the EditContext API. In this guide, you will review the main steps involved in building a simple HTML code editor that highlights the syntax of the code as you type, and that supports IME composition.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/EditContext_API">EditContext API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Custom_Highlight_API">CSS Custom Highlight API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EditContext_API/Guide"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EditContext_APIGuide>
</docs><docs>
<Encoding_API>
<summary>
The <strong>Encoding API</strong> enables web developers to work with text that is represented in <see href="https://developer.mozilla.org/en-US/docs/Glossary/character encoding">character encoding</see> systems other than the encoding used internally by JavaScript strings. In particular, it enables developers to convert text between JavaScript strings and the <see href="https://developer.mozilla.org/en-US/docs/Glossary/UTF-8">UTF-8</see> encoding that is used for most documents on the web.
</summary>
<remarks>
<para>It provides two mechanisms:</para><para>Note that these operations are asymmetrical: encoding only encodes to UTF-8, while decoding can decode UTF-8 but also <see href="https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API/Encodings">many legacy encoding systems</see>.</para><para>The API provides synchronous interfaces for encoding and decoding, and also <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">stream-based</see> encoders and decoders, which could be used to, for example, decode text as it arrives over a network connection.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API/Encodings">Encoding API Encodings</see> - Encodings that must be supported for decoding text.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Encoding_API>
<Encoding_APIEncodings>
<summary>
The constructors for the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API">Encoding API</see> interfaces <see cref="TextDecoder"/> and <see cref="TextDecoderStream"/> can be passed an optional <c>label</c> argument, which identifies the encoding to be used.
</summary>
<remarks>
<para>The following table lists all encoding labels that user agents must support, along with the encoding that the label identifies. Note that most encodings have more than one label.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API/Encodings"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Encoding_APIEncodings>
</docs><docs>
<Encrypted_Media_Extensions_API>
<summary>
The <strong>Encrypted Media Extensions API</strong> provides interfaces for controlling the playback of content which is subject to a digital restrictions management scheme.
</summary>
<remarks>
<para>Access to this API is provided through <see cref="Navigator.RequestMediaKeySystemAccess"/>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Encrypted_Media_Extensions_API>
</docs><docs>
<EXT_blend_minmax>
<summary>
The <strong><c>EXT_blend_minmax</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default. The constants in WebGL2 are <c>gl.MIN</c> and <c>gl.MAX</c>.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.BlendEquation"/><br/>-<see cref="WebGLRenderingContext.BlendEquationSeparate"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_blend_minmax>
</docs><docs>
<EXT_color_buffer_float>
<summary>
The <strong><c>EXT_color_buffer_float</c></strong> extension is part of <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see> and adds the ability to render a variety of floating point formats.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL 2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts only.</para><para>For {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL 1&amp;quot;, &amp;quot;&amp;quot;, 1)}}, see the <see cref="EXT_color_buffer_half_float"/> and <see cref="WEBGL_color_buffer_float"/> extensions.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.RenderbufferStorage"/><br/>-<see cref="EXT_color_buffer_half_float"/><br/>-<see cref="WEBGL_color_buffer_float"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_float"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_color_buffer_float>
</docs><docs>
<EXT_color_buffer_half_float>
<summary>
The <strong><c>EXT_color_buffer_half_float</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and adds the ability to render to 16-bit floating-point color buffers.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. On WebGL 2, it's an alternative to using the <see cref="EXT_color_buffer_float"/> extension on platforms that support 16-bit floating point render targets but not 32-bit floating point render targets.</para><para>The <see cref="OES_texture_half_float"/> extension implicitly enables this extension.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.RenderbufferStorage"/><br/>-<see cref="OES_texture_half_float"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_color_buffer_half_float>
</docs><docs>
<EXT_disjoint_timer_query>
<summary>
The <strong>EXT_disjoint_timer_query</strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension should be available in {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts only. <see cref="EXT_disjoint_timer_query_webgl2"/> is available in {{domxref("WebGL2RenderingContext", "WebGL 2", &amp;quot;&amp;quot;, 1)}} contexts.</para><para>In WebGL 2, the OpenGL method <c>getQueryObject()</c> is renamed to <see cref="WebGL2RenderingContext.GetQueryParameter"/>.<br/>In WebGL 2, other queries (such as occlusion queries and primitive queries) are possible using <see cref="WebGLQuery"/> objects.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_disjoint_timer_query>
<EXT_disjoint_timer_queryBeginQueryEXT>
<summary>
The <strong><c>EXT_disjoint_timer_query.beginQueryEXT()</c></strong> method of<br/>the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> starts a timer query.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLQuery"/><br/>-<see cref="EXT_disjoint_timer_query"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/beginQueryEXT"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</EXT_disjoint_timer_queryBeginQueryEXT>
<EXT_disjoint_timer_queryCreateQueryEXT>
<summary>
The <strong><c>EXT_disjoint_timer_query.createQueryEXT()</c></strong> method of<br/>the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> creates and initializes<br/><see cref="WebGLQuery"/> objects, which track the time needed to fully complete<br/>a set of GL commands.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLQuery"/><br/>-<see cref="EXT_disjoint_timer_query"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/createQueryEXT"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="WebGLQuery"/> object.</returns>
</EXT_disjoint_timer_queryCreateQueryEXT>
<EXT_disjoint_timer_queryDeleteQueryEXT>
<summary>
The <strong><c>EXT_disjoint_timer_query.deleteQueryEXT()</c></strong> method of<br/>the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> deletes a given<br/><see cref="WebGLQuery"/> object.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLQuery"/><br/>-<see cref="EXT_disjoint_timer_query"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/deleteQueryEXT"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</EXT_disjoint_timer_queryDeleteQueryEXT>
<EXT_disjoint_timer_queryEndQueryEXT>
<summary>
The <strong><c>EXT_disjoint_timer_query.endQueryEXT()</c></strong> method of the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> ends a timer query.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLQuery"/><br/>-<see cref="EXT_disjoint_timer_query"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/endQueryEXT"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</EXT_disjoint_timer_queryEndQueryEXT>
<EXT_disjoint_timer_queryGetQueryEXT>
<summary>
The <strong><c>EXT_disjoint_timer_query.getQueryEXT()</c></strong> method of the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> returns information about a query<br/>target.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLQuery"/><br/>-<see cref="EXT_disjoint_timer_query"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/getQueryEXT"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>Depends on <c>pname</c>:</returns>
</EXT_disjoint_timer_queryGetQueryEXT>
<EXT_disjoint_timer_queryGetQueryObjectEXT>
<summary>
The <strong><c>EXT_disjoint_timer_query.getQueryObjectEXT()</c></strong> method<br/>of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> returns the state of a<br/>query object.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLQuery"/><br/>-<see cref="EXT_disjoint_timer_query"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/getQueryObjectEXT"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>Depends on <c>pname</c>:</returns>
</EXT_disjoint_timer_queryGetQueryObjectEXT>
<EXT_disjoint_timer_queryIsQueryEXT>
<summary>
The <strong><c>EXT_disjoint_timer_query.isQueryEXT()</c></strong> method of the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> returns <c>true</c> if the<br/>passed object is a <see cref="WebGLQuery"/> object.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLQuery"/><br/>-<see cref="EXT_disjoint_timer_query"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/isQueryEXT"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="WebGL_APITypes"/> indicating whether the given object is a<br/><see cref="WebGLQuery"/> object (<c>true</c>) or not<br/>(<c>false</c>).</returns>
</EXT_disjoint_timer_queryIsQueryEXT>
<EXT_disjoint_timer_queryQueryCounterEXT>
<summary>
The <strong><c>EXT_disjoint_timer_query.queryCounterEXT()</c></strong> method of<br/>the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> records the current time into<br/>the corresponding query object.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLQuery"/><br/>-<see cref="EXT_disjoint_timer_query"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/queryCounterEXT"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</EXT_disjoint_timer_queryQueryCounterEXT>
</docs><docs>
<EXT_float_blend>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see>&amp;apos;s <c>EXT_float_blend</c> extension allows blending and draw buffers with 32-bit floating-point components.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. However, to use it, you need to enable the use of 32-bit floating-point draw buffers by enabling the extension <see cref="WEBGL_color_buffer_float"/> (for WebGL1) or <see cref="EXT_color_buffer_float"/> (for WebGL2). Doing so automatically enables <c>EXT_float_blend</c> as well, if and only if <c>EXT_float_blend</c> is also supported. Support for <c>EXT_color_buffer_float</c> does not imply support for <c>EXT_float_blend</c>.</para></blockquote><para>With this extension enabled, calling <see cref="WebGLRenderingContext.DrawArrays"/> or <see cref="WebGLRenderingContext.DrawElements"/> with blending enabled and a draw buffer with 32-bit floating-point components will no longer result in an <c>INVALID_OPERATION</c> error.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using WebGL extensions</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see><br/>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="EXT_color_buffer_float"/><br/>-<see cref="WEBGL_color_buffer_float"/><br/>-<see cref="WebGLRenderingContext.DrawArrays"/><br/>-<see cref="WebGLRenderingContext.DrawElements"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_float_blend"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_float_blend>
</docs><docs>
<EXT_frag_depth>
<summary>
The <strong><c>EXT_frag_depth</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and enables to set a depth value of a fragment from within the fragment shader.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default. It requires GLSL <c>#version 300 es</c>.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_frag_depth"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_frag_depth>
</docs><docs>
<EXT_shader_texture_lod>
<summary>
The <strong><c>EXT_shader_texture_lod</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and adds additional texture functions to the OpenGL ES Shading Language which provide the shader writer with explicit control of LOD (<see href="https://en.wikipedia.org/wiki/Level_of_detail">Level of detail</see>).
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default. It requires GLSL <c>#version 300 es</c>.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="OES_standard_derivatives"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_shader_texture_lod"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_shader_texture_lod>
</docs><docs>
<EXT_sRGB>
<summary>
The <strong><c>EXT_sRGB</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and adds sRGB support to textures and framebuffer objects.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default. The constants in WebGL2 are: <c>gl.SRGB</c>, <c>gl.SRGB8</c>, <c>gl.SRGB8_ALPHA8</c> and <c>gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</c>.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.TexImage2D"/><br/>-<see cref="WebGLRenderingContext.TexSubImage2D"/><br/>-<see cref="WebGLRenderingContext.RenderbufferStorage"/><br/>-<see cref="WebGLRenderingContext.GetFramebufferAttachmentParameter"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_sRGB>
</docs><docs>
<EXT_texture_compression_bptc>
<summary>
The <c>EXT_texture_compression_bptc</c> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes 4 BPTC compressed texture formats. These compression formats are called <see href="https://learn.microsoft.com/en-us/windows/win32/direct3d11/bc7-format">BC7</see> and <see href="https://learn.microsoft.com/en-us/windows/win32/direct3d11/bc6h-format">BC6H</see> in <see href="https://learn.microsoft.com/en-us/windows/win32/direct3d11/texture-block-compression-in-direct3d-11">Microsoft&amp;apos;s DirectX API</see>.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Support depends on the system&amp;apos;s graphics driver. There is no support on Windows.</para><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.CompressedTexImage2D"/><br/>-<see cref="WebGLRenderingContext.CompressedTexSubImage2D"/><br/>-<see cref="WebGLRenderingContext.GetParameter"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_compression_bptc"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_texture_compression_bptc>
</docs><docs>
<EXT_texture_compression_rgtc>
<summary>
The <c>EXT_texture_compression_rgtc</c> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes 4 RGTC compressed texture formats. RGTC is a block-based texture compression format suited for unsigned and signed red and red-green textures (<strong>R</strong>ed-<strong>G</strong>reen <strong>T</strong>exture <strong>C</strong>ompression).
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Support depends on the system&amp;apos;s graphics driver. There is no support on Windows.</para><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.CompressedTexImage2D"/><br/>-<see cref="WebGLRenderingContext.CompressedTexSubImage2D"/><br/>-<see cref="WebGLRenderingContext.GetParameter"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_compression_rgtc"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_texture_compression_rgtc>
</docs><docs>
<EXT_texture_filter_anisotropic>
<summary>
The <strong><c>EXT_texture_filter_anisotropic</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes two constants for <see href="https://en.wikipedia.org/wiki/Anisotropic_filtering">anisotropic filtering (AF)</see>.
</summary>
<remarks>
<para>AF improves the quality of mipmapped texture access when viewing a textured primitive at an oblique angle. Using just mipmapping, these lookups have a tendency to average to grey.</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_texture_filter_anisotropic>
</docs><docs>
<EXT_texture_norm16>
<summary>
The <strong><c>EXT_texture_norm16</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and provides a set of new 16-bit signed normalized and unsigned normalized formats (fixed-point texture, renderbuffer and texture buffer).
</summary>
<remarks>
<para>When this extension is enabled:</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL 2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.TexImage2D"/><br/>-<see cref="WebGLRenderingContext.RenderbufferStorage"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_norm16"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EXT_texture_norm16>
</docs><docs>
<EyeDropper_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>EyeDropper API</strong> provides a mechanism for creating an eyedropper tool. Using this tool, users can sample colors from their screens, including outside of the browser window.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/eyedropper">Picking colors of any pixel on the screen with the EyeDropper API</see><br/>-<see href="https://www.w3.org/2021/03/media-production-workshop/talks/patrick-brosset-eyedropper-api.html">The EyeDropper API W3C/SMPTE Joint Workshop</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EyeDropper_API>
</docs><docs>
<FedCM_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Federated Credential Management API</strong> (or <strong>FedCM API</strong>) provides a standard mechanism for <see href="https://developer.mozilla.org/en-US/docs/Glossary/Identity provider">Identity provider</see> (IdPs) to make identity federation services available on the web in a privacy-preserving way, without the need for <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Third-party_cookies">third-party cookies</see> and redirects. This includes a JavaScript API that enables the use of federated authentication for activities such as signing in or signing up on a website.
</summary>
<remarks>
<para>-<see href="https://privacysandbox.google.com/cookies/fedcm">Federated Credential Management API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/FedCM_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</FedCM_API>
<FedCM_APIIDP_integration>
<summary>

</summary>
<remarks>
<para>-<see href="https://privacysandbox.google.com/cookies/fedcm">Federated Credential Management API</see> on privacysandbox.google.com (2023)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/FedCM_API/IDP_integration"> <em>See also on MDN</em> </seealso></para>
</remarks>
</FedCM_APIIDP_integration>
<FedCM_APIRP_sign-in>
<summary>

</summary>
<remarks>
<para>-<see href="https://privacysandbox.google.com/cookies/fedcm">Federated Credential Management API</see> on privacysandbox.google.com (2023)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/FedCM_API/RP_sign-in"> <em>See also on MDN</em> </seealso></para>
</remarks>
</FedCM_APIRP_sign-in>
</docs><docs>
<Fenced_frame_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>This feature is currently opposed by one browser vendor.<br/>See the <see href="https://developer.mozilla.org#standards_positions">Standards positions</see> section below for details.</blockquote>
</summary>
<remarks>
<para>The <strong>Fenced Frame API</strong> provides functionality for controlling content embedded in <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fencedframe">fencedframe</see> elements.</para>
<para>-<see href="https://privacysandbox.google.com/private-advertising/fenced-frame">Fenced frames</see> on privacysandbox.google.com<br/>-<see href="https://privacysandbox.google.com/">The Privacy Sandbox</see> on privacysandbox.google.com<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Fenced_frame_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Fenced_frame_API>
<Fenced_frame_APICommunication_with_embedded_frames>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Fenced_frame_API/Communication_with_embedded_frames"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Fenced_frame_APICommunication_with_embedded_frames>
</docs><docs>
<FetchLater_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>fetchLater()</c></strong><strong> API</strong> provides an interface to request a deferred fetch that can be sent after a specified period of time, or when the page is closed or navigated away from.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/fetchLater_API/fetchLater_quotas"><c>fetchLater()</c> quotas</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/fetchLater_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</FetchLater_API>
<FetchLater_APIFetchLater_quotas>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> Deferred <see href="https://developer.mozilla.org/en-US/docs/Web/API/fetchLater_API"><c>fetchLater()</c> API</see> fetches are batched and sent once the tab is closed. At this point, there is no way for the user to abort them. To avoid situations where documents abuse this bandwidth to send unlimited amounts of data over the network the API sets quotas on how much data can be deferred to be sent later.
</summary>
<remarks>
<para>These quotas can be managed through <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/deferred-fetch">Permissions-Policy/deferred-fetch</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/deferred-fetch-minimal">Permissions-Policy/deferred-fetch-minimal</see> <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Permissions_Policy">Permissions Policy</see> directives.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/fetchLater_API"><c>fetchLater()</c> API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/fetchLater_API/fetchLater_quotas"> <em>See also on MDN</em> </seealso></para>
</remarks>
</FetchLater_APIFetchLater_quotas>
</docs><docs>
<Fetch_API>
<summary>
The Fetch API provides an interface for fetching resources (including across the network). It is a more powerful and flexible replacement for <see cref="XMLHttpRequest"/>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Using Fetch</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">Service Worker API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CORS">HTTP access control (CORS)</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Fetch_API>
<Fetch_APIUsing_Fetch>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</see> provides a JavaScript interface for making HTTP requests and processing the responses.
</summary>
<remarks>
<para>Fetch is the modern replacement for <see cref="XMLHttpRequest"/>: unlike <c>XMLHttpRequest</c>, which uses callbacks, Fetch is promise-based and is integrated with features of the modern web such as <see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">service workers</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CORS">Cross-Origin Resource Sharing (CORS)</see>.</para><para>With the Fetch API, you make a request by calling <see cref="Windowfetch"/>, which is available as a global function in both <see cref="Window"/> and <see cref="WorkerGlobalScope"/> contexts. You pass it a <see cref="Request"/> object or a string containing the URL to fetch, along with an optional argument to configure the request.</para><para>The <c>fetch()</c> function returns a {{jsxref("Promise")}} which is fulfilled with a <see cref="Response"/> object representing the server's response. You can then check the request status and extract the body of the response in various formats, including text and JSON, by calling the appropriate method on the response.</para><para>Here&amp;apos;s a minimal function that uses <c>fetch()</c> to retrieve some JSON data from a server:</para><para>We declare a string containing the URL and then call <c>fetch()</c>, passing the URL with no extra options.</para><para>The <c>fetch()</c> function will reject the promise on some errors, but not if the server responds with an error status like {{httpstatus("404")}}: so we also check the response status and throw if it is not OK.</para><para>Otherwise, we fetch the response body content as {{glossary("JSON")}} by calling the <see cref="Response.Json"/> method of <c>Response</c>, and log one of its values. Note that like <c>fetch()</c> itself, <c>json()</c> is asynchronous, as are all the other methods to access the response body content.</para><para>In the rest of this page we&amp;apos;ll look in more detail at the different stages of this process.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">Service Worker API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Streams API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CORS">CORS</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</see><br/>-<see href="https://github.com/mdn/dom-examples/tree/main/fetch">Fetch examples on GitHub</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Fetch_APIUsing_Fetch>
</docs><docs>
<File_and_Directory_Entries_API>
<summary>
The File and Directory Entries API provides a way to process directories and file lists provided by the user via a form input or a drag-and-drop operation. It is a more advanced version of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File">File API</see>, which allows you to work with a single file. It was originally intended to support a full virtual file system, but now only supports read operations on user-provided data.
</summary>
<remarks>
<para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API#relationship_to_other_file-related_apis">Relationship to other file-related APIs</see> for a comparison between this API, the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API">File System API</see>, and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API">File API</see>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API">File API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API">File System API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</File_and_Directory_Entries_API>
</docs><docs>
<File_API>
<summary>

</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input/file"><c>&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;</c></see>: the file input element<br/>-<see cref="Blob.Text"/><br/>-The <see cref="DataTransfer"/> interface<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/File_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</File_API>
<File_APIUsing_files_from_web_applications>
<summary>
Using the File API, web content can ask the user to select local files and then read the contents of those files. This selection can be done by either using an HTML <c>{{HTMLElement(&amp;quot;input/file&amp;quot;, &amp;apos;&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;&amp;apos;)}}</c> element or by drag and drop.
</summary>
<remarks>
<para>-<see cref="File"/><br/>-<see cref="FileList"/><br/>-<see cref="FileReader"/><br/>-<see cref="URL"/><br/>-<see cref="XMLHttpRequest"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications"> <em>See also on MDN</em> </seealso></para>
</remarks>
</File_APIUsing_files_from_web_applications>
</docs><docs>
<File_System_API>
<summary>
The <strong>File System API</strong> — with extensions provided via the <see href="https://wicg.github.io/file-system-access/"><strong>File System Access API</strong></see> to access files on the device file system — allows read, write and file management capabilities.
</summary>
<remarks>
<para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API#relationship_to_other_file-related_apis">Relationship to other file-related APIs</see> for a comparison between this API, the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API">File and Directory Entries API</see>, and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API">File API</see>.</para>
<para>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/file-system-access">The File System Access API: simplifying access to local files</see><br/>-<see href="https://web.dev/articles/origin-private-file-system">The origin private file system</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</File_System_API>
<File_System_APIOrigin_private_file_system>
<summary>
The <strong>origin private file system</strong> (OPFS) is a storage endpoint provided as part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API">File System API</see>, which is private to the origin of the page and not visible to the user like the regular file system. It provides access to a special kind of file that is highly optimized for performance and offers in-place write access to its content.
</summary>
<remarks>
<para>-<see href="https://web.dev/articles/origin-private-file-system">The origin private file system</see> on web.dev<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API/Origin_private_file_system"> <em>See also on MDN</em> </seealso></para>
</remarks>
</File_System_APIOrigin_private_file_system>
</docs><docs>
<Force_Touchs>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> <strong>Force Touch Events</strong> are a proprietary, Apple-specific feature which makes possible (where supported by the input hardware) new interactions based on how hard the user clicks or presses down on the touchscreen or trackpad.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Force_Touchs"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Force_Touchs>
</docs><docs>
<Fullscreen_API>
<summary>
The <strong>Fullscreen API</strong> adds methods to present a specific <see cref="Element"/> (and its descendants) in fullscreen mode, and to exit fullscreen mode once it is no longer needed. This makes it possible to present desired content—such as an online game—using the user's entire screen, removing all browser user interface elements and other applications from the screen until fullscreen mode is shut off.
</summary>
<remarks>
<para>See the article <see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">Guide to the Fullscreen API</see> for details on how to use the API.</para>
<para>-<see cref="Element.RequestFullscreen"/><br/>-<see cref="Document.ExitFullscreen"/><br/>-<see cref="Document.Fullscreen"/><br/>-<see cref="Document.FullscreenElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:fullscreen">:fullscreen</see>, {{CSSxRef("::backdrop&amp;quot;)}}<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe#allowfullscreen"><c>allowfullscreen</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Fullscreen_API>
<Fullscreen_APIGuide>
<summary>
This article demonstrates how to use the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Fullscreen API</see> to place a given element into fullscreen mode, as well as how to detect when the browser enters or exits fullscreen mode.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Using fullscreen mode</see><br/>-<see cref="Element.RequestFullscreen"/><br/>-<see cref="Document.ExitFullscreen"/><br/>-<see cref="Document.Fullscreen"/><br/>-<see cref="Document.FullscreenElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:fullscreen">:fullscreen</see>, {{CSSxRef("::backdrop&amp;quot;)}}<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe#allowfullscreen"><c>allowfullscreen</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Fullscreen_APIGuide>
</docs><docs>
<Gamepad_API>
<summary>
The <strong>Gamepad API</strong> is a way for developers to access and respond to signals from gamepads and other game controllers in a simple, consistent way. It contains three interfaces, two events and one specialist function, to respond to gamepads being connected and disconnected, and to access other information about the gamepads themselves, and what buttons and other controls are currently being pressed.
</summary>
<remarks>
<para>-<see href="https://hacks.mozilla.org/2013/12/the-gamepad-api/">The Gamepad API</see> by Ted Mielczarek and Robert Nyman<br/>-<see href="https://luser.github.io/gamepadtest/">Simple API demo page</see> (<see href="https://github.com/luser/gamepadtest">source</see>)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Gamepad_API>
<Gamepad_APIUsing_the_Gamepad_API>
<summary>
HTML provides the necessary components for rich, interactive game development. Technologies like <c>&amp;lt;canvas&amp;gt;</c>, WebGL, <c>&amp;lt;audio&amp;gt;</c>, and <c>&amp;lt;video&amp;gt;</c>, along with JavaScript implementations, support tasks that provide similar, if not the same, features as native code. The Gamepad API allows developers and designers to access and use gamepads and other game controllers.
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API">Gamepad API</see> introduces new events on the <see cref="Window"/> object for reading gamepad and controller (hereby referred to as <strong>gamepad</strong>) state. In addition to these events, the API also adds a <see cref="Gamepad"/> object, which you can use to query the state of a connected gamepad, and a <see cref="Navigator.GetGamepads"/> method which you can use to get a list of gamepads known to the page.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Gamepad_APIUsing_the_Gamepad_API>
</docs><docs>
<Geolocation_API>
<summary>
The <strong>Geolocation API</strong> allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information.
</summary>
<remarks>
<para>WebExtensions that wish to use the <c>Geolocation</c> object must add the <c>&amp;quot;geolocation&amp;quot;</c> permission to their manifest. The user&amp;apos;s operating system will prompt the user to allow location access the first time it is requested.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API">Using the Geolocation API</see><br/>-<see href="https://hacks.mozilla.org/2013/10/who-moved-my-geolocation/">Who moved my geolocation?</see> (Hacks blog)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Geolocation_API>
<Geolocation_APIUsing_the_Geolocation_API>
<summary>
The Geolocation API is used to retrieve the user&amp;apos;s location, so that it can for example be used to display their position using a mapping API. This article explains the basics of how to use it.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Geolocation_APIUsing_the_Geolocation_API>
</docs><docs>
<Geometry_interfaces>
<summary>
<strong>Geometry interfaces</strong> is a CSS module that provides interfaces for working with 3D and 2D graphics — in particular, for working with points, rectangles, quadrilaterals and <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web#transformation_matrices">transformation matrices</see> (for operations that translate/move, scale, rotate, skew/shear/slant, and flip graphics, as well as for multiplying/chaining and inverting/undoing those operations).
</summary>
<remarks>
<para>As a web developer, you don&amp;apos;t always use the geometry interfaces directly, but instead use other features that rely on them behind the scenes: parts of <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transforms">CSS Transforms</see>, the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas API</see>, the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR Device API</see>, and (more directly) <see cref="'VideoFrame.VisibleRect'"/>, <see cref="'Element.GetClientRects'"/>, and <see cref="'Element.GetBoundingClientRect'"/>.</para>
<para>-<see cref="'Path2D.AddPath'"/><br/>-<see cref="'CanvasPattern.SetTransform'"/><br/>-<see cref="'CanvasRenderingContext2D.GetTransform'"/><br/>-<see cref="'CanvasRenderingContext2D.SetTransform'"/><br/>-<see cref="'CSSTransformValue.ToMatrix'"/><br/>-<see cref="'CSSTransformComponent.ToMatrix'"/><br/>-<see cref="'Element.GetBoundingClientRect'"/><br/>-<see cref="'Element.GetClientRects'"/><br/>-<see cref="'VideoFrame.VisibleRect'"/><br/>-<see cref="'XRLightEstimate'"/><br/>-<see cref="'XRRigidTransform'"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Geometry_interfaces"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Geometry_interfaces>
</docs><docs>
<History_API>
<summary>
The <strong>History API</strong> provides access to the browser&amp;apos;s session history (not to be confused with <see href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/history">WebExtensions history</see>) through the <see cref="Window.History"/> global object. It exposes useful methods and properties that let you navigate back and forth through the user's history, and manipulate the contents of the history stack.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This API is only available on the main thread (<see cref="Window"/>). It cannot be accessed in <see cref="Worker"/> or <see cref="Worklet"/> contexts.</para></blockquote>
<para>-<see cref="Window.History"/> global object<br/>-<see cref="Windowpopstate"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</History_API>
<History_APIWorking_with_the_History_API>
<summary>
The History API enables a website to interact with the browser&amp;apos;s session history: that is, the list of pages that the user has visited in a given window. As the user visits new pages, for example by clicking links, those new pages are added to the session history. The user can also move back and forth through the history using the browser&amp;apos;s &amp;quot;Back&amp;quot; and &amp;quot;Forward&amp;quot; buttons.
</summary>
<remarks>
<para>The main interface defined in the History API is the <see cref="History"/> interface, and this defines two quite distinct sets of methods:</para><para>In this guide, we&amp;apos;ll cover only the second set of methods.</para><para>The <c>pushState()</c> method adds a new entry to the session history, while the <c>replaceState()</c> method updates the session history entry for the current page. Both these methods take a <c>state</c> parameter which can contain any {{Glossary("Serializable_object", "serializable object")}}. When the browser navigates to this history entry, the browser fires a <see cref="Window.Popstate"/> event, which contains the state object associated with that entry.</para><para>The main purpose of these APIs is to support websites like {{Glossary("SPA", "Single-page applications")}}, that use JavaScript APIs such as <see cref="Windowfetch"/> to update the page with new content, instead of loading a whole new page.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">History API</see><br/>-<see cref="Window.History"/> global object<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</History_APIWorking_with_the_History_API>
</docs><docs>
<Houdini_APIs>
<summary>
Houdini is a set of low-level APIs that exposes parts of the CSS engine,<br/>giving developers the power to extend CSS by hooking into the styling and layout process of a browser&amp;apos;s rendering engine.<br/>Houdini is a group of APIs that give developers direct access to the <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model">CSS Object Model</see> (CSSOM),<br/>enabling developers to write code the browser can parse as CSS,<br/>thereby creating new CSS features without waiting for them to be implemented natively in browsers.
</summary>
<remarks>
<para>-<see href="https://www.smashingmagazine.com/2020/03/practical-overview-css-houdini/">A Practical Overview of CSS Houdini</see><br/>-<see href="https://web.dev/articles/css-props-and-vals">Smarter custom properties with Houdini&amp;apos;s new API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Houdini_APIs"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Houdini_APIs>
</docs><docs>
<HTML_DOM_API>
<summary>
The <strong>HTML DOM API</strong> is made up of the interfaces that define the functionality of each of the <see href="https://developer.mozilla.org/en-US/docs/Glossary/element">element</see> in <see href="https://developer.mozilla.org/en-US/docs/Glossary/HTML">HTML</see>, as well as any supporting types and interfaces they rely upon.
</summary>
<remarks>
<para>The functional areas included in the HTML DOM API include:</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTML_DOM_API>
<HTML_DOM_APIMicrotask_guide>
<summary>
A <strong>microtask</strong> is a short function which is executed after the function or program which created it exits <strong>and</strong> only if the <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Execution_model#stack_and_execution_contexts">JavaScript execution stack</see> is empty, but before returning control to the event loop being used by the <see href="https://developer.mozilla.org/en-US/docs/Glossary/user agent">user agent</see> to drive the script's execution environment.
</summary>
<remarks>
<para>This event loop may be either the browser&amp;apos;s main event loop or the event loop driving a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">web worker</see>. This lets the given function run without the risk of interfering with another script&amp;apos;s execution, yet also ensures that the microtask runs before the user agent has the opportunity to react to actions taken by the microtask.</para><para>JavaScript <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">promises</see> and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver">Mutation Observer API</see> both use the microtask queue to run their callbacks, but there are other times when the ability to defer work until the current event loop pass is wrapping up is helpful. In order to allow microtasks to be used by third-party libraries, frameworks, and polyfills, the <see cref="Window.QueueMicrotask"/> method is exposed on the <see cref="Window"/> and <see cref="WorkerGlobalScope"/> interfaces.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth">In depth: Microtasks and the JavaScript runtime environment</see><br/>-<see cref="Window.QueueMicrotask"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Async_JS">Asynchronous JavaScript</see>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Async_JS/Introducing">Introducing asynchronous JavaScript</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Async_JS/Promises">Graceful asynchronous programming with Promises</see><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTML_DOM_APIMicrotask_guide>
<HTML_DOM_APIMicrotask_guideIn_depth>
<summary>
When debugging or, possibly, when trying to decide upon the best approach to solving a problem around timing and scheduling of tasks and microtasks, there are things about how the JavaScript runtime operates under the hood that may be useful to understand.
</summary>
<remarks>
<para>JavaScript is an inherently single-threaded language. It was designed in an era in which this was a positive choice; there were few multi-processor computers available to the general public, and the expected amount of code that would be handled by JavaScript was relatively low at that time.</para><para>As time passed, of course, we know that computers have evolved into powerful multi-core systems, and JavaScript has become one of the most prolifically-used languages in the computing world. A vast number of the most popular applications are based at least in part on JavaScript code. To support this, it was necessary to find ways to allow for projects to escape the limitations of a single-threaded language.</para><para>Starting with the addition of timeouts and intervals as part of the Web API (<see cref="Window.SetTimeout"/> and <see cref="Window.SetInterval"/>), the JavaScript environment provided by Web browsers has gradually advanced to include powerful features that enable scheduling of tasks, multi-threaded application development, and so forth. To understand where <see cref="Window.QueueMicrotask"/> comes into play here, it's helpful to understand how the JavaScript runtime operates when scheduling and running code.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide">Microtask guide</see><br/>-<see cref="Window.QueueMicrotask"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Execution_model">The Event Loop</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Async_JS">Asynchronous JavaScript</see>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Async_JS/Introducing">Introducing asynchronous JavaScript</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Async_JS/Promises">Graceful asynchronous programming with Promises</see><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTML_DOM_APIMicrotask_guideIn_depth>
</docs><docs>
<HTML_Drag_and_Drop_API>
<summary>
<strong>HTML Drag and Drop</strong> interfaces enable applications to use drag-and-drop features in browsers.
</summary>
<remarks>
<para>The user may select <strong>draggable</strong> elements with a mouse, drag those elements to a <strong>droppable</strong> element, and drop them by releasing the mouse button. A translucent representation of the <strong>draggable</strong> elements follows the pointer during the drag operation.</para><para>You can customize which elements can become <strong>draggable</strong>, the type of feedback the <strong>draggable</strong> elements produce, and the <strong>droppable</strong> elements.</para><para>This overview of HTML Drag and Drop includes a description of the interfaces, basic steps to add drag-and-drop support to an application, and an interoperability summary of the interfaces.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations">Drag Operations</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types">Recommended Drag Types</see><br/>-<see href="https://html.spec.whatwg.org/multipage/interaction.html#dnd">HTML Living Standard: Drag and Drop</see><br/>-<see href="https://caniuse.com/#search=draganddrop">Drag and Drop interoperability data from CanIUse</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTML_Drag_and_Drop_API>
<HTML_Drag_and_Drop_APIDrag_operations>
<summary>
The following describes the steps that occur during a drag and drop operation.
</summary>
<remarks>
<para>The drag operations described in this document use the <see cref="DataTransfer"/> interface. This document does <strong>not</strong> use the <see cref="DataTransferItem"/> interface nor the <see cref="DataTransferItemList"/> interface.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API">HTML Drag and Drop API (Overview)</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types">Recommended Drag Types</see><br/>-<see href="https://html.spec.whatwg.org/multipage/interaction.html#dnd">HTML Living Standard: Drag and Drop</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTML_Drag_and_Drop_APIDrag_operations>
<HTML_Drag_and_Drop_APIFile_drag_and_drop>
<summary>
HTML Drag and Drop interfaces enable web applications to drag and drop files on a web page. This document describes how an application can accept one or more files that are dragged from the underlying platform&amp;apos;s <strong>file manager</strong> and dropped on a web page.
</summary>
<remarks>
<para>The main steps to drag and drop are to define a <strong>drop zone</strong> (i.e., a target element for the file drop) and to define event handlers for the <see cref="HTMLElementdrop"/> and <see cref="HTMLElementdragover"/> events. These steps are described below, including example code snippets. The full source code is available in <see href="https://github.com/mdn/dom-examples/tree/main/drag-and-drop">MDN&amp;apos;s drag-and-drop repository</see> (pull requests and/or issues are welcome).</para><para>Note that <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API">HTML drag and drop</see> defines two different APIs to support dragging and dropping files. One API is the <see cref="DataTransfer"/> interface and the second API is the <see cref="DataTransferItem"/> and <see cref="DataTransferItemList"/> interfaces. This example illustrates the use of both APIs (and does not use any Gecko specific interfaces).</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API">HTML Drag and Drop API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations">Drag Operations</see><br/>-<see href="https://html.spec.whatwg.org/multipage/interaction.html#dnd">HTML Living Standard: Drag and Drop</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/File_drag_and_drop"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTML_Drag_and_Drop_APIFile_drag_and_drop>
<HTML_Drag_and_Drop_APIRecommended_drag_types>
<summary>
The HTML Drag and Drop API supports dragging various types of data, including plain text, URLs, HTML code, files, etc. The document describes best practices for common draggable data types.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API">HTML Drag and Drop API (Overview)</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations">Drag Operations</see><br/>-<see href="https://html.spec.whatwg.org/multipage/interaction.html#dnd">HTML Living Standard: Drag and Drop</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTML_Drag_and_Drop_APIRecommended_drag_types>
</docs><docs>
<HTML_Sanitizer_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>HTML Sanitizer API</strong> allows developers to take strings of HTML and filter out unwanted elements, attributes, and other HTML entities when they are inserted into the DOM or a shadow DOM.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTML_Sanitizer_API>
<HTML_Sanitizer_APIUsing_the_HTML_Sanitizer_API>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API">HTML Sanitizer API</see> provides methods that allow developers to safely inject untrusted HTML into an <see cref="Element"/>, a <see cref="ShadowRoot"/>, or a <see cref="Document"/>.<br/>The API also gives developers the flexibility to further restrict or expand what HTML entities are allowed if needed.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API/Using_the_HTML_Sanitizer_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTML_Sanitizer_APIUsing_the_HTML_Sanitizer_API>
</docs><docs>
<Idle_Detection_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The Idle Detection API provides a means to detect the user&amp;apos;s idle status, active, idle, and locked, specifically, and to be notified of changes to idle status without polling from a script.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Idle_Detection_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Idle_Detection_API>
</docs><docs>
<IndexedDB_API>
<summary>
IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data. While <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">Web Storage</see> is useful for storing smaller amounts of data, it is less useful for storing larger amounts of structured data. IndexedDB provides a solution. This is the main landing page for MDN&amp;apos;s IndexedDB coverage — here we provide links to the full API reference and usage guides, browser support details, and some explanation of key concepts.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">Web Storage API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">Window: localStorage property</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage">Window: sessionStorage property</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent">StorageEvent</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</IndexedDB_API>
<IndexedDB_APIBasic_Terminology>
<summary>
This article describes the key characteristics of IndexedDB, and introduces some essential terminology relevant to understanding the IndexedDB API.
</summary>
<remarks>
<para>You&amp;apos;ll also find the following articles useful:</para>
<para>-<see href="https://w3c.github.io/IndexedDB/">Indexed Database API Specification</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB API Reference</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB">Using IndexedDB</see><br/>-<see href="https://learn.microsoft.com/en-us/previous-versions/msdn10/gg679063(v=msdn.10)">IndexedDB — The Store in Your Browser</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Basic_Terminology"> <em>See also on MDN</em> </seealso></para>
</remarks>
</IndexedDB_APIBasic_Terminology>
<IndexedDB_APIChecking_when_a_deadline_is_due>
<summary>
In this article we look at a complex example involving checking the current time and date against a deadline stored via IndexedDB. The main complication here is checking the stored deadline info (month, hour, day, etc.) against the current time and date taken from a <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date">Date</see> object.
</summary>
<remarks>
<para><see href="https://developer.mozilla.orgto-do-app.png">A screenshot of the sample app. A red main title saying To do app, a test to-do item, and a red form for users to enter new tasks</see></para><para>The main example application we will be referring to in this article is <strong>To-do list notifications</strong>, a simple to-do list application that stores task titles and deadline times and dates via <see href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB</see>, and then provides users with notifications when deadline dates are reached, via the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Notification">Notification</see>, and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API">Vibration</see> APIs. You can <see href="https://github.com/mdn/dom-examples/tree/main/to-do-notifications">download the To-do list notifications app from GitHub</see> and play around with the source code, or <see href="https://mdn.github.io/dom-examples/to-do-notifications/">view the app running live</see>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Checking_when_a_deadline_is_due"> <em>See also on MDN</em> </seealso></para>
</remarks>
</IndexedDB_APIChecking_when_a_deadline_is_due>
<IndexedDB_APIUsing_IndexedDB>
<summary>
IndexedDB is a way for you to persistently store data inside a user&amp;apos;s browser. Because it lets you create web applications with rich query abilities regardless of network availability, your applications can work both online and offline.
</summary>
<remarks>
<para>Further reading for you to find out more information if desired.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB"> <em>See also on MDN</em> </seealso></para>
</remarks>
</IndexedDB_APIUsing_IndexedDB>
</docs><docs>
<Ink_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The Ink API allows browsers to directly make use of available OS-level compositors when drawing pen strokes in an inking app feature, thereby reducing latency and increasing performance.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Ink_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Ink_API>
</docs><docs>
<InputDeviceCapabilities_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The InputDeviceCapabilities API provides details about the underlying sources of input events. The API attempts to describe how the device behaves rather than what it is. For example, the first version of the API indicates whether a device fires touch events rather than whether it is a touch screen.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/InputDeviceCapabilities_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</InputDeviceCapabilities_API>
</docs><docs>
<Insertable_Streams_for_MediaStreamTrack_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Insertable Streams for MediaStreamTrack API</strong> provides a way to process the video frames of a <see cref="MediaStreamTrack"/> as they are consumed.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Insertable_Streams_for_MediaStreamTrack_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Insertable_Streams_for_MediaStreamTrack_API>
</docs><docs>
<Intersection_Observer_API>
<summary>

</summary>
<remarks>
<para>-<see href="https://github.com/w3c/IntersectionObserver">Intersection Observer polyfill</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API/Timing_element_visibility">Timing element visibility with the Intersection Observer API</see><br/>-<see cref="IntersectionObserver"/> and <see cref="IntersectionObserverEntry"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Intersection_Observer_API>
<Intersection_Observer_APITiming_element_visibility>
<summary>
In this article, we&amp;apos;ll build a mock blog which has a number of ads interspersed among the contents of the page, then use the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</see> to track how much time each ad is visible to the user. When an ad exceeds one minute of visible time, it will be replaced with a new one.
</summary>
<remarks>
<para>Although many aspects of this example will not match real-world usage (in particular, the articles all have the same text and aren&amp;apos;t loaded from a database, and there are just a handful of simple text-only ads that are selected from an array), this should provide enough understanding of the API to quickly learn how to apply the Intersection Observer API to your own site.</para><para>There&amp;apos;s a good reason why the notion of tracking visibility of ads is being used in this example. It turns out that one of the most common uses of Flash or other script in advertising on the Web is to record how long each ad is visible, for the purpose of billing and payment of revenues. Without the Intersection Observer API, this winds up being done using intervals and timeouts for each individual ad, or other techniques that tend to slow the page down. Using this API lets everything get streamlined by the browser to reduce the impact on performance substantially.</para><para>Let&amp;apos;s get started!</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API">Page Visibility API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API/Timing_element_visibility"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Intersection_Observer_APITiming_element_visibility>
</docs><docs>
<Invoker_Commands_API>
<summary>
The <strong>Invoker Commands API</strong> provides a way to declaratively assign behaviors to buttons, allowing control of interactive elements when the button is enacted (clicked or invoked via a keypress, such as the spacebar or return key).
</summary>
<remarks>
<para>-<see cref="HTMLButtonElement.Command"/> property<br/>-<see cref="HTMLButtonElement.CommandForElement"/> property<br/>-<see cref="CommandEvent"/> interface<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Invoker_Commands_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Invoker_Commands_API>
</docs><docs>
<JS_Self-Profiling_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The JS Self-Profiling API enables a website to run a sampling profiler, to understand where it is spending JavaScript execution time.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/JS_Self-Profiling_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</JS_Self-Profiling_API>
<JS_Self-Profiling_APIProfile_content_and_format>
<summary>
In this page we&amp;apos;ll describe how to interpret a profile captured using the Self-Profiling API.
</summary>
<remarks>
<para>The format of the object returned by <see cref="Profiler.Stop"/> is designed to be space-efficient: for example, the format aims to avoid duplicating URL values for functions which are defined in the same script. This means that some interpretation is needed to understand how a sample in the profile object maps to a location in the program, and this guide page aims to explain how to perform this interpretation.</para><para>In the first section, we&amp;apos;ll describe the <see href="https://developer.mozilla.org#anatomy_of_a_profile">abstract structure of a profile</see>. In the next section we&amp;apos;ll describe <see href="https://developer.mozilla.org#profile_format">the format of the profile object</see> returned by <see cref="Profiler.Stop"/>. Finally we'll <see href="https://developer.mozilla.org#example">walk through an example</see> to show what a profile for a given program looks like and how it can be interpreted.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/JS_Self-Profiling_API/Profile_content_and_format"> <em>See also on MDN</em> </seealso></para>
</remarks>
</JS_Self-Profiling_APIProfile_content_and_format>
</docs><docs>
<Keyboard_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The Keyboard API provides methods for working with a physical keyboard that is attached to a device running a browser.
</summary>
<remarks>
<para>It provides several capabilities. <strong>Keyboard mapping</strong> provides an interface for retrieving the string generated by particular physical key on a keyboard to correctly identify that key to a user. <strong>Keyboard locking</strong> enables a web page to capture keys that are normally reserved by the user agent or the underlying operating system. The intended use of the Keyboard API is by web applications such as games or remote access apps that provide a fullscreen immersive experience.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Keyboard_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Keyboard_API>
</docs><docs>
<KHR_parallel_shader_compile>
<summary>
The <strong><c>KHR_parallel_shader_compile</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and enables a non-blocking poll operation, so that compile/link status availability (<c>COMPLETION_STATUS_KHR</c>) can be queried without potentially incurring stalls. In other words you can check the status of your shaders compiling without blocking the runtime.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/KHR_parallel_shader_compile"> <em>See also on MDN</em> </seealso></para>
</remarks>
</KHR_parallel_shader_compile>
</docs><docs>
<Launch_Handler_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Launch Handler API</strong> allows developers to control how a <see href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps">progressive web app</see> (PWA) is launched — for example if it uses an existing window or creates a new one, and how the app&amp;apos;s target launch URL is handled.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/web-platform/launch-handler/">Launch Handler API: Control how your app is launched</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Launch_Handler_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Launch_Handler_API>
</docs><docs>
<Local_Font_Access_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Local Font Access API</strong> provides a mechanism to access the user&amp;apos;s locally installed font data — this includes higher-level details such as names, styles, and families, as well as the raw bytes of the underlying font files.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/local-fonts">Use advanced typography with local fonts</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face">@font-face</see><br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/local-fonts">Permissions-Policy/local-fonts</see> <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Permissions_Policy">Permissions Policy</see> directive<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Local_Font_Access_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Local_Font_Access_API>
</docs><docs>
<MediaStream_Image_Capture_API>
<summary>
The <strong>MediaStream Image Capture API</strong> is an API for capturing images or videos from a photographic device. In addition to capturing data, it also allows you to retrieve information about device capabilities such as image size, red-eye reduction and whether or not there is a flash and what they are currently set to. Conversely, the API allows the capabilities to be configured within the constraints what the device allows.
</summary>
<remarks>
<para>-<see cref="MediaStream"/><br/>-<see cref="MediaStreamTrack"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Image_Capture_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</MediaStream_Image_Capture_API>
</docs><docs>
<MediaStream_Recording_API>
<summary>
The <strong>MediaStream Recording API</strong>, sometimes referred to as the <strong>Media Recording API</strong> or the <strong>MediaRecorder API</strong>, is closely affiliated with the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see> and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC API</see>. The MediaStream Recording API makes it possible to capture the data generated by a <see cref="MediaStream"/> or <see cref="HTMLMediaElement"/> object for analysis, processing, or saving to disk. It's also surprisingly easy to work with.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see> landing page<br/>-<see cref="MediaDevices.GetUserMedia"/><br/>-<see href="https://simpl.info/mediarecorder/">simpl.info MediaStream Recording demo</see>, by <see href="https://github.com/samdutton">Sam Dutton</see><br/>-<see href="https://blog.addpipe.com/mediarecorder-api/">HTML5&amp;apos;s Media Recorder API in Action on Chrome and Firefox</see><br/>-<see href="https://github.com/ai/audio-recorder-polyfill">MediaRecorder polyfill</see> for Safari and Edge<br/>-<see href="https://github.com/chrisjohndigital/TutorRoom">TutorRoom</see>: HTML video capture/playback/download using getUserMedia and the MediaStream Recording API (<see href="https://github.com/chrisjohndigital/TutorRoom">source on GitHub</see>)<br/>-<see href="https://quickblox.github.io/javascript-media-recorder/sample/">Advanced media stream recorder sample</see><br/>-<see href="https://github.com/chrisjohndigital/OpenLang">OpenLang</see>: HTML video language lab web application using MediaDevices and the MediaStream Recording API for video recording (<see href="https://github.com/chrisjohndigital/OpenLang">source on GitHub</see>)<br/>-<see href="https://blog.addpipe.com/safari-technology-preview-73-adds-limited-mediastream-recorder-api-support/">MediaStream Recorder API Now Available in Safari Technology Preview 73</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</MediaStream_Recording_API>
<MediaStream_Recording_APIRecording_a_media_element>
<summary>
While the article Using the MediaStream Recording API demonstrates using the <see cref="MediaRecorder"/> interface to capture a <see cref="MediaStream"/> generated by a hardware device, as returned by <see cref="MediaDevices.GetUserMedia"/>, you can also use an HTML media element (namely {{HTMLElement("audio")}} or {{HTMLElement("video")}}) as the source of the <c>MediaStream</c> to be recorded. In this article, we&amp;apos;ll look at an example that does just that.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see> landing page<br/>-<see cref="MediaDevices.GetUserMedia"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element"> <em>See also on MDN</em> </seealso></para>
</remarks>
</MediaStream_Recording_APIRecording_a_media_element>
<MediaStream_Recording_APIUsing_the_MediaStream_Recording_API>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API">MediaStream Recording API</see> makes it easy to record audio and/or video streams. When used with <see cref="MediaDevices.GetUserMedia"/>, it provides an easy way to record from the user's input devices and instantly use the result in web apps.
</summary>
<remarks>
<para>Both audio and video may be recorded, separately or together. This article aims to provide a basic guide on how to use the MediaRecorder interface, which provides this API.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see> landing page<br/>-<see cref="MediaDevices.GetUserMedia"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</MediaStream_Recording_APIUsing_the_MediaStream_Recording_API>
</docs><docs>
<Media_Capabilities_API>
<summary>
The <strong>Media Capabilities API</strong> allows developers to determine decoding and encoding abilities of the device, exposing information such as whether media is supported and whether playback should be smooth and power efficient, with real time feedback about playback to better enable adaptive streaming, and access to display property information.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement">HTMLMediaElement</see>&amp;apos;s method <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType">canPlayType()</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource">MediaSource</see>&amp;apos;s method <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/isTypeSupported_static">isTypeSupported()</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capabilities_API/Using_the_Media_Capabilities_API">Using the Media Capabilities API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capabilities_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Media_Capabilities_API>
<Media_Capabilities_APIUsing_the_Media_Capabilities_API>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capabilities_API">Media Capabilities API</see> provides several key features to help you better decide how to handle media, but also to determine how well media is being handled, in real time.
</summary>
<remarks>
<para>These features include:</para><blockquote class="NOTE"><h5>NOTE</h5><para>The display capabilities functionality mentioned in the third point above have not yet appeared in any browser. They will be a useful feature of the API once available, but there is a high probability of the display capabilities functionality changing a great deal before browser implementations arrive.</para></blockquote>
<para>-<see cref="Navigator.MediaCapabilities"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capabilities_API/Using_the_Media_Capabilities_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Media_Capabilities_APIUsing_the_Media_Capabilities_API>
</docs><docs>
<Media_Capture_and_Streams_API>
<summary>
The <strong>Media Capture and Streams</strong> API, often called the <strong>Media Streams API</strong> or <strong>MediaStream API</strong>, is an API related to <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC</see> which provides support for streaming audio and video data.
</summary>
<remarks>
<para>It provides the interfaces and methods for working with the streams and their constituent tracks, the constraints associated with data formats, the success and error callbacks when using the data asynchronously, and the events that are fired during the process.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC</see> - the introductory page to the API<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos">Taking still photos with WebRTC</see>: a demonstration and tutorial about using <c>getUserMedia()</c>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Media_Capture_and_Streams_API>
<Media_Capture_and_Streams_APIConstraints>
<summary>
This article discusses the twin concepts of <strong>constraints</strong> and <strong>capabilities</strong>, as well as media settings, and includes an example we call the <see href="https://developer.mozilla.org#example_constraint_exerciser">Constraint Exerciser</see>. The Constraint Exerciser lets you experiment with the results of different constraint sets being applied to the audio and video tracks coming from the computer&amp;apos;s A/V input devices (such as its webcam and microphone).
</summary>
<remarks>
<para>Historically, writing scripts for the Web that work intimately with Web APIs has had a well-known challenge: often, your code needs to know whether or not an API exists and if so, what its limitations are on the <see href="https://developer.mozilla.org/en-US/docs/Glossary/user agent">user agent</see> it's running on. Figuring this out has often been difficult, and has usually involved looking at some combination of which <see href="https://developer.mozilla.org/en-US/docs/Glossary/user agent">user agent</see> (or browser) you're running on, which version it is, looking to see if certain objects exist, trying to see whether various things work or not and determining what errors occur, and so forth. The result has been a lot of very fragile code, or a reliance on libraries which figure this stuff out for you, then implement <see href="https://developer.mozilla.org/en-US/docs/Glossary/polyfill">polyfill</see> to patch the holes in the implementation on your behalf.</para><para>Capabilities and constraints let the browser and website or app exchange information about what <strong>constrainable properties</strong> the browser&amp;apos;s implementation supports and what values it supports for each.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see><br/>-<see cref="MediaTrackConstraints"/><br/>-<see cref="MediaTrackSettings"/><br/>-<see cref="MediaDevices.GetSupportedConstraints"/><br/>-<see cref="MediaStreamTrack.ApplyConstraints"/><br/>-<see cref="MediaStreamTrack.GetSettings"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API/Constraints"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Media_Capture_and_Streams_APIConstraints>
<Media_Capture_and_Streams_APITaking_still_photos>
<summary>
This article shows how to use <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia"><c>navigator.mediaDevices.getUserMedia()</c></see> to access the camera on a computer or mobile phone with <c>getUserMedia()</c> support and take a photo with it.
</summary>
<remarks>
<para><see href="https://developer.mozilla.orgweb-rtc-demo.png">getUserMedia-based image capture app — on the left we have a video stream taken from a webcam and a take photo button, on the right we have the still image output from taking the photo</see></para><para>You can also jump straight to the <see href="https://developer.mozilla.org#demo">Demo</see> if you like.</para>
<para>-<see cref="MediaDevices.GetUserMedia"/><br/>-<see cref="CanvasRenderingContext2D.DrawImage"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images#using_frames_from_a_video">Using frames from a video</see> in the Canvas tutorial<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Media_Capture_and_Streams_APITaking_still_photos>
</docs><docs>
<Media_Session_API>
<summary>
The <strong>Media Session API</strong> provides a way to customize media notifications. It does this by providing metadata for display by the user agent for the media your web app is playing.
</summary>
<remarks>
<para>It also provides action handlers that the browser can use to access platform media keys such as hardware keys found on keyboards, headsets, remote controls, and software keys found in notification areas and on lock screens of mobile devices. So you can seamlessly control web-provided media via your device, even when not looking at the web page.</para><para>The aim is to allow users to know what&amp;apos;s playing and to control it, without needing to open the specific page that launched it. To be able to support the Media Session API, a browser first needs a mechanism by which to access and be controlled by the OS-level media controls (such as Firefox&amp;apos;s <see href="https://bugzil.la/1648100">MediaControl</see>).</para>
<para>-<see href="https://web.dev/articles/media-session">Customize media notifications and playback controls with the Media Session API</see> on web.dev (2024)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Session_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Media_Session_API>
</docs><docs>
<Media_Source_Extensions_API>
<summary>
The <strong>Media Source API</strong>, formally known as <strong>Media Source Extensions</strong> (<strong>MSE</strong>), provides functionality enabling plugin-free web-based streaming media. Using MSE, media streams can be created via JavaScript, and played using <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio">audio</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video">video</see> elements.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API/Transcoding_assets_for_MSE">Transcoding assets for Media Source Extensions</see><br/>-Using MSE to create a basic streaming service (TBD)<br/>-Using MPEG DASH to create a streaming application (TBD)<br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio">audio</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video">video</see> elements.<br/>-<see cref="HTMLMediaElement"/>, <see cref="HTMLVideoElement"/>, <see cref="HTMLAudioElement"/>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Media_Source_Extensions_API>
<Media_Source_Extensions_APIDASH_Adaptive_Streaming>
<summary>
Dynamic Adaptive Streaming over HTTP (DASH) is an adaptive streaming protocol. This means that it allows for a video stream to switch between bit rates on the basis of network performance, in order to keep a video playing.
</summary>
<remarks>
<para>First you&amp;apos;ll need to convert your WebM video to a DASH manifest with the accompanying video files in various bit rates. To start with you&amp;apos;ll only need the FFmpeg program from <see href="https://www.ffmpeg.org/">ffmpeg.org</see>, with libvpx and libvorbis support for WebM video and audio, at least version 2.5 (probably; this was tested with 3.2.5).</para><para>First, use your existing WebM file to create one audio file and multiple video files. In the example below, the file <strong><strong>in.video</strong></strong> can be any container with at least one audio and one video stream that can be decoded by FFmpeg.</para><para>Create the audio using:</para><para>Create each video variant.</para><para>Or do it in all in one command.</para><para>Then, create the manifest file.</para><para>The <c>-map</c> arguments correspond to the input files in the sequence they are given; you should have one for each file. The <c>-adaptation_sets</c> argument assigns them into adaptation sets; for example, this creates one set (0) that contains the streams 0, 1, 2 and 3 (the videos), and another set (1) that contains only stream 4, the audio stream.</para><para>Put the manifest and the associated video files on your web server or CDN. DASH works via HTTP, so as long as your HTTP server supports byte range requests, and it&amp;apos;s set up to serve <c>.mpd</c> files with <c>Content-Type: application/dash+xml</c>, then you&amp;apos;re all set.</para><para>Then, in order to correctly connect this <c>.mpd</c> file to your <c>&amp;lt;video&amp;gt;</c> element, you need a JavaScript library like dash.js, because no browser has native support for DASH. Read <see href="https://dashif.org/dash.js/pages/quickstart/">dash.js quickstart</see> for how to set up your page to use it.</para>
<para>-<see href="https://wiki.webmproject.org/adaptive-streaming/webm-dash-specification">WebM DASH Specification at The WebM Project</see><br/>-<see href="https://dashif.org/">DASH Industry Forum</see><br/>-<see href="https://wiki.webmproject.org/adaptive-streaming/instructions-to-playback-adaptive-webm-using-dash">WebM project description of how to create DASH files with FFMPEG</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API/DASH_Adaptive_Streaming"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Media_Source_Extensions_APIDASH_Adaptive_Streaming>
<Media_Source_Extensions_APITranscoding_assets_for_MSE>
<summary>
When working with Media Source Extensions, it is likely that you need to condition your assets before you can stream them. This article takes you through the requirements and shows you a toolchain you can use to encode your assets appropriately.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API/Transcoding_assets_for_MSE"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Media_Source_Extensions_APITranscoding_assets_for_MSE>
</docs><docs>
<Navigation_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Navigation API</strong> provides the ability to initiate, intercept, and manage browser navigation actions. It can also examine an application&amp;apos;s history entries. This is a successor to previous web platform features such as the {{domxref(&amp;quot;History API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, "nocode")}} and <see cref="Window.Location"/>, which solves their shortcomings and is specifically aimed at the needs of {{glossary("SPA", "single-page applications (SPAs)")}}.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/web-platform/navigation-api/">Modern client-side routing: the Navigation API</see><br/>-<see href="https://github.com/WICG/navigation-api/blob/main/README.md">Navigation API explainer</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Navigation_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Navigation_API>
</docs><docs>
<Network_Information_API>
<summary>
The <strong>Network Information API</strong> provides information about the system&amp;apos;s connection in terms of general connection type (e.g., &amp;apos;wifi, &amp;apos;cellular&amp;apos;, etc.).<br/>This can be used to select high definition content or low definition content based on the user&amp;apos;s connection.
</summary>
<remarks>
<para>The interface consists of a single <see cref="NetworkInformation"/> object, an instance of which is returned by the <see cref="Navigator.Connection"/> property or the <see cref="WorkerNavigator.Connection"/> property.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine">Online and offline events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Network_Information_API>
</docs><docs>
<Notifications_API>
<summary>
The Notifications API allows web pages to control the display of system notifications to the end user. These are outside the top-level browsing context viewport, so therefore can be displayed even when the user has switched tabs or moved to a different app. The API is designed to be compatible with existing notification systems, across different platforms.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API">Using the Notifications API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Notifications_API>
<Notifications_APIUsing_the_Notifications_API>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API">Notifications API</see> lets a web page or app send notifications that are displayed outside the page at the system level; this lets web apps send information to a user even if the application is idle or in the background. This article looks at the basics of using this API in your own apps.
</summary>
<remarks>
<para>Typically, system notifications refer to the operating system&amp;apos;s standard notification mechanism: think for example of how a typical desktop system or mobile device broadcasts notifications.</para><para><see href="https://developer.mozilla.orgdesktop-notification.png">Desktop notification: To do list via mdn.github.io HEY! Your task &amp;quot;Go shopping&amp;quot; is now overdue</see></para><para>The system notification system will vary of course by platform and browser, but this is OK, and the Notifications API is written to be general enough for compatibility with most system notification systems.</para>
<para>-<see cref="Notification"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Notifications_APIUsing_the_Notifications_API>
</docs><docs>
<OES_draw_buffers_indexed>
<summary>
The <strong><c>OES_draw_buffers_indexed</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and enables the use of different blend options when writing to multiple color buffers simultaneously.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_draw_buffers_indexed"> <em>See also on MDN</em> </seealso></para>
</remarks>
</OES_draw_buffers_indexed>
<OES_draw_buffers_indexedBlendEquationiOES>
<summary>
The <c>blendEquationiOES()</c> method of the <c>OES_draw_buffers_indexed</c> WebGL extension sets both the RGB blend and alpha blend equations for a particular draw buffer.
</summary>
<remarks>
<para>See <see cref="OES_draw_buffers_indexed.BlendEquationSeparateiOES"/> for setting RGB and alpha separately and <see cref="WebGLRenderingContext.BlendEquation"/> for the WebGL 1 version of this method.</para>
<para>-<see cref="OES_draw_buffers_indexed.BlendEquationSeparateiOES"/><br/>-<see cref="WebGLRenderingContext.BlendEquation"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_draw_buffers_indexed/blendEquationiOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</OES_draw_buffers_indexedBlendEquationiOES>
<OES_draw_buffers_indexedBlendEquationSeparateiOES>
<summary>
The <c>blendEquationSeparateiOES()</c> method of the <see cref="OES_draw_buffers_indexed"/> WebGL extension sets the RGB and alpha blend equations separately for a particular draw buffer.
</summary>
<remarks>
<para>See <see cref="OES_draw_buffers_indexed.BlendEquationiOES"/> for setting RGB and alpha together and <see cref="WebGLRenderingContext.BlendEquationSeparate"/> for the WebGL 1 version of this method.</para>
<para>-<see cref="OES_draw_buffers_indexed.BlendEquationiOES"/><br/>-<see cref="WebGLRenderingContext.BlendEquationSeparate"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_draw_buffers_indexed/blendEquationSeparateiOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</OES_draw_buffers_indexedBlendEquationSeparateiOES>
<OES_draw_buffers_indexedBlendFunciOES>
<summary>
The <c>blendFunciOES()</c> method of the <see cref="OES_draw_buffers_indexed"/> WebGL extension defines which function is used when blending pixels for a particular draw buffer.
</summary>
<remarks>
<para>See <see cref="OES_draw_buffers_indexed.BlendFuncSeparateiOES"/> for setting RGB and alpha components separately and <see cref="WebGLRenderingContext.BlendFunc"/> for the WebGL 1 version of this method.</para>
<para>-<see cref="OES_draw_buffers_indexed.BlendFuncSeparateiOES"/><br/>-<see cref="WebGLRenderingContext.BlendFunc"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_draw_buffers_indexed/blendFunciOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</OES_draw_buffers_indexedBlendFunciOES>
<OES_draw_buffers_indexedBlendFuncSeparateiOES>
<summary>
The <c>blendFuncSeparateiOES()</c> method of the <see cref="OES_draw_buffers_indexed"/> WebGL extension defines which function is used when blending pixels for RGB and alpha components separately for a particular draw buffer.
</summary>
<remarks>
<para>See <see cref="OES_draw_buffers_indexed.BlendFunciOES"/> for setting RGB and alpha together and <see cref="WebGLRenderingContext.BlendFuncSeparate"/> for the WebGL 1 version of this method.</para>
<para>-<see cref="OES_draw_buffers_indexed.BlendFunciOES"/><br/>-<see cref="WebGLRenderingContext.BlendFuncSeparate"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_draw_buffers_indexed/blendFuncSeparateiOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</OES_draw_buffers_indexedBlendFuncSeparateiOES>
<OES_draw_buffers_indexedColorMaskiOES>
<summary>
The <c>colorMaskiOES()</c> method of the <see cref="OES_draw_buffers_indexed"/> WebGL extension sets which color components to enable or to disable when drawing or rendering for a particular draw buffer. It's the indexed version of WebGL 1's <see cref="WebGLRenderingContext.ColorMask"/> method.
</summary>
<remarks>
<para>-<see cref="WebGL2RenderingContext.GetIndexedParameter"/><br/>-<see cref="WebGLRenderingContext.ColorMask"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_draw_buffers_indexed/colorMaskiOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</OES_draw_buffers_indexedColorMaskiOES>
<OES_draw_buffers_indexedDisableiOES>
<summary>
The <c>disableiOES()</c> method of the <see cref="OES_draw_buffers_indexed"/> WebGL extension enables blending for a particular draw buffer.
</summary>
<remarks>
<para>-<see cref="OES_draw_buffers_indexed.EnableiOES"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants#draw_buffers">WebGL draw buffer constants</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_draw_buffers_indexed/disableiOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</OES_draw_buffers_indexedDisableiOES>
<OES_draw_buffers_indexedEnableiOES>
<summary>
The <c>enableiOES()</c> method of the <see cref="OES_draw_buffers_indexed"/> WebGL extension enables blending for a particular draw buffer.
</summary>
<remarks>
<para>-<see cref="OES_draw_buffers_indexed.DisableiOES"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants#draw_buffers">WebGL draw buffer constants</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_draw_buffers_indexed/enableiOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</OES_draw_buffers_indexedEnableiOES>
</docs><docs>
<OES_element_index_uint>
<summary>
The <strong><c>OES_element_index_uint</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and adds support for <c>gl.UNSIGNED_INT</c> types to <see cref="WebGLRenderingContext.DrawElements"/>.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.DrawElements"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_element_index_uint"> <em>See also on MDN</em> </seealso></para>
</remarks>
</OES_element_index_uint>
</docs><docs>
<OES_fbo_render_mipmap>
<summary>
The <c>OES_fbo_render_mipmap</c> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and makes it possible to attach any level of a texture to a framebuffer object.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL 1&amp;quot;, &amp;quot;&amp;quot;, 1)}}.<br/>In WebGL2, the functionality of this extension is available in the WebGL 2 context by default.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_fbo_render_mipmap"> <em>See also on MDN</em> </seealso></para>
</remarks>
</OES_fbo_render_mipmap>
</docs><docs>
<OES_standard_derivatives>
<summary>
The <strong><c>OES_standard_derivatives</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and adds the GLSL derivative functions <c>dFdx</c>, <c>dFdy</c>, and <c>fwidth</c>.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default. In WebGL 2, the constant is available as <c>gl.FRAGMENT_SHADER_DERIVATIVE_HINT</c> and it requires GLSL <c>#version 300 es</c>.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="EXT_shader_texture_lod"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives"> <em>See also on MDN</em> </seealso></para>
</remarks>
</OES_standard_derivatives>
</docs><docs>
<OES_texture_float>
<summary>
The <strong><c>OES_texture_float</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes floating-point pixel types for textures.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.TexImage2D"/><br/>-<see cref="WebGLRenderingContext.TexSubImage2D"/><br/>-<see cref="OES_texture_float_linear"/><br/>-<see cref="OES_texture_half_float"/><br/>-<see cref="OES_texture_half_float_linear"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float"> <em>See also on MDN</em> </seealso></para>
</remarks>
</OES_texture_float>
</docs><docs>
<OES_texture_float_linear>
<summary>
The <strong><c>OES_texture_float_linear</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and allows linear filtering with floating-point pixel types for textures.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.TexImage2D"/><br/>-<see cref="WebGLRenderingContext.TexSubImage2D"/><br/>-<see cref="OES_texture_float"/><br/>-<see cref="OES_texture_half_float"/><br/>-<see cref="OES_texture_half_float_linear"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float_linear"> <em>See also on MDN</em> </seealso></para>
</remarks>
</OES_texture_float_linear>
</docs><docs>
<OES_texture_half_float>
<summary>
The <strong><c>OES_texture_half_float</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and adds texture formats with 16- (aka half float) and 32-bit floating-point components.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default. The constant in WebGL2 is <c>gl.HALF_FLOAT</c>.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.TexImage2D"/><br/>-<see cref="WebGLRenderingContext.TexSubImage2D"/><br/>-<see cref="OES_texture_float"/><br/>-<see cref="OES_texture_float_linear"/><br/>-<see cref="OES_texture_half_float_linear"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float"> <em>See also on MDN</em> </seealso></para>
</remarks>
</OES_texture_half_float>
</docs><docs>
<OES_texture_half_float_linear>
<summary>
The <strong><c>OES_texture_half_float_linear</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and allows linear filtering with half floating-point pixel types for textures.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default and the extension is not needed.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.TexImage2D"/><br/>-<see cref="WebGLRenderingContext.TexSubImage2D"/><br/>-<see cref="OES_texture_float"/><br/>-<see cref="OES_texture_float_linear"/><br/>-<see cref="OES_texture_half_float"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float_linear"> <em>See also on MDN</em> </seealso></para>
</remarks>
</OES_texture_half_float_linear>
</docs><docs>
<OES_vertex_array_object>
<summary>
The <strong>OES_vertex_array_object</strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default and the constants and methods are available without the <c>OES_</c> suffix.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.VertexAttribPointer"/><br/>-WebGL2 equivalent methods:-<see cref="WebGL2RenderingContext.CreateVertexArray"/><br/>-<see cref="WebGL2RenderingContext.DeleteVertexArray"/><br/>-<see cref="WebGL2RenderingContext.IsVertexArray"/><br/>-<see cref="WebGL2RenderingContext.BindVertexArray"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object"> <em>See also on MDN</em> </seealso></para>
</remarks>
</OES_vertex_array_object>
<OES_vertex_array_objectBindVertexArrayOES>
<summary>
The <strong><c>OES_vertex_array_object.bindVertexArrayOES()</c></strong> method<br/>of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> binds a<br/>passed <see cref="WebGLVertexArrayObject"/> object to the buffer.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.VertexAttribPointer"/><br/>-WebGL2 equivalent: <see cref="WebGL2RenderingContext.BindVertexArray"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/bindVertexArrayOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</OES_vertex_array_objectBindVertexArrayOES>
<OES_vertex_array_objectCreateVertexArrayOES>
<summary>
The <strong><c>OES_vertex_array_object.createVertexArrayOES()</c></strong> method<br/>of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> creates and initializes a<br/><see cref="WebGLVertexArrayObject"/> object that represents a vertex array object (VAO)<br/>pointing to vertex array data and which provides names for different sets of vertex<br/>data.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.VertexAttribPointer"/><br/>-WebGL2 equivalent: <see cref="WebGL2RenderingContext.CreateVertexArray"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/createVertexArrayOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="WebGLVertexArrayObject"/> representing a vertex array object (VAO) which<br/>points to vertex array data.</returns>
</OES_vertex_array_objectCreateVertexArrayOES>
<OES_vertex_array_objectDeleteVertexArrayOES>
<summary>
The <strong><c>OES_vertex_array_object.deleteVertexArrayOES()</c></strong> method<br/>of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> deletes a given<br/><see cref="WebGLVertexArrayObject"/> object.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.VertexAttribPointer"/><br/>-WebGL2 equivalent: <see cref="WebGL2RenderingContext.DeleteVertexArray"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/deleteVertexArrayOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</OES_vertex_array_objectDeleteVertexArrayOES>
<OES_vertex_array_objectIsVertexArrayOES>
<summary>
The <strong><c>OES_vertex_array_object.isVertexArrayOES()</c></strong> method of<br/>the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> returns <c>true</c> if<br/>the passed object is a <see cref="WebGLVertexArrayObject"/> object.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.VertexAttribPointer"/><br/>-WebGL2 equivalent: <see cref="WebGL2RenderingContext.IsVertexArray"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/isVertexArrayOES"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="WebGL_API.Types"/> indicating whether the given object is a<br/><see cref="WebGLVertexArrayObject"/> object (<c>true</c>) or not<br/>(<c>false</c>).</returns>
</OES_vertex_array_objectIsVertexArrayOES>
</docs><docs>
<OVR_multiview2>
<summary>
The <c>OVR_multiview2</c> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and adds support for rendering into multiple views simultaneously. This especially useful for virtual reality (VR) and WebXR.
</summary>
<remarks>
<para>For more information, see also:</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Support depends on the system&amp;apos;s graphics driver (Windows+ANGLE and Android are supported; Windows+GL, Mac, Linux are not supported).</para><para>This extension is only available to {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL 2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts as it needs GLSL 3.00 and texture arrays.</para><para>Currently, there is no way to use multiview to render to a multisampled backbuffer, so you should create contexts with <c>antialias: false</c>. However, the Oculus browser (6+) also supports multisampling using the <see href="https://developers.meta.com/horizon/documentation/web/web-multiview/#using-oculus_multiview-in-webgl-20"><c>OCULUS_multiview</c></see> extension. See also <see href="https://github.com/KhronosGroup/WebGL/issues/2912">this WebGL issue</see>.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.GetParameter"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OVR_multiview2"> <em>See also on MDN</em> </seealso></para>
</remarks>
</OVR_multiview2>
<OVR_multiview2FramebufferTextureMultiviewOVR>
<summary>
The <strong><c>OVR_multiview2.framebufferTextureMultiviewOVR()</c></strong><br/>method of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> attaches a multiview<br/>texture to a <see cref="WebGLFramebuffer"/>.
</summary>
<remarks>
<para>-<see cref="OVR_multiview2"/><br/>-<see cref="WEBGL_depth_texture"/><br/>-<see cref="WEBGL_draw_buffers"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OVR_multiview2/framebufferTextureMultiviewOVR"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</OVR_multiview2FramebufferTextureMultiviewOVR>
</docs><docs>
<Page_Visibility_API>
<summary>
The Page Visibility API provides events you can watch for to know when a document becomes visible or hidden, as well as features to look at the current visibility state of the page.
</summary>
<remarks>
<para>This is especially useful for saving resources and improving performance by letting a page avoid performing unnecessary tasks when the document isn&amp;apos;t visible.</para>
<para>-<see cref="Document.VisibilityState"/><br/>-<see cref="Document.Hidden"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API/Timing_element_visibility">Timing element visibility with the Intersection Observer API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Page_Visibility_API>
</docs><docs>
<Payment_Handler_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The Payment Handler API provides a standardized set of functionality for web applications to directly handle payments, rather than having to be redirected to a separate site for payment handling.
</summary>
<remarks>
<para>When a merchant website initiates payment via the {{domxref(&amp;quot;Payment Request API&amp;quot;, &amp;quot;Payment Request API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}, the Payment Handler API handles discovery of applicable payment apps, presenting them as choices to the user, opening a payment handler window once a choice has been made to allow the user to enter their payment details, and handling the payment transaction with the payment app.</para><para>Communication with payment apps (authorization, passing of payment credentials) is handled via Service Workers.</para>
<para>-<see href="https://bobbucks.dev/">BobBucks sample payment app</see><br/>-<see href="https://web.dev/articles/web-based-payment-apps-overview">Web-based payment apps overview</see><br/>-<see href="https://web.dev/articles/setting-up-a-payment-method">Setting up a payment method</see><br/>-<see href="https://web.dev/articles/life-of-a-payment-transaction">Life of a payment transaction</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API/Using_the_Payment_Request_API">Using the Payment Request API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API/Concepts">Payment processing concepts</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Handler_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Payment_Handler_API>
</docs><docs>
<Payment_Request_API>
<summary>
The <strong>Payment Request API</strong> provides a consistent user experience for merchants and users. It is not a new way of paying for things; instead, it&amp;apos;s a way for users to select their preferred way of paying for things and make that information available to a merchant.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API/Using_the_Payment_Request_API">Using the Payment Request API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API/Concepts">Payment processing concepts</see><br/>-<see href="https://webkit.org/blog/8182/introducing-the-payment-request-api-for-apple-pay/">Introducing the Payment Request API for Apple Pay</see><br/>-<see href="https://developers.google.com/pay/api/web/guides/paymentrequest/tutorial">Google Pay API PaymentRequest Tutorial</see><br/>-<see href="https://developer.samsung.com/internet/android/web-payments-integration-guide.html">Samsung Pay Web Payments Integration Guide</see><br/>-<see href="https://github.com/w3c/payment-request-info/wiki/FAQ">W3C Payment Request API FAQ</see><br/>-Permissions Policy directive <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/payment">Permissions-Policy/payment</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Payment_Request_API>
<Payment_Request_APIConcepts>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API">Payment Request API</see> makes it easy to handle payments in a website or app. In this article, we&amp;apos;ll take a look at how the API operates and what each of its components does.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API">Payment Request API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API/Using_the_Payment_Request_API">Using the Payment Request API</see><br/>-<see href="https://webkit.org/blog/8182/introducing-the-payment-request-api-for-apple-pay/">Introducing the Payment Request API for Apple Pay</see><br/>-<see href="https://developers.google.com/pay/api/web/guides/paymentrequest/tutorial">Google Pay API PaymentRequest Tutorial</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API/Concepts"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Payment_Request_APIConcepts>
<Payment_Request_APIUsing_secure_payment_confirmation>
<summary>
Secure Payment Confirmation (SPC), available through the Payment Request API, provides a mechanism for strong customer authentication during checkout, thereby protecting against online payment fraud.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API">Payment Request API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API/Concepts#payment_method_identifiers">Payment Method Identifiers</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API">Web Authentication</see><br/>-<see href="https://github.com/w3c/secure-payment-confirmation/blob/main/explainer.md">Secure Payment Confirmation Explainer</see><br/>-<see href="https://github.com/w3c/secure-payment-confirmation/blob/main/scope.md">Secure Payment Confirmation Scope</see><br/>-General <see href="https://github.com/w3c/wpsig/blob/gh-pages/spc-general.png">flow diagram for SPC during a payment</see><br/>-<see href="https://wpt.fyi/results/secure-payment-confirmation?label=master&amp;label=experimental&amp;aligned">Secure Payment Confirmation Test Suite</see><br/>-<see href="https://developer.chrome.com/docs/payments/secure-payment-confirmation">Chrome developer documentation for SPC</see><br/>-<see href="https://www.emvco.com/emv-technologies/3-d-secure/">EMV® 3-D Secure (version 2.3)</see><br/>-<see href="https://www.emvco.com/emv-technologies/secure-remote-commerce/">EMV® Secure Remote Commerce (version 1.3)</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API/Using_secure_payment_confirmation"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Payment_Request_APIUsing_secure_payment_confirmation>
<Payment_Request_APIUsing_the_Payment_Request_API>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API">Payment Request API</see> provides a browser-based method of connecting users and their preferred payment systems and platforms to merchants that they want to pay for goods and services. This article is a guide to making use of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API">Payment Request API</see>, with examples and suggested best practices.
</summary>
<remarks>
<para>-<see href="https://googlechrome.github.io/samples/paymentrequest/">Google PaymentRequest Samples</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API/Using_the_Payment_Request_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Payment_Request_APIUsing_the_Payment_Request_API>
</docs><docs>
<Performance_API>
<summary>
The Performance API is a group of standards used to measure the performance of web applications.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Performance">Web performance</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Performance">Learn: Web performance</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Performance_API>
<Performance_APIHigh_precision_timing>
<summary>
The Performance API allows high precision measurements that are based on time in potential sub-millisecond resolution and a stable monotonic clock that is not subject to system clock skew or adjustments.<br/>The high resolution timers are needed for accurate benchmarking instead of the less precise and non-monotonic <see cref="Date"/> timestamps.
</summary>
<remarks>
<para>This page provides an overview about how high precision time works within the Performance API and how it compares to <see cref="Date"/> timestamps.</para><c>DOMHighResTimeStamp</c><para>High precision timing is achieved by using the <see cref="DOMHighResTimeStamp"/> type for time values. The unit is milliseconds and should be accurate to 5 µs (microseconds). However, if the browser is unable to provide a time value accurate to 5 microseconds, the browser can represent the value as a time in milliseconds accurate to a millisecond. This might occur because of hardware/software constraints, or security and privacy reasons. For more information, see the section on <see href="https://developer.mozilla.org#reduced_precision">reduced precision</see> below.</para><para>All timestamps in the Performance API use the <see cref="DOMHighResTimeStamp"/> type. Previously, the Performance API (and other Web APIs) used the <c>EpochTimeStamp</c> type (previously known as <c>DOMTimeStamp</c>). These types are now discouraged.</para><c>Performance.now()</c>
<para>-<see cref="DOMHighResTimeStamp"/><br/>-<see cref="Performance.TimeOrigin"/><br/>-<see cref="Performance.Now"/> / {{jsxref("Date.now()")}}<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/High_precision_timing"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Performance_APIHigh_precision_timing>
<Performance_APILong_animation_frame_timing>
<summary>
<strong>Long animation frames</strong> (LoAFs) can impact the user experience of a website. They can cause slow user interface (UI) updates, resulting in seemingly unresponsive controls and <see href="https://developer.mozilla.org/en-US/docs/Glossary/Jank">janky</see> (or non-smooth) animated effects and scrolling, leading to user frustration. The <see href="https://w3c.github.io/long-animation-frames/">Long Animation Frames API</see> allows developers to get information about the long animation frames and better understand their root causes. This article shows how to use the Long Animation Frames API.
</summary>
<remarks>
<para>-<see href="https://web.dev/articles/optimize-long-tasks">Optimize long tasks</see> on web.dev (2024)<br/>-<see href="https://github.com/w3c/long-animation-frames#where-long-tasks-fall-short">Where long tasks fall short</see>, Long Animation Frames API explainer (2024)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Performance_APILong_animation_frame_timing>
<Performance_APIMonitoring_bfcache_blocking_reasons>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <see cref="PerformanceNavigationTiming.NotRestoredReasons"/> property reports information on why the current document was blocked from using the {{Glossary("bfcache")}} on navigation. Developers can use this information to identify pages that need updates to make them bfcache-compatible, thereby improving site performance.
</summary>
<remarks>
<para>-<see href="https://github.com/WICG/bfcache-not-restored-reason/blob/main/NotRestoredReason.md"><c>notRestoredReasons</c> API Explainer</see><br/>-<see cref="PerformanceNavigationTiming.NotRestoredReasons"/><br/>-<see cref="NotRestoredReasons"/><br/><blockquote class="NOTE"><h5>NOTE</h5>This article is adapted from <see href="https://developer.chrome.com/docs/web-platform/bfcache-notrestoredreasons/">Back/forward cache notRestoredReasons API</see> by Chris Mills and Barry Pollard, originally published on <c>developer.chrome.com</c> in 2023 under the <see href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 License</see>.</blockquote></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Monitoring_bfcache_blocking_reasons"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Performance_APIMonitoring_bfcache_blocking_reasons>
<Performance_APINavigation_timing>
<summary>
Only the current document is included, so usually there is only one <see cref="PerformanceNavigationTiming"/> object to observe. It extends the <see cref="PerformanceEntry"/> interface with the <see cref="PerformanceEntry.EntryType"/> of <c>&amp;quot;navigation&amp;quot;</c> and also inherits from <see cref="PerformanceResourceTiming"/>, so all of the timestamps from the process of fetching the document are available as well.
</summary>
<remarks>
<para></para>
<para>-<see cref="PerformanceNavigationTiming"/><br/>-<see cref="PerformanceResourceTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Navigation_timing"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Performance_APINavigation_timing>
<Performance_APIPerformance_data>
<summary>
The Performance API measures and exposes performance data that can be collected as performance metrics for your web application. It provides methods to observe aspects of application performance. It doesn&amp;apos;t provide performance data analysis, or visualizations. However, the Performance API is integrated well with developer tools in browsers and its data is often sent to analytics end points and libraries to record performance metrics which help you to evaluate the data to find performance bottlenecks affecting your users.
</summary>
<remarks>
<para>This page provides an overview about what sorts of Performance API data exists, how it is collected, and how it can be accessed.</para>
<para>-<see cref="PerformanceEntry"/><br/>-<see cref="PerformanceObserver.Observe"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Performance_data"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Performance_APIPerformance_data>
<Performance_APIResource_timing>
<summary>
Resource Timing is part of the Performance API and enables retrieving and analyzing detailed network timing data for the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to load a specific resource (such as an image or a script) either implicitly as part of page load or explicitly from JavaScript, for example using the <see cref="Windowfetch"/> API.
</summary>
<remarks>
<para>Every resource on a document will be represented by a <see cref="PerformanceResourceTiming"/> entry (extending the <see cref="PerformanceEntry"/> interface) with the <see cref="PerformanceEntry.EntryType"/> of <c>&amp;quot;resource&amp;quot;</c>.</para><para>For each <c>PerformanceResourceTiming</c> entry, a <strong>resource loading timeline</strong> will be recorded, with {{domxref(&amp;quot;DOMHighResTimeStamp&amp;quot;,&amp;quot;high-resolution timestamps&amp;quot;, &amp;quot;&amp;quot;, 1)}} for network events such as redirect start and end times, DNS lookup start and end times, request start, response start and end times, and so on. Besides the timestamps, other properties that provide information about the resource are included as well, such the size of the fetched resource, or the type of resource that initiated the fetch.</para>
<para>-<see cref="PerformanceResourceTiming"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Timing-Allow-Origin">Timing-Allow-Origin</see><br/>-<see cref="Performance.SetResourceTimingBufferSize"/><br/>-<see cref="Performance.ClearResourceTimings"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Resource_timing"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Performance_APIResource_timing>
<Performance_APIServer_timing>
<summary>
Server-Timing is a part of the Performance API and allows servers to communicate metrics about the request-response cycle to the user agent. You can collect this information and act on server-side metrics in the same way as all the other metrics processed with the Performance API.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Server_timing"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Performance_APIServer_timing>
<Performance_APIUser_timing>
<summary>
User Timing is part of the Performance API and allows you to measure the performance of applications using <see href="https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp">high-precision timestamps</see> that are part of the browser&amp;apos;s performance timeline.<br/>There are two types of timing performance entries:
</summary>
<remarks>
<para>-<see cref="Performance"/><br/>-<see cref="PerformanceMark"/><br/>-<see cref="PerformanceMeasure"/><br/>-<see cref="PerformanceEntry"/><br/>-<see cref="PerformanceObserver"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/User_timing"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Performance_APIUser_timing>
</docs><docs>
<Permissions_API>
<summary>
The <strong>Permissions API</strong> provides a consistent programmatic way to query the status of API permissions attributed to the current context, such as a web page or worker.<br/>For example, it can be used to determine if permission to access a particular feature or API has been granted, denied, or requires specific user permission.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API/Using_the_Permissions_API">Using the Permissions API</see><br/>-<see href="https://blog.addpipe.com/using-permissions-api-to-detect-getusermedia-responses/">Using the Permissions API to Detect How Often Users Allow or Deny Camera Access</see><br/>-<see cref="Notification.Permission"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Privacy">Privacy, permissions, and information security</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Permissions_API>
<Permissions_APIUsing_the_Permissions_API>
<summary>
This article provides a basic guide to using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API">Permissions API</see>, which provides a programmatic way to query the status of API permissions attributed to the current context.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API/Using_the_Permissions_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Permissions_APIUsing_the_Permissions_API>
</docs><docs>
<Picture-in-Picture_API>
<summary>
The <strong>Picture-in-Picture API</strong> allow websites to create a floating, always-on-top video window. This allows users to continue consuming media while they interact with other sites or applications on their device.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Picture-in-Picture_API">Document Picture-in-Picture API</see> extends the Picture-in-Picture API to allow the always-on-top window to be populated with <strong>any</strong> arbitrary HTML content, not just a video.</para></blockquote>
<para>-<see cref="HTMLVideoElement.RequestPictureInPicture"/><br/>-<see cref="HTMLVideoElement.DisablePictureInPicture"/><br/>-<see cref="Document.PictureInPictureEnabled"/><br/>-<see cref="Document.ExitPictureInPicture"/><br/>-<see cref="Document.PictureInPictureElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:picture-in-picture">:picture-in-picture</see><br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Picture-in-Picture_API">Document Picture-in-Picture API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Picture-in-Picture_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Picture-in-Picture_API>
</docs><docs>
<Pointers>
<summary>
Much of today&amp;apos;s web content assumes the user&amp;apos;s pointing device will be a mouse. However, since many devices support other types of pointing input devices, such as pen/stylus and touch surfaces, extensions to the existing pointing device event models are needed. <strong><see href="https://developer.mozilla.org#pointer_event">Pointer events</see></strong> address that need.
</summary>
<remarks>
<para>Pointer events are DOM events that are fired for a pointing device. They are designed to create a single DOM event model to handle pointing input devices such as a mouse, pen/stylus or touch (such as one or more fingers).</para><para>The <strong><see href="https://developer.mozilla.org#pointer">pointer</see></strong> is a hardware-agnostic device that can target a specific set of screen coordinates. Having a single event model for pointers can simplify creating websites and applications and provide a good user experience regardless of the user's hardware. However, for scenarios when device-specific handling is desired, pointer events defines a <see cref="PointerEvent.PointerType"/> property to inspect the device type which produced the event.</para><para>The events needed to handle generic pointer input are analogous to {{domxref(&amp;quot;MouseEvent&amp;quot;,&amp;quot;mouse events&amp;quot;, &amp;quot;&amp;quot;, 1)}} (<c>mousedown</c>/<c>pointerdown</c>, <c>mousemove</c>/<c>pointermove</c>, etc.). Consequently, pointer event types are intentionally similar to mouse event types.</para><para>Additionally, a pointer event contains the usual properties present in mouse events (client coordinates, target element, button states, etc.) in addition to new properties for other forms of input: pressure, contact geometry, tilt, etc. In fact, the <see cref="PointerEvent"/> interface inherits all of the <see cref="MouseEvent"/> properties, thus facilitating the migration of content from mouse events to pointer events.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events">Touch Events</see><br/>-<see href="https://github.com/w3c/pointerevents">Pointer Events Working Group</see><br/>-<see href="https://lists.w3.org/Archives/Public/public-pointer-events/">Mail list</see><br/>-<see href="https://developer.mozilla.orgirc://irc.w3.org:6667/">W3C #pointerevents IRC channel</see><br/>-<see href="https://patrickhlauke.github.io/touch/">Touch/pointer tests and demos</see> by Patrick H. Lauke<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Pointers"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Pointers>
<PointersMulti-touch_interaction>
<summary>
Pointer events extend DOM input events to support various pointing input devices such as pen/stylus and touch screens as well as mouse. The <strong>pointer</strong> is a hardware-agnostic device that can target a specific set of screen coordinates. Having a single event model for pointers can simplify creating websites, applications and provide a good user experience regardless of the user&amp;apos;s hardware.
</summary>
<remarks>
<para>Pointer events have many similarities to mouse events but they support multiple simultaneous pointers such as multiple fingers on a touch screen. This additional feature can be used to provide richer user interaction models but at the cost of additional complexity in the multi-touch interaction handling. This document demonstrates via example code, using pointer events with different multi-touch interactions.</para><para>A <strong>live</strong> version of this application is available on <see href="https://mdn.github.io/dom-examples/pointerevents/Multi-touch_interaction.html">GitHub</see>. The <see href="https://github.com/mdn/dom-examples/blob/main/pointerevents/Multi-touch_interaction.html">source code is available on GitHub</see>; pull requests and <see href="https://github.com/mdn/dom-examples/issues">bug reports</see> are welcome.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Pointers/Multi-touch_interaction"> <em>See also on MDN</em> </seealso></para>
</remarks>
</PointersMulti-touch_interaction>
<PointersPinch_zoom_gestures>
<summary>
Adding <strong>gestures</strong> to an application can significantly improve the user experience. There are many types of gestures, from the simple single-touch <strong>swipe</strong> gesture to the more complex multi-touch <strong>twist</strong> gesture, where the touch points (aka <strong>pointers</strong>) move in different directions.
</summary>
<remarks>
<para>This example shows how to detect the <strong>pinch/zoom</strong> gesture, which uses <see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">pointer events</see> to detect whether the user moves two pointers closer or farther apart from each other.</para><para>A <strong>live</strong> version of this application is available on <see href="https://mdn.github.io/dom-examples/pointerevents/Pinch_zoom_gestures.html">GitHub</see>. The <see href="https://github.com/mdn/dom-examples/blob/main/pointerevents/Pinch_zoom_gestures.html">source code is available on GitHub</see>; pull requests and <see href="https://github.com/mdn/dom-examples/issues">bug reports</see> are welcome.</para>
<para>-<see href="https://hacks.mozilla.org/2015/08/pointer-events-now-in-firefox-nightly/">Pointer Events now in Firefox Nightly</see>; Mozilla Hacks; by Matt Brubeck and Jason Weathersby; 2015-Aug-04<br/>-<see href="https://github.com/jquery-archive/PEP">jQuery Pointer Events Polyfill</see><br/>-<see href="https://m2.material.io/design/interaction/gestures.html">Gestures</see>; Material Design<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Pointers/Pinch_zoom_gestures"> <em>See also on MDN</em> </seealso></para>
</remarks>
</PointersPinch_zoom_gestures>
<PointersUsing_Pointer_Events>
<summary>
This guide demonstrates how to use <see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">pointer events</see> and the HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas">canvas</see> element to build a multi-touch enabled drawing application. This example is based on the one in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events">touch events overview</see>, except it uses the {{domxref(&amp;quot;PointerEvent&amp;quot;,&amp;quot;pointer events&amp;quot;, &amp;quot;&amp;quot;, 1)}} input event model. Another difference is that because pointer events are pointer device agnostic, the application accepts coordinate-based inputs from a mouse, a pen, or a fingertip using the same code.
</summary>
<remarks>
<para>This application will only work on a browser that supports pointer events.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">Pointer events</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events">Touch events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Pointers/Using_Pointer_Events"> <em>See also on MDN</em> </seealso></para>
</remarks>
</PointersUsing_Pointer_Events>
</docs><docs>
<Pointer_Lock_API>
<summary>
The <strong>Pointer Lock API</strong> (formerly called <strong>Mouse Lock API</strong>) provides input methods based on the movement of the mouse over time (i.e., deltas), not just the absolute position of the mouse cursor in the viewport. It gives you access to raw mouse movement, locks the target of mouse events to a single element, eliminates limits on how far mouse movement can go in a single direction, and removes the cursor from view. It is ideal for first-person 3D games, for example.
</summary>
<remarks>
<para>More than that, the API is useful for any applications that require significant mouse input to control movements, rotate objects, and change entries, for example allowing users to control the viewing angle by moving the mouse around without any button clicking. The buttons are then freed up for other actions. Other examples include apps for viewing maps or satellite imagery.</para><para>Pointer lock lets you access mouse events even when the cursor goes past the boundary of the browser or screen. For example, your users can continue to rotate or manipulate a 3D model by moving the mouse without end. Without Pointer lock, the rotation or manipulation stops the moment the pointer reaches the edge of the browser or screen. Game players can now click buttons and swipe the mouse cursor back and forth without worrying about leaving the game play area and accidentally clicking another application that would take mouse focus away from the game.</para>
<para>-<see cref="MouseEvent"/><br/>-<see cref="Element.RequestPointerLock"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Pointer_Lock_API>
</docs><docs>
<Popover_API>
<summary>
The <strong>Popover API</strong> provides developers with a standard, consistent, flexible mechanism for displaying popover content on top of other page content. Popover content can be controlled either using HTML attributes, or via JavaScript.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/popover"><c>popover</c></see> HTML global attribute<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/button#popovertarget"><c>popovertarget</c></see> HTML attribute<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/button#popovertargetaction"><c>popovertargetaction</c></see> HTML attribute<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop"><c>::backdrop</c></see> CSS pseudo-element<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:popover-open"><c>:popover-open</c></see> CSS pseudo-class<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Popover_API>
<Popover_APIUsing>
<summary>
The <strong>Popover API</strong> provides developers with a standard, consistent, flexible mechanism for displaying popover content on top of other page content. Popover content can be controlled either declaratively using HTML attributes, or via JavaScript. This article provides a detailed guide to using all of its features.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API/Using"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Popover_APIUsing>
</docs><docs>
<Presentation_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The Presentation API lets a <see href="https://developer.mozilla.org/en-US/docs/Glossary/user agent">user agent</see> (such as a Web browser) effectively display web content through large presentation devices such as projectors and network-connected televisions. Supported types of multimedia devices include both displays which are wired using HDMI, DVI, or the like, or wireless, using <see href="https://www.dlna.org/">DLNA</see>, <see href="https://developers.google.com/cast/">Chromecast</see>, <see href="https://developer.apple.com/airplay/">AirPlay</see>, or <see href="https://www.wi-fi.org/applications">Miracast</see>.
</summary>
<remarks>
<para><see href="https://developer.mozilla.orgpresentation_mode_illustration.png">1-UA mode loaded the Controlling and Presenting pages together before outputting to displays. 2-UA mode loaded them separately using the Presentation Control Protocol.</see></para><para>In general, a web page uses the Presentation Controller API to specify the web content to be rendered on presentation device and initiate the presentation session. With Presentation Receiver API, the presenting web content obtains the session status. With providing both the controller page and the receiver one with a messaged-based channel, a Web developer can implement the interaction between these two pages.</para><para>Depending on the connection mechanism provided by the presentation device, any controller- and receiver page can be rendered by the same user agent, or by separated user agents.</para>
<para><see href="https://mediascape.github.io/presentation-api-polyfill/">Presentation API polyfill</see> contains a JavaScript polyfill of the <see href="https://w3c.github.io/presentation-api/">Presentation API</see> specification under standardization within the <see href="https://www.w3.org/2014/secondscreen/">Second Screen Working Group</see> at W3C. The polyfill is mostly intended for exploring how the Presentation API may be implemented on top of different presentation mechanisms.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Presentation_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Presentation_API>
</docs><docs>
<Prioritized_Task_Scheduling_API>
<summary>
The <strong>Prioritized Task Scheduling API</strong> provides a standardized way to prioritize all tasks belonging to an application, whether they are defined in a website developer&amp;apos;s code or in third-party libraries and frameworks.
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org#task_priorities">task priorities</see> are very coarse-grained and based around whether tasks block user interaction or otherwise impact the user experience, or can run in the background. Developers and frameworks may implement more fine-grained prioritization schemes within the broad categories defined by the API.</para><para>The API is promise-based and supports the ability to set and change task priorities, to delay tasks being added to the scheduler, to abort tasks, and to monitor for priority change and abort events.</para>
<para>-<see href="https://medium.com/airbnb-engineering/building-a-faster-web-experience-with-the-posttask-scheduler-276b83454e91">Building a Faster Web Experience with the postTask Scheduler</see> on the Airbnb blog (2021)<br/>-<see href="https://web.dev/articles/optimize-long-tasks">Optimizing long tasks</see> on web.dev (2022)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Prioritized_Task_Scheduling_API>
</docs><docs>
<Push_API>
<summary>
The <strong>Push API</strong> gives web applications the ability to receive messages pushed to them from a server, whether or not the web app is in the foreground, or even currently loaded, on a user agent. This lets developers deliver asynchronous notifications and updates to users that opt in, resulting in better engagement with timely new content.
</summary>
<remarks>
<para>-<see href="https://blog.mozilla.org/services/2016/08/23/sending-vapid-identified-webpush-notifications-via-mozillas-push-service/">Sending VAPID identified WebPush Notifications via Mozilla&amp;apos;s Push Service</see><br/>-<see href="https://web.dev/articles/push-notifications-overview">Push notifications overview</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">Service Worker API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Push_API>
<Push_APIBest_Practices>
<summary>
This article provides a useful summary of best practices to keep in mind when developing websites and applications that use Push Notifications for user engagement.
</summary>
<remarks>
<blockquote><para>&amp;quot;If done well, it&amp;apos;s nice to have, but if not done well, it&amp;apos;s really annoying.&amp;quot; — Overheard conversation between two browser developers discussing the ethics of push notifications.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API">Notifications API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API">Using the Notifications API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API">Push API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Push_APIBest_Practices>
</docs><docs>
<Remote_Playback_API>
<summary>
The <strong>Remote Playback API</strong> extends the <see cref="HTMLMediaElement"/> to enable the control of media played on a remote device.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Remote_Playback_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Remote_Playback_API>
</docs><docs>
<Reporting_API>
<summary>
The Reporting API provides a generic reporting mechanism for web applications to use to make reports available based on various platform features (for example <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP">Content Security Policy</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Permissions-Policy">Permissions-Policy</see>, or feature deprecation reports) in a consistent manner.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP">Content Security Policy</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Permissions-Policy"><c>Permissions-Policy</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Reporting_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Reporting_API>
</docs><docs>
<Resize_Observer_API>
<summary>
The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size, with notifications being delivered to the observer each time the size changes.
</summary>
<remarks>
<para>-<see href="https://web.dev/articles/resize-observer">ResizeObserver: It&amp;apos;s Like document.onresize for Elements</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Resize_Observer_API>
</docs><docs>
<Screen_Capture_API>
<summary>
The Screen Capture API introduces additions to the existing Media Capture and Streams API to let the user select a screen or portion of a screen (such as a window) to capture as a media stream. This stream can then be recorded or shared with others over the network.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API/Using_Screen_Capture">Using the Screen Capture API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API/Element_Region_Capture">Using the Element Capture and Region Capture APIs</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API/Captured_Surface_Control">Using the Captured Surface Control API</see><br/>-<see cref="MediaDevices.GetDisplayMedia"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Screen_Capture_API>
<Screen_Capture_APICaptured_Surface_Control>
<summary>
This guide explains how to use the features provided by the Captured Surface Control API to control a display surface (browser tab, window, or screen) captured by the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API">Screen Capture API</see>.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API/Captured_Surface_Control"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Screen_Capture_APICaptured_Surface_Control>
<Screen_Capture_APIElement_Region_Capture>
<summary>
This guide provides a walkthrough of typical usage of the Element Capture and Region Capture APIs, showing how to use them and the problem they solve.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/web-platform/element-capture">Capture a video stream from any element</see> on developer.chrome.com (2025)<br/>-<see href="https://developer.chrome.com/docs/web-platform/region-capture">Better tab sharing with Region Capture</see> on developer.chrome.com (2023)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API/Element_Region_Capture"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Screen_Capture_APIElement_Region_Capture>
<Screen_Capture_APIUsing_Screen_Capture>
<summary>
In this article, we will examine how to use the Screen Capture API and its <see cref="MediaDevices.GetDisplayMedia"/> method to capture part or all of a screen for streaming, recording, or sharing during a <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC</see> conference session.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>It may be useful to note that recent versions of the <see href="https://github.com/webrtcHacks/adapter">WebRTC adapter.js shim</see> include implementations of <c>getDisplayMedia()</c> to enable screen sharing on browsers that support it but do not implement the current standard API. This works with at least Chrome, Edge, and Firefox.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API">Screen Capture API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos">Taking still photos with WebRTC</see><br/>-<see cref="HTMLCanvasElement.CaptureStream"/> to obtain a <see cref="MediaStream"/> with the live contents of a {{HTMLElement("canvas")}}<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API/Using_Screen_Capture"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Screen_Capture_APIUsing_Screen_Capture>
</docs><docs>
<Screen_Orientation_API>
<summary>
The <strong>Screen Orientation API</strong> provides information about the orientation of the screen.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Orientation_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Screen_Orientation_API>
</docs><docs>
<Screen_Wake_Lock_API>
<summary>
The <strong>Screen Wake Lock API</strong> provides a way to prevent devices from dimming or locking the screen when an application needs to keep running.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/wake-lock/">Stay awake with the Screen Wake Lock API</see> on developer.chrome.com<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Screen_Wake_Lock_API>
</docs><docs>
<Selection_API>
<summary>
<blockquote class="NOTE"><h5>NOTE</h5>This API is <strong>not available</strong> in <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers</see> (not exposed via <see cref="WorkerNavigator"/>).</blockquote>
</summary>
<remarks>
<para>The <strong>Selection API</strong> enables developers to access and manipulate the portion of a document selected by the user.</para><para>The <see cref="WindowgetSelection"/> and <see cref="DocumentgetSelection"/> methods return a <see cref="Selection"/> object representing the portion of the document selected by the user. A <c>Selection</c> object provides methods to:</para><para>The Selection API also provides two events, both firing on <see cref="Document"/>:</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Selection_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Selection_API>
</docs><docs>
<Sensor_APIs>
<summary>
The <strong>Sensor APIs</strong> are a set of interfaces built to a common design that expose device sensors in a consistent way to the web platform.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Sensor_APIs"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Sensor_APIs>
</docs><docs>
<Server-sents>
<summary>
Traditionally, a web page has to send a request to the server to receive new data; that is, the page requests data from the server. With server-sent events, it&amp;apos;s possible for a server to send new data to a web page at any time, by pushing messages to the web page. These incoming messages can be treated as <strong><see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Events</see></strong><strong> + data</strong> inside the web page.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sents"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Server-sents>
<Server-sentsUsing_server-sents>
<summary>
Developing a web application that uses <see href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">server-sent events</see> is straightforward. You&amp;apos;ll need a bit of code on the server to stream events to the front-end, but the client side code works almost identically to <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">websockets</see> in part of handling incoming events. This is a one-way connection, so you can&amp;apos;t send events from a client to a server.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sents/Using_server-sents"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Server-sentsUsing_server-sents>
</docs><docs>
<Service_Worker_API>
<summary>
Service workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available). They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests, and take appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to push notifications and background sync APIs.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see href="https://web.dev/articles/service-worker-lifecycle">Service Worker Lifecycle</see><br/>-<see href="https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker">Service workers basic code example</see><br/>-Web APIs that are related to the Service Worker API:-{{domxref(&amp;quot;Background Fetch API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-{{domxref(&amp;quot;Background Synchronization API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-{{domxref(&amp;quot;Content Index API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-{{domxref(&amp;quot;Cookie Store API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-{{domxref(&amp;quot;Notifications API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-{{domxref(&amp;quot;Payment Handler API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-{{domxref(&amp;quot;Push API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-{{domxref(&amp;quot;Web Periodic Background Synchronization API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Service_Worker_API>
<Service_Worker_APIUsing_Service_Workers>
<summary>
This article provides information on getting started with service workers, including basic architecture, registering a service worker, the installation and activation process for a new service worker, updating your service worker, cache control and custom responses, all in the context of an app with offline functionality.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promises</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Using web workers</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Service-Worker-Allowed">Service-Worker-Allowed</see> HTTP header<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Service_Worker_APIUsing_Service_Workers>
</docs><docs>
<Shared_Storage_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>This feature is currently opposed by one browser vendor.<br/>See the <see href="https://developer.mozilla.org#standards_positions">Standards positions</see> section below for details.</blockquote>
</summary>
<remarks>
<para>The <strong>Shared Storage API</strong> is a client-side storage mechanism that enables unpartitioned, cross-site data access while preserving privacy (i.e., without relying on tracking cookies).</para>
<para>-<see href="https://privacysandbox.google.com/private-advertising/shared-storage">Shared Storage</see> on privacysandbox.google.com<br/>-<see href="https://privacysandbox.google.com/">The Privacy Sandbox</see> on privacysandbox.google.com<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Shared_Storage_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Shared_Storage_API>
</docs><docs>
<Speculation_Rules_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Speculation Rules API</strong> is designed to improve performance for future navigations. It targets document URLs rather than specific resource files, and so makes sense for multi-page applications (MPAs) rather than single-page applications (SPAs).
</summary>
<remarks>
<para>The Speculation Rules API provides an alternative to the widely-available <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/rel/prefetch"><c>&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;</c></see> feature and is designed to supersede the Chrome-only deprecated <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/rel/prerender"><c>&amp;lt;link rel=&amp;quot;prerender&amp;quot;&amp;gt;</c></see> feature. It provides many improvements over these technologies, along with a more expressive, configurable syntax for specifying which documents should be prefetched or prerendered.</para><blockquote class="NOTE"><h5>NOTE</h5><para>The Speculation Rules API doesn&amp;apos;t handle subresource prefetches; for that you&amp;apos;ll need to use <c>&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;</c>.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Performance/Guides/Speculative_loading">Speculative loading</see> for a comparison of speculation rules and other similar performance improvement features.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Speculation_Rules_API>
</docs><docs>
<Storage_Access_API>
<summary>
The Storage Access API is relevant to user agents that, by default, block access to third-party cookies and unpartitioned state to improve privacy (for example, to prevent tracking). There are legitimate uses for third-party cookies and unpartitioned state that we still want to enable, even with these default restrictions in place. Examples include single sign-on (SSO) with federated identity providers (IdPs), or persisting user details such as location data or viewing preferences across different sites.
</summary>
<remarks>
<para>The API provides methods that allow embedded resources to check whether they currently have access to third-party cookies and, if not, to request access from the user agent.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API/Using">Using the Storage Access API</see><br/>-<see href="https://webkit.org/blog/8124/introducing-storage-access-api/">Introducing Storage Access API</see> (WebKit blog)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Storage_Access_API>
<Storage_Access_APIRelated_website_sets>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>This feature is currently opposed by two browser vendors. See the <see href="https://developer.mozilla.org#standards_positions">Standards positions</see> section below for details of opposition.</blockquote>
</summary>
<remarks>
<para>Related website sets are a mechanism for defining a set of related sites that share trusted content. As a result, browsers can grant default access for these sites to <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Third-party_cookies">third-party cookies</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/State_Partitioning#state_partitioning">unpartitioned state</see> when they have content embedded in other set members, without requiring users to grant access to the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API">Storage Access API</see> via a permission prompt.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API">Storage Access API</see><br/>-<see href="https://privacysandbox.google.com/cookies/related-website-sets">Related Website Sets</see> on privacysandbox.google.com (2023)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API/Related_website_sets"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Storage_Access_APIRelated_website_sets>
<Storage_Access_APIUsing>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API">Storage Access API</see> can be used by embedded cross-site documents to verify whether they have access to <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Third-party_cookies">third-party cookies</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/State_Partitioning#state_partitioning">unpartitioned state</see> and, if not, to request access. We&amp;apos;ll briefly look at a common storage access scenario.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>When we talk about third-party cookies in the content of the Storage Access API, we implicitly mean <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API#unpartitioned_versus_partitioned_cookies"><strong>unpartitioned</strong></see> third-party cookies.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API/Using"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Storage_Access_APIUsing>
</docs><docs>
<Storage_API>
<summary>
The <see href="https://storage.spec.whatwg.org/">Storage Standard</see> defines a shared storage system designed to be used by all APIs and technologies that websites can use to store data in a user&amp;apos;s browser.
</summary>
<remarks>
<para>The data stored for a website which is managed by the Storage Standard usually includes <see href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB databases</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Cache">Cache API data</see>, but may include other kind of site-accessible data such as <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">Web Storage API data</see>.</para><para>The Storage API gives websites the ability to find out how much space they can use, how much they are already using, and even control whether or not they need to be alerted before the <see href="https://developer.mozilla.org/en-US/docs/Glossary/user agent">user agent</see> disposes of data in order to make room for other things.</para><para>This article gives an overview of the way user agents store and maintain websites&amp;apos; data. For more information about storage limits and eviction, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria">Browser storage quotas and eviction criteria</see>.</para><para>This article also gives an overview of the <see cref="StorageManager"/> interface used to estimate available storage for a site.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API/Using_the_Permissions_API">Using the Permissions API</see><br/>-<see href="https://web.dev/articles/storage-for-the-web">Storage for the web on web.dev</see><br/>-<see href="https://web.dev/articles/persistent-storage">Persistent storage on web.dev</see><br/>-<see href="https://docs.google.com/document/d/19QemRTdIxYaJ4gkHYf2WWBNPbpuZQDNMpUVf8dQxj4U/edit">Chrome Web Storage and Quota Concepts</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Storage_API>
<Storage_APIStorage_quotas_and_eviction_criteria>
<summary>
Web developers can use a number of technologies to store data in the user&amp;apos;s browser (i.e., on the local disk of the device the user is using to view the website).
</summary>
<remarks>
<para>The amount of data browsers allow websites to store and the mechanisms they use to delete data when that limit is reached differs between browsers.</para><para>This article describes the web technologies that can be used to store data, the quotas that browsers have in place to limit websites from storing too much data, and the mechanisms they use to delete data when needed.</para>
<para>-<see href="https://web.dev/articles/storage-for-the-web">Storage for the web on web.dev</see><br/>-<see href="https://web.dev/articles/persistent-storage">Persistent storage on web.dev</see><br/>-<see href="https://docs.google.com/document/d/19QemRTdIxYaJ4gkHYf2WWBNPbpuZQDNMpUVf8dQxj4U/edit">Chrome Web Storage and Quota Concepts</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Storage_APIStorage_quotas_and_eviction_criteria>
</docs><docs>
<Streams_API>
<summary>
The Streams API allows JavaScript to programmatically access streams of data received over the network and process them as desired by the developer.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Concepts">Streams API concepts</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams">Using readable streams</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_byte_streams">Using readable byte streams</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_writable_streams">Using writable streams</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Streams_API>
<Streams_APIConcepts>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Streams API</see> adds a very useful set of tools to the web platform, providing objects that allow JavaScript to programmatically access streams of data received over the network and process them as desired by the developer. Some of the concepts and terminology associated with streams might be new to you — this article explains all you need to know.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Concepts"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Streams_APIConcepts>
<Streams_APIUsing_readable_byte_streams>
<summary>
Readable <strong>byte streams</strong> are <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams">readable streams</see> that have an underlying byte source of <c>type: &amp;quot;bytes&amp;quot;</c>, and which support efficient zero-copy transfer of data from the underlying source to a consumer (bypassing the stream&amp;apos;s internal queues).<br/>They are intended for use cases where data might be supplied or requested in arbitrary sized and potentially very large chunks, and hence where avoiding making copies is likely to improve efficiency.
</summary>
<remarks>
<para>This article explains how readable byte streams compare to normal &amp;quot;default&amp;quot; streams, and how you create and consume them.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Readable byte streams are almost identical to &amp;quot;normal&amp;quot; readable streams and almost all of the concepts are the same.<br/>This article assumes that you already understand those concepts and will only be covering them superficially (if at all).<br/>If you&amp;apos;re not familiar with the relevant concepts, please first read: <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams">Using readable streams</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API#concepts_and_usage">Streams concepts and usage overview</see>, and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Concepts">Streams API concepts</see>.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Concepts">Streams API concepts</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API#concepts_and_usage">Streams concepts and usage overview</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams">Using readable streams</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_byte_streams"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Streams_APIUsing_readable_byte_streams>
<Streams_APIUsing_readable_streams>
<summary>
As a JavaScript developer, programmatically reading and manipulating streams of data received over the network, chunk by chunk, is very useful! But how do you use the Streams API&amp;apos;s readable stream functionality? This article explains the basics.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This article assumes that you understand the use cases of readable streams, and are aware of the high-level concepts. If not, we suggest that you first read the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API#concepts_and_usage">Streams concepts and usage overview</see> and dedicated <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Concepts">Streams API concepts</see> article, then come back.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para>If you are looking for information on writable streams try <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_writable_streams">Using writable streams</see> instead.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Streams_APIUsing_readable_streams>
<Streams_APIUsing_writable_streams>
<summary>
As a JavaScript developer, programmatically writing data to a stream is very useful! This article explains the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Streams API</see>&amp;apos;s writable stream functionality.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This article assumes that you understand the use cases of writable streams, and are aware of the high-level concepts.<br/>If not, we suggest that you first read the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API#concepts_and_usage">Streams concepts and usage overview</see> and dedicated <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Concepts">Streams API concepts</see> article, then come back.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para>If you are looking for information about readable streams, try <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams">Using readable streams</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_byte_streams">Using readable byte streams</see> instead.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_writable_streams"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Streams_APIUsing_writable_streams>
</docs><docs>
<Summarizer_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Summarizer API</strong> summarizes a given body of text via a browser&amp;apos;s internal AI model (which may differ between browsers).
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/ai/summarizer-api">Summarize with built-in AI</see> on developer.chrome.com (2025)<br/>-<see href="https://chrome.dev/web-ai-demos/">Web AI demos</see> on chrome.dev<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Summarizer_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Summarizer_API>
<Summarizer_APIUsing>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Summarizer_API">Summarizer API</see> provides an asynchronous (<see cref="Promise"/>-based) mechanism for a website to feed a body of text into the browser's own internal AI model and request that it returns a summary of the text based on specified options. This article explains how to use the fundamentals of the Summarizer API.
</summary>
<remarks>
<para>-<see href="https://chrome.dev/web-ai-demos/">Web AI demos</see> on chrome.dev<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Summarizer_API/Using"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Summarizer_APIUsing>
</docs><docs>
<SVG_API>
<summary>
SVG provides elements for circles, rectangles, and simple and complex curves. The elements&amp;apos; attribute values specify how these must be drawn. The <strong>SVG API</strong> is the subset of the <strong>DOM</strong> connecting these SVG elements and their attribute values to scripts or programming languages by representing them in memory. The SVG API thus provides methods that allow programmatic access to the SVG elements and their attribute values.
</summary>
<remarks>
<para>The SVG API is a set of interfaces that have been categorized into the following broad categories:</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/SVG">Getting Started with SVG</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/SVG_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</SVG_API>
</docs><docs>
<Topics_API>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>This feature is currently opposed by two browser vendors.<br/>See the <see href="https://developer.mozilla.org#standards_positions">Standards positions</see> section below for details.</blockquote>
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>An <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Privacy_sandbox/Enrollment">Enrollment process</see> is required to use the Topics API in your applications. See the <see href="https://developer.mozilla.org#enrollment">Enrollment</see> section for details of what sub-features are gated by enrollment.</para></blockquote><para>The <strong>Topics API</strong> provides a mechanism for developers to implement use cases such as <strong>interest-based advertising (IBA)</strong> based on topics collected by the browser as the user navigates different pages, rather than collected by the developer by tracking the user&amp;apos;s journey around different sites with <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Third-party_cookies">third-party cookies</see>.</para>
<para>-<see href="https://privacysandbox.google.com/private-advertising/topics">Topics API</see> on privacysandbox.google.com (2023)<br/>-<see href="https://privacysandbox.google.com/">The Privacy Sandbox</see> on privacysandbox.google.com (2023)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Topics_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Topics_API>
<Topics_APIUsing>
<summary>
<blockquote class="WARNING"><h5>WARNING</h5>This feature is currently opposed by two browser vendors. See the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Topics_API#standards_positions">Standards positions</see> section for details of opposition.</blockquote>
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>An <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Privacy_sandbox/Enrollment">Enrollment process</see> is required to use the Topics API in your applications. See the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Topics_API#enrollment">Enrollment</see> section for details of what sub-features are gated by enrollment.</para></blockquote><para>This page explains how the Topics API works and how it can be used to create an <strong>interest-based advertising (IBA)</strong> solution.</para>
<para>-<see href="https://privacysandbox.google.com/private-advertising/topics">Topics API</see> on privacysandbox.google.com (2023)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Topics_API/Using"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Topics_APIUsing>
</docs><docs>
<Touchs>
<summary>
To provide quality support for touch-based user interfaces, touch events offer the ability to interpret finger (or stylus) activity on touch screens or trackpads.
</summary>
<remarks>
<para>The touch events interfaces are relatively low-level APIs that can be used to support application-specific multi-touch interactions such as a two-finger gesture. A multi-touch interaction starts when a finger (or stylus) first touches the contact surface. Other fingers may subsequently touch the surface and optionally move across the touch surface. The interaction ends when the fingers are removed from the surface. During this interaction, an application receives touch events during the start, move, and end phases.</para><para>Touch events are similar to mouse events except they support simultaneous touches and at different locations on the touch surface. The <see cref="TouchEvent"/> interface encapsulates all of the touchpoints that are currently active. The <see cref="Touch"/> interface, which represents a single touchpoint, includes information such as the position of the touch point relative to the browser viewport.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Touchs"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Touchs>
<TouchsMulti-touch_interaction>
<summary>
The touch event interfaces support application-specific single and multi-touch interactions. However, the interfaces can be a bit tricky for programmers to use because touch events are very different from other DOM input events, such as <see href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent">mouse events</see>. The application described in this guide shows how to use touch events for simple single and multi-touch interactions, the basics needed to build application-specific gestures.
</summary>
<remarks>
<para>A <strong>live</strong> version of this application is available on <see href="https://mdn.github.io/dom-examples/touchevents/Multi-touch_interaction.html">GitHub</see>. The <see href="https://github.com/mdn/dom-examples/tree/main/touchevents">source code is available on GitHub</see> and pull requests and <see href="https://github.com/mdn/dom-examples/issues">bug reports</see> are welcome.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">Pointer events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Touchs/Multi-touch_interaction"> <em>See also on MDN</em> </seealso></para>
</remarks>
</TouchsMulti-touch_interaction>
<TouchsUsing_Touch_Events>
<summary>
Today, most Web content is designed for keyboard and mouse input. However, devices with touch screens (especially portable devices) are mainstream and Web applications can either directly process touch-based input by using <see href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent">touch events</see> or the application can use <strong>interpreted mouse events</strong> for the application input. A disadvantage to using mouse events is that they do not support concurrent user input, whereas touch events support multiple simultaneous inputs (possibly at different locations on the touch surface), thus enhancing user experiences.
</summary>
<remarks>
<para>The touch events interfaces support application specific single and multi-touch interactions such as a two-finger gesture. A multi-touch interaction starts when a finger (or stylus) first touches the contact surface. Other fingers may subsequently touch the surface and optionally move across the touch surface. The interaction ends when the fingers are removed from the surface. During this interaction, an application receives touch events during the start, move, and end phases. The application may apply its own semantics to the touch inputs.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events">Touch events</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">Pointer events</see><br/>-<see href="https://web.dev/articles/add-touch-to-your-site">Add touch to your site</see> on web.dev<br/>-<see href="https://codicode.com/art/easy_way_to_add_touch_support_to_your_website.aspx">Add touch screen support to your website (The easy way)</see><br/>-<see href="https://rbyers.github.io/paint.html">Paint Program</see> by Rick Byers<br/>-<see href="https://patrickhlauke.github.io/touch/">Touch/pointer tests and demos</see> by Patrick H. Lauke<br/>-<see href="https://github.com/w3c/touch-events">Touch Events Community Group</see><br/>-<see href="https://lists.w3.org/Archives/Public/public-touchevents/">Mail list</see><br/>-<see href="https://developer.mozilla.orgirc://irc.w3.org:6667/">W3C #touchevents IRC channel</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Touchs/Using_Touch_Events"> <em>See also on MDN</em> </seealso></para>
</remarks>
</TouchsUsing_Touch_Events>
</docs><docs>
<Translator_and_Language_Detector_APIs>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Translator and Language Detector APIs</strong> provide functionality to detect the language that text is written in, and to translate text into different languages, via a browser&amp;apos;s own internal AI model (which may differ between browsers).
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/ai/language-detection">Language detection with built-in AI</see> on developer.chrome.com (2025)<br/>-<see href="https://developer.chrome.com/docs/ai/translator-api">Translation with built-in AI</see> on developer.chrome.com (2025)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Translator_and_Language_Detector_APIs"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Translator_and_Language_Detector_APIs>
<Translator_and_Language_Detector_APIsUsing>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Translator_and_Language_Detector_APIs">Translator and Language Detector APIs</see> provide asynchronous (<see cref="Promise"/>-based) mechanisms for a website to detect languages and translate text via the browser's own internal AI model. This is useful and efficient because the browser handles the service, rather than the developer having to rely on the user downloading AI models, or host or pay for a cloud-based translation service.<br/>This article explains how to use these APIs.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Translator_and_Language_Detector_APIs/Using"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Translator_and_Language_Detector_APIsUsing>
</docs><docs>
<Trusted_Types_API>
<summary>
The <strong>Trusted Types API</strong> gives web developers a way to ensure that input has been passed through a user-specified transformation function before being passed to an API that might execute that input. This can help to protect against client-side <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS">cross-site scripting (XSS)</see> attacks. Most commonly the transformation function <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS#sanitization">sanitizes</see> the input.
</summary>
<remarks>
<para>-<see href="https://web.dev/articles/trusted-types">Prevent DOM-based cross-site scripting vulnerabilities with Trusted Types</see><br/>-<see href="https://github.com/w3c/trusted-types#polyfill">Trusted Types polyfill</see> (also available as an <see href="https://www.npmjs.com/package/trusted-types">npm package</see>)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Trusted_Types_API>
</docs><docs>
<UI_Events>
<summary>

</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">Pointer Events API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events">Touch Events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/UI_Events"> <em>See also on MDN</em> </seealso></para>
</remarks>
</UI_Events>
<UI_EventsKeyboard_code_values>
<summary>
The following tables show what code values are used for each native scancode or virtual keycode on major platforms. The reason is that some browsers choose to interpret physical keys differently, there are some differences in which keys map to which codes. These tables show those variations when known.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_code_values"> <em>See also on MDN</em> </seealso></para>
</remarks>
</UI_EventsKeyboard_code_values>
<UI_EventsKeyboard_key_values>
<summary>
The tables below list the standard values for the <see href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key"><c>KeyboardEvent.key</c></see> property, with an explanation of what the key is typically used for. Corresponding virtual keycodes for common platforms are included where available.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_key_values"> <em>See also on MDN</em> </seealso></para>
</remarks>
</UI_EventsKeyboard_key_values>
</docs><docs>
<URL_API>
<summary>

</summary>
<remarks>
<para>-{{domxref(&amp;quot;Fetch API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-CSS {{cssxref(&amp;quot;url_value&amp;quot;, &amp;quot;&amp;lt;url&amp;gt;&amp;quot;)}} type<br/>-<see cref="EncodeURI"/><br/>-<see cref="EncodeURIComponent"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/URL_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</URL_API>
<URL_APIResolving_relative_references>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/URL/URL"><c>URL()</c> constructor</see> or the <see cref="URL.Parse"/> static method of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/URL_API">URL API</see> can be used to resolve a relative reference and a base URL to an absolute URL.
</summary>
<remarks>
<para>Both methods take up to two string arguments and return a <see href="https://developer.mozilla.org/en-US/docs/Web/API/URL"><c>URL()</c></see> object representing an absolute URL.<br/>The first argument represents either an absolute URL or a relative reference to a URL, while the second is a base URL that is used to resolve the relative reference if one is specified in the first argument.<br/>The methods resolve the relative reference in the same way, except that the <c>URL()</c> constructor throws if invalid URLs are passed, while <c>parse()</c> returns <c>null</c>.</para><para>The code below shows how the methods are used with the same <c>url</c> and <c>base</c> URL values.</para><para>You can see from the example that resolving the <c>URL</c> from a supplied base URL and relative reference is not simply a concatenation of the supplied parameters.</para><para>In this case a path relative to the current directory is passed (<c>articles</c>).<br/>The current directory of the <c>base</c> URL is the URL string up to the last forward slash.<br/>Here <c>https://developer.mozilla.org/some/path</c> has no trailing forward slash, so the current directory is <c>https://developer.mozilla.org/some/</c>, and hence resolves to a final URL of <c>https://developer.mozilla.org/some/articles</c>.</para><para>Relative references are resolved against the base URL using a path reference that is relative to: the current directory (<c>./</c>), the parent directory of the current directory (<c>../</c>), or the site root (<c>/</c>).<br/>The following sections show how resolution works for each type of relative path.</para>
<para>-<see href="https://datatracker.ietf.org/doc/html/rfc3986.html#section-5.2">RFC 3986 - Relative Resolution</see>, the specification for resolving base and relative URLs<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references"> <em>See also on MDN</em> </seealso></para>
</remarks>
</URL_APIResolving_relative_references>
</docs><docs>
<URL_Fragment_Text_Directives>
<summary>
The <strong>URL fragment text directives</strong> API allows web apps to interact with <strong>text fragments</strong> in the URL. <see href="https://developer.mozilla.org/en-US/docs/Web/URI/Reference/Fragment/Text_fragments">Text fragments</see> allow linking directly to a specific portion of text in a web document, without requiring the author to annotate it with an ID, using a particular syntax in the URL fragment.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/URI/Reference/Fragment">URI fragment</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/URL_Fragment_Text_Directives"> <em>See also on MDN</em> </seealso></para>
</remarks>
</URL_Fragment_Text_Directives>
</docs><docs>
<URL_Pattern_API>
<summary>
The <strong>URL Pattern API</strong> defines a syntax that is used to create URL pattern matchers.<br/>These patterns can be matched against URLs or individual URL components.<br/>The URL Pattern API is used by the <see cref="URLPattern"/> interface.
</summary>
<remarks>
<para>-A polyfill of <c>URLPattern</c> is available <see href="https://github.com/kenchris/urlpattern-polyfill">on GitHub</see><br/>-The pattern syntax used by URLPattern is similar to the syntax used by <see href="https://github.com/pillarjs/path-to-regexp">path-to-regexp</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/URL_Pattern_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</URL_Pattern_API>
</docs><docs>
<User-Agent_Client_Hints_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>User-Agent Client Hints API</strong> extends <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Client_hints">Client Hints</see> to provide a way of exposing browser and platform information via User-Agent response and request headers, and a JavaScript API.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/privacy-security/user-agent-client-hints">Improving user privacy and developer experience with User-Agent Client Hints</see><br/>-<see href="https://web.dev/articles/migrate-to-ua-ch">Migrate to User-Agent Client Hints</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/User-Agent_Client_Hints_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>In the following example a number of hints are requested using the <see cref="NavigatorUAData.GetHighEntropyValues"/> method. When the promise resolves, this information is printed to the console.</returns>
</User-Agent_Client_Hints_API>
</docs><docs>
<Vibration_API>
<summary>
Most modern mobile devices include vibration hardware, which lets software code provide physical feedback to the user by causing the device to shake. The <strong>Vibration API</strong> offers Web apps the ability to access this hardware, if it exists, and does nothing if the device doesn&amp;apos;t support it.
</summary>
<remarks>
<para>-<see cref="Navigator.Vibrate"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Vibration_API>
</docs><docs>
<View_Transition_API>
<summary>
The <strong>View Transition API</strong> provides a mechanism for easily creating animated transitions between different website views. This includes animating between DOM states in a single-page app (SPA), and animating the navigation between documents in a multi-page app (MPA).
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/web-platform/view-transitions/">Smooth transitions with the View Transition API</see> on developer.chrome.com (2024)<br/>-<see href="https://stackdiary.com/view-transitions-api/">View Transition API: Creating Smooth Page Transitions</see> on stackdiary.com (2023)<br/>-<see href="https://www.debugbear.com/blog/view-transitions-spa-without-framework">View Transitions API: Single Page Apps Without a Framework</see> on DebugBear (2024)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</View_Transition_API>
<View_Transition_APIUsing>
<summary>
This article explains the theory behind how the <see href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API">View Transition API</see> works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API/Using"> <em>See also on MDN</em> </seealso></para>
</remarks>
</View_Transition_APIUsing>
</docs><docs>
<VirtualKeyboard_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The VirtualKeyboard API provides developers control over the layout of their applications when the on-screen virtual keyboard appears and disappears on devices such as tablets, mobile phones, or other devices where a hardware keyboard may not be available.
</summary>
<remarks>
<para>Web browsers usually deal with virtual keyboards on their own, by adjusting the viewport height and scrolling to input fields when focused.</para><para>The figure below illustrates the difference in viewport height and scroll position on a web page when the device has its on-screen virtual keyboard hidden, and when it is shown.</para><para><see href="https://developer.mozilla.orgviewport-height.png">Two devices, one without a virtual keyboard, showing that the webpage can use most of the device&amp;apos;s vertical space, and one with a virtual keyboard, showing that the webpage can only be displayed in the remaining space</see></para><para>More complex applications or specific devices such as multi-screen mobile phones may require more control of the layout when the virtual keyboard appears.</para><para>The figure below shows what happens on a dual-screen device when the virtual keyboard appears on just one of the two screens. The viewport becomes smaller on both screens to accommodate for the virtual keyboard, leaving wasted space on the screen where the virtual keyboard is not displayed.</para><para><see href="https://developer.mozilla.orgdual-screen.png">A dual-screen device, with its virtual keyboard displayed on one screen, showing that the webpage can only use the vertical space that remains after the keyboard was displayed, even if that leaves empty space on the other screen</see></para><para>The VirtualKeyboard API can be used to opt out of the way the browser automatically handles the virtual keyboard, and take full control of it instead. With the VirtualKeyboard API, the keyboard still appears and disappears as necessary when form controls are focused, but the viewport does not change, and you can use JavaScript and CSS to adapt your layout.</para>
<para>-<see href="https://developer.chrome.com/docs/web-platform/virtual-keyboard/">Full control with the VirtualKeyboard API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/VirtualKeyboard_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</VirtualKeyboard_API>
</docs><docs>
<Visual_Viewport_API>
<summary>
The <strong>Visual Viewport API</strong> provides an explicit mechanism for querying and modifying the properties of the window's <see href="https://developer.mozilla.org/en-US/docs/Glossary/visual viewport">visual viewport</see>. The visual viewport is the visual portion of a screen excluding on-screen keyboards, areas outside of a pinch-zoom area, or any other on-screen artifact that doesn't scale with the dimensions of a page.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Visual_Viewport_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Visual_Viewport_API>
</docs><docs>
<WebCodecs_API>
<summary>
The <strong>WebCodecs API</strong> gives web developers low-level access to the individual frames of a video stream and chunks of audio.<br/>It is useful for web applications that require full control over the way media is processed.<br/>For example, video or audio editors, and video conferencing.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/web-platform/best-practices/webcodecs">Video processing with WebCodecs</see><br/>-<see href="https://w3c.github.io/webcodecs/samples/">WebCodecs API Samples</see><br/>-<see href="https://webrtchacks.com/real-time-video-processing-with-webcodecs-and-streams-processing-pipelines-part-1/">Real-Time Video Processing with WebCodecs and Streams: Processing Pipelines</see><br/>-<see href="https://webrtchacks.com/video-frame-processing-on-the-web-webassembly-webgpu-webgl-webcodecs-webnn-and-webtransport/">Video Frame Processing on the Web – WebAssembly, WebGPU, WebGL, WebCodecs, WebNN, and WebTransport</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebCodecs_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebCodecs_API>
</docs><docs>
<WebGL_API>
<summary>
<strong>WebGL</strong> (Web Graphics Library) is a JavaScript API for rendering high-performance interactive 3D and 2D graphics within any compatible web browser without the use of plug-ins. WebGL does so by introducing an API that closely conforms to OpenGL ES 2.0 that can be used in HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas">canvas</see> elements. This conformance makes it possible for the API to take advantage of hardware graphics acceleration provided by the user's device.
</summary>
<remarks>
<para>Support for WebGL is present in all modern browsers (see the <see href="https://developer.mozilla.org#browser_compatibility">compatibility tables</see> below); however, the user&amp;apos;s device must also have hardware that supports these features.</para><para>The <see href="https://developer.mozilla.org#webgl_2">WebGL 2</see> API introduces support for much of the OpenGL ES 3.0 feature set; it's provided through the <see cref="WebGL2RenderingContext"/> interface.</para><para>The <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas">canvas</see> element is also used by the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas API</see> to do 2D graphics on web pages.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getSupportedExtensions#browser_compatibility">Compatibility info about WebGL extensions</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_API>
<WebGL_APIBasic_2D_animation_example>
<summary>
In this WebGL example, we create a canvas and within it render a rotating square using WebGL. The coordinate system we use to represent our scene is the same as the canvas&amp;apos;s coordinate system. That is, (0, 0) is at the top-left corner and the bottom-right corner is at (600, 460).
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Basic_2D_animation_example"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBasic_2D_animation_example>
<WebGL_APIBy_example>
<summary>
<strong>WebGL by example</strong> is a series of live samples with short explanations that showcase WebGL concepts and capabilities.
</summary>
<remarks>
<para>The examples are sorted according to topic and level of difficulty, covering the WebGL rendering context, shader programming, textures, geometry, user interaction, and more.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_example>
<WebGL_APIBy_exampleBasic_scissoring>
<summary>
In this example, we see how to draw rectangles and squares using WebGL scissoring operations. Scissoring establishes a clipping region outside which drawing will not occur.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Basic_scissoring"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleBasic_scissoring>
<WebGL_APIBy_exampleBoilerplate_1>
<summary>
This example describes repeated pieces of code that will be hidden from now on, as well as defining a JavaScript utility function to make WebGL initialization easier.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Boilerplate_1"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleBoilerplate_1>
<WebGL_APIBy_exampleCanvas_size_and_WebGL>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Canvas_size_and_WebGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleCanvas_size_and_WebGL>
<WebGL_APIBy_exampleClearing_by_clicking>
<summary>
This example demonstrates how to combine user interaction with WebGL graphics operations by clearing the rendering context with a random color when the user clicks.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Clearing_by_clicking"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleClearing_by_clicking>
<WebGL_APIBy_exampleClearing_with_colors>
<summary>
An example showing how to clear a WebGL rendering context to a solid color.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Clearing_with_colors"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleClearing_with_colors>
<WebGL_APIBy_exampleColor_masking>
<summary>
This WebGL example modifies random colors by applying color masking to limit the range of displayed colors to specific shades.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Color_masking"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleColor_masking>
<WebGL_APIBy_exampleDetect_WebGL>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Detect_WebGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleDetect_WebGL>
<WebGL_APIBy_exampleHello_GLSL>
<summary>
This WebGL example demonstrates a very basic GLSL shader program that draws a solid color square.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This example will most likely work in all modern desktop browsers. But it may not work in some mobile or older browsers. If the canvas remains blank, you can check the output of the next example, which draws exactly the same thing. But remember to read through the explanations and code on this page, before moving on to the next.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Hello_GLSL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleHello_GLSL>
<WebGL_APIBy_exampleHello_vertex_attributes>
<summary>
This WebGL example demonstrates how to combine shader programming and user interaction by sending user input to the shader using vertex attributes.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Hello_vertex_attributes"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleHello_vertex_attributes>
<WebGL_APIBy_exampleRaining_rectangles>
<summary>
A simple WebGL game that demonstrates clearing with solid colors, scissoring, animation, and user interaction.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Raining_rectangles"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleRaining_rectangles>
<WebGL_APIBy_exampleScissor_animation>
<summary>
A simple WebGL example in which we have some animation fun using scissoring and clearing operations.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Scissor_animation"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleScissor_animation>
<WebGL_APIBy_exampleSimple_color_animation>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Simple_color_animation"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleSimple_color_animation>
<WebGL_APIBy_exampleTextures_from_code>
<summary>
This WebGL example provides a simple demonstration of procedural texturing with fragment shaders. That is, using code to generate textures for use in shading WebGL objects.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Textures_from_code"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleTextures_from_code>
<WebGL_APIBy_exampleVideo_textures>
<summary>
This example demonstrates how to use video files as textures for WebGL surfaces.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Video_textures"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIBy_exampleVideo_textures>
<WebGL_APICompressed_texture_formats>
<summary>
The WebGL API provides methods to use compressed texture formats. These are useful to increase texture detail while limiting the additional video memory necessary. By default, no compressed formats are available: a corresponding compressed texture format extension must first be enabled.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Compressed_texture_formats"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APICompressed_texture_formats>
<WebGL_APIConstants>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> provides several constants that are passed into or returned by functions. All constants are of type <see cref="WebGL_APITypes"/>.
</summary>
<remarks>
<para>Standard WebGL constants are installed on the <see cref="WebGLRenderingContext"/> and <see cref="WebGL2RenderingContext"/> objects, so that you use them as <c>gl.CONSTANT_NAME</c>:</para><para>Some constants are also provided by <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">WebGL extensions</see>. A <see href="https://developer.mozilla.org#constants_defined_in_webgl_extensions">list</see> is provided below.</para><para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see> has more information, examples, and resources on how to get started with WebGL.</para>
<para>-<see cref="WebGLRenderingContext"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIConstants>
<WebGL_APIData>
<summary>
Shader programs have access to three kinds of data storage, each of which has a specific use case. Each kind of variable is accessible by one or both types of shader program (depending on the data store type) and possibly by the site&amp;apos;s JavaScript code, depending on the specific type of variable.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Data"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIData>
<WebGL_APIMatrix_math_for_the_web>
<summary>
Matrices can be used to represent transformations of objects in space, and are used for performing many key types of computation when constructing images and visualizing data on the Web. This article explores how to create matrices and how to use them with <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transforms/Using_CSS_transforms">CSS transforms</see> and the <c>matrix3d</c> transform type.
</summary>
<remarks>
<para>While this article uses <see href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</see> to simplify explanations, matrices are a core concept used by many different technologies including <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see>, the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR</see> (VR and AR) API, and <see href="https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders">GLSL shaders</see>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIMatrix_math_for_the_web>
<WebGL_APITutorial>
<summary>
<see href="https://www.khronos.org/webgl/">WebGL</see> enables web content to use an API based on <see href="https://www.khronos.org/opengles/">OpenGL ES</see> 2.0 to perform 3D rendering in an HTML <c>&amp;lt;canvas&amp;gt;</c> in browsers that support it without the use of plug-ins. WebGL programs consist of control code written in JavaScript and special effects code (shader code) that is executed on a computer&amp;apos;s Graphics Processing Unit (GPU). WebGL elements can be mixed with other HTML elements and composited with other parts of the page or page background.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APITutorial>
<WebGL_APITutorialAdding_2D_content_to_a_WebGL_context>
<summary>
Once you&amp;apos;ve successfully <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL">created a WebGL context</see>, you can start rendering into it. A simple thing we can do is draw an untextured square plane, so let&amp;apos;s start there.
</summary>
<remarks>
<para>The complete source code for this project is <see href="https://github.com/mdn/dom-examples/tree/main/webgl-examples/tutorial/sample2">available on GitHub</see>.</para>
<para>-<see href="https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html">Matrices</see> on WebGLFundamentals<br/>-<see href="https://mathworld.wolfram.com/Matrix.html">Matrices</see> on Wolfram MathWorld<br/>-<see href="https://en.wikipedia.org/wiki/Matrix_(mathematics)">Matrix</see> on Wikipedia<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APITutorialAdding_2D_content_to_a_WebGL_context>
<WebGL_APITutorialAnimating_objects_with_WebGL>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APITutorialAnimating_objects_with_WebGL>
<WebGL_APITutorialAnimating_textures_in_WebGL>
<summary>

</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/HTML_video_and_audio">HTML video and audio</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APITutorialAnimating_textures_in_WebGL>
<WebGL_APITutorialCreating_3D_objects_using_WebGL>
<summary>
Let's take our square plane into three dimensions by adding five more faces to create a cube. To do this efficiently, we're going to switch from drawing using the vertices directly by calling the <see cref="WebGLRenderingContext.DrawArrays"/> method to using the vertex array as a table, and referencing individual vertices in that table to define the positions of each face's vertices, by calling <see cref="WebGLRenderingContext.DrawElements"/>.
</summary>
<remarks>
<para>Consider: each face requires four vertices to define it, but each vertex is shared by three faces. We can pass a lot fewer data around by building an array of all 24 vertices, then referring to each vertex by its index into that array instead of moving entire sets of coordinates around. If you wonder why we need 24 vertices, and not just 8, it is because each corner belongs to three faces of different colors, and a single vertex needs to have a single specific color; therefore we will create three copies of each vertex in three different colors, one for each face.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APITutorialCreating_3D_objects_using_WebGL>
<WebGL_APITutorialGetting_started_with_WebGL>
<summary>
<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see> enables web content to use an API based on <see href="https://www.khronos.org/opengles/">OpenGL ES</see> 2.0 to perform 2D and 3D rendering in an HTML <see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"><c>canvas</c></see> in browsers that support it without the use of plug-ins.
</summary>
<remarks>
<para>WebGL programs consist of control code written in JavaScript and shader code (GLSL) that is executed on a computer&amp;apos;s Graphics Processing Unit (GPU). WebGL elements can be mixed with other HTML elements and composited with other parts of the page or page background.</para><para>This article will introduce you to the basics of using WebGL. It&amp;apos;s assumed that you already have an understanding of the mathematics involved in 3D graphics, and this article doesn&amp;apos;t pretend to try to teach you 3D graphics concepts itself.</para><para>The code examples in this tutorial can also be found in the <see href="https://github.com/mdn/dom-examples/tree/main/webgl-examples/tutorial">webgl-examples folder on GitHub</see>.</para><para>It&amp;apos;s worth noting here that this series of articles introduces WebGL itself; however, there are a number of frameworks available that encapsulate WebGL&amp;apos;s capabilities, making it easier to build 3D applications and games, such as <see href="https://threejs.org/">THREE.js</see> and <see href="https://www.babylonjs.com/">BABYLON.js</see>.</para>
<para>-<see href="https://webglfundamentals.org/">WebGL Fundamentals</see><br/>-<see href="https://duriansoftware.com/joe/an-intro-to-modern-opengl.-table-of-contents">An intro to modern OpenGL:</see> A series of nice articles about OpenGL written by Joe Groff, providing a clear introduction to OpenGL from its history to the important graphics pipeline concept, and also includes some examples to demonstrate how OpenGL works. If you have no idea what OpenGL is, this is a good place to start.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APITutorialGetting_started_with_WebGL>
<WebGL_APITutorialLighting_in_WebGL>
<summary>
As should be clear by now, WebGL doesn&amp;apos;t have much built-in knowledge. It just runs two functions you supply — a vertex shader and a fragment shader — and expects you to write creative functions to get the results you want. In other words, if you want lighting you have to calculate it yourself. Fortunately, it&amp;apos;s not all that hard to do, and this article will cover some of the basics.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APITutorialLighting_in_WebGL>
<WebGL_APITutorialUsing_shaders_to_apply_color_in_WebGL>
<summary>
Having created a square plane in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context">previous demonstration</see>, the next obvious step is to add a splash of color to it. We can do this by revising the shaders.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APITutorialUsing_shaders_to_apply_color_in_WebGL>
<WebGL_APITutorialUsing_textures_in_WebGL>
<summary>
Now that our sample program has a rotating 3D cube, let&amp;apos;s map a texture onto it instead of having its faces be solid colors.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APITutorialUsing_textures_in_WebGL>
<WebGL_APITypes>
<summary>
The following types are used in <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see> interfaces.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Types"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APITypes>
<WebGL_APIUsing_Extensions>
<summary>
WebGL, like its sister APIs (OpenGL and OpenGL ES), supports extensions. A complete list of extensions is available in the <see href="https://registry.khronos.org/webgl/extensions/">khronos webgl extension registry</see>.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>In WebGL, unlike in other GL APIs, extensions are only available if explicitly requested.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetSupportedExtensions"/><br/>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see href="https://webglreport.com/">webglreport.com</see><br/>-<see href="https://web3dsurvey.com/">web3dsurvey.com - WebGL Extension Support Survey</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIUsing_Extensions>
<WebGL_APIWebGL_best_practices>
<summary>
WebGL is a complicated API, and it&amp;apos;s often not obvious what the recommended ways to use it are. This page tackles recommendations across the spectrum of expertise, and not only highlights dos and don&amp;apos;ts, but also details <strong>why</strong>. You can rely on this document to guide your choice of approach, and ensure you&amp;apos;re on the right track no matter what browser or hardware your users run.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIWebGL_best_practices>
<WebGL_APIWebGL_model_view_projection>
<summary>
This article explores how to take data within a <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see> project, and project it into the proper spaces to display it on the screen. It assumes a knowledge of basic matrix math using translation, scale, and rotation matrices. It explains the three core matrices that are typically used when composing a 3D scene: the model, view and projection matrices.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see><br/>-<see href="https://en.wikipedia.org/wiki/3D_projection">3D projection</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGL_APIWebGL_model_view_projection>
</docs><docs>
<WEBGL_color_buffer_float>
<summary>
The <strong><c>WEBGL_color_buffer_float</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and adds the ability to render to 32-bit floating-point color buffers.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL 1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts only. For {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL 2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, use the <see cref="EXT_color_buffer_float"/> extension.</para><para>The <see cref="OES_texture_float"/> extension implicitly enables this extension.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.RenderbufferStorage"/><br/>-<see cref="OES_texture_float"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_color_buffer_float>
</docs><docs>
<WEBGL_compressed_texture_astc>
<summary>
The <strong><c>WEBGL_compressed_texture_astc</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes <see href="https://en.wikipedia.org/wiki/Adaptive_Scalable_Texture_Compression">Adaptive Scalable Texture Compression</see> (ASTC) compressed texture formats to WebGL.
</summary>
<remarks>
<para>For more information, see the article <see href="https://developer.nvidia.com/astc-texture-compression-for-game-assets">Using ASTC Texture Compression for Game Assets</see> by NVIDIA.</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>ASTC compression is typically available on Mali ARM GPUs, Intel GPUs, and NVIDIA Tegra chips.</para><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see href="https://developer.nvidia.com/astc-texture-compression-for-game-assets">Using ASTC Texture Compression for Game Assets</see><br/>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.CompressedTexImage2D"/><br/>-<see cref="WebGLRenderingContext.CompressedTexSubImage2D"/><br/>-<see cref="WebGLRenderingContext.GetParameter"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_compressed_texture_astc>
<WEBGL_compressed_texture_astcGetSupportedProfiles>
<summary>
The <strong><c>WEBGL_compressed_texture_astc.getSupportedProfiles()</c></strong><br/>method returns an array of strings containing the names of the ASTC profiles supported<br/>by the implementation.
</summary>
<remarks>
<para>-<see cref="WEBGL_compressed_texture_astc"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc/getSupportedProfiles"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An <see cref="Array"/> of string elements indicating which ASTC<br/>profiles are supported by the implementation. Currently, this can be:Dynamic range refers to ratio between the brightest and darkest parts of the scene. Low<br/>dynamic ranges are for example JPEG format images which won&amp;apos;t exceed 255:1, or CRT<br/>monitors which won&amp;apos;t exceed 100:1. An HDR image stores pixel values that span the whole<br/>tonal range of real-world scenes (100,000:1).</returns>
</WEBGL_compressed_texture_astcGetSupportedProfiles>
</docs><docs>
<WEBGL_compressed_texture_etc>
<summary>
The <strong><c>WEBGL_compressed_texture_etc</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes 10 <see href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression">ETC/EAC compressed texture formats</see>.
</summary>
<remarks>
<para>Compressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression">Ericsson Texture Compression – Wikipedia</see><br/>-<see cref="WEBGL_compressed_texture_etc1"/> (ETC1)<br/>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.CompressedTexImage2D"/><br/>-<see cref="WebGLRenderingContext.CompressedTexSubImage2D"/><br/>-<see cref="WebGLRenderingContext.GetParameter"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_compressed_texture_etc>
</docs><docs>
<WEBGL_compressed_texture_etc1>
<summary>
The <strong><c>WEBGL_compressed_texture_etc1</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes the <see href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression">ETC1 compressed texture format</see>.
</summary>
<remarks>
<para>Compressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression">Ericsson Texture Compression – Wikipedia</see><br/>-<see cref="WEBGL_compressed_texture_etc"/> (ETC2 and EAC)<br/>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.CompressedTexImage2D"/><br/>-<see cref="WebGLRenderingContext.GetParameter"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_compressed_texture_etc1>
</docs><docs>
<WEBGL_compressed_texture_pvrtc>
<summary>
The <strong><c>WEBGL_compressed_texture_pvrtc</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes four <see href="https://en.wikipedia.org/wiki/PVRTC">PVRTC compressed texture formats</see>.
</summary>
<remarks>
<para>Compressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>PVRTC is typically only available on mobile devices with PowerVR chipsets.<br/>It is used in all generations of the iPhone, iPod Touch and iPad and supported on certain Android devices that use a PowerVR GPU.</para><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para>On iOS devices, this extension is named <c>WEBKIT_WEBGL_compressed_texture_pvrtc</c>.</para></blockquote>
<para>-<see href="https://en.wikipedia.org/wiki/PVRTC">PVRTC Texture Compression – Wikipedia</see><br/>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.CompressedTexImage2D"/><br/>-<see cref="WebGLRenderingContext.CompressedTexSubImage2D"/><br/>-<see cref="WebGLRenderingContext.GetParameter"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_compressed_texture_pvrtc>
</docs><docs>
<WEBGL_compressed_texture_s3tc>
<summary>
The <strong><c>WEBGL_compressed_texture_s3tc</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes four <see href="https://en.wikipedia.org/wiki/S3_Texture_Compression">S3TC compressed texture formats</see>.
</summary>
<remarks>
<para>Compressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see href="https://www.khronos.org/opengl/wiki/S3_Texture_Compression">S3 Texture Compression – OpenGL wiki</see><br/>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.CompressedTexImage2D"/><br/>-<see cref="WebGLRenderingContext.CompressedTexSubImage2D"/><br/>-<see cref="WebGLRenderingContext.GetParameter"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_compressed_texture_s3tc>
</docs><docs>
<WEBGL_compressed_texture_s3tc_srgb>
<summary>
The <strong><c>WEBGL_compressed_texture_s3tc_srgb</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes four <see href="https://en.wikipedia.org/wiki/S3_Texture_Compression">S3TC compressed texture formats</see> for the sRGB colorspace.
</summary>
<remarks>
<para>Compressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to both {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see href="https://www.khronos.org/opengl/wiki/S3_Texture_Compression#sRGB_and_S3TC">S3 Texture Compression – OpenGL wiki</see><br/>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.CompressedTexImage2D"/><br/>-<see cref="WebGLRenderingContext.CompressedTexSubImage2D"/><br/>-<see cref="WebGLRenderingContext.GetParameter"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_compressed_texture_s3tc_srgb>
</docs><docs>
<WEBGL_debug_renderer_info>
<summary>
The <strong><c>WEBGL_debug_renderer_info</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes two constants with information about the graphics driver for debugging purposes.
</summary>
<remarks>
<para>Depending on the privacy settings of the browser, this extension might only be available to privileged contexts. Generally, the graphics driver information should only be used in edge cases to optimize your WebGL content or to debug GPU problems. The <see cref="WebGLRenderingContext.GetParameter"/> method can help you to detect which features are supported and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext"><c>failIfMajorPerformanceCaveat</c></see> context attribute lets you control if a context should be returned at all, if the performance would be dramatically slow.</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Depending on the privacy settings of the browser, this extension might only be available to privileged contexts or not work at all. In Firefox, if <c>privacy.resistFingerprinting</c> is set to <c>true</c>, this extensions is disabled.</para><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_debug_renderer_info>
</docs><docs>
<WEBGL_debug_shaders>
<summary>
The <strong><c>WEBGL_debug_shaders</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes a method to debug shaders from privileged contexts.
</summary>
<remarks>
<para>This extension is not directly available to websites as the way of how the shader is translated may uncover personally-identifiable information to the web page about the kind of graphics card in the user&amp;apos;s computer.</para><para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Depending on the privacy settings of the browser, this extension might only be available to privileged contexts.</para><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_debug_shaders>
<WEBGL_debug_shadersGetTranslatedShaderSource>
<summary>
The <strong><c>WEBGL_debug_shaders.getTranslatedShaderSource()</c></strong><br/>method is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and allows<br/>you to debug a translated shader.
</summary>
<remarks>
<para>-<see cref="WebGLShader"/><br/>-<see cref="WebGLRenderingContext.CompileShader"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders/getTranslatedShaderSource"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="String"/> containing the translated shader source. An empty string is<br/>returned, if:</returns>
</WEBGL_debug_shadersGetTranslatedShaderSource>
</docs><docs>
<WEBGL_depth_texture>
<summary>
The <strong><c>WEBGL_depth_texture</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and defines 2D depth and depth-stencil textures.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default. The constant in WebGL2 is <c>gl.UNSIGNED_INT_24_8</c>.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.TexImage2D"/><br/>-<see cref="WebGLRenderingContext.FramebufferTexture2D"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_depth_texture>
</docs><docs>
<WEBGL_draw_buffers>
<summary>
The <strong><c>WEBGL_draw_buffers</c></strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and enables a fragment shader to write to several textures, which is useful for <see href="https://hacks.mozilla.org/2014/01/webgl-deferred-shading/">deferred shading</see>, for example.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is only available to {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts. In {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}}, the functionality of this extension is available on the WebGL2 context by default. In WebGL 2, the constants are available without the &amp;quot;WEBGL&amp;quot; suffix and the new GLSL built-ins require GLSL <c>#version 300 es</c>.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGL2RenderingContext.DrawBuffers"/><br/>-<see href="https://hacks.mozilla.org/2014/01/webgl-deferred-shading/">WebGL deferred shading - Mozilla Hacks blog</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_draw_buffers>
<WEBGL_draw_buffersDrawBuffersWEBGL>
<summary>
The <strong><c>WEBGL_draw_buffers.drawBuffersWEBGL()</c></strong> method is part<br/>of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and allows you to define<br/>the draw buffers to which all fragment colors are written.
</summary>
<remarks>
<para>This method is part of the <see cref="WEBGL_draw_buffers"/> extension.</para><blockquote class="NOTE"><h5>NOTE</h5><para>When using <see cref="WebGL2RenderingContext"/>,<br/>this method is available as <see cref="WebGL2RenderingContext.DrawBuffers"/><br/>by default and the constants are named <c>gl.COLOR_ATTACHMENT1</c> etc. without the &amp;quot;WEBGL&amp;quot; suffix.</para></blockquote>
<para>-<see cref="WEBGL_draw_buffers"/><br/>-<see cref="WebGLRenderingContext.GetExtension"/><br/>-<see cref="WebGLRenderingContext.FramebufferRenderbuffer"/><br/>-<see cref="WebGLRenderingContext.FramebufferTexture2D"/><br/>-<see cref="WebGLRenderingContext.GetFramebufferAttachmentParameter"/><br/>-<see cref="WebGLRenderingContext.GetParameter"/><br/>-<see href="https://hacks.mozilla.org/2014/01/webgl-deferred-shading/">WebGL deferred shading - Mozilla Hacks blog</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WEBGL_draw_buffersDrawBuffersWEBGL>
</docs><docs>
<WEBGL_lose_context>
<summary>
The <strong>WEBGL_lose_context</strong> extension is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and exposes functions to simulate losing and restoring a <see cref="WebGLRenderingContext"/>.
</summary>
<remarks>
<para>WebGL extensions are available using the <see cref="WebGLRenderingContext.GetExtension"/> method. For more information, see also <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions">Using Extensions</see> in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial">WebGL tutorial</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to both, {{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and {{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.IsContextLost"/><br/>-Events: <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextlost_event"><c>webglcontextlost</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextrestored_event"><c>webglcontextrestored</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextcreationerror_event"><c>webglcontextcreationerror</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_lose_context>
<WEBGL_lose_contextLoseContext>
<summary>
The <strong>WEBGL_lose_context.loseContext()</strong> method is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and allows you to simulate losing<br/>the context of a <see cref="WebGLRenderingContext"/> context.
</summary>
<remarks>
<para>It triggers the steps described in the WebGL specification for handling context lost.<br/>The context will remain lost until <see cref="WEBGL_lose_context.RestoreContext"/> is<br/>called.</para>
<para>-<see cref="WebGLRenderingContext.IsContextLost"/><br/>-Events:<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextlost_event"><c>webglcontextlost</c></see>,<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextrestored_event"><c>webglcontextrestored</c></see>,<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextcreationerror_event"><c>webglcontextcreationerror</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/loseContext"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WEBGL_lose_contextLoseContext>
<WEBGL_lose_contextRestoreContext>
<summary>
The <strong>WEBGL_lose_context.restoreContext()</strong> method is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and allows you to simulate<br/>restoring the context of a <see cref="WebGLRenderingContext"/> object.
</summary>
<remarks>
<para>-<see cref="WebGLRenderingContext.IsContextLost"/><br/>-Events:<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextlost_event"><c>webglcontextlost</c></see>,<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextrestored_event"><c>webglcontextrestored</c></see>,<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextcreationerror_event"><c>webglcontextcreationerror</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/restoreContext"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WEBGL_lose_contextRestoreContext>
</docs><docs>
<WEBGL_multi_draw>
<summary>
The <strong><c>WEBGL_multi_draw</c></strong> extension is part of the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> and allows to render more<br/>than one primitive with a single function call. This can improve a WebGL application&amp;apos;s performance<br/>as it reduces binding costs in the renderer and speeds up GPU thread time with uniform data.
</summary>
<remarks>
<para>When this extension is enabled:</para><blockquote class="NOTE"><h5>NOTE</h5><para>This extension is available to both,<br/>{{domxref(&amp;quot;WebGLRenderingContext&amp;quot;, &amp;quot;WebGL 1&amp;quot;, &amp;quot;&amp;quot;, 1)}} and<br/>{{domxref(&amp;quot;WebGL2RenderingContext&amp;quot;, &amp;quot;WebGL 2&amp;quot;, &amp;quot;&amp;quot;, 1)}} contexts.</para><para>In shader code, the directive <c>#extension GL_ANGLE_multi_draw</c><br/>needs to be called to enable the extension.</para><para>This extension enables the <see cref="ANGLE_instanced_arrays"/> extension implicitly.</para></blockquote>
<para>-<see cref="WebGLRenderingContext.DrawArrays"/><br/>-<see cref="WebGLRenderingContext.DrawElements"/><br/>-<see cref="ANGLE_instanced_arrays.DrawArraysInstancedANGLE"/> or<br/>in WebGL 2: <see cref="WebGL2RenderingContext.DrawArraysInstanced"/><br/>-<see cref="ANGLE_instanced_arrays.DrawElementsInstancedANGLE"/> or<br/>in WebGL 2: <see cref="WebGL2RenderingContext.DrawElementsInstanced"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WEBGL_multi_draw>
<WEBGL_multi_drawMultiDrawArraysInstancedWEBGL>
<summary>
The <strong><c>WEBGL_multi_draw.multiDrawArraysInstancedWEBGL()</c></strong><br/>method of the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> renders multiple primitives from<br/>array data. It is<br/>identical to multiple calls to the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced"><c>gl.drawArraysInstanced()</c></see><br/>method.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawArrays"><c>WebGLRenderingContext.drawArrays()</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced"><c>WebGL2RenderingContext.drawArraysInstanced()</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None.</returns>
</WEBGL_multi_drawMultiDrawArraysInstancedWEBGL>
<WEBGL_multi_drawMultiDrawArraysWEBGL>
<summary>
The <strong><c>WEBGL_multi_draw.multiDrawArraysWEBGL()</c></strong> method of the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> renders multiple primitives from<br/>array data. It is<br/>identical to multiple calls to the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawArrays"><c>gl.drawArrays()</c></see><br/>method.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawArrays"><c>WebGLRenderingContext.drawArrays()</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced"><c>WebGL2RenderingContext.drawArraysInstanced()</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None.</returns>
</WEBGL_multi_drawMultiDrawArraysWEBGL>
<WEBGL_multi_drawMultiDrawElementsInstancedWEBGL>
<summary>
The <strong><c>WEBGL_multi_draw.multiDrawElementsInstancedWEBGL()</c></strong> method of<br/>the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> renders multiple primitives from<br/>array data. It is<br/>identical to multiple calls to the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced"><c>gl.drawElementsInstanced()</c></see><br/>method.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements"><c>WebGLRenderingContext.drawElements()</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced"><c>WebGL2RenderingContext.drawElementsInstanced()</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None.</returns>
</WEBGL_multi_drawMultiDrawElementsInstancedWEBGL>
<WEBGL_multi_drawMultiDrawElementsWEBGL>
<summary>
The <strong><c>WEBGL_multi_draw.multiDrawElementsWEBGL()</c></strong> method of<br/>the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see> renders multiple primitives from<br/>array data. It is<br/>identical to multiple calls to the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements"><c>gl.drawElements()</c></see><br/>method.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements"><c>WebGLRenderingContext.drawElements()</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced"><c>WebGL2RenderingContext.drawElementsInstanced()</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None.</returns>
</WEBGL_multi_drawMultiDrawElementsWEBGL>
</docs><docs>
<WebGPU_API>
<summary>
The <strong>WebGPU API</strong> enables web developers to use the underlying system&amp;apos;s GPU (Graphics Processing Unit) to carry out high-performance computations and draw complex images that can be rendered in the browser.
</summary>
<remarks>
<para>WebGPU is the successor to {{domxref(&amp;quot;WebGL_API&amp;quot;, &amp;quot;WebGL&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}, providing better compatibility with modern GPUs, support for general-purpose GPU computations, faster operations, and access to more advanced GPU features.</para>
<para>-<see href="https://toji.dev/webgpu-best-practices/">WebGPU best practices</see><br/>-<see href="https://gpuweb.github.io/gpuweb/explainer/">WebGPU explainer</see><br/>-<see href="https://surma.dev/things/webgpu/">WebGPU — All of the cores, none of the canvas</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebGPU_API>
</docs><docs>
<WebHID_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> A Human Interface Device (HID) is a type of device that takes input from or provides output to humans. It also refers to the HID protocol, a standard for bi-directional communication between a host and a device that is designed to simplify the installation procedure. The HID protocol was originally developed for USB devices but has since been implemented over many other protocols, including Bluetooth.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebHID_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebHID_API>
</docs><docs>
<WebOTP_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>WebOTP API</strong> provides a streamlined user experience for web apps to verify that a phone number belongs to a user when using it as a sign-in factor. WebOTP is an extension of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Credential_Management_API">Credential Management API</see>.
</summary>
<remarks>
<para>The verification is done via a two-step process:</para>
<para>-<see href="https://developer.chrome.com/docs/identity/web-apis/web-otp">Verify phone numbers on the web with WebOTP</see> on developer.chrome.com (2023)<br/>-<see href="https://web.dev/articles/web-otp-iframe">Fill OTP forms within cross-origin iframes with WebOTP API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebOTP_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebOTP_API>
</docs><docs>
<WebRTC_API>
<summary>
<strong>WebRTC</strong> (Web Real-Time Communication) is a technology that enables Web applications and sites to capture and optionally stream audio and/or video media, as well as to exchange arbitrary data between browsers without requiring an intermediary. The set of standards that comprise WebRTC makes it possible to share data and perform teleconferencing peer-to-peer, without requiring that the user install plug-ins or any other third-party software.
</summary>
<remarks>
<para>WebRTC consists of several interrelated APIs and protocols which work together to achieve this. The documentation you&amp;apos;ll find here will help you understand the fundamentals of WebRTC, how to set up and use both data and media connections, and more.</para>
<para>-<see cref="MediaDevices"/><br/>-<see cref="MediaStreamEvent"/><br/>-<see cref="MediaStreamTrack"/><br/>-<see cref="MessageEvent"/><br/>-<see cref="MediaStream"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see><br/>-<see href="https://hacks.mozilla.org/2015/06/firefox-multistream-and-renegotiation-for-jitsi-videobridge/">Firefox multistream and renegotiation for Jitsi Videobridge</see><br/>-<see href="https://hacks.mozilla.org/2015/04/peering-through-the-webrtc-fog-with-socketpeer/">Peering Through the WebRTC Fog with SocketPeer</see><br/>-<see href="https://hacks.mozilla.org/2014/04/inside-the-party-bus-building-a-web-app-with-multiple-live-video-streams-interactive-graphics/">Inside the Party Bus: Building a Web App with Multiple Live Video Streams + Interactive Graphics</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Media">Web media technologies</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_API>
<WebRTC_APIBuild_a_phone_with_peerjs>
<summary>
One of WebRTC&amp;apos;s main issues is that it is pretty complicated to use and develop with — handling the signalling service and knowing when to call the right endpoint can get confusing. But there is some good news; <see href="https://peerjs.com/">PeerJS</see> is a WebRTC framework that abstracts away all of the ice and signalling logic so that you can focus on the functionality of your application. There are two parts to PeerJS, the client-side framework and the server.
</summary>
<remarks>
<para>In this series of articles we will create a simple phone application using PeerJS. We&amp;apos;ll be using both the server and the client-side framework, but most of our work will be involved with handling the client-side code.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIBuild_a_phone_with_peerjs>
<WebRTC_APIBuild_a_phone_with_peerjsBuild_the_server>
<summary>
In this article we&amp;apos;ll set up the server for our phone app. The server file will look like a regular Express server file with one difference, the Peer server.
</summary>
<remarks>
<para>If you want to learn more about Peer.js, check out the <see href="https://github.com/peers/peerjs-server">Peer.js Server repo on GitHub</see>.</para><para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Build_the_server"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIBuild_a_phone_with_peerjsBuild_the_server>
<WebRTC_APIBuild_a_phone_with_peerjsConnect_peers>
<summary>
In the last article we set up our server, but it doesn&amp;apos;t do anything yet because we are not serving anything. This is the part you&amp;apos;ve been waiting for — actually creating the client-side peer connection and call logic. This is going to be an involved process, but we&amp;apos;ve split it into numerous subsections so you can tackle the different parts in easy bite-sized chunks.
</summary>
<remarks>
<para>This looks very similar to the peer server we created in the last step; this is the client-side portion. In order for the browser to connect to the running peer server, we need to tell it how; this is what the above line does.</para><para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIBuild_a_phone_with_peerjsConnect_peers>
<WebRTC_APIBuild_a_phone_with_peerjsConnect_peersAnswer_a_call>
<summary>
Now our users can make a call, but they can&amp;apos;t answer one. Let&amp;apos;s add the next piece of the puzzle so that users can answer calls made to them.
</summary>
<remarks>
<para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Answer_a_call"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIBuild_a_phone_with_peerjsConnect_peersAnswer_a_call>
<WebRTC_APIBuild_a_phone_with_peerjsConnect_peersCreate_a_peer_connection>
<summary>
Next, you want to ensure your users have a way of connecting with their peers. In order to connect two peers, you&amp;apos;ll need the peer ID for one of them.
</summary>
<remarks>
<para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Create_a_peer_connection"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIBuild_a_phone_with_peerjsConnect_peersCreate_a_peer_connection>
<WebRTC_APIBuild_a_phone_with_peerjsConnect_peersCreating_a_call>
<summary>
Exciting times — now you&amp;apos;re going to give your users the ability to create calls.
</summary>
<remarks>
<para>This is all working so far, but we need to give the other browser the chance to answer or decline the call We&amp;apos;ll do that next.</para><para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Creating_a_call"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIBuild_a_phone_with_peerjsConnect_peersCreating_a_call>
<WebRTC_APIBuild_a_phone_with_peerjsConnect_peersEnd_a_call>
<summary>
The last thing you want to do is ensure your callers have a way of ending a call.<br/>The most graceful way of doing this is to close the connection using the <c>close()</c> function, which you can do in an event listener for the hang up button.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>The <c>on(&amp;apos;close&amp;apos;)</c> event that is called on the <c>conn</c> variable isn&amp;apos;t available in Firefox yet; this just means that in Firefox each caller will have to hang up individually.</para></blockquote><blockquote class="WARNING"><h5>WARNING</h5><para>The way we&amp;apos;ve currently coded things means that when a connection is closed, both browsers will be updated <strong>only</strong> if the person who started the call presses &amp;quot;Hang up&amp;quot; first. If the person who answered the call clicks &amp;quot;Hang up&amp;quot; first, the other caller will also have to click &amp;quot;Hang up&amp;quot; to see the correct HTML.</para></blockquote><para>Now we&amp;apos;re finished with the project!<br/>Next, you could <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/deployment">deploy it to a hosting provider that supports Node.js projects</see>.</para>
<para>-<see href="https://peerjs.com/">PeerJS</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC</see><br/>-<see href="https://github.com/peers/peerjs-server">PeerJS Server</see><br/>-<see href="https://www.youtube.com/watch?v=OOrBcpwelPY">A similar video tutorial with video</see><br/>-<see href="https://github.com/SamsungInternet/WebPhone/tree/master/tutorial">The code tutorial</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/End_a_call"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIBuild_a_phone_with_peerjsConnect_peersEnd_a_call>
<WebRTC_APIBuild_a_phone_with_peerjsConnect_peersGet_microphone_permission>
<summary>
After you&amp;apos;ve created the peer, you&amp;apos;ll want to get the browser&amp;apos;s permission to access the microphone. We&amp;apos;ll be using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia"><c>getUserMedia()</c></see> method on the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices"><c>navigator.mediaDevices</c></see> object.<br/>The <c>getUserMedia()</c> endpoint takes a <c>constraints</c> object that specifies which permissions are needed. <c>getUserMedia()</c> is a promise which, when successfully resolved, returns a <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream"><c>MediaStream</c></see> object. In our case this is going to contain the audio from our stream. If the promise isn&amp;apos;t successfully resolved, you&amp;apos;ll want to catch and display the error.
</summary>
<remarks>
<para>This what it should all look like together:</para><para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Get_microphone_permission"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIBuild_a_phone_with_peerjsConnect_peersGet_microphone_permission>
<WebRTC_APIBuild_a_phone_with_peerjsConnect_peersShow_hide_html>
<summary>
Alright, so you&amp;apos;ve got the microphone permissions set up. The next step is to make sure each user knows what their peer ID is so that they can make connections. The peerJS framework gives us a bunch of event listeners we can call on the peer we created earlier on.
</summary>
<remarks>
<para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Show_hide_html"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIBuild_a_phone_with_peerjsConnect_peersShow_hide_html>
<WebRTC_APIBuild_a_phone_with_peerjsSetup>
<summary>
So let&amp;apos;s get started by setting up the basis for our WebRTC-powered phone app.
</summary>
<remarks>
<para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Setup"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIBuild_a_phone_with_peerjsSetup>
<WebRTC_APIConnectivity>
<summary>
This article describes how the various WebRTC-related protocols interact with one another in order to create a connection and transfer data and/or media among peers.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This page needs heavy rewriting for structural integrity and content completeness. Lots of info here is good but the organization is a mess since this is sort of a dumping ground right now.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Connectivity"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIConnectivity>
<WebRTC_APIIntro_to_RTP>
<summary>
The <strong>Real-time Transport Protocol</strong> (<strong>RTP</strong>), defined in {{RFC(3550)}}, is an IETF standard protocol to enable real-time connectivity for exchanging data that needs real-time priority. This article provides an overview of what RTP is and how it functions in the context of WebRTC.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>WebRTC actually uses <strong>SRTP</strong> (Secure Real-time Transport Protocol) to ensure that the exchanged data is secure and authenticated as appropriate.</para></blockquote><para>Keeping latency to a minimum is especially important for WebRTC, since face-to-face communication needs to be performed with as little <see href="https://developer.mozilla.org/en-US/docs/Glossary/latency">latency</see> as possible. The more time lag there is between one user saying something and another hearing it, the more likely there is to be episodes of cross-talking and other forms of confusion.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Connectivity">WebRTC connectivity</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols">Introduction to WebRTC protocols</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Session_lifetime">Lifetime of a WebRTC session</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Intro_to_RTP"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIIntro_to_RTP>
<WebRTC_APIPerfect_negotiation>
<summary>
This article introduces WebRTC <strong>perfect negotiation</strong>, describing how it works and why it&amp;apos;s the recommended way to negotiate a WebRTC connection between peers, and provides sample code to demonstrate the technique.
</summary>
<remarks>
<para>Because <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC</see> doesn&amp;apos;t mandate a specific transport mechanism for signaling during the negotiation of a new peer connection, it&amp;apos;s highly flexible. However, despite that flexibility in transport and communication of signaling messages, there&amp;apos;s still a recommended design pattern you should follow when possible, known as perfect negotiation.</para><para>After the first deployments of WebRTC-capable browsers, it was realized that parts of the negotiation process were more complicated than they needed to be for typical use cases. This was due to a small number of issues with the API and some potential race conditions that needed to be prevented. These issues have since been addressed, letting us simplify our WebRTC negotiation significantly. The perfect negotiation pattern is an example of the ways in which negotiation have improved since the early days of WebRTC.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Session_lifetime">Lifetime of a WebRTC session</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIPerfect_negotiation>
<WebRTC_APIProtocols>
<summary>
This article introduces the protocols on top of which the WebRTC API is built.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIProtocols>
<WebRTC_APISession_lifetime>
<summary>
WebRTC lets you build peer-to-peer communication of arbitrary data, audio, or video—or any combination thereof—into a browser application. In this article, we&amp;apos;ll look at the lifetime of a WebRTC session, from establishing the connection all the way through closing the connection when it&amp;apos;s no longer needed.
</summary>
<remarks>
<para>This article doesn&amp;apos;t get into details of the actual APIs involved in establishing and handling a WebRTC connection; it reviews the process in general with some information about why each step is required. See <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling">Signaling and video calling</see> for an actual example with a step-by-step explanation of what the code does.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This page is currently under construction, and some of the content will move to other pages as the WebRTC guide material is built out. Pardon our dust!</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Session_lifetime"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APISession_lifetime>
<WebRTC_APISignaling_and_video_calling>
<summary>
<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC</see> allows real-time, peer-to-peer, media exchange between two devices. A connection is established through a discovery and negotiation process called <strong>signaling</strong>. This tutorial will guide you through building a two-way video-call.
</summary>
<remarks>
<para><see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC</see> is a fully peer-to-peer technology for the real-time exchange of audio, video, and data, with one central caveat. A form of discovery and media format negotiation must take place, <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Session_lifetime#establishing_the_connection">as discussed elsewhere</see>, in order for two devices on different networks to locate one another. This process is called <strong>signaling</strong> and involves both devices connecting to a third, mutually agreed-upon server. Through this third server, the two devices can locate one another, and exchange negotiation messages.</para><para>In this article, we will further enhance the to support opening a two-way video call between users. You can <see href="https://webrtc-from-chat.onrender.com">try out this example on Render</see> to experiment with it as well.<br/>You can also <see href="https://github.com/bsmth/examples/tree/main/webrtc-from-chat">look at the full project</see> on GitHub.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Media">Web media technologies</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Media/Guides/Formats">Guide to media types and formats on the web</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capabilities_API">Media Capabilities API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API">MediaStream Recording API</see><br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation">Perfect Negotiation</see> pattern<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APISignaling_and_video_calling>
<WebRTC_APISimple_RTCDataChannel_sample>
<summary>
The <see cref="RTCDataChannel"/> interface is a feature of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC API</see> which lets you open a channel between two peers over which you may send and receive arbitrary data. The API is intentionally similar to the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">WebSocket API</see>, so that the same programming model can be used for each.
</summary>
<remarks>
<para>In this example, we will open an <see cref="RTCDataChannel"/> connection linking two elements on the same page. While that's obviously a contrived scenario, it's useful for demonstrating the flow of connecting two peers. We'll cover the mechanics of accomplishing the connection and transmitting and receiving data, but we will save the bits about locating and linking to a remote computer for another example.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling">Signaling and Video Calling</see>.<br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation">Perfect Negotiation</see> pattern.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APISimple_RTCDataChannel_sample>
<WebRTC_APIUsing_data_channels>
<summary>
In this guide, we&amp;apos;ll examine how to add a data channel to a peer connection, which can then be used to securely exchange arbitrary data; that is, any kind of data we wish, in any format we choose.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Since all WebRTC components are required to use encryption, any data transmitted on an <c>RTCDataChannel</c> is automatically secured using Datagram Transport Layer Security (<strong>DTLS</strong>). See <see href="https://developer.mozilla.org#security">Security</see> below for more information.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_data_channels"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIUsing_data_channels>
<WebRTC_APIUsing_DTMF>
<summary>
In order to more fully support audio/video conferencing, <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC</see> supports sending {{Glossary("DTMF")}} to the remote peer on an <see cref="RTCPeerConnection"/>. This article offers a brief high-level overview of how DTMF works over WebRTC, then provides a guide for everyday developers about how to send DTMF over an <c>RTCPeerConnection</c>. The DTMF system is often referred to as &amp;quot;touch tone,&amp;quot; after an old trade name for the system.
</summary>
<remarks>
<para>WebRTC doesn&amp;apos;t send DTMF codes as audio data. Instead, they&amp;apos;re sent out-of-band, as RTP payloads. Note, however, that although it&amp;apos;s possible to <strong>send</strong> DTMF using WebRTC, there is currently no way to detect or receive <strong>incoming</strong> DTMF. WebRTC currently ignores these payloads; this is because WebRTC&amp;apos;s DTMF support is primarily intended for use with legacy telephone services that rely on DTMF tones to perform tasks such as:</para><blockquote class="NOTE"><h5>NOTE</h5><para>While the DTMF is not sent to the remote peer as audio, browsers may choose to play the corresponding tone to the local user as part of their user experience, since users are typically used to hearing their phone play the tones audibly.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Session_lifetime">Lifetime of a WebRTC session</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling">Signaling and video calling</see> (a tutorial and example which explains the signaling process in more detail)<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols">Introduction to WebRTC protocols</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_DTMF"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIUsing_DTMF>
<WebRTC_APIUsing_Encoded_Transforms>
<summary>
WebRTC Encoded Transforms provide a mechanism to inject a high performance <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Stream API</see> for modifying encoded video and audio frame into the incoming and outgoing WebRTC pipelines.<br/>This enables use cases such as end-to-end encryption of encoded frames by third-party code.
</summary>
<remarks>
<para>The API defines both main thread and worker side objects.<br/>The main-thread interface is a <see cref="RTCRtpScriptTransform"/> instance, which on construction specifies the <see cref="Worker"/> that is to implement the transformer code.<br/>The transform running in the worker is inserted into the incoming or outgoing WebRTC pipeline by adding the <c>RTCRtpScriptTransform</c> to <see cref="RTCRtpReceiver.Transform"/> or <see cref="RTCRtpSender.Transform"/>, respectively.</para><para>A counterpart <see cref="RTCRtpScriptTransformer"/> object is created in the worker thread, which has a <see cref="ReadableStream"/> <c>readable</c> property, a <see cref="WritableStream"/> <c>writable</c> property, and an <c>options</c> object passed from the associated <see cref="RTCRtpScriptTransform"/> constructor.<br/>Encoded video frames (<see cref="RTCEncodedVideoFrame"/>) or audio frames (<see cref="RTCEncodedAudioFrame"/>) from the WebRTC pipeline are enqueued on <c>readable</c> for processing.</para><para>The <c>RTCRtpScriptTransformer</c> is made available to code as the <c>transformer</c> property of the <see cref="DedicatedWorkerGlobalScopertctransform"/> event, which is fired at the worker global scope whenever an encoded frame is enqueued for processing (and initially on construction of the corresponding <see cref="RTCRtpScriptTransform"/>).<br/>The worker code must implement a handler for the event that reads encoded frames from <c>transformer.readable</c>, modifies them as needed, and writes them to <c>transformer.writable</c> in the same order and without any duplication.</para><para>While the interface doesn&amp;apos;t place any other restrictions on the implementation, a natural way to transform the frames is to create a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Concepts#pipe_chains">pipe chain</see> that sends frames enqueued on the <c>event.transformer.readable</c> stream through an <see cref="TransformStream"/> to the <c>event.transformer.writable</c> stream.<br/>We can use the <c>event.transformer.options</c> property to configure any transform code that depends on whether the transform is enqueuing incoming frames from the packetizer or outgoing frames from a codec.</para><para>The <see cref="RTCRtpScriptTransformer"/> interface also provides methods that can be used when sending encoded video to get the codec to generate a "key" frame, and when receiving video to request that a new key frame be sent.<br/>These may be useful to allow a recipient to start viewing the video more quickly, if (for example) they join a conference call when delta frames are being sent.</para><para>The following examples provide more specific examples of how to use the framework using a <see cref="TransformStream"/> based implementation.</para>
<para>-<see cref="RTCRtpScriptTransform"/><br/>-<see cref="RTCRtpReceiver.Transform"/><br/>-<see cref="RTCRtpSender.Transform"/><br/>-<see cref="DedicatedWorkerGlobalScope.Rtctransform"/> event<br/>-<see cref="RTCTransformEvent"/><br/>-<see cref="RTCRtpScriptTransformer"/><br/>-<see cref="RTCEncodedVideoFrame"/><br/>-<see cref="RTCEncodedAudioFrame"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_Encoded_Transforms"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebRTC_APIUsing_Encoded_Transforms>
</docs><docs>
<WebSockets_API>
<summary>
The <strong>WebSocket API</strong> makes it possible to open a two-way interactive communication session between the user&amp;apos;s browser and a server. With this API, you can send messages to a server and receive responses without having to poll the server for a reply.
</summary>
<remarks>
<para>The WebSocket API provides two alternative mechanisms for creating and using web socket connections: the <see cref="WebSocket"/> interface and the <see cref="WebSocketStream"/> interface.</para><para>Additionally, the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebTransport_API">WebTransport API</see> is expected to replace the WebSocket API for many applications. WebTransport is a versatile, low-level API that provides backpressure and many other features not supported by either <c>WebSocket</c> or <c>WebSocketStream</c>, such as unidirectional streams, out-of-order delivery, and unreliable data transmission via datagrams. WebTransport is more complex to use than WebSockets and its cross-browser support is not as wide, but it enables the implementation of sophisticated solutions. If standard WebSocket connections are a good fit for your use case and you need wide browser compatibility, you should employ the WebSockets API to get up and running quickly. However, if your application requires a non-standard custom solution, then you should use the WebTransport API.</para><blockquote class="NOTE"><h5>NOTE</h5><para>While a WebSocket connection is functionally somewhat similar to standard Unix-style sockets, they are not related.</para></blockquote>
<para>-<see href="https://datatracker.ietf.org/doc/html/rfc6455">RFC 6455 — The WebSocket Protocol</see><br/>-<see href="https://websockets.spec.whatwg.org/">WebSocket API Specification</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">Server-Sent Events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebSockets_API>
<WebSockets_APIUsing_WebSocketStream>
<summary>
The <see cref="WebSocketStream"/> API is a {{jsxref("Promise")}}-based alternative to <see cref="WebSocket"/> for creating and using client-side WebSocket connections. <c>WebSocketStream</c> uses the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Streams API</see> to handle receiving and sending messages, meaning that socket connections can take advantage of stream <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Concepts#backpressure">backpressure</see> automatically (no additional action required by the developer), regulating the speed of reading or writing to avoid bottlenecks in the application.
</summary>
<remarks>
<para>This article explains how to use the <see cref="WebSocketStream"/> API to create a WebSocket client.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Using_WebSocketStream"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebSockets_APIUsing_WebSocketStream>
<WebSockets_APIWriting_a_WebSocket_server_in_Java>
<summary>
This example shows you how to create a WebSocket API server using Oracle Java.
</summary>
<remarks>
<para>Although other server-side languages can be used to create a WebSocket server, this example uses Oracle Java to simplify the example code.</para><para>This server conforms to <see href="https://datatracker.ietf.org/doc/html/rfc6455">RFC 6455</see>, so it only handles connections from Chrome version 16, Firefox 11, IE 10 and higher.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebSockets_APIWriting_a_WebSocket_server_in_Java>
<WebSockets_APIWriting_a_WebSocket_server_in_JavaScript_Deno>
<summary>
This example shows you how to create a WebSocket API server using Deno, with an accompanying web page.
</summary>
<remarks>
<para>Deno is a JavaScript runtime which supports TypeScript compiling and caching on the fly. Deno has built-in formatter, linter, test runner and more, and also implements many web APIs. By being compliant with the web standards, all Deno-specific APIs are implemented under the <c>Deno</c> namespace.</para><para>The <see href="https://deno.com/">Deno website</see> provides instructions for installing Deno.</para><para>Deno version at the time of writing: <c>1.36</c>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers">Writing WebSocket servers</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_JavaScript_Deno"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebSockets_APIWriting_a_WebSocket_server_in_JavaScript_Deno>
<WebSockets_APIWriting_WebSocket_client_applications>
<summary>
WebSocket client applications use the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">WebSocket API</see> to communicate with <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers">WebSocket servers</see> using the WebSocket protocol.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>The example snippets in this article are taken from our WebSocket chat client/server sample.<br/><see href="https://github.com/mdn/samples-server/tree/master/s/websocket-chat">See the code</see>.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebSockets_APIWriting_WebSocket_client_applications>
<WebSockets_APIWriting_WebSocket_server>
<summary>
If you would like to use the WebSocket API, it is useful if you have a server. In this article I will show you how to write one in C#. You can do it in any server-side language, but to keep things simple and more understandable, I chose Microsoft&amp;apos;s language.
</summary>
<remarks>
<para>This server conforms to <see href="https://datatracker.ietf.org/doc/html/rfc6455">RFC 6455</see>, so it will only handle connections from Chrome version 16, Firefox 11, IE 10 and over.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_server"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebSockets_APIWriting_WebSocket_server>
<WebSockets_APIWriting_WebSocket_servers>
<summary>
A WebSocket server is nothing more than an application listening on any port of a TCP server that follows a specific protocol. Creating a custom server can seem overwhelming if you have never done it before. It can actually be quite straightforward to implement a basic WebSocket server on your platform of choice, though.
</summary>
<remarks>
<para>A WebSocket server can be written in any server-side programming language that is capable of <see href="https://en.wikipedia.org/wiki/Berkeley_sockets">Berkeley sockets</see>, such as C(++), Python, <see href="https://developer.mozilla.org/en-US/docs/Glossary/PHP">PHP</see>, or <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Node_server_without_framework">server-side JavaScript</see>. This is not a tutorial in any specific language, but serves as a guide to facilitate writing your own server.</para><para>This article assumes you're already familiar with how <see href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP">HTTP</see> works, and that you have a moderate level of programming experience. Depending on language support, knowledge of TCP sockets may be required. The scope of this guide is to present the minimum knowledge you need to write a WebSocket server.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Read the latest official WebSockets specification, <see href="https://datatracker.ietf.org/doc/rfc6455/?include_text=1">RFC 6455</see>. Sections 1 and 4-7 are especially interesting to server implementors. Section 10 discusses security and you should definitely peruse it before exposing your server.</para></blockquote><para>A WebSocket server is explained on a very low level here. WebSocket servers are often separate and specialized servers (for load-balancing or other practical reasons), so you will often use a <see href="https://en.wikipedia.org/wiki/Reverse_proxy">reverse proxy</see> (such as a regular HTTP server) to detect WebSocket handshakes, pre-process them, and send those clients to a real WebSocket server. This means that you don&amp;apos;t have to bloat your server code with cookie and authentication handlers (for example).</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebSockets_APIWriting_WebSocket_servers>
</docs><docs>
<WebTransport_API>
<summary>
The <strong>WebTransport API</strong> provides a modern update to {{domxref(&amp;quot;WebSockets API&amp;quot;, &amp;quot;WebSockets&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}, transmitting data between client and server using <see href="https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/">HTTP/3 Transport</see>. WebTransport provides support for multiple streams, unidirectional streams, and out-of-order delivery. It enables reliable transport via {{domxref(&amp;quot;Streams API&amp;quot;, &amp;quot;streams&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}} and unreliable transport via UDP-like datagrams.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/webtransport">Using WebTransport</see><br/>-{{domxref(&amp;quot;WebSockets API&amp;quot;, &amp;quot;WebSockets API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-{{domxref(&amp;quot;Streams API&amp;quot;, &amp;quot;Streams API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-<see href="https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/">WebTransport over HTTP/3</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebTransport_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebTransport_API>
</docs><docs>
<WebUSB_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>WebUSB API</strong> provides a way to expose non-standard Universal Serial Bus (USB) compatible devices services to the web, to make USB safer and easier to use.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/capabilities/usb">Access USB Devices on the Web</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebUSB_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebUSB_API>
</docs><docs>
<WebVR_API>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> <blockquote class="NOTE"><h5>NOTE</h5>WebVR API is replaced by <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR API</see>. WebVR was never ratified as a standard, was implemented and enabled by default in very few browsers and supported a small number of devices.</blockquote>
</summary>
<remarks>
<para>WebVR provides support for exposing virtual reality devices — for example, head-mounted displays like the Oculus Rift or HTC Vive — to web apps, enabling developers to translate position and movement information from the display into movement around a 3D scene. This has numerous, interesting applications, from virtual product tours and interactive training apps to immersive first-person games.</para>
<para>-<see href="https://aframe.io/">A-Frame</see> — Open source web framework for building VR experiences.<br/>-<see href="https://webvr.info/">webvr.info</see> — Up-to-date information about WebVR, browser setup, and community.<br/>-<see href="https://github.com/MozillaReality/vr-web-examples/tree/master/threejs-vr-boilerplate">threejs-vr-boilerplate</see> — A useful starter template for writing WebVR apps into.<br/>-<see href="https://github.com/immersive-web/webvr-polyfill">Web VR polyfill</see> — JavaScript implementation of WebVR.<br/>-<see href="https://webvr.directory/">WebVR Directory</see> — List of quality WebVR sites.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebVR_API>
<WebVR_APIConcepts>
<summary>
<blockquote class="NOTE"><h5>NOTE</h5>WebVR API is replaced by <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR API</see>. WebVR was never ratified as a standard, was implemented and enabled by default in very few browsers and supported a small number of devices.</blockquote>
</summary>
<remarks>
<para>This article discusses some of the concepts and theory behind virtual reality (VR). If you are a newcomer to the area, it is worthwhile getting an understanding of these topics before you start diving into code.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/Concepts"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebVR_APIConcepts>
<WebVR_APIUsing_the_WebVR_API>
<summary>
<blockquote class="NOTE"><h5>NOTE</h5>WebVR API is replaced by <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR API</see>. WebVR was never ratified as a standard, was implemented and enabled by default in very few browsers and supported a small number of devices.</blockquote>
</summary>
<remarks>
<para>The WebVR API is a fantastic addition to the web developer&amp;apos;s toolkit, allowing WebGL scenes to be presented in virtual reality displays such as the Oculus Rift and HTC Vive. But how do you get started with developing VR apps for the Web? This article will guide you through the basics.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/Using_the_WebVR_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebVR_APIUsing_the_WebVR_API>
<WebVR_APIUsing_VR_controllers_with_WebVR>
<summary>
Many WebVR hardware setups feature controllers that go along with the headset. These can be used in WebVR apps via the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API">Gamepad API</see>, and specifically the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API#experimental_gamepad_extensions">Gamepad Extensions API</see> that adds API features for accessing <see href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose">controller pose</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator">haptic actuators</see>, and more. This article explains the basics.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>WebVR API is replaced by <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR API</see>. WebVR was never ratified as a standard, was implemented and enabled by default in very few browsers and supported a small number of devices.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API">Gamepad API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/Using_the_WebVR_API">Using the WebVR API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Games/Techniques/Controls_Gamepad_API">Implementing controls using the Gamepad API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/Using_VR_controllers_with_WebVR"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebVR_APIUsing_VR_controllers_with_WebVR>
</docs><docs>
<WebVTT_API>
<summary>
<strong>Web Video Text Tracks</strong> (<strong>WebVTT</strong>) are text tracks providing specific text &amp;quot;cues&amp;quot; that are time-aligned with other media, such as video or audio tracks. The <strong>WebVTT API</strong> provides functionality to define and manipulate these text tracks.<br/>The WebVTT API is primarily used for displaying subtitles or captions that overlay with video content, but it has other uses: providing chapter information for easier navigation and generic metadata that needs to be time-aligned with audio or video content.
</summary>
<remarks>
<para>-The CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/::cue"><c>::cue</c> and <c>::cue()</c></see> pseudo-elements<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebVTT_API>
<WebVTT_APIWeb_Video_Text_Tracks_Format>
<summary>
<strong>Web Video Text Tracks Format</strong> (<strong>WebVTT</strong>) is a plain-text file format for displaying timed text tracks that are synchronized with content in <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video">video</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio">audio</see> elements.<br/>These can be used, for example, to add closed captions and subtitle text overlays to a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video">video</see>.
</summary>
<remarks>
<para>The WebVTT files associated with a media element are added using the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track">track</see> element — see <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API#displaying_vtt_content_defined_in_a_file">Displaying VTT content defined in a file</see>.<br/>A media element can be associated with a number of files, each representing different kinds of timed data, such as closed captions, subtitles, or chapter headings, translated into different locales.</para><blockquote class="NOTE"><h5>NOTE</h5><para>WebVTT content can also be created and managed programmatically using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API">WebVTT API</see>.</para></blockquote>
<para>-The CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/::cue"><c>::cue</c> and <c>::cue()</c></see> pseudo-elements<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API/Web_Video_Text_Tracks_Format"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebVTT_APIWeb_Video_Text_Tracks_Format>
</docs><docs>
<WebXR_Device_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> <strong>WebXR</strong> is a group of standards which are used together to support rendering 3D scenes to hardware designed for presenting virtual worlds (<strong>virtual reality</strong>, or <strong>VR</strong>), or for adding graphical imagery to the real world, (<strong>augmented reality</strong>, or <strong>AR</strong>). The <strong>WebXR Device API</strong> implements the core of the WebXR feature set, managing the selection of output devices, render the 3D scene to the chosen device at the appropriate frame rate, and manage motion vectors created using input controllers.
</summary>
<remarks>
<para>WebXR-compatible devices include fully-immersive 3D headsets with motion and orientation tracking, eyeglasses which overlay graphics atop the real-world scene passing through the frames, and handheld mobile phones which augment reality by capturing the world with a camera and augment that scene with computer-generated imagery.</para><para>To accomplish these things, the WebXR Device API provides the following key capabilities:</para><para>At the most basic level, a scene is presented in 3D by computing the perspective to apply to the scene in order to render it from the viewpoint of each of the user&amp;apos;s eyes by computing the position of each eye and rendering the scene from that position, looking in the direction the user is currently facing. Each of these two images is rendered into a single framebuffer, with the left eye&amp;apos;s rendered image on the left and the right eye&amp;apos;s viewpoint rendered into the right half of the buffer. Once both eyes&amp;apos; perspectives on the scene have been rendered, the resulting framebuffer is delivered to the WebXR device to be presented to the user through their headset or other appropriate display device.</para><para>While the older <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see> was designed solely to support Virtual Reality (VR), WebXR provides support for both VR and Augmented Reality (AR) on the web. Support for AR functionality is added by the WebXR Augmented Reality Module.</para><para>A typical XR device can have either 3 or 6 degrees of freedom and might or might not have an external positional sensor.</para><para>The equipment may also include an accelerometer, barometer, or other sensors which are used to sense when the user moves through space, rotates their head, or the like.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Client-side_APIs/Drawing_graphics">Drawing graphics</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</see>: Accelerated 2D and 3D graphics on the web<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas API</see>: 2D drawing for the web<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial">Canvas tutorial</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_API>
<WebXR_Device_APIBounded_reference_spaces>
<summary>
Among the various reference spaces available in the WebXR set of APIs, the <strong><c>bounded-floor</c></strong><strong> reference space</strong> is somewhat unique. Not only is it represented by a unique subclass, <see cref="XRBoundedReferenceSpace"/>, but it's the only one which restricts movement based not upon virtual restrictions but upon limitations imposed by the real world. This article examines bounded reference spaces as represented by <c>XRBoundedReferenceSpace</c>, describing what they are and how they&amp;apos;re used.
</summary>
<remarks>
<para>There are many uses for bounded reference spaces, including projects such as virtual paint studios or 3D construction, modeling, or sculpting systems; training simulations or lesson scenarios; dance or other performance-based games; or the preview of 3D objects in the real world using augmented reality.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR Device API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Geometry">Geometry and reference spaces</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Spatial_tracking">Spatial tracking in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Movement_and_motion">Movement, orientation, and motion</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Inputs">Inputs and input sources</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Gamepads">Supporting gamepads in WebXR applications</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Bounded_reference_spaces"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APIBounded_reference_spaces>
<WebXR_Device_APICameras>
<summary>
The first and most important thing to understand when considering the code to manage point-of-view and cameras in your application is this: <strong>WebXR does not have cameras</strong>. There&amp;apos;s no magic object provided by either the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see> or the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR</see> API that represents the viewer that you can rotate and move around to automatically change what&amp;apos;s seen on the screen. In this guide we show how use <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see> to simulate camera movements without having a camera to move. These techniques can be used in any WebGL (or WebXR) project.
</summary>
<remarks>
<para>Animating 3D graphics is an area of software development that brings together multiple disciplines in computer science, mathematics, art, graphic design, kinematics, anatomy, physiology, physics, and cinematography. Since we don&amp;apos;t have a real camera, we imagine one, reproducing the <strong>effect</strong> of having a camera, without actually having the ability to move the user around the scene.</para><para>There are a few articles about the fundamental math, geometry, and other concepts behind WebGL and WebXR which may be useful to read before or while reading this one, including:</para><para><strong>Ed. note: Most diagrams used in this article to show how the camera moves while performing standard movements were taken from </strong><strong><see href="https://web.archive.org/web/20170525025459/https://filmmakeriq.com/2016/09/the-importance-and-not-so-importance-of-film-terminology/">an article on the FilmmakerIQ website</see></strong><strong>; namely, from </strong><strong><see href="https://filmmakeriq.com/wp-content/uploads/2016/09/Pan-Tilt.png">this image</see></strong><strong> which is found all over the web. We assume due to their frequent reuse that they&amp;apos;re available under a permissive license, ownership is not certain. We hope that it&amp;apos;s freely usable; if not, and you&amp;apos;re the owner, please let us know and we&amp;apos;ll find or produce new diagrams. Or, if you&amp;apos;re happy to let us continue to use the images, please let us know so we can credit you properly!</strong></para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Geometry">Geometry and reference spaces</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection">WebGL model view projection</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web">Matrix math for the web</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Movement_and_motion">Movement, orientation, and motion: A WebXR example</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Cameras"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APICameras>
<WebXR_Device_APIFundamentals>
<summary>
WebXR, with the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR Device API</see> at its core, provides the functionality needed to bring both augmented and virtual reality (AR and VR) to the web. Together, these technologies are referred to as <strong>mixed reality (MR)</strong> or <strong>cross reality (XR)</strong>. Mixed reality is a large and complex subject, with much to learn and many other APIs to bring together to create an engaging experience for users.
</summary>
<remarks>
<para>This guide provides an overview of what WebXR is and how it works, as well as the preliminary foundation needed to start developing augmented and virtual reality experiences for the web.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Fundamentals"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APIFundamentals>
<WebXR_Device_APIGeometry>
<summary>
At a fundamental level, rendering of scenes for <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR</see> presentation in either augmented reality or virtual reality contexts is performed using <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see>, so the two APIs share much of the same design language. However, in order to provide the ability to present scenes in true 3D using XR headsets and other such equipment, WebXR has additional concepts that must be understood.
</summary>
<remarks>
<para>In this article, we introduce the ways in which WebXR expands upon the geometry of WebGL, and how the positions and orientations of objects—both physical and virtual—are described in relation to one another using spaces and, in particular, reference spaces.</para><para>The article <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Spatial_tracking">Spatial tracking in WebXR</see> builds upon the information provided here to cover how the physical position and orientation of the user&amp;apos;s head, as well as potentially other parts of their body such as the hands, are mapped into the digital world, as well as how the relative positions of both physical and virtual objects are tracked as they move around, so that the scene can be properly rendered and composited.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR Device API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL: 2D and 3D rendering for the web</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web">Matrix math for the web</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Geometry"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APIGeometry>
<WebXR_Device_APIInputs>
<summary>
A full WebXR experience isn&amp;apos;t just about showing the user a wholly virtual scene or augmenting reality by adding to or altering the world around them. In order to make an experience that&amp;apos;s fulfilling and engaging, the user needs to be able to interact with it. To that end, WebXR provides support for a variety of kinds of input devices.
</summary>
<remarks>
<para>In this guide, we&amp;apos;ll look at how to use WebXR&amp;apos;s input device management features to determine what input sources are available and how to then monitor those sources for inputs in order to handle user interactivity with your virtual or augmented environment.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Targeting">Targeting and hit detection</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Geometry">Geometry and reference spaces in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Spatial_tracking">Spatial tracking in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Rendering">Rendering and the WebXR frame animation callback</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Cameras">Viewpoints and viewers: Simulating cameras in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Movement_and_motion">Movement, orientation, and motion: A WebXR example</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Inputs"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APIInputs>
<WebXR_Device_APILifecycle>
<summary>
In this guide, we&amp;apos;ll get a birds-eye view of what&amp;apos;s involved in creating and driving a WebXR application, without diving down to the code level in detail. This serves as preparation for the next few articles in these WebXR guides, which cover <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Startup_and_shutdown">starting up and shutting down</see> a WebXR session, <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Geometry">geometry</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Cameras">simulating cameras</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Spatial_tracking">spatial tracking</see>, and more.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Lifecycle"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APILifecycle>
<WebXR_Device_APILighting>
<summary>
Because the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR Device API</see> relies on other technologies—namely, <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see> and frameworks based upon it—to perform all rendering, texturing, and lighting of a scene, the same general lighting concepts apply to WebXR settings or scenes as to any other WebGL-generated display.
</summary>
<remarks>
<para>However, there are issues and details to keep in mind while creating your lighting code, especially for augmented reality (AR) applications. This guide discusses these topics. And while this article provides brief reminders as to how lighting works in general, it is not by any means a tutorial in lighting or a guide to how to create a properly-lit 3D scene.</para>
<para>-<see href="https://github.com/immersive-web/lighting-estimation/blob/main/lighting-estimation-explainer.md">WebXR Lighting Estimation API explainer</see><br/>-<see href="https://github.com/immersive-web/lighting-estimation">WebXR Lighting Estimation API Level 1 specification</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL">Using shaders to apply color in WebGL</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL">Using textures in WebGL</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL">Lighting in WebGL</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders">GLSL Shaders</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Lighting"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APILighting>
<WebXR_Device_APIMovement_and_motion>
<summary>
In this article, we&amp;apos;ll make use of information introduced in the previous articles in our <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR</see> tutorial series to construct an example which animates a rotating cube around which the user can move freely using a VR headset, keyboard, and/or mouse. This will help to solidify your understanding of how the geometry of 3D graphics and VR work, as well as to help ensure you understand the way the functions and data that are used during XR rendering work together.
</summary>
<remarks>
<para><strong>Figure: Screenshot of this example in action</strong><br/><see href="https://developer.mozilla.orgxr-sample.png">Screenshot of example showing a textured cube the user can move around</see></para><para>The core of this example—the spinning, textured, lighted cube—is taken from our WebGL tutorial series; namely, the penultimate article in the series, covering <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL">lighting in WebGL</see>.</para><para>While reading this article and the accompanying source code, it&amp;apos;s helpful to keep in mind that the display for a 3D headset is a single screen, divided in half. The left half of the screen is seen only by the left eye, while the right half is only seen by the right eye. Rendering the scene for immersive presentation requires multiple renders of the scene—once from the perspective of each eye.</para><para>When rendering the left eye, the <see cref="XRWebGLLayer"/> has its <see href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/getViewport">viewport</see> configured to restrict drawing to the left half of the drawing surface. Contrarily, when rendering the right eye, the viewport is set to restrict drawing to the right half of the surface.</para><para>This example demonstrates this by showing the canvas on the screen, even when presenting a scene as an immersive display using an XR device.</para>
<para>-<see href="https://learnwebgl.brown37.net/#">Learn WebGL</see> (includes some great visualizations of the camera and how it relates to the virtual world)<br/>-<see href="https://webglfundamentals.org/">WebGL Fundamentals</see><br/>-<see href="https://learnopengl.com/">Learn OpenGL</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Movement_and_motion"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APIMovement_and_motion>
<WebXR_Device_APIPerformance>
<summary>
WebXR applications involve multiple technologies which can be highly sensitive to performance constraints. As such, you may find yourself needing to make adjustments or compromises to optimize the performance of your WebXR application to be as usable as possible on the broadest assortment of target devices. In this guide, we&amp;apos;ll examine a variety of suggestions and recommendations that will help you make your WebXR app as performant as possible.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Performance"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APIPerformance>
<WebXR_Device_APIPermissions_and_security>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR Device API</see> has several areas of security to contend with, from establishing <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Permissions_Policy">Permissions Policy</see> to ensuring the user intends to use the mixed reality presentation before activating it. Among other things, you need to confirm access to device features such as the microphone and/or camera, get permission to use immersive VR mode (if applicable), and so forth. The variety of hardware and software involved in XR brings multiple APIs and technologies into play. In this guide, we&amp;apos;ll cover how to ensure your app has the permissions it needs to provide a secure and private XR experience.
</summary>
<remarks>
<para>The WebXR Device API is subject to a number of permission and security controls. While not onerous, they are worth being aware of. These mostly revolve around the fully-immersive <c>immersive-vr</c> session mode, but there are things to be aware of when setting up an AR session, as well.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Permissions_and_security"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APIPermissions_and_security>
<WebXR_Device_APIPerspective>
<summary>
Because <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR</see> uses <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</see> to render the views that form the 3D environment displayed using the XR hardware, it&amp;apos;s easy to think that the perspective-related matters are identical to those found in any WebGL project. This is largely true, but there are a few specific topics that need to be revisited and some minor additional guidelines considered in order to ensure that your app looks right and, more importantly, that your 3D world doesn&amp;apos;t cause people to become ill from vertigo or other effects that can be caused when what&amp;apos;s being seen doesn&amp;apos;t match what the brain expects from reality.
</summary>
<remarks>
<para>In this article, we examine scenarios in which the way your project calculates, applies, and thinks about perspective may differ from code written for non-XR applications.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection">WebGL model view projection</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Cameras">Viewpoints and viewers: Simulating cameras in WebXR</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Perspective"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APIPerspective>
<WebXR_Device_APIRendering>
<summary>
Once your WebXR environment has been set up and an <see cref="XRSession"/> created to represent an ongoing XR environment session, you need to provide frames of the scene to the XR device for rendering. This article covers the process of driving the frames of the XR scene to the device in the rendering loop, using the <see cref="XRSession"/> to obtain an <see cref="XRFrame"/> object representing each frame, which is then used to prepare the framebuffer for delivery to the XR device.
</summary>
<remarks>
<para>Before you can render the virtual environment, you need to establish a WebXR session by creating an <see cref="XRSession"/> using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/XRSystem/requestSession"><c>navigator.xr.requestSession()</c></see> method; you also need to associate the session with a framebuffer and perform other setup tasks. These setup tasks are described in the article <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Startup_and_shutdown">Starting up and shutting down a WebXR session</see>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Geometry">Geometry and reference spaces in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Spatial_tracking">Spatial tracking in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Cameras">Viewpoints and viewers: Simulating cameras in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Movement_and_motion">Movement, orientation, and motion: A WebXR example</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Performance">WebXR performance guide</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Rendering"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APIRendering>
<WebXR_Device_APISpatial_tracking>
<summary>
The WebXR APIs used for implementing augmented and virtual reality is designed specifically to provide the ability to insert a human into a virtual environment. To accomplish this, software needs the ability to not only track the locations, orientation, and movements of objects in the virtual world, but the user&amp;apos;s location, orientation, and movement as well. But WebXR goes beyond that by adding the ability to track the location, orientation, and motion of the input devices which generate data used to determine the position and movement of individual parts of the viewer&amp;apos;s body (with appropriate equipment).
</summary>
<remarks>
<para>The location and movement of the user&amp;apos;s headset represent their head&amp;apos;s position and orientation in the virtual environment. Hand controllers represent their hands in the same manner. Other hardware elements can be used similarly to represent other parts of the body, providing additional data to use when simulating the user&amp;apos;s actions in their environment.</para><para>In this guide, we&amp;apos;ll explore how WebXR uses <strong>spaces</strong> and, more specifically, <strong>reference spaces</strong>, to track the positions, orientations, and movements of objects and of the user&amp;apos;s body in the virtual world.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This article presumes that you are familiar with the concepts introduced in <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Geometry">Geometry and reference spaces in WebXR</see>: that is, the basics of 3D coordinate systems, as well as WebXR spaces, reference spaces, and how reference spaces are used to create local coordinate systems for individual objects or movable components within a scene.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web">Matrix math for the web</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Geometry">Geometry and reference spaces in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Rendering">Rendering and the WebXR frame animation callback</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Cameras">Viewpoints and viewers: Simulating cameras in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Movement_and_motion">Movement, orientation, and motion: A WebXR example</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Bounded_reference_spaces">Using bounded reference spaces</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Spatial_tracking"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APISpatial_tracking>
<WebXR_Device_APIStartup_and_shutdown>
<summary>
Assuming you&amp;apos;re already familiar with 3D graphics in general and WebGL in particular, taking that next bold step into mixed reality—the idea of presenting artificial scenery or objects in addition to or in place of the real world—is not overly complicated. Before you can begin to render your augmented or virtual reality scenario, you need to create and set up the WebXR session, and you should know how to shut it down properly as well. You will learn how to do these things in this article.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR Device API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Fundamentals">Fundamentals of WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Spatial_tracking">Spatial tracking in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Cameras">Viewpoints and viewers: Simulating cameras in WebXR</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Bounded_reference_spaces">Using bounded reference spaces</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Inputs">Inputs and input sources</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Startup_and_shutdown"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APIStartup_and_shutdown>
<WebXR_Device_APITargeting>
<summary>

</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_collision_detection">3D collision detection</see><br/>-<see href="https://hacks.mozilla.org/2015/10/html-5-games-3d-collision-detection/">HTML5 games: 3D collision detection</see> (Hacks blog)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Targeting"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebXR_Device_APITargeting>
</docs><docs>
<Web_Animations_API>
<summary>
The <strong>Web Animations API</strong> allows for synchronizing and timing changes to the presentation of a Web page, i.e., animation of DOM elements. It does so by combining two models: the Timing Model and the Animation Model.
</summary>
<remarks>
<para>-CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation">animation</see> shorthand property<br/>-CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline">animation-timeline</see> property<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API">Using the Web Animations API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations/Using_CSS_animations">Using CSS animations</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS animations</see> module<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll-driven_animations">CSS scroll-driven animations</see> module<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Animations_API>
<Web_Animations_APIKeyframe_Formats>
<summary>
<see cref="Element.Animate"/>, <see cref="KeyframeEffect.KeyframeEffect"/>, and <see cref="KeyframeEffect.SetKeyframes"/> all accept objects formatted to represent a set of keyframes. There are several options to this format, which are explained below.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API</see><br/>-<see cref="Element.Animate"/><br/>-<see cref="KeyframeEffect.KeyframeEffect"/><br/>-<see cref="KeyframeEffect.SetKeyframes"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Animations_APIKeyframe_Formats>
<Web_Animations_APITips>
<summary>
CSS animations make it possible to do incredible things with the elements that make up your documents and apps. There are things you might want to do that aren&amp;apos;t obvious and many clever ways to do things that may not be immediately apparent. This article is a collection of tips and tricks we&amp;apos;ve found that will hopefully make your work easier, including how to re-run a completed animation.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Animation/Animation">Animation Interface</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS animations</see> module<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Tips"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Animations_APITips>
<Web_Animations_APIUsing_the_Web_Animations_API>
<summary>
The Web Animations API lets us construct animations and control their playback with JavaScript. This article will start you off in the right direction with fun demos and tutorials featuring Alice in Wonderland.
</summary>
<remarks>
<para>-The <see href="https://codepen.io/collection/nqNJvD">full suite of Alice in Wonderland demos</see> on CodePen for you to play with, fork, and share.<br/>-<see href="https://hacks.mozilla.org/2016/08/animating-like-you-just-dont-care-with-element-animate/">Animating like you just don&amp;apos;t care with Element.animate</see> (2016) Explains the background of the Web Animations API and why it is more performant than other web animation methods.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Animations_APIUsing_the_Web_Animations_API>
<Web_Animations_APIWeb_Animations_API_Concepts>
<summary>
The Web Animations API (WAAPI) provides JavaScript developers access to the browser&amp;apos;s animation engine and describes how animations should be implemented across browsers. This article will introduce you to the important concepts behind the WAAPI, providing you with a theoretical understanding of how it works so you can use it effectively. To learn how to put the API to use, check out its sister article, <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API">Using the Web Animations API</see>.
</summary>
<remarks>
<para>The Web Animations API fills the gap between declarative CSS animations and transitions, and dynamic JavaScript animations. This means we can use it to create and manipulate CSS-like animations that go from one pre-defined state to another, or we can use variables, loops, and callbacks to create interactive animations that adapt and react to changing inputs.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API</see> — main page<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API">Using the Web Animations API</see> — guide<br/>-The <see href="https://codepen.io/collection/nqNJvD">full suite of Alice in Wonderland demos</see> on CodePen for you to play with, fork, and share<br/>-<see href="https://github.com/web-animations/web-animations-js">web-animations-js</see> — the Web Animations API polyfill<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Web_Animations_API_Concepts"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Animations_APIWeb_Animations_API_Concepts>
</docs><docs>
<Web_Audio_API>
<summary>
The Web Audio API provides a powerful and versatile system for controlling audio on the Web, allowing developers to choose audio sources, add effects to audio, create audio visualizations, apply spatial effects (such as panning) and much more.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_API>
<Web_Audio_APIAdvanced_techniques>
<summary>
In this tutorial, we&amp;apos;re going to cover sound creation and modification, as well as timing and scheduling. We will introduce sample loading, envelopes, filters, wavetables, and frequency modulation. If you&amp;apos;re familiar with these terms and looking for an introduction to their application with the Web Audio API, you&amp;apos;ve come to the right place.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>You can find the source code for the demo below on GitHub in the <see href="https://github.com/mdn/webaudio-examples/tree/main/step-sequencer">step-sequencer</see> subdirectory of the MDN <see href="https://github.com/mdn/webaudio-examples">webaudio-examples</see> repo. You can also see the <see href="https://mdn.github.io/webaudio-examples/step-sequencer/">live demo</see>.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Advanced_techniques"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_APIAdvanced_techniques>
<Web_Audio_APIBasic_concepts_behind_Web_Audio_API>
<summary>
This article explains some of the audio theory behind how the features of the Web Audio API work to help you make informed decisions while designing how your app routes audio. If you are not already a sound engineer, it will give you enough background to understand why the Web Audio API works as it does.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_APIBasic_concepts_behind_Web_Audio_API>
<Web_Audio_APIBest_practices>
<summary>
There&amp;apos;s no strict right or wrong way when writing creative code. As long as you consider security, performance, and accessibility, you can adapt to your own style. In this article, we&amp;apos;ll share a number of <strong>best practices</strong> — guidelines, tips, and tricks for working with the Web Audio API.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Best_practices"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_APIBest_practices>
<Web_Audio_APIControlling_multiple_parameters_with_ConstantSourceNode>
<summary>
This article demonstrates how to use a <see cref="ConstantSourceNode"/> to link multiple parameters together so they share the same value, which can be changed by setting the value of the <see cref="ConstantSourceNode.Offset"/> parameter.
</summary>
<remarks>
<para>You may sometimes want multiple audio parameters to be linked so they share the same value while being changed somehow. For example, perhaps you have a set of oscillators, two of which need to share the same configurable volume, or you have a filter applied to specific inputs but not all of them. You could use a loop and change the value of each affected <see cref="AudioParam"/> one at a time. Still, there are two drawbacks to doing it that way: first, that's extra code that, as you're about to see, you don't have to write; and second, that loop uses valuable CPU time on your thread (likely the main thread), and there's a way to offload all that work to the audio rendering thread, which is optimized for this kind of work and may run at a more appropriate priority level than your code.</para><para>The solution is simple, and it involves using an audio node type that, at first glance, doesn't look all that useful: <see cref="ConstantSourceNode"/>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API">Web Audio API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Simple_synth">Simple synth keyboard</see> (example)<br/>-<see cref="OscillatorNode"/><br/>-<see cref="ConstantSourceNode"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Controlling_multiple_parameters_with_ConstantSourceNode"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_APIControlling_multiple_parameters_with_ConstantSourceNode>
<Web_Audio_APISimple_synth>
<summary>
This article presents the code and working demo of a video keyboard you can play using the mouse. The keyboard allows you to switch among the standard waveforms as well as one custom waveform, and you can control the main gain using a volume slider beneath the keyboard. This example makes use of the following Web API interfaces: <see cref="AudioContext"/>, <see cref="OscillatorNode"/>, <see cref="PeriodicWave"/>, and <see cref="GainNode"/>.
</summary>
<remarks>
<para>Because <see cref="OscillatorNode"/> is based on <see cref="AudioScheduledSourceNode"/>, this is to some extent an example for that as well.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API">Web Audio API</see><br/>-<see cref="OscillatorNode"/><br/>-<see cref="GainNode"/><br/>-<see cref="AudioContext"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Simple_synth"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_APISimple_synth>
<Web_Audio_APIUsing_AudioWorklet>
<summary>
This article explains how to create an audio worklet processor and use it in a Web Audio application.
</summary>
<remarks>
<para>When the Web Audio API was first introduced to browsers, it included the ability to use JavaScript code to create custom audio processors that would be invoked to perform real-time audio manipulations. The drawback to <c>ScriptProcessorNode</c> was that it ran on the main thread, thus blocking everything else going on until it completed execution. This was far less than ideal, especially for something that can be as computationally expensive as audio processing.</para><para>Enter <see cref="AudioWorklet"/>. An audio context's audio worklet is a <see cref="Worklet"/> which runs off the main thread, executing audio processing code added to it by calling the context's <see cref="Worklet.AddModule"/> method. Calling <c>addModule()</c> loads the specified JavaScript file, which should contain the implementation of the audio processor. With the processor registered, you can create a new <see cref="AudioWorkletNode"/> which passes the audio through the processor's code when the node is linked into the chain of audio nodes along with any other audio nodes.</para><para>It&amp;apos;s worth noting that because audio processing can often involve substantial computation, your processor may benefit greatly from being built using <see href="https://developer.mozilla.org/en-US/docs/WebAssembly">WebAssembly</see>, which brings near-native or fully native performance to web apps. Implementing your audio processing algorithm using WebAssembly can make it perform markedly better.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API">Web Audio API</see><br/>-<see href="https://developer.chrome.com/blog/audio-worklet/">Enter Audio Worklet</see> (Chrome Developers blog)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_AudioWorklet"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_APIUsing_AudioWorklet>
<Web_Audio_APIUsing_IIR_filters>
<summary>
The <strong><c>IIRFilterNode</c></strong> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API">Web Audio API</see> is an <see cref="AudioNode"/> processor that implements a general <see href="https://en.wikipedia.org/wiki/Infinite_impulse_response">infinite impulse response</see> (IIR) filter; this type of filter can be used to implement tone control devices and graphic equalizers, and the filter response parameters can be specified, so that it can be tuned as needed. This article looks at how to implement one, and use it in a simple example.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_IIR_filters"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_APIUsing_IIR_filters>
<Web_Audio_APIUsing_Web_Audio_API>
<summary>
Let&amp;apos;s take a look at getting started with the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API">Web Audio API</see>. We&amp;apos;ll briefly look at some concepts, then study a simple boombox example that allows us to load an audio track, play and pause it, and change its volume and stereo panning.
</summary>
<remarks>
<para>The Web Audio API does not replace the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio">audio</see> media element, but rather complements it, just like <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas">canvas</see> coexists alongside the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img">img</see> element. Your use case will determine what tools you use to implement audio. If you want to control playback of an audio track, the <c>&amp;lt;audio&amp;gt;</c> media element provides a better, quicker solution than the Web Audio API. If you want to carry out more complex audio processing, as well as playback, the Web Audio API provides much more power and control.</para><para>A powerful feature of the Web Audio API is that it does not have a strict &amp;quot;sound call limitation&amp;quot;. For example, there is no ceiling of 32 or 64 sound calls at one time. Some processors may be capable of playing more than 1,000 simultaneous sounds without stuttering.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_APIUsing_Web_Audio_API>
<Web_Audio_APIVisualizations_with_Web_Audio_API>
<summary>
One of the most interesting features of the Web Audio API is the ability to extract frequency, waveform, and other data from your audio source, which can then be used to create visualizations. This article explains how, and provides a couple of basic use cases.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>You can find working examples of all the code snippets in our <see href="https://mdn.github.io/webaudio-examples/voice-change-o-matic/">Voice-change-O-matic</see> demo.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_APIVisualizations_with_Web_Audio_API>
<Web_Audio_APIWeb_audio_spatialization_basics>
<summary>
As if its extensive variety of sound processing (and other) options wasn&amp;apos;t enough, the Web Audio API also includes facilities to allow you to emulate the difference in sound as a listener moves around a sound source, for example panning as you move around a sound source inside a 3D game.<br/>The official term for this is <strong>spatialization</strong>, and this article will cover the basics of how to implement such a system.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Web_audio_spatialization_basics"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Audio_APIWeb_audio_spatialization_basics>
</docs><docs>
<Web_Authentication_API>
<summary>
The Web Authentication API (WebAuthn) is an extension of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Credential_Management_API">Credential Management API</see> that enables strong authentication with public key cryptography, enabling passwordless authentication and secure multi-factor authentication (MFA) without SMS texts.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Authentication_API>
<Web_Authentication_APIAttestation_and_Assertion>
<summary>
There are two different types of certificates used in WebAuthn for registration and authentication. They have similar names and similar purposes, but understanding the differences may be an initial point of confusion. The sections below describe attestation, which happens during registration, and assertion which happens during authentication.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Authentication_APIAttestation_and_Assertion>
<Web_Authentication_APIAuthenticator_data>
<summary>
The authenticator data structure contains information from the authenticator about the processing of a credential creation or authentication request — such as the Relying Party ID Hash (<c>rpIdHash</c>), a signature counter, test of user presence, user verification flags, and any extensions processed by the authenticator. This page explains what is contained in the data structure.
</summary>
<remarks>
<para><see href="https://w3c.github.io/webauthn/#sctn-authenticator-data">Authenticator data definition in the WebAuthn specification</see></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Authentication_APIAuthenticator_data>
<Web_Authentication_APIWebAuthn_extensions>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API">Web Authentication API</see> has a system of extensions — extra functionality that can be requested during credential creation (<see cref="CredentialsContainer.Create"/>) or authentication (<see cref="CredentialsContainer.Get"/>) operations. This article explains how to request WebAuthn extensions, retrieve information about the responses from those requests, and the available extensions — including browser support and expected inputs and outputs.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/WebAuthn_extensions"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Authentication_APIWebAuthn_extensions>
</docs><docs>
<Web_Bluetooth_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The Web Bluetooth API provides the ability to connect and interact with Bluetooth Low Energy peripherals.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This API is <strong>not available</strong> in <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers</see> (not exposed via <see cref="WorkerNavigator"/>).</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Bluetooth_API>
</docs><docs>
<Web_components>
<summary>
Web Components is a suite of different technologies allowing you to create reusable custom elements — with their functionality encapsulated away from the rest of your code — and utilize them in your web apps.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_components>
<Web_componentsUsing_custom_elements>
<summary>
One of the key features of web components is the ability to create <strong>custom elements</strong>: that is, HTML elements whose behavior is defined by the web developer, that extend the set of elements available in the browser.
</summary>
<remarks>
<para>This article introduces custom elements, and walks through some examples.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_componentsUsing_custom_elements>
<Web_componentsUsing_shadow_DOM>
<summary>
An important aspect of custom elements is encapsulation, because a custom element, by definition, is a piece of reusable functionality: it might be dropped into any web page and be expected to work. So it&amp;apos;s important that code running in the page should not be able to accidentally break a custom element by modifying its internal implementation. Shadow DOM enables you to attach a DOM tree to an element, and have the internals of this tree hidden from JavaScript and CSS running in the page.
</summary>
<remarks>
<para>This article covers the basics of using the shadow DOM.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots">Using templates and slots</see><br/>-<see cref="Element.AttachShadow"/><br/>-<see cref="ShadowRoot.AdoptedStyleSheets"/><br/>-<see cref="CSSStyleSheet.Replace"/><br/>-<see cref="CSSStyleSheet.ReplaceSync"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template">template</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scoping">CSS scoping</see> module<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:host">:host</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:host_function">:host_function</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:host-context">:host-context</see><br/>-{{CSSXref(&amp;quot;::slotted&amp;quot;, &amp;quot;::slotted()&amp;quot;)}}<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_shadow_parts">CSS shadow parts</see> module<br/>-{{CSSXref(&amp;quot;::part&amp;quot;)}}<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_componentsUsing_shadow_DOM>
<Web_componentsUsing_templates_and_slots>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_componentsUsing_templates_and_slots>
</docs><docs>
<Web_Crypto_API>
<summary>
The <strong>Web Crypto API</strong> is an interface allowing a script to use cryptographic primitives in order to build systems using cryptography.
</summary>
<remarks>
<para>Some browsers implemented an interface called <see cref="Crypto"/> without having it well defined or being cryptographically sound.<br/>In order to avoid confusion, methods and properties of this interface have been removed from browsers implementing the Web Crypto API, and all Web Crypto API methods are available on a new interface: <see cref="SubtleCrypto"/>.<br/>The <see cref="Crypto.Subtle"/> property gives access to an object implementing it.</para><blockquote class="WARNING"><h5>WARNING</h5><para>The Web Crypto API provides a number of low-level cryptographic primitives. It&amp;apos;s very easy to misuse them, and the pitfalls involved can be very subtle.</para><para>Even assuming you use the basic cryptographic functions correctly, secure key management and overall security system design are extremely hard to get right, and are generally the domain of specialist security experts.</para><para>Errors in security system design and implementation can make the security of the system completely ineffective.</para><para>Please learn and experiment, but don&amp;apos;t guarantee or imply the security of your work before an individual knowledgeable in this subject matter thoroughly reviews it. The <see href="https://www.crypto101.io/">Crypto 101 Course</see> can be a great place to start learning about the design and implementation of secure systems.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Crypto_API>
<Web_Crypto_APINon-cryptographic_uses_of_subtle_crypto>
<summary>
This article will focus on uses of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest"><c>digest</c></see> method of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto">SubtleCrypto interface</see>. A lot of other methods within the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API">Web Crypto API</see> have very specific cryptographic use cases, creating hashes of content (which is what the digest method does) has lots of very useful purposes.
</summary>
<remarks>
<para>This article does not discuss the cryptographic uses of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto">SubtleCrypto interface</see>. An important thing to take away from this article is <strong>don&amp;apos;t use this API</strong> for production cryptographic purposes because it is powerful and low level. To use it correctly you will need to take many context specific steps to accomplish cryptographic tasks correctly. If any of those steps are taken incorrectly at best your code won&amp;apos;t run, at worse it <strong>will</strong> run and you will unknowingly be putting your users at risk with an insecure product.</para><para>You may not even need to use the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API">Web Crypto API</see> at all. Many of the things you would want to use cryptography for are already solved and part of the Web platform. For example, if you are worried about man-in-the-middle attacks, such as Wi-Fi hotspots reading the information between the client and the server, this is solved by ensuring correct use of <see href="https://developer.mozilla.org/en-US/docs/Glossary/HTTPS">HTTPS</see>. Do you want to securely send information between users? Then you can set up a data connection between users using <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_data_channels">WebRTC Data Channels</see> which is encrypted as part of the standard.</para><para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto">SubtleCrypto interface</see> provides low level primitives for working with cryptography, but implementing a system using these tools is a complicated task. Mistakes are hard to notice and the results can mean your user&amp;apos;s data is not as secure as you think it is. Which could have catastrophic results if your users are sharing sensitive or valuable data.</para><para>If in doubt don&amp;apos;t try doing it yourself, hire someone with experience and ensure your software is audited by a security expert.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API/Non-cryptographic_uses_of_subtle_crypto"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Crypto_APINon-cryptographic_uses_of_subtle_crypto>
</docs><docs>
<Web_Locks_API>
<summary>
The <strong>Web Locks API</strong> allows scripts running in one tab or worker to asynchronously acquire a lock, hold it while work is performed, then release it. While held, no other script executing in the same origin can acquire the same lock, which allows a web app running in multiple tabs or workers to coordinate work and the use of resources.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Locks_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Locks_API>
</docs><docs>
<Web_MIDI_API>
<summary>
The Web MIDI API connects to and interacts with Musical Instrument Digital Interface (MIDI) Devices.
</summary>
<remarks>
<para>The interfaces deal with the practical aspects of sending and receiving MIDI messages.<br/>Therefore, the API can be used for musical and non-musical uses, with any MIDI device connected to your computer.</para>
<para>-<see href="https://code.tutsplus.com/introduction-to-web-midi--cms-25220t">Introduction to Web MIDI</see><br/>-<see href="https://www.keithmcmillen.com/blog/making-music-in-the-browser-web-midi-api/">Making Music in the Browser</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_MIDI_API>
</docs><docs>
<Web_NFC_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The Web NFC API allows exchanging data over NFC via light-weight NFC Data Exchange Format (NDEF) messages.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Devices and tags have to be formatted and recorded specifically to support NDEF record format to be used with Web NFC. Low-level operations are currently not supported by the API, however there is a public discussion about API that would add such functionality.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_NFC_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_NFC_API>
</docs><docs>
<Web_Periodic_Background_Synchronization_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Web Periodic Background Synchronization API</strong> provides a way to register tasks to be run in a {{domxref(&amp;quot;Service Worker API&amp;quot;, &amp;quot;service worker&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}} at periodic intervals with network connectivity. These tasks are referred to as periodic background sync requests.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/capabilities/periodic-background-sync">An article on using Periodic Background Sync</see><br/>-<see href="https://webplatformapis.com/periodic_sync/periodicSync_improved.html">A Periodic Background Sync demo app</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Periodic_Background_Synchronization_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Periodic_Background_Synchronization_API>
</docs><docs>
<Web_Serial_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Web Serial API</strong> provides a way for websites to read from and write to serial devices. These devices may be connected via a serial port, or be USB or Bluetooth devices that emulate a serial port.
</summary>
<remarks>
<para>-<see href="https://developer.chrome.com/docs/capabilities/serial">Read from and write to a serial port</see><br/>-<see href="https://codelabs.developers.google.com/codelabs/web-serial#0">Getting started with the Web Serial API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Serial_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Serial_API>
</docs><docs>
<Web_Share_API>
<summary>
The <strong>Web Share API</strong> provides a mechanism for sharing text, links, files, and other content to an arbitrary <strong>share target</strong> selected by the user.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This API is <strong>not available</strong> in <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers</see> (not exposed via <see cref="WorkerNavigator"/>).</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para>This API should not be confused with the <see href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Manifest/Reference/share_target">Web Share Target API</see>, which allows a website to specify itself as a share target.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Manifest/Reference/share_target">Web Share Target API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Share_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Share_API>
</docs><docs>
<Web_Speech_API>
<summary>
The <strong>Web Speech API</strong> enables you to incorporate voice data into web apps.<br/>The Web Speech API has two parts: <c>SpeechSynthesis</c> (Text-to-Speech), and <c>SpeechRecognition</c> (Asynchronous Speech Recognition.)
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API">Using the Web Speech API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Speech_API>
<Web_Speech_APIUsing_the_Web_Speech_API>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Speech_APIUsing_the_Web_Speech_API>
</docs><docs>
<Web_Storage_API>
<summary>
The <strong>Web Storage API</strong> provides mechanisms by which browsers can store key/value pairs, in a much more intuitive fashion than using <see href="https://developer.mozilla.org/en-US/docs/Glossary/cookie">cookie</see>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API">Using the Web Storage API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria">Browser storage quotas and eviction criteria</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Storage_API>
<Web_Storage_APIUsing_the_Web_Storage_API>
<summary>
The Web Storage API provides mechanisms by which browsers can securely store key/value pairs.
</summary>
<remarks>
<para>This article provides a walkthrough of how to make use of this technology.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">Web Storage API landing page</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Storage_APIUsing_the_Web_Storage_API>
</docs><docs>
<Web_Workers_API>
<summary>
<strong>Web Workers</strong> makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Using Web Workers</see><br/>-<see cref="Worker"/> interface<br/>-<see cref="SharedWorker"/> interface<br/>-{{domxref(&amp;quot;Service Worker API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Workers_API>
<Web_Workers_APIFunctions_and_classes_available_to_workers>
<summary>
In addition to the standard <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</see> set of functions (such as <see cref="String"/>, <see cref="Array"/>, <see cref="Object"/>, <see cref="JSON"/>, etc.), there are a variety of functions (and APIs) available in the workers. This article provides a list of those.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Using web workers</see><br/>-<see cref="Worker"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Workers_APIFunctions_and_classes_available_to_workers>
<Web_Workers_APIStructured_clone_algorithm>
<summary>
The <strong>structured clone algorithm</strong> copies complex JavaScript objects.<br/>It is used internally when invoking <see cref="WorkerGlobalScope.StructuredClone"/>, to transfer data between <see href="https://developer.mozilla.org/en-US/docs/Web/API/Worker">Workers</see> via <see cref="Worker.PostMessage"/>, storing objects with <see href="https://developer.mozilla.org/en-US/docs/Glossary/IndexedDB">IndexedDB</see>, or copying objects for <see href="https://developer.mozilla.org#see_also">other APIs</see>.
</summary>
<remarks>
<para>It clones by recursing through the input object while maintaining a map of previously visited references, to avoid infinitely traversing cycles.</para>
<para>-<see href="https://html.spec.whatwg.org/multipage/infrastructure.html#safe-passing-of-structured-data">HTML Specification: Safe passing of structured data</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects">Transferable objects</see><br/>-<see cref="Window.StructuredClone"/><br/>-<see cref="WorkerGlobalScope.StructuredClone"/><br/>-<see cref="Window.PostMessage"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Workers_APIStructured_clone_algorithm>
<Web_Workers_APITransferable_objects>
<summary>
<strong>Transferable objects</strong> are objects that own resources that can be <strong>transferred</strong> from one context to another, ensuring that the resources are only available in one context at a time.<br/>Following a transfer, the original object is no longer usable; it no longer points to the transferred resource, and any attempt to read or write the object will throw an exception.
</summary>
<remarks>
<para><strong>Transferable objects</strong> are commonly used to share resources that can only be safely exposed to a single JavaScript thread at a time.<br/>For example, an <see cref="ArrayBuffer"/> is a transferable object that owns a block of memory.<br/>When such a buffer is transferred between threads, the associated memory resource is detached from the original buffer and attached to the buffer object created in the new thread.<br/>The buffer object in the original thread is no longer usable because it no longer owns a memory resource.</para><para>Transferring may also be used when creating deep copies of objects with <see cref="WorkerGlobalScope.StructuredClone"/>.<br/>Following the cloning operation, the transferred resources are moved rather than copied to the cloned object.</para><para>For both <c>postMessage()</c> and <c>structuredClone()</c>, transferred resources have to be attached to the data object, otherwise they would not be available on the receiving end, because the transferable array only indicates how certain resources should be sent, but does not actually send them (although they would always be detached).</para><para>The mechanism used to transfer an object&amp;apos;s resources depends on the object.<br/>For example, when an <see cref="ArrayBuffer"/> is transferred between threads, the memory resource that it points to is <strong>literally</strong> moved between contexts in a fast and efficient zero-copy operation.<br/>Other objects may be transferred by copying the associated resource and then deleting it from the old context.</para><para>Not all objects are transferable.<br/>A list of transferable objects is <see href="https://developer.mozilla.org#supported_objects">provided below</see>.</para>
<para>-<see href="https://developer.chrome.com/blog/transferable-objects-lightning-fast/">Transferable Objects: Lightning Fast!</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Using Web Workers</see><br/>-<see href="https://html.spec.whatwg.org/multipage/structured-data.html#transferable-objects">Transferable objects in the HTML specification</see><br/>-<see cref="DedicatedWorkerGlobalScope.PostMessage"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Workers_APITransferable_objects>
<Web_Workers_APIUsing_web_workers>
<summary>
Web Workers are a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. In addition, they can make network requests using the <see cref="WorkerGlobalScopefetch"/> or <see cref="XMLHttpRequest"/> APIs. Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa).
</summary>
<remarks>
<para>This article provides a detailed introduction to using web workers.</para>
<para>-<see cref="Worker"/> interface<br/>-<see cref="SharedWorker"/> interface<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers">Functions available to workers</see><br/>-<see cref="OffscreenCanvas"/> interface<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Web_Workers_APIUsing_web_workers>
</docs><docs>
<Window_Controls_Overlay_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The Window Controls Overlay API gives Progressive Web Apps installed on desktop operating systems the ability to hide the default window title bar and display their own content<br/>over the full surface area of the app window, turning the control buttons (maximize, minimize, and close) into an overlay.
</summary>
<remarks>
<para>-<see href="https://web.dev/articles/window-controls-overlay">Customize the window controls overlay of your PWA&amp;apos;s title bar</see><br/>-<see href="https://alistapart.com/article/breaking-out-of-the-box/">Breaking Out of the Box</see><br/>-<see href="https://learn.microsoft.com/en-us/microsoft-edge/progressive-web-apps/how-to/window-controls-overlay">Display content in the title bar</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Controls_Overlay_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Window_Controls_Overlay_API>
</docs><docs>
<Window_Management_API>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong>Window Management API</strong> allows you to get detailed information on the displays connected to your device and more easily place windows on specific screens, paving the way towards more effective multi-screen applications.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Management_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Window_Management_API>
<Window_Management_APIMulti-screen_origin>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Management_API">Window Management API</see> introduces the concept of the <strong>multi-screen origin</strong> — this is the (0,0) coordinate of the host operating system (OS)&amp;apos;s virtual screen arrangement, around which all available screens and windows are positioned. The multi-screen origin is the top-left corner of the OS primary screen by convention, although the spec stipulates that it could be any arbitrary point within the virtual screen arrangement.
</summary>
<remarks>
<para>The primary screen can usually be specified by the user via OS settings, and generally contains OS UI features such as the taskbar/icon dock.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Positive coordinate values are to the right and downwards on the screen arrangement, while negative ones are to the left and upwards.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Management_API/Multi-screen_origin"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Window_Management_APIMulti-screen_origin>
<Window_Management_APIUsing>
<summary>
This guide explains how to use the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Management_API">Window Management API</see>. The example code seen below is taken from our <see href="https://mdn.github.io/dom-examples/window-management-api/">Multi-window learning environment</see> example (see the <see href="https://github.com/mdn/dom-examples/tree/main/window-management-api">source code</see>).
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Management_API/Using"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Window_Management_APIUsing>
</docs><docs>
<XMLHttpRequest_API>
<summary>
The <strong>XMLHttpRequest API</strong> enables web apps to make HTTP requests to web servers and receive the responses programmatically using JavaScript. This in turn enables a website to update just part of a page with data from the server, rather than having to navigate to a whole new page. This practice is also sometimes known as <see href="https://developer.mozilla.org/en-US/docs/Glossary/AJAX">AJAX</see>.
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</see> is the more flexible and powerful replacement for the XMLHttpRequest API. The Fetch API uses {{jsxref(&amp;quot;Promise&amp;quot;, &amp;quot;promises&amp;quot;, &amp;quot;&amp;quot;, 1)}} instead of events to handle asynchronous responses, integrates well with <see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">service workers</see>, and supports advanced aspects of HTTP such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CORS">CORS</see>. For these reasons, the Fetch API is usually used in modern web apps instead of <see cref="XMLHttpRequest"/>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequest_API>
<XMLHttpRequest_APIHTML_in_XMLHttpRequest>
<summary>
The W3C <see cref="XMLHttpRequest"/> specification adds <see href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</see> parsing support to <see cref="XMLHttpRequest"/>, which originally supported only {{Glossary("XML")}} parsing. This feature allows Web apps to obtain an HTML resource as a parsed {{Glossary("DOM")}} using <c>XMLHttpRequest</c>.
</summary>
<remarks>
<para>To get an overview of how to use <c>XMLHttpRequest</c> in general, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see>.</para>
<para>-<see cref="XMLHttpRequest"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequest_APIHTML_in_XMLHttpRequest>
<XMLHttpRequest_APISending_and_Receiving_Binary_Data>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Sending_and_Receiving_Binary_Data"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequest_APISending_and_Receiving_Binary_Data>
<XMLHttpRequest_APISynchronous_and_Asynchronous_Requests>
<summary>
<see cref="'XMLHttpRequest'"/> supports both synchronous and asynchronous communications. In general, however, asynchronous requests should be preferred to synchronous requests for performance reasons.
</summary>
<remarks>
<para>Synchronous requests block the execution of code which causes &amp;quot;freezing&amp;quot; on the screen and an unresponsive user experience.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon"><c>navigator.sendBeacon</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Synchronous_and_Asynchronous_Requests"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequest_APISynchronous_and_Asynchronous_Requests>
<XMLHttpRequest_APIUsing_FormData_Objects>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/FormData"><c>FormData</c></see> object lets you compile a set of key/value pairs to send using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API">XMLHttpRequest</see> API. It is primarily intended for use in sending form data, but can be used independently from forms in order to transmit keyed data. The transmitted data is in the same format that the form's <see cref="HTMLFormElement.Submit"/> method would use to send the data if the form's encoding type were set to <c>multipart/form-data</c>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Using the Fetch API</see><br/>-<see cref="HTMLFormElement"/><br/>-<see cref="Blob"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays">Typed Arrays</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_FormData_Objects"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequest_APIUsing_FormData_Objects>
<XMLHttpRequest_APIUsing_XMLHttpRequest>
<summary>
In this guide, we'll take a look at how to use <see cref="XMLHttpRequest"/> to issue <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</see> requests in order to exchange data between the website and a server.
</summary>
<remarks>
<para>Examples of both common and more obscure use cases for <c>XMLHttpRequest</c> are included.</para><para>To send an HTTP request:</para><para>After the transaction completes, the <c>XMLHttpRequest</c> object will contain useful information such as the response body and the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status">HTTP status</see> of the result.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Using the Fetch API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest">HTML in XMLHttpRequest</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CORS">HTTP access control</see><br/>-<see href="https://www.peej.co.uk/articles/rich-user-experience.html">XMLHttpRequest - REST and the Rich User Experience</see><br/>-<see href="https://xhr.spec.whatwg.org/">The <c>XMLHttpRequest</c> object: WHATWG specification</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequest_APIUsing_XMLHttpRequest>
</docs>