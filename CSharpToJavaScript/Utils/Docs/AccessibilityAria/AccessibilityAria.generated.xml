<docs>
<AccessibilityARIA>
<summary>
It supplements HTML so that interactions and widgets commonly used in applications can be passed to assistive technologies when there is not otherwise a mechanism. For example, ARIA enables accessible JavaScript widgets, form hints and error messages, live content updates, and more.
</summary>
<remarks>
<blockquote class="WARNING"><h5>WARNING</h5><para><strong>Warning:</strong> Many of these widgets are fully supported in modern browsers. <strong>Developers should prefer using the correct semantic HTML element over using ARIA</strong>, if such an element exists. For instance, native elements have built-in <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets">keyboard accessibility</see>, roles and states. However, if you choose to use ARIA, you are responsible for mimicking the equivalent browser behavior in script.</para></blockquote><para><see href="https://www.w3.org/TR/using-aria/#rule1">The first rule of ARIA</see> use is &amp;quot;If you can use a native HTML element or attribute with the semantics and behavior you require already built in, instead of re-purposing an element and adding an ARIA role, state or property to make it accessible, then do so.&amp;quot;</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> There is a saying &amp;quot;No ARIA is better than bad ARIA.&amp;quot; In <see href="https://webaim.org/projects/million/#aria">WebAim&amp;apos;s survey of over one million home pages</see>, they found that Home pages with ARIA present averaged 41% more detected errors than those without ARIA. While ARIA is designed to make web pages more accessible, if used incorrectly, it can do more harm than good.</para></blockquote><para>Here&amp;apos;s the markup for a progress bar widget:</para><para>This progress bar is built using a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div">div</see>, which has no meaning. We include ARIA roles and properties to add meaning. In this example, the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/progressbar_role"><c>role=&amp;quot;progressbar&amp;quot;</c></see> attribute informs the browser that this element is actually a JavaScript-powered progress bar widget. The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuemin"><c>aria-valuemin</c></see> and <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuemax"><c>aria-valuemax</c></see> attributes specify the minimum and maximum values for the progress bar, and the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuenow"><c>aria-valuenow</c></see> describes the current state of it and therefore must be kept updated with JavaScript.</para><para>Along with placing them directly in the markup, ARIA attributes can be added to the element and updated dynamically using JavaScript code like this:</para><para>All content that is available to non-assistive technology users must be made available to assistive technologies. Similarly, no features should be included targeting assistive technology users that aren&amp;apos;t also accessible to those not using assistive technologies. The above progressbar needs to be styled to make it look like a progressbar.</para><para>It would have been much simpler to use the native <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/'progress'">'progress'</see> element instead:</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> The <c>min</c> attribute is not allowed for the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/'progress'">'progress'</see> element; its minimum value is always <c>0</c>.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> HTML landmark elements (<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main">main</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header">header</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav">nav</see>, etc.) have built-in implicit ARIA roles, so there is no need to duplicate them.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"> <em>See also on MDN</em> </seealso></para>
</remarks>
</AccessibilityARIA>
</docs>