<docs>
<AnalyserNode>
<summary>
The <strong><c>AnalyserNode</c></strong> interface represents a node able to provide real-time frequency and time-domain analysis information. It is an <see cref="AudioNode"/> that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.
</summary>
<remarks>
<para>An <c>AnalyserNode</c> has exactly one input and one output. The node works even if the output is not connected.</para><para><see href="https://developer.mozilla.orgfttaudiodata_en.svg">Without modifying the audio stream, the node allows to get the frequency and time-domain data associated to it, using a FFT.</see></para><para></para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode"> <em>See also on MDN</em> </seealso></para>
</remarks>
</AnalyserNode>
<AnalyserNodeAnalyserNode>
<summary>
The <strong><c>AnalyserNode()</c></strong> constructor of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API">Web Audio API</see> creates a new <see cref="AnalyserNode"/> object instance.
</summary>
<remarks>
<para>-<see cref="BaseAudioContext.CreateAnalyser"/>, the equivalent factory method<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/AnalyserNode"> <em>See also on MDN</em> </seealso></para>
</remarks>
</AnalyserNodeAnalyserNode>
<AnalyserNodeFftSize>
<summary>
The <strong><c>fftSize</c></strong> property of the <see cref="AnalyserNode"/> interface is an unsigned long value and represents the window size in samples that is used when performing a <see href="https://en.wikipedia.org/wiki/Fast_Fourier_transform">Fast Fourier Transform</see> (FFT) to get frequency domain data.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An unsigned integer, representing the window size of the FFT, given in number of samples. A higher value will result in more details in the frequency domain but fewer details in the amplitude domain.Must be a power of 2 between 2<strong>5 and 2</strong>15, so one of: <c>32</c>, <c>64</c>, <c>128</c>, <c>256</c>, <c>512</c>, <c>1024</c>, <c>2048</c>, <c>4096</c>, <c>8192</c>, <c>16384</c>, and <c>32768</c>. Defaults to <c>2048</c>.</value>
</AnalyserNodeFftSize>
<AnalyserNodeFrequencyBinCount>
<summary>
The <strong><c>frequencyBinCount</c></strong> read-only property of the <see cref="AnalyserNode"/> interface contains the total number of data points available to <see cref="AudioContext"/> <see cref="BaseAudioContext.SampleRate"/>. This is half of the <c>value</c> of the <see cref="AnalyserNode.FftSize"/>. The two methods' indices have a linear relationship with the frequencies they represent, between 0 and the <see href="https://en.wikipedia.org/wiki/Nyquist_frequency">Nyquist frequency</see>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An unsigned integer, equal to the number of values that <see cref="AnalyserNode.GetByteFrequencyData"/> and <see cref="AnalyserNode.GetFloatFrequencyData"/> copy into the provided <c>TypedArray</c>.For technical reasons related to how the <see href="https://en.wikipedia.org/wiki/Fast_Fourier_transform">Fast Fourier transform</see> is defined, it is always half the value of <see cref="AnalyserNode.FftSize"/>. Therefore, it will be one of <c>16</c>, <c>32</c>, <c>64</c>, <c>128</c>, <c>256</c>, <c>512</c>, <c>1024</c>, <c>2048</c>, <c>4096</c>, <c>8192</c>, and <c>16384</c>.</value>
</AnalyserNodeFrequencyBinCount>
<AnalyserNodeGetByteFrequencyData>
<summary>
The <strong><c>getByteFrequencyData()</c></strong> method of the <see cref="AnalyserNode"/> interface copies the current frequency data into a {{jsxref("Uint8Array")}} (unsigned byte array) passed into it.
</summary>
<remarks>
<para>The frequency data is composed of integers on a scale from 0 to 255.</para><para>Each item in the array represents the decibel value for a specific frequency. The frequencies are spread linearly from 0 to 1/2 of the sample rate. For example, for <c>48000</c> sample rate, the last item of the array will represent the decibel value for <c>24000</c> Hz.</para><para>If the array has fewer elements than the <see cref="AnalyserNode.FrequencyBinCount"/>, excess elements are dropped. If it has more elements than needed, excess elements are ignored.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</AnalyserNodeGetByteFrequencyData>
<AnalyserNodeGetByteTimeDomainData>
<summary>
The <strong><c>getByteTimeDomainData()</c></strong> method of the <see cref="AnalyserNode"/> Interface copies the current waveform, or time-domain, data into a {{jsxref("Uint8Array")}} (unsigned byte array) passed into it.
</summary>
<remarks>
<para>If the array has fewer elements than the <see cref="AnalyserNode.FftSize"/>, excess elements are dropped. If it has more elements than needed, excess elements are ignored.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</AnalyserNodeGetByteTimeDomainData>
<AnalyserNodeGetFloatFrequencyData>
<summary>
The <strong><c>getFloatFrequencyData()</c></strong> method of the <see cref="AnalyserNode"/> Interface copies the current frequency data into a {{jsxref("Float32Array")}} array passed into it.
</summary>
<remarks>
<para>Each item in the array represents the decibel value for a specific frequency. The frequencies are spread linearly from 0 to 1/2 of the sample rate. For example, for a <c>48000</c> Hz sample rate, the last item of the array will represent the decibel value for <c>24000</c> Hz.</para><para>If you need higher performance and don't care about precision, you can use <see cref="AnalyserNode.GetByteFrequencyData"/> instead, which works on a {{jsxref("Uint8Array")}}.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</AnalyserNodeGetFloatFrequencyData>
<AnalyserNodeGetFloatTimeDomainData>
<summary>
The <strong><c>getFloatTimeDomainData()</c></strong> method of the <see cref="AnalyserNode"/> Interface copies the current waveform, or time-domain, data into a {{jsxref("Float32Array")}} array passed into it. Each array value is a <strong>sample</strong>, the magnitude of the signal at a particular time.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatTimeDomainData"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</AnalyserNodeGetFloatTimeDomainData>
<AnalyserNodeMaxDecibels>
<summary>
The <strong><c>maxDecibels</c></strong> property of the <see cref="AnalyserNode"/> interface is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using <c>getByteFrequencyData()</c>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A double, representing the maximum <see href="https://en.wikipedia.org/wiki/Decibel">decibel</see> value for scaling the FFT analysis data, where <c>0</c> dB is the loudest possible sound, <c>-10</c> dB is a 10th of that, etc. The default value is <c>-30</c> dB.When getting data from <c>getByteFrequencyData()</c>, any frequencies with an amplitude of <c>maxDecibels</c> or higher will be returned as <c>255</c>.</value>
</AnalyserNodeMaxDecibels>
<AnalyserNodeMinDecibels>
<summary>
The <strong><c>minDecibels</c></strong> property of the <see cref="AnalyserNode"/> interface is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using <c>getByteFrequencyData()</c>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A double, representing the minimum <see href="https://en.wikipedia.org/wiki/Decibel">decibel</see> value for scaling the FFT analysis data, where <c>0</c> dB is the loudest possible sound, <c>-10</c> dB is a 10th of that, etc. The default value is <c>-100</c> dB.When getting data from <c>getByteFrequencyData()</c>, any frequencies with an amplitude of <c>minDecibels</c> or lower will be returned as <c>0</c>.<blockquote class="NOTE"><h5>NOTE</h5>If a value greater than <c>AnalyserNode.maxDecibels</c> is set, an <c>INDEX_SIZE_ERR</c> exception is thrown.</blockquote></value>
</AnalyserNodeMinDecibels>
<AnalyserNodeSmoothingTimeConstant>
<summary>
The <strong><c>smoothingTimeConstant</c></strong> property of the <see cref="AnalyserNode"/> interface is a double value representing the averaging constant with the last analysis frame. It's basically an average between the current buffer and the last buffer the <c>AnalyserNode</c> processed, and results in a much smoother set of value changes over time.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A double within the range <c>0</c> to <c>1</c> (<c>0</c> meaning no time averaging). The default value is <c>0.8</c>.If 0 is set, there is no averaging done, whereas a value of 1 means "overlap the previous and current buffer quite a lot while computing the value", which essentially smooths the changes across <see cref="AnalyserNode.GetFloatFrequencyData"/>/<see cref="AnalyserNode.GetByteFrequencyData"/> calls.In technical terms, we apply a <see href="https://webaudio.github.io/web-audio-api/#blackman-window">Blackman window</see> and smooth the values over time. The default value is good enough for most cases.<blockquote class="NOTE"><h5>NOTE</h5>If a value outside the range 0–1 is set, an <c>INDEX_SIZE_ERR</c> exception is thrown.</blockquote></value>
</AnalyserNodeSmoothingTimeConstant>
</docs>