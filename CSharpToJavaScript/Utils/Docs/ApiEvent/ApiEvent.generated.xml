<docs>
<Event>
<summary>
The <strong><c>Event</c></strong> interface represents an event which takes place in the DOM.
</summary>
<remarks>
<para>An event can be triggered by the user action e.g. clicking the mouse button or tapping keyboard, or generated by APIs to represent the progress of an asynchronous task. It can also be triggered programmatically, such as by calling the <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click"><c>HTMLElement.click()</c></see> method of an element, or by defining the event, then sending it to a specified target using <see href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent"><c>EventTarget.dispatchEvent()</c></see>.</para><para>There are many types of events, some of which use other interfaces based on the main <c>Event</c> interface. <c>Event</c> itself contains the properties and methods which are common to all events.</para><para>Many DOM elements can be set up to accept (or &amp;quot;listen&amp;quot; for) these events, and execute code in response to process (or &amp;quot;handle&amp;quot;) them. Event-handlers are usually connected (or &amp;quot;attached&amp;quot;) to various <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">HTML elements</see> (such as <c>&amp;lt;button&amp;gt;</c>, <c>&amp;lt;div&amp;gt;</c>, <c>&amp;lt;span&amp;gt;</c>, etc.) using <see href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><c>EventTarget.addEventListener()</c></see>, and this generally replaces using the old HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes">event handler attributes</see>. Further, when properly added, such handlers can also be disconnected if needed using <see href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener"><c>removeEventListener()</c></see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> One element can have several such handlers, even for the exact same event—particularly if separate, independent code modules attach them, each for its own independent purposes. (For example, a webpage with an advertising-module and statistics-module both monitoring video-watching.)</para></blockquote><para>When there are many nested elements, each with its own handler(s), event processing can become very complicated—especially where a parent element receives the very same event as its child elements because &amp;quot;spatially&amp;quot; they overlap so the event technically occurs in both, and the processing order of such events depends on the <see href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling_and_capture">Event bubbling and capture</see> settings of each handler triggered.</para>
<para>-Types of events available: <see href="https://developer.mozilla.org/en-US/docs/Web/Events">Event reference</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/Comparison_of_Event_Targets">Comparison of Event Targets</see> (<c>target</c> vs. <c>currentTarget</c> vs. <c>relatedTarget</c> vs. <c>originalTarget</c>)<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events">Creating and triggering custom events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Event>
</docs>