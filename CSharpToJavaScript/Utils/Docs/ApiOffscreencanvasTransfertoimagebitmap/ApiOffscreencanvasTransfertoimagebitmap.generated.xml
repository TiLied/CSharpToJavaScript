<docs>
<OffscreenCanvasTransferToImageBitmap>
<summary>
The <strong><c>OffscreenCanvas.transferToImageBitmap()</c></strong> method creates an <see cref="ImageBitmap."/> object from the most recently rendered image of the <c>OffscreenCanvas</c>. The <c>OffscreenCanvas</c> allocates a new image for its subsequent rendering.
</summary>
<remarks>
<para>-The interface defining this method, <see cref="OffscreenCanvas."/><br/>-<see cref="ImageBitmapRenderingContext.TransferFromImageBitmap."/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/transferToImageBitmap"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A newly-allocated <see cref="ImageBitmap."/>.This <c>ImageBitmap</c> references a potentially large graphics resource, and to ensure your web application remains robust, it is important to avoid allocating too many of these resources at any point in time. For this reason it is important to ensure that the <c>ImageBitmap</c> is either <strong>consumed</strong> or <strong>closed</strong>.As described in the <see cref="OffscreenCanvas."/> examples, passing this <c>ImageBitmap</c> to <see cref="ImageBitmapRenderingContext.TransferFromImageBitmap."/> <strong>consumes</strong> the <c>ImageBitmap</c> object; it no longer references the underlying graphics resource, and can not be passed to any other web APIs.If your goal is to pass the <c>ImageBitmap</c> to other web APIs which do not consume it - for example, <see cref="CanvasRenderingContext2D.DrawImage."/> - then you should <strong>close</strong> it when you're done with it by calling <see cref="ImageBitmap.Close."/>. Don't simply drop the JavaScript reference to the <c>ImageBitmap</c>; doing so will keep its graphics resource alive until the next time the garbage collector runs.If you call <c>transferToImageBitmap()</c> and don't intend to pass it to <see cref="ImageBitmapRenderingContext.TransferFromImageBitmap."/>, consider whether you need to call <c>transferToImageBitmap()</c> at all. Many web APIs which accept <c>ImageBitmap</c> also accept <c>OffscreenCanvas</c> as an argument.</returns>
</OffscreenCanvasTransferToImageBitmap>
</docs>