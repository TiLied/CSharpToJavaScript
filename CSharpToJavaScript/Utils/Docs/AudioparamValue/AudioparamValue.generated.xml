<docs>
<AudioParamValue>
<summary>
The <strong><c>value</c></strong> property of the <see cref="AudioParam"/> interface gets or sets the value of this <c>AudioParam</c> at the current time.<br/>Initially, the value is set to <see cref="AudioParam.DefaultValue"/>.
</summary>
<remarks>
<para>Setting <c>value</c> has the same effect as calling <see cref="AudioParam.SetValueAtTime"/> with the time returned by the <c>AudioContext</c>'s <see cref="BaseAudioContext/currentTime"/> property.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/value"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A floating-point <see cref="Number"/> indicating the parameter's value as of the current time.<br/>This value will be between the values specified by the <see cref="AudioParam.MinValue"/> and <see cref="AudioParam.MaxValue"/> properties.The data type used internally to store <c>value</c> is a single-precision (32-bit) floating point number, while JavaScript uses 64-bit double-precision floating point numbers.<br/>As a result, the value you read from the <c>value</c> property may not always exactly equal what you set it to.Consider this example:The log output will be <c>false</c>, because the playback rate parameter, <c>rate</c>, was converted to the 32-bit floating-point number closest to 5.3, which yields 5.300000190734863.<br/>One solution is to use the <see cref="MathFround"/> method, which returns the single-precision value equivalent to the 64-bit JavaScript value specifiedâ€”when setting <c>value</c>, like this:In this case, the log output will be <c>true</c>.The <c>value</c> of an <c>AudioParam</c> can either be fixed or can vary over time.<br/>This is reflected by the <c>value</c> getter, which returns the value of the parameter as of the audio rendering engine&amp;apos;s most recent <strong>render quantum</strong>, or moment at which audio buffers are processed and updated.<br/>In addition to processing audio buffers, each render quantum updates the <c>value</c> of each <c>AudioParam</c> as needed given the current time and any established time-based parameter value changes.Upon first creating the parameter, its value is set to its default value, given by <see cref="AudioParam.DefaultValue"/>.<br/>This is the parameter&amp;apos;s value at a time of 0.0 seconds, and will remain the parameter&amp;apos;s value until the first render quantum in which the value is altered.During each render quantum, the browser does the following things related to managing the value of a parameter:Thus, the <c>value</c> of a parameter is maintained to accurately reflect the state of the parameter over time.</value>
</AudioParamValue>
</docs>