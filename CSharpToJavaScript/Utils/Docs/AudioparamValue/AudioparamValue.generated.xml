<docs>
<AudioParamValue>
<summary>
The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API">Web Audio API&amp;apos;s</see><br/><see cref="AudioParam"/> interface property <strong><c>value</c></strong> gets<br/>or sets the value of this <see cref="AudioParam"/> at the current time. Initially, the value is set to <see cref="AudioParam.DefaultValue"/>.
</summary>
<remarks>
<para>Setting <c>value</c> has the same effect as<br/>calling <see cref="AudioParam.SetValueAtTime"/> with the time returned by the<br/><c>AudioContext</c>'s <see cref="BaseAudioContext/currentTime"/><br/>property.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/value"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A floating-point <see cref="Number"/> indicating the parameter's value as of the<br/>current time. This value will be between the values specified by the<br/><see cref="AudioParam.MinValue"/> and {{domxref("AudioParam.maxValue",<br/>&amp;quot;maxValue&amp;quot;)}} properties.The data type used internally to store <c>value</c> is a single-precision<br/>(32-bit) floating point number, while JavaScript uses 64-bit double-precision floating<br/>point numbers. As a result, the value you read from the <c>value</c> property may<br/>not always exactly equal what you set it to.Consider this example:The log output will be <c>false</c>, because the playback rate parameter,<br/><c>rate</c>, was converted to the 32-bit floating-point number closest to 5.3,<br/>which yields 5.300000190734863. One solution is to use the <see cref="MathFround"/><br/>method, which returns the single-precision value equivalent to the 64-bit JavaScript<br/>value specifiedâ€”when setting <c>value</c>, like this:In this case, the log output will be <c>true</c>.The <c>value</c> of an <c>AudioParam</c> can either be fixed or can vary<br/>over time. This is reflected by the <c>value</c> getter, which returns the value<br/>of the parameter as of the audio rendering engine&amp;apos;s most recent <strong>render</strong><strong><br/></strong><strong>quantum</strong>, or moment at which audio buffers are processed and updated. In<br/>addition to processing audio buffers, each render quantum updates the <c>value</c><br/>of each <c>AudioParam</c> as needed given the current time and any established<br/>time-based parameter value changes.Upon first creating the parameter, its value is set to its default value, given by<br/><see cref="AudioParam.DefaultValue"/>. This is the parameter's value at a time of 0.0<br/>seconds, and will remain the parameter&amp;apos;s value until the first render quantum in which<br/>the value is altered.During each render quantum, the browser does the following things related to managing<br/>the value of a parameter:Thus, the <c>value</c> of a parameter is maintained to accurately reflect the<br/>state of the parameter over time.</value>
</AudioParamValue>
</docs>