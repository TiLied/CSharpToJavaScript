<docs>
<AudioWorkletProcessorProcess>
<summary>
The <strong><c>process()</c></strong><br/>method of an <see cref="AudioWorkletProcessor"/>-derived class implements the audio<br/>processing algorithm for the audio processor worklet.
</summary>
<remarks>
<para>Although the method is<br/>not a part of the <see cref="AudioWorkletProcessor"/> interface, any implementation<br/>of <c>AudioWorkletProcessor</c> must provide a <c>process()</c> method.</para><para>The method is called synchronously from the audio rendering thread, once for each block<br/>of audio (also known as a rendering quantum) being directed through the processor&amp;apos;s<br/>corresponding <see cref="AudioWorkletNode"/>. In other words, every time a new block of<br/>audio is ready for your processor to manipulate, your <c>process()</c> function is<br/>invoked to do so.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> Currently, audio data blocks are always 128 frames<br/>longâ€”that is, they contain 128 32-bit floating-point samples for each of the inputs&amp;apos;<br/>channels. However, plans are already in place to revise the specification to allow the<br/>size of the audio blocks to be changed depending on circumstances (for example, if the<br/>audio hardware or CPU utilization is more efficient with larger block sizes).<br/>Therefore, you <strong>must always check the size of the sample array</strong> rather than<br/>assuming a particular size.</para><para>This size may even be allowed to change over time, so you mustn&amp;apos;t look at just the<br/>first block and assume the sample buffers will always be the same size.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API">Using the Web Audio API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/process"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A Boolean value indicating whether or not to force the <see cref="AudioWorkletNode"/><br/>to remain active even if the <see href="https://developer.mozilla.org/en-US/docs/Glossary/user agent">user agent</see> internal logic<br/>would otherwise decide that it&amp;apos;s safe to shut down the node.The returned value lets your processor have influence over the lifetime policy of<br/>the <see cref="AudioWorkletProcessor"/> and the node that owns it. If the combination<br/>of the return value and the state of the node causes the browser to decide to stop the<br/>node, <c>process()</c> will not be called again.Returning <c>true</c> forces the Web Audio API to keep the node alive,<br/>while returning <c>false</c> allows the browser to terminate the node if it is<br/>neither generating new audio data nor receiving data through its inputs that it is<br/>processing.The 3 most common types of audio node are:<blockquote class="NOTE"><h5>NOTE</h5><strong>Note:</strong> An absence of the <c>return</c> statement means that the method returns <c>undefined</c>, and as this is a falsy value, it is like returning <c>false</c>.<br/>Omitting an explicit <c>return</c> statement may cause hard-to-detect problems for your nodes.</blockquote></returns>
</AudioWorkletProcessorProcess>
</docs>