<docs>
<Cache>
<summary>
The <strong><c>Cache</c></strong> interface provides a persistent storage mechanism for <see cref="Request"/> / <see cref="Response"/> object pairs that are cached in long lived memory. How long a <c>Cache</c> object lives is browser dependent, but a single origin&amp;apos;s scripts can typically rely on the presence of a previously populated <c>Cache</c> object. Note that the <c>Cache</c> interface is exposed to windowed scopes as well as workers. You don&amp;apos;t have to use it in conjunction with service workers, even though it is defined in the service worker spec.
</summary>
<remarks>
<para>An origin can have multiple, named <c>Cache</c> objects. You are responsible for implementing how your script (e.g. in a <see cref="ServiceWorker"/>) handles <c>Cache</c> updates. Items in a <c>Cache</c> do not get updated unless explicitly requested; they don't expire unless deleted. Use <see cref="CacheStorage.Open"/> to open a specific named <c>Cache</c> object and then call any of the <c>Cache</c> methods to maintain the <c>Cache</c>.</para><para>You are also responsible for periodically purging cache entries. Each browser has a hard limit on the amount of cache storage that a given origin can use. <c>Cache</c> quota usage estimates are available via the <see cref="StorageManager.Estimate"/> method. The browser does its best to manage disk space, but it may delete the <c>Cache</c> storage for an origin. The browser will generally delete all of the data for an origin or none of the data for an origin. Make sure to version caches by name and use the caches only from the version of the script that they can safely operate on. See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#deleting_old_caches">Deleting old caches</see> for more information.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> The key matching algorithm depends on the <see href="https://www.fastly.com/blog/best-practices-using-vary-header">VARY header</see> in the value. So matching a new key requires looking at both key and value for entries in the <c>Cache</c> object.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> The caching API doesn&amp;apos;t honor HTTP caching headers.</para></blockquote><para>AvailableInWorkers</para><para></para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see href="https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker">Service workers basic code example</see><br/>-<see href="https://jakearchibald.github.io/isserviceworkerready/">Is ServiceWorker ready?</see><br/>-<see cref="Promise"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Using web workers</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cache"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Cache>
</docs>