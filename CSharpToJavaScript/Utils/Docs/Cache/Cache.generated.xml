<docs>
<Cache>
<summary>
The <strong><c>Cache</c></strong> interface provides a persistent storage mechanism for <see cref="Request"/> / <see cref="Response"/> object pairs that are cached in long lived memory. How long a <c>Cache</c> object lives is browser dependent, but a single origin&amp;apos;s scripts can typically rely on the presence of a previously populated <c>Cache</c> object. Note that the <c>Cache</c> interface is exposed to windowed scopes as well as workers. You don&amp;apos;t have to use it in conjunction with service workers, even though it is defined in the service worker spec.
</summary>
<remarks>
<para>An origin can have multiple, named <c>Cache</c> objects. You are responsible for implementing how your script (e.g., in a <see cref="ServiceWorker"/>) handles <c>Cache</c> updates. Items in a <c>Cache</c> do not get updated unless explicitly requested; they don't expire unless deleted. Use <see cref="CacheStorage.Open"/> to open a specific named <c>Cache</c> object and then call any of the <c>Cache</c> methods to maintain the <c>Cache</c>.</para><para>You are also responsible for periodically purging cache entries. Each browser has a hard limit on the amount of cache storage that a given origin can use. <c>Cache</c> quota usage estimates are available via the <see cref="StorageManager.Estimate"/> method. The browser does its best to manage disk space, but it may delete the <c>Cache</c> storage for an origin. The browser will generally delete all of the data for an origin or none of the data for an origin. Make sure to version caches by name and use the caches only from the version of the script that they can safely operate on. See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#deleting_old_caches">Deleting old caches</see> for more information.</para><blockquote class="NOTE"><h5>NOTE</h5><para>The key matching algorithm depends on the <see href="https://www.fastly.com/blog/best-practices-using-vary-header">VARY header</see> in the value. So matching a new key requires looking at both key and value for entries in the <c>Cache</c> object.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para>The caching API doesn&amp;apos;t honor HTTP caching headers.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see href="https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker">Service workers basic code example</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Using web workers</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cache"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Cache>
<CacheAdd>
<summary>
The <strong><c>add()</c></strong> method of the <see cref="Cache"/> interface takes a URL, retrieves it, and adds the resulting response object to the given cache.
</summary>
<remarks>
<para>The <c>add()</c> method is functionally equivalent to the following:</para><para>For more complex operations, you'll need to use <see cref="Cache.Put"/> directly.</para><blockquote class="NOTE"><h5>NOTE</h5><para><c>add()</c> will overwrite any key/value pair previously stored in the cache that matches the request.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see cref="Cache"/><br/>-<see cref="Window.Caches"/> and <see cref="WorkerGlobalScope.Caches"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/add"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that resolves with <c>undefined</c>.</returns>
</CacheAdd>
<CacheAddAll>
<summary>
The <strong><c>addAll()</c></strong> method of the <see cref="Cache"/> interface takes an array of URLs, retrieves them, and adds the resulting response objects to the given cache. The request objects created during retrieval become keys to the stored response operations.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para><c>addAll()</c> will overwrite any key/value pairs<br/>previously stored in the cache that match the request, but will fail if a<br/>resulting <c>put()</c> operation would overwrite a previous cache entry stored by the same <c>addAll()</c> method.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see cref="Cache"/><br/>-<see cref="Window.Caches"/> and <see cref="WorkerGlobalScope.Caches"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/addAll"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that resolves with <c>undefined</c>.</returns>
</CacheAddAll>
<CacheDelete>
<summary>
The <strong><c>delete()</c></strong> method of the <see cref="Cache"/> interface finds the <see cref="Cache"/> entry whose key is the request, and if found, deletes the <see cref="Cache"/> entry and returns a {{jsxref("Promise")}} that resolves to <c>true</c>.<br/>If no <see cref="Cache"/> entry is found, it resolves to <c>false</c>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see cref="Cache"/><br/>-<see cref="Window.Caches"/> and <see cref="WorkerGlobalScope.Caches"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>a <see cref="Promise"/> that resolves to <c>true</c> if the cache entry is<br/>deleted, or <c>false</c> otherwise.</returns>
</CacheDelete>
<CacheKeys>
<summary>
The <strong><c>keys()</c></strong> method of the <see cref="Cache"/> interface returns a<br/>{{jsxref("Promise")}} that resolves to an array of <see cref="Request"/> objects<br/>representing the keys of the <see cref="Cache"/>.
</summary>
<remarks>
<para>The requests are returned in the same order that they were inserted.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Requests with duplicate URLs but different headers can be<br/>returned if their responses have the <c>VARY</c> header set on them.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see cref="Cache"/><br/>-<see cref="Window.Caches"/> and <see cref="WorkerGlobalScope.Caches"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/keys"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} that resolves to an array of <see cref="Request"/><br/>objects.</returns>
</CacheKeys>
<CacheMatch>
<summary>
The <strong><c>match()</c></strong> method of the <see cref="Cache"/> interface returns a {{jsxref("Promise")}} that resolves to the <see cref="Response"/> associated with the first matching request in the <see cref="Cache"/> object.<br/>If no match is found, the <see cref="Promise"/> resolves to <see cref="Undefined"/>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see cref="Cache"/><br/>-<see cref="Window.Caches"/> and <see cref="WorkerGlobalScope.Caches"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/match"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} that resolves to the first <see cref="Response"/> that matches<br/>the request or to <see cref="Undefined"/> if no match is found.<blockquote class="NOTE"><h5>NOTE</h5><c>Cache.match()</c> is basically identical to<br/><see cref="Cache.MatchAll"/>, except that rather than resolving with an array of<br/>all matching responses, it resolves with the first matching response only (that is,<br/><c>response[0]</c>).</blockquote></returns>
</CacheMatch>
<CacheMatchAll>
<summary>
The <strong><c>matchAll()</c></strong> method of the <see cref="Cache"/><br/>interface returns a <see cref="Promise"/> that resolves to an array of all matching<br/>responses in the <see cref="Cache"/> object.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see cref="Cache"/><br/>-<see cref="Window.Caches"/> and <see cref="WorkerGlobalScope.Caches"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/matchAll"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that resolves to an array of all matching responses in the<br/><see cref="Cache"/> object.<blockquote class="NOTE"><h5>NOTE</h5><see cref="Cache.Match"/> is basically identical to<br/><c>Cache.matchAll()</c>, except that rather than resolving with an array of all<br/>matching responses, it resolves with the first matching response only (that is,<br/><c>response[0]</c>).</blockquote></returns>
</CacheMatchAll>
<CachePut>
<summary>
The <strong><c>put()</c></strong> method of the<br/><see cref="Cache"/> interface allows key/value pairs to be added to the current<br/><see cref="Cache"/> object.
</summary>
<remarks>
<para>Often, you will just want to <see cref="Windowfetch"/><br/>one or more requests, then add the result straight to your cache. In such cases you are<br/>better off using<br/><see cref="Cache.Add"/>/<see cref="Cache.AddAll"/>, as<br/>they are shorthand functions for one or more of these operations.</para><blockquote class="NOTE"><h5>NOTE</h5><para><c>put()</c> will overwrite any key/value pair<br/>previously stored in the cache that matches the request.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para><see cref="Cache.Add"/>/<see cref="Cache.AddAll"/> do not<br/>cache responses with <c>Response.status</c> values that are not in the 200<br/>range, whereas <c>Cache.put</c> lets you store any request/response pair. As a<br/>result, <see cref="Cache.Add"/>/<see cref="Cache.AddAll"/> can't be used to store<br/>opaque responses, whereas <c>Cache.put</c> can.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see cref="Cache"/><br/>-<see cref="Window.Caches"/> and <see cref="WorkerGlobalScope.Caches"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/put"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that resolves with <c>undefined</c>.</returns>
</CachePut>
</docs>