<docs>
<CachePut>
<summary>
The <strong><c>put()</c></strong> method of the<br/><see cref="Cache"/> interface allows key/value pairs to be added to the current<br/><see cref="Cache"/> object.
</summary>
<remarks>
<para>Often, you will just want to <see cref="Fetch"/><br/>one or more requests, then add the result straight to your cache. In such cases you are<br/>better off using<br/><see cref="Cache.Add"/>/<see cref="Cache.AddAll"/>, as<br/>they are shorthand functions for one or more of these operations.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> <c>put()</c> will overwrite any key/value pair<br/>previously stored in the cache that matches the request.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> <see cref="Cache.Add"/>/<see cref="Cache.AddAll"/> do not<br/>cache responses with <c>Response.status</c> values that are not in the 200<br/>range, whereas <see cref="Cache.Put"/> lets you store any request/response pair. As a<br/>result, <see cref="Cache.Add"/>/<see cref="Cache.AddAll"/> can't be used to store<br/>opaque responses, whereas <see cref="Cache.Put"/> can.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</see><br/>-<see cref="Cache"/><br/>-<see cref="Caches"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/put"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that resolves with <c>undefined</c>.</returns>
</CachePut>
</docs>