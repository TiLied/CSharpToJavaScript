<docs>
<Clipboard_API>
<summary>
The <strong>Clipboard API</strong> provides the ability to respond to clipboard commands (cut, copy, and paste) as well as to asynchronously read from and write to the system clipboard.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> This API is <strong>not available</strong> in <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers</see> (not exposed via <see cref="WorkerNavigator"/>).</para></blockquote><para>This API is designed to supersede accessing the clipboard using <see cref="Document.ExecCommand"/>.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> The <strong>clipboard</strong> is a data buffer that is used for short-term, data storage and/or data transfers, this can be between documents or applications.<br/>It is usually implemented as an anonymous, temporary <see href="https://en.wikipedia.org/wiki/Data_buffer">data buffer</see>, sometimes called the paste buffer, that can be accessed from most or all programs within the environment via defined <see href="https://en.wikipedia.org/wiki/Application_programming_interface">programming interfaces</see>.</para><para>A typical application accesses clipboard functionality by mapping <see href="https://en.wikipedia.org/wiki/User_input">user input</see> such as <see href="https://en.wikipedia.org/wiki/Keybinding">keybindings</see>, <see href="https://en.wikipedia.org/wiki/Menu_(computing)">menu selections</see>, etc. to these interfaces.</para></blockquote>
<para>-<see href="https://async-clipboard-api.glitch.me/">Async Clipboard API demo on Glitch</see><br/>-<see href="https://web.dev/async-clipboard/">Image support for Async Clipboard article</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Clipboard_API>
</docs>