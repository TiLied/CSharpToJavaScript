<docs>
<ClipboardItem>
<summary>
The <strong><c>ClipboardItem</c></strong> interface of the <see cref="'Clipboard API'"/> represents a single item format, used when reading or writing data via the <see cref="'Clipboard API'"/>. That is <see cref="Clipboard.Read"/> and <see cref="Clipboard.Write"/> respectively.
</summary>
<remarks>
<para>The benefit of having the <strong><c>ClipboardItem</c></strong> interface to represent data, is that it enables developers to cope with the varying scope of file types and data easily.</para><para>Access to the contents of the clipboard is gated behind the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API">Permissions API</see>: The <c>clipboard-write</c> permission is granted automatically to pages when they are in the active tab. The <c>clipboard-read</c> permission must be requested, which you can do by trying to read data from the clipboard.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> To work with text see the <see cref="Clipboard.ReadText"/> and <see cref="Clipboard.WriteText"/> methods of the <see cref="Clipboard"/> interface.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> You can only pass in one clipboard item at a time.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API">Clipboard API</see><br/>-<see href="https://async-clipboard-api.glitch.me/">Async Clipboard API demo on Glitch</see><br/>-<see href="https://web.dev/async-clipboard/">Image support for Async Clipboard article</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ClipboardItem>
</docs>