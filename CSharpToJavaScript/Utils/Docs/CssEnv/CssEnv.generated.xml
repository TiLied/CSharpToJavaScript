<docs>
<CSSEnv>
<summary>
The <strong><c>env()</c></strong> <see href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</see> <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions">function</see> can be used to insert the value of a user-agent defined environment variable into your CSS, in a similar fashion to the <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/var">var</see> function and <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*">custom properties</see>. The difference is that, as well as being user-agent defined rather than author-defined, environment variables are globally scoped to a document, whereas custom properties are scoped to the element(s) on which they are declared.
</summary>
<remarks>
<para>In addition, unlike custom properties, which cannot be used outside of declarations, the <c>env()</c> function can be used in place of any part of a property value, or any part of a descriptor (e.g. in <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media">Media query rules</see>). As the spec evolves, it may also be usable in other places such as selectors.</para><para>Originally provided by the iOS browser to allow developers to place their content in a safe area of the viewport, the <c>safe-area-inset-*</c> values defined in the specification can be used to help ensure content is visible even to viewers using nonâ€‘rectangular displays.</para><para>For example, a common issue solved by <c>env()</c> is that of device notifications covering up some of the app user interface. By positioning fixed elements using <c>env()</c> you can ensure that they display in a safe area of the viewport.</para><para>Another use case for <c>env()</c> variables is for desktop <see href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps">Progressive web apps</see> (PWAs) that use the Window Controls Overlay feature to take advantage of the full application window surface area. Using the <c>titlebar-area-*</c> values, they can position elements where the title bar would have been and ensure that content stays clear of the window control buttons.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/var">var</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascading_variables">CSS Custom Properties for Cascading Variables</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*">Custom Properties (--*)</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">Using CSS custom properties (variables)</see><br/>-<see href="https://web.dev/articles/window-controls-overlay">Customize the window controls overlay of your PWA&amp;apos;s title bar</see><br/>-<see href="https://docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/window-controls-overlay">Display content in the title bar</see><br/>-<see href="https://alistapart.com/article/breaking-out-of-the-box/">Breaking Out of the Box</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/CSS/env"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value><blockquote class="NOTE"><h5>NOTE</h5><strong>Note:</strong> Unlike other CSS properties, user agent-defined property names are case-sensitive.</blockquote></value>
</CSSEnv>
</docs>