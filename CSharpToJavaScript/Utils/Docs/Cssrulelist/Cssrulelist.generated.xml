<docs>
<CSSRuleList>
<summary>
A <c>CSSRuleList</c> represents an ordered collection of read-only <see cref="CSSRule"/> objects.
</summary>
<remarks>
<para>While the <c>CSSRuleList</c> object is read-only, and cannot be directly modified, it is considered a <c>live</c> object, as the content can change over time.</para><para>To edit the underlying rules returned by <c>CSSRule</c> objects, use <see cref="CSSStyleSheet.InsertRule"/> and <see cref="CSSStyleSheet.DeleteRule"/>, which are methods of <see cref="CSSStyleSheet"/>.</para><para>The interface has no constructor. An instance of <c>CSSRuleList</c> is returned by <see cref="CSSStyleSheet.CssRules"/> and <see cref="CSSKeyframesRule.CssRules"/>.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> This interface was an <see href="https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156">attempt to create an unmodifiable list</see> and only continues to be supported to not break code that&amp;apos;s already using it. Modern APIs use types that wrap around ECMAScript array types instead, so you can treat them like ECMAScript arrays, and at the same time impose additional semantics on their usage (such as making their items read-only).</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule"><c>CSSRule</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList"> <em>See also on MDN</em> </seealso></para>
</remarks>
</CSSRuleList>
</docs>