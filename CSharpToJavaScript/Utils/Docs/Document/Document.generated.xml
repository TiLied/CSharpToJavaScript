<docs>
<Document>
<summary>
The <strong><c>Document</c></strong> interface represents any web page loaded in the browser and serves as an entry point into the web page&amp;apos;s content, which is the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Using_the_Document_Object_Model#what_is_a_dom_tree">DOM tree</see>.
</summary>
<remarks>
<para>The DOM tree includes elements such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body">body</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">table</see>, among <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements">many others</see>. It provides functionality globally to the document, like how to obtain the page&amp;apos;s URL and create new elements in the document.</para><para></para><para>The <c>Document</c> interface describes the common properties and methods for any kind of document. Depending on the document&amp;apos;s type (e.g., <see href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/XML">XML</see>, SVG, â€¦), a larger API is available: HTML documents, served with the <c>&amp;quot;text/html&amp;quot;</c> content type, also implement the <see cref="HTMLDocument"/> interface, whereas XML and SVG documents implement the <see cref="XMLDocument"/> interface.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Document>
<DocumentActiveElement>
<summary>
The <strong><c>activeElement</c></strong> read-only property of the <see cref="Document"/> interface returns the <see cref="Element"/> within the DOM that is receiving keyboard events such as <see cref="Elementkeydown"/> and <see cref="Elementkeyup"/>. This is usually analogous to the focused element.
</summary>
<remarks>
<para>Which elements are focusable varies depending on the platform and the browser&amp;apos;s current configuration. For example, on Safari, following the behavior of macOS, elements that aren&amp;apos;t text input elements are not focusable by default, unless the &amp;quot;Full Keyboard Access&amp;quot; setting is enabled in System Preferences.</para><para>Typically a user can press the &amp;lt;kbd&amp;gt;Tab&amp;lt;/kbd&amp;gt; key to move the focus around the page among focusable elements, and use keyboard gestures such as &amp;lt;kbd&amp;gt;Space&amp;lt;/kbd&amp;gt; or &amp;lt;kbd&amp;gt;Enter&amp;lt;/kbd&amp;gt; to simulate clicks on the focused element.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Focus (which element is receiving user input events) is not the same thing as selection (the currently highlighted part of the document). You can get the current selection using <see cref="Window.GetSelection"/>.</para></blockquote>
<para>-<see cref="Document.HasFocus"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The deepest <see cref="'Element'"/> which currently has focus.</value>
</DocumentActiveElement>
<DocumentAdoptedStyleSheets>
<summary>
The <strong><c>adoptedStyleSheets</c></strong> property of the <see cref="Document"/> interface is used for setting an array of constructed stylesheets to be used by the document.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>A constructed stylesheet is a stylesheet created programmatically using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/CSSStyleSheet"><c>CSSStyleSheet()</c> constructor</see> (as compared to one created by a user-agent when importing a stylesheet from a script, imported using <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/'style'">'style'</see> and {{CSSXref('@import')}}, or linked to via <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/'link'">'link'</see>).</para></blockquote><para>The same constructed stylesheets can also be shared with one or more <see cref="ShadowRoot"/> instances using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/adoptedStyleSheets"><c>ShadowRoot.adoptedStyleSheets</c></see> property.<br/>Changing an adopted stylesheet will affect all the objects that adopt it.</para><para>Stylesheets in the property are evaluated along with the document&amp;apos;s other stylesheets using the <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Cascade">CSS cascade algorithm</see>.<br/>Where the resolution of rules considers stylesheet order, <c>adoptedStyleSheets</c> are assumed to be ordered after those in <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheets"><c>Document.styleSheets</c></see>.</para><para>Only stylesheets created using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/CSSStyleSheet"><c>CSSStyleSheet()</c> constructor</see> within the context of the current <see cref="Document"/> may be adopted.</para>
<para>-<see href="https://web.dev/articles/constructable-stylesheets">Constructable Stylesheets</see> (web.dev)<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM">Using the Shadow DOM</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/CSSStyleSheet"><c>CSSStyleSheet()</c> constructor</see><br/>-<see cref="CSSStyleSheet.ReplaceSync"/><br/>-<see cref="CSSStyleSheet.Replace"/><br/>-<see cref="CSSStyleSheet.InsertRule"/><br/>-<see cref="CSSStyleSheet.DeleteRule"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptedStyleSheets"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The value is an array of <see cref="CSSStyleSheet"/> instances that must have been created using the <see cref="CSSStyleSheet.CSSStyleSheet"/> constructor within the context of the same <see cref="Document"/>.If the array needs to be modified, use in-place mutations like <c>push()</c>. The <see cref="CSSStyleSheet"/> instances themselves can also be modified, and these changes will apply wherever the stylesheet is adopted.In an earlier version of the specification, the array was not modifiable, so the only way to add new stylesheets was to assign a new array to <c>adoptedStyleSheets</c>.</value>
</DocumentAdoptedStyleSheets>
<DocumentAdoptNode>
<summary>
<strong><c>Document.adoptNode()</c></strong> transfers a <see href="https://developer.mozilla.org/en-US/docs/Glossary/node/dom">node/dom</see> from another {{domxref("Document", "document", &amp;quot;&amp;quot;, &amp;quot;1&amp;quot;)}} into the method&amp;apos;s document.<br/>The adopted node and its subtree are removed from their original document (if any), and their <see cref="Node.OwnerDocument"/> is changed to the current document.<br/>The node can then be inserted into the current document.
</summary>
<remarks>
<para>-<see cref="Document.ImportNode"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The copied <c>importedNode</c> in the scope of the importing document.After calling this method, <c>importedNode</c> and<br/><c>externalNode</c> are the same object.<blockquote class="NOTE"><h5>NOTE</h5><c>importedNode</c>&amp;apos;s<br/><see cref="Node.ParentNode"/> is <c>null</c>, since it has not yet been<br/>inserted into the document tree!</blockquote></returns>
</DocumentAdoptNode>
<DocumentAfterscriptexecute>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <c>afterscriptexecute</c> event fires when a static {{HTMLElement("script")}} element finishes executing its script. It does not fire if the element is added dynamically, such as with <see cref="Node.AppendChild"/>.
</summary>
<remarks>
<para>-<see cref="Document.Beforescriptexecute"/> event of <c>Document</c><br/>-<see cref="Document.CurrentScript"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/afterscriptexecute"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentAfterscriptexecute>
<DocumentAlinkColor>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> Returns or sets the color of an active link in the document body. A link is active<br/>during the time between <c>mousedown</c> and <c>mouseup</c> events.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/alinkColor"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string containing the name of the color (e.g., <c>blue</c>, <c>darkblue</c>, etc.) or the hexadecimal value of the color (e.g., <c>#0000FF</c>).When set to the <c>null</c> value, that <c>null</c> value is converted to the empty string (<c>&amp;quot;&amp;quot;</c>), so <c>document.alinkColor = null</c> is equivalent to <c>document.alinkColor = &amp;quot;&amp;quot;</c>.</value>
</DocumentAlinkColor>
<DocumentAll>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <see cref="Document"/> interface's read-only <strong><c>all</c></strong> property returns an <see cref="HTMLAllCollection"/> rooted at the document node.
</summary>
<remarks>
<para>Rather than using <c>document.all</c> to return an <see cref="HTMLAllCollection"/> of all the document's elements in document order, you can use <see cref="Document.QuerySelectorAll"/> to return a <see cref="NodeList"/> of all the document's elements in document order:</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/all"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLAllCollection"/> which contains every element in the document.</value>
</DocumentAll>
<DocumentAnchors>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>anchors</c></strong> read-only property of the<br/><see cref="Document"/> interface returns a list of all of the anchors in the document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/anchors"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLCollection"/>.</value>
</DocumentAnchors>
<DocumentAppend>
<summary>
The <strong><c>Document.append()</c></strong> method<br/>inserts a set of <see cref="Node"/> objects or strings after<br/>the last child of the document. Strings<br/>are inserted as equivalent <see cref="Text"/> nodes.
</summary>
<remarks>
<para>This method appends a child to a <c>Document</c>. To append to an arbitrary element in the tree, see <see cref="Element.Append"/>.</para>
<para>-<see cref="Document.Prepend"/><br/>-<see cref="Element.Append"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/append"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentAppend>
<DocumentApplets>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>applets</c></strong> property of the <see cref="Document"/> returns an empty <see cref="HTMLCollection"/>. This property is kept only for compatibility reasons; in older versions of browsers, it returned a list of the applets within a document.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Support for the <c>&amp;lt;applet&amp;gt;</c> element has been removed by all browsers. Therefore, calling <c>document.applets</c> always<br/>returns an empty collection.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/applets"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An empty <see cref="HTMLCollection"/>.</value>
</DocumentApplets>
<DocumentBeforescriptexecute>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <c>beforescriptexecute</c> event fires when a static {{HTMLElement("script")}} is about to start executing. It does not fire if the element is added dynamically, such as with <see cref="Node.AppendChild"/>.
</summary>
<remarks>
<para>-<see cref="Document.Afterscriptexecute"/> event of <c>Document</c><br/>-<see cref="Document.CurrentScript"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/beforescriptexecute"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentBeforescriptexecute>
<DocumentBgColor>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The deprecated <c>bgColor</c> property gets or sets the background color of the<br/>current document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/bgColor"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string representing the color as a word (e.g., <c>&amp;quot;red&amp;quot;</c>) or hexadecimal value (e.g., <c>&amp;quot;#ff0000&amp;quot;</c>).When set to the <c>null</c> value, that <c>null</c> value is converted to the empty string (<c>&amp;quot;&amp;quot;</c>), so <c>document.bgColor = null</c> is equivalent to <c>document.bgColor = &amp;quot;&amp;quot;</c>.</value>
</DocumentBgColor>
<DocumentBody>
<summary>
The <strong><c>Document.body</c></strong> property represents the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body">body</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frameset">frameset</see> node of the current document, or<br/><c>null</c> if no such element exists.
</summary>
<remarks>
<para>-<see cref="Document.Head"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/body"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>One of the following:</value>
</DocumentBody>
<DocumentBrowsingTopics>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>This feature is currently opposed by two browser vendors. See the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Topics_API#standards_positions">Standards positions</see> section below for details of opposition.</blockquote>
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>An <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Privacy_sandbox/Enrollment">Enrollment process</see> is required to use this feature in your applications.</para></blockquote><para>The <c>browsingTopics()</c> method of the <see cref="Document"/> interface returns a promise that fulfills with an array of objects representing the top topics for the user, one from each of the last three epochs. These topics could then be returned to the ad tech platform in a subsequent fetch request. By default, the method also causes the browser to record the current page visit as observed by the caller, so the page's hostname can later be used in topics calculation.</para><para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Topics_API/Using">Using the Topics API</see> for more details.</para><blockquote class="NOTE"><h5>NOTE</h5><para><c>browsingTopics()</c> does not rely on HTTP headers to send topics and mark topics as observed like the other <see href="https://developer.mozilla.org/en-US/docs/Web/API/Topics_API/Using#what_api_features_enable_the_topics_api">Topics API enabling features</see>, but it is somewhat less performant. You are advised to use one of the HTTP header-using features, falling back to <c>browsingTopics()</c> only in situations where the headers cannot be modified.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Topics_API">Topics API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/browsingTopics"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that fulfills with an array of up to three objects representing the current user's selected topics for the last three epochs. Each object contains the following properties:The exact property values may vary by browser implementation. An example object from Chrome might look as follows:</returns>
</DocumentBrowsingTopics>
<DocumentCaretPositionFromPoint>
<summary>
The <strong><c>caretPositionFromPoint()</c></strong> method of the <see cref="Document"/> interface returns a <see cref="'CaretPosition'"/> object, containing the DOM node, along with the caret and caret's character offset within that node.
</summary>
<remarks>
<para>-<see cref="'CaretPosition'"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/caretPositionFromPoint"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="'CaretPosition'"/> object or <c>null</c>.The returned value is <c>null</c> if there is no viewport associated with the document, if the <c>x</c> or <c>y</c> are negative or outside of the viewport region, or if the coordinates indicate a point where no text insertion point indicator could be inserted.</returns>
</DocumentCaretPositionFromPoint>
<DocumentCaretRangeFromPoint>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>caretRangeFromPoint()</c></strong> method of the<br/><see cref="Document"/> interface returns a <see cref="Range"/> object for the document<br/>fragment under the specified coordinates.
</summary>
<remarks>
<para>This method is the WebKit-proprietary implementation of the <see cref="Document.CaretPositionFromPoint"/> method.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/caretRangeFromPoint"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>One of the following:</returns>
</DocumentCaretRangeFromPoint>
<DocumentCharacterSet>
<summary>
The <strong><c>Document.characterSet</c></strong><br/>read-only property returns the <see href="https://developer.mozilla.org/en-US/docs/Glossary/Character_encoding">character encoding</see> of the<br/>document that it&amp;apos;s currently rendered with.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>A &amp;quot;character set&amp;quot; and a &amp;quot;character encoding&amp;quot; are related, but different. Despite the<br/>name of this property, it returns the <strong>encoding</strong>.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</DocumentCharacterSet>
<DocumentChildElementCount>
<summary>
The <strong><c>Document.childElementCount</c></strong> read-only property<br/>returns the number of child elements of the document.
</summary>
<remarks>
<para>To get the number of children of a specific element, see <see cref="Element.ChildElementCount"/>.</para>
<para>-<see cref="Element.ChildElementCount"/><br/>-<see cref="DocumentFragment.ChildElementCount"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number.</value>
</DocumentChildElementCount>
<DocumentChildren>
<summary>
The read-only <strong><c>children</c></strong> property returns a live <see cref="HTMLCollection"/><br/>which contains all of the child <see cref="Element"/> of the document upon which it was called.
</summary>
<remarks>
<para>For HTML documents, this is usually only the root <c>&amp;lt;html&amp;gt;</c> element.</para><para>See <see cref="Element.Children"/> for child elements of specific HTML elements within the document.</para>
<para>-<see cref="Element.Children"/><br/>-<see cref="Node.ChildNodes"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/children"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLCollection"/> which is a live, ordered collection of the DOM<br/>elements which are children of the current document. You can access the<br/>individual child nodes in the collection by using either the<br/><see cref="HTMLCollection.Item"/> method on the collection, or by using<br/>JavaScript array-style notation.If the document has no element children, then <c>children</c> is an empty list with a<br/><c>length</c> of <c>0</c>.</value>
</DocumentChildren>
<DocumentClear>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Document.clear()</c></strong> method does nothing, but doesn&amp;apos;t raise any error.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/clear"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentClear>
<DocumentClose>
<summary>
The <strong><c>Document.close()</c></strong> method finishes writing to a<br/>document, opened with <see cref="Document.Open"/>.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/close"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentClose>
<DocumentCompatMode>
<summary>
The <strong><c>Document.compatMode</c></strong> read-only property indicates<br/>whether the document is rendered in <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Guides/Quirks_mode_and_standards_mode">Quirks mode</see> or<br/>Standards mode.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string that is one of the following:<blockquote class="NOTE"><h5>NOTE</h5>All these modes are now standardized, so the older &amp;quot;standards&amp;quot;<br/>and &amp;quot;almost standards&amp;quot; names are nonsensical and no longer used in standards.</blockquote></value>
</DocumentCompatMode>
<DocumentContentType>
<summary>
The <strong><c>Document.contentType</c></strong> read-only property returns the<br/>MIME type that the document is being rendered as. This may come from HTTP headers or<br/>other sources of MIME information, and might be affected by automatic type conversions<br/>performed by either the browser or extensions.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This property is unaffected by <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta">meta</see><br/>elements.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value><c>contentType</c> is a read-only property.</value>
</DocumentContentType>
<DocumentCookie>
<summary>
The <see cref="Document"/> property <c>cookie</c> lets you read and write <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Cookies">cookies</see> associated with the document.<br/>It serves as a getter and setter for the actual values of the cookies.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Cookies">HTTP cookies</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">DOM Storage</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/URL/pathname"><c>URL.pathname</c></see><br/>-<see cref="DateToUTCString"/><br/>-<see href="https://datatracker.ietf.org/doc/html/rfc2965">RFC 2965</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string containing a semicolon-separated list of all cookies (i.e., <c>key=value</c> pairs).<br/>Note that each <strong>key</strong> and <strong>value</strong> may be surrounded by whitespace (space and tab characters): in fact, {{RFC(6265)}} mandates a single space after each semicolon, but some user agents may not abide by this.You can also assign to this property a string of the form <c>&amp;quot;key=value&amp;quot;</c>, specifying the cookie to set/update. Note that you can only set/update a single cookie at a time using this method. Consider also that:<blockquote class="NOTE"><h5>NOTE</h5>As you can see from the code above, <c>document.cookie</c> is an <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#description">accessor property</see> with native <strong>setter</strong> and <strong>getter</strong> functions, and consequently is <strong>not</strong> a <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#description">data property</see> with a value: what you write is not the same as what you read, everything is always mediated by the JavaScript interpreter.</blockquote></value>
</DocumentCookie>
<DocumentCreateAttribute>
<summary>
The <strong><c>Document.createAttribute()</c></strong> method creates a new<br/>attribute node, and returns it. The object created is a node implementing the<br/><see cref="Attr"/> interface. The DOM does not enforce what sort of attributes can be<br/>added to a particular element in this manner.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>The string given in parameter is converted to lowercase.</para></blockquote>
<para>-<see cref="Document.CreateAttributeNS"/><br/>-<see cref="Document.CreateElement"/><br/>-<see cref="Element.SetAttribute"/><br/>-<see cref="Element.SetAttributeNode"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Attr"/> node.</returns>
</DocumentCreateAttribute>
<DocumentCreateAttributeNS>
<summary>
The <strong><c>Document.createAttributeNS()</c></strong> method creates a new attribute node<br/>with the specified namespace URI and qualified name, and returns it.<br/>The object created is a node implementing the<br/><see cref="Attr"/> interface. The DOM does not enforce what sort of attributes can be<br/>added to a particular element in this manner.
</summary>
<remarks>
<para>-<see cref="Document.CreateAttribute"/><br/>-<see cref="Document.CreateElementNS"/><br/>-<see cref="Element.SetAttributeNS"/><br/>-<see cref="Element.SetAttributeNode"/><br/>-<see cref="Element.SetAttributeNodeNS"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttributeNS"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The new <see cref="Attr"/> node.</returns>
</DocumentCreateAttributeNS>
<DocumentCreateCDATASection>
<summary>
<strong><c>createCDATASection()</c></strong> creates a new CDATA section node,<br/>and returns it.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see href="https://developer.mozilla.org/en-US/docs/Web/API/CDATASection">CDATA Section</see> node.</returns>
</DocumentCreateCDATASection>
<DocumentCreateComment>
<summary>
<strong><c>createComment()</c></strong> creates a new comment node, and returns<br/>it.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createComment"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A new <see cref="Comment"/> object.</returns>
</DocumentCreateComment>
<DocumentCreateDocumentFragment>
<summary>
Creates a new empty <see cref="DocumentFragment"/> into which<br/>DOM nodes can be added to build an offscreen DOM tree.
</summary>
<remarks>
<para>-<see cref="DOMImplementation.CreateDocument"/><br/>-<see cref="DocumentFragment"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A newly created, empty, <see cref="DocumentFragment"/> object, which is ready to have<br/>nodes inserted into it.</returns>
</DocumentCreateDocumentFragment>
<DocumentCreateElement>
<summary>
In an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</see> document, the <strong><c>document.createElement()</c></strong> method creates the HTML element specified by <c>localName</c>, or an <see cref="HTMLUnknownElement"/> if <c>localName</c> isn&amp;apos;t recognized.
</summary>
<remarks>
<para>-<see cref="Node.RemoveChild"/><br/>-<see cref="Node.ReplaceChild"/><br/>-<see cref="Node.AppendChild"/><br/>-<see cref="Node.InsertBefore"/><br/>-<see cref="Node.HasChildNodes"/><br/>-<see cref="Document.CreateElementNS"/> â€” to explicitly specify the namespace URI for the element.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The new <see cref="Element"/>.<blockquote class="NOTE"><h5>NOTE</h5>A new {{domxref(&amp;quot;HTMLElement&amp;quot;, &amp;quot;HTMLElement&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;1&amp;quot;)}} is returned if the document is an {{domxref(&amp;quot;HTMLDocument&amp;quot;, &amp;quot;HTMLDocument&amp;quot;, <strong>, &amp;quot;1&amp;quot;)}}, which is the most common case. Otherwise a new {{domxref(&amp;quot;Element&amp;quot;,&amp;quot;Element&amp;quot;,</strong>,&amp;quot;1&amp;quot;)}} is returned.</blockquote></returns>
</DocumentCreateElement>
<DocumentCreateElementNS>
<summary>
Creates an element with the specified namespace URI and qualified name.
</summary>
<remarks>
<para>To create an element without specifying a namespace URI, use the<br/><see cref="Document.CreateElement"/> method.</para>
<para>-<see cref="Document.CreateElement"/><br/>-<see cref="Document.CreateTextNode"/><br/>-<see cref="Element.NamespaceURI"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The new <see cref="Element"/>.</returns>
</DocumentCreateElementNS>
<DocumentCreateEvent>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>Many methods used with <c>createEvent</c>, such as <c>initCustomEvent</c>, are deprecated.<br/>Use <see href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent">event constructors</see> instead.</blockquote>
</summary>
<remarks>
<para>Creates an <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">event</see> of the type specified. The<br/>returned object should be first initialized and can then be passed to<br/><see cref="EventTarget.DispatchEvent"/>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events">Creating and triggering events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> object.</returns>
</DocumentCreateEvent>
<DocumentCreateExpression>
<summary>
This method compiles an <see cref="XPathExpression"/> which can then be used for (repeated) evaluations.
</summary>
<remarks>
<para>You must call this method on the same document that you run the expression against.</para>
<para>-<see cref="Document.Evaluate"/><br/>-<see cref="XPathExpression"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createExpression"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns><see cref="XPathExpression"/></returns>
</DocumentCreateExpression>
<DocumentCreateNodeIterator>
<summary>
The <strong><c>Document.createNodeIterator()</c></strong> method returns a new <see href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator"><c>NodeIterator</c></see> object.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createNodeIterator"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A new <see href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator"><c>NodeIterator</c></see> object.</returns>
</DocumentCreateNodeIterator>
<DocumentCreateNSResolver>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>createNSResolver()</c></strong> method of the <see cref="Document"/> interface used to create a custom <c>XPathNSResolver</c> object. It now returns the input as-is and is only kept for compatibility reasons.
</summary>
<remarks>
<para>-<see cref="Document.Evaluate"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/XML/XPath/Guides/Introduction_to_using_XPath_in_JavaScript">Introduction to using XPath in JavaScript</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns><c>nodeResolver</c> itself.</returns>
</DocumentCreateNSResolver>
<DocumentCreateProcessingInstruction>
<summary>
<c>createProcessingInstruction()</c> generates a new <see href="https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction">processing instruction</see> node and returns it.
</summary>
<remarks>
<para>The new node usually will be inserted into an XML document in order to accomplish anything with it, such as with <see cref="Node.InsertBefore"/>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createProcessingInstruction"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentCreateProcessingInstruction>
<DocumentCreateRange>
<summary>
The <strong><c>Document.createRange()</c></strong> method returns a new<br/><see cref="Range"/> object.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createRange"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The created <see cref="Range"/> object.</returns>
</DocumentCreateRange>
<DocumentCreateTextNode>
<summary>
Creates a new <see cref="Text"/> node. This method can be used to escape HTML<br/>characters.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Text"/> node.</returns>
</DocumentCreateTextNode>
<DocumentCreateTouch>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Document.createTouch()</c></strong> method creates and returns a new <see cref="Touch"/> object.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Use the <see cref="TouchEvent.TouchEvent"/> constructor.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events">Touch events</see><br/>-<see cref="TouchList"/><br/>-<see cref="Touch"/><br/>-<see cref="Document.CreateTouchList"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createTouch"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentCreateTouch>
<DocumentCreateTouchList>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Document.createTouchList()</c></strong> method creates and returns a new <see cref="TouchList"/> object.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events">Touch events</see><br/>-<see cref="Touch"/><br/>-<see cref="TouchEvent"/><br/>-<see cref="TouchList"/><br/>-<see cref="Document.CreateTouch"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createTouchList"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentCreateTouchList>
<DocumentCreateTreeWalker>
<summary>
The <strong><c>Document.createTreeWalker()</c></strong> creator method returns a newly created <see cref="TreeWalker"/> object.
</summary>
<remarks>
<para>-<see cref="TreeWalker"/>: Related interface<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A new <see cref="TreeWalker"/> object.</returns>
</DocumentCreateTreeWalker>
<DocumentCurrentScript>
<summary>
The <strong><c>Document.currentScript</c></strong> property returns the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script">script</see> element whose script is currently being processed and <see href="https://github.com/whatwg/html/issues/997">isn&amp;apos;t a JavaScript module</see>. (For modules use <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta"><c>import.meta</c></see> instead.)
</summary>
<remarks>
<para>It's important to note that this will not reference the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script">script</see><br/>element if the code in the script is being called as a callback or event handler; it<br/>will only reference the element while it&amp;apos;s initially being processed.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta"><c>import.meta</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script">script</see><br/>-<see cref="Document.Afterscriptexecute"/> event of <c>Document</c><br/>-<see cref="Document.Beforescriptexecute"/> event of <c>Document</c><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="HTMLScriptElement"/> or null.</value>
</DocumentCurrentScript>
<DocumentDefaultView>
<summary>
In browsers, <strong><c>document.defaultView</c></strong> returns the<br/><see cref="Window"/> object associated with {{Glossary("Browsing_context", "a document")}}, or <c>null</c> if none is available.
</summary>
<remarks>
<para>This property is read-only.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The <see cref="Window"/> object.</value>
</DocumentDefaultView>
<DocumentDesignMode>
<summary>
<strong><c>document.designMode</c></strong> controls whether the entire document<br/>is editable. Valid values are <c>&amp;quot;on&amp;quot;</c> and <c>&amp;quot;off&amp;quot;</c>. According to the<br/>specification, this property is meant to default to <c>&amp;quot;off&amp;quot;</c>. Firefox follows<br/>this standard. The earlier versions of Chrome and IE default to <c>&amp;quot;inherit&amp;quot;</c>.<br/>Starting in Chrome 43, the default is <c>&amp;quot;off&amp;quot;</c> and <c>&amp;quot;inherit&amp;quot;</c> is<br/>no longer supported. In IE6-10, the value is capitalized.
</summary>
<remarks>
<para>-<see cref="HTMLElement.ContentEditable"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string indicating whether <c>designMode</c> is (or should be) set to on or off.<br/>Valid values are <c>on</c> and <c>off</c>.</value>
</DocumentDesignMode>
<DocumentDir>
<summary>
The <strong><c>Document.dir</c></strong> property is a string<br/>representing the directionality of the text of the document, whether left to right<br/>(default) or right to left. Possible values are <c>&amp;apos;rtl&amp;apos;</c>, right to left, and<br/><c>&amp;apos;ltr&amp;apos;</c>, left to right.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/dir"><c>dir</c></see> global<br/>attribute<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/dir"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</DocumentDir>
<DocumentDoctype>
<summary>
The <strong><c>doctype</c></strong> read-only property of the <see cref="Document"/> interface is a <see cref="DocumentType"/> object representing the {{glossary("Doctype", "Document Type Declaration (DTD)")}} associated with the current document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/doctype"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="DocumentType"/> object.</value>
</DocumentDoctype>
<DocumentDocument>
<summary>
The <strong><c>Document</c></strong> constructor creates a new<br/><see cref="Document"/> object that is a web page loaded in the browser and serving as<br/>an entry point into the page&amp;apos;s content.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/Document"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentDocument>
<DocumentDocumentElement>
<summary>
The <strong><c>documentElement</c></strong> read-only property of the <see cref="Document"/> interface returns the<br/><see cref="Element"/> that is the root element of the <see cref="Document"/> (for<br/>example, the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html">html</see> element for HTML documents).
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Element"/> object.</value>
</DocumentDocumentElement>
<DocumentDocumentURI>
<summary>
The <strong><c>documentURI</c></strong> read-only property of the<br/><see cref="Document"/> interface returns the document location as a string.
</summary>
<remarks>
<para>-The <see cref="Document.URL"/> property which returns the same value.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</DocumentDocumentURI>
<DocumentDomain>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>domain</c></strong> property of the <see cref="Document"/><br/>interface gets/sets the domain portion of the <see href="https://developer.mozilla.org/en-US/docs/Glossary/origin">origin</see> of the current<br/>document, as used by the <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">same-origin policy</see>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same-origin policy</see><br/>-<see cref="Location.Hostname"/><br/>-<see cref="Location.Host"/><br/>-<see cref="Window.Origin"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/domain"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</DocumentDomain>
<DocumentDOMContentLoaded>
<summary>
The <strong><c>DOMContentLoaded</c></strong> event fires when the HTML document has been completely parsed, and all deferred scripts (<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script#defer"><c>&amp;lt;script defer src=&amp;quot;â€¦&amp;quot;&amp;gt;</c></see> and <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script#module"><c>&amp;lt;script type=&amp;quot;module&amp;quot;&amp;gt;</c></see>) have downloaded and executed. It doesn&amp;apos;t wait for other things like images, subframes, and async scripts to finish loading.
</summary>
<remarks>
<para><c>DOMContentLoaded</c> does not wait for stylesheets to load, however deferred scripts <strong>do</strong> wait for stylesheets, and the <c>DOMContentLoaded</c> event is queued after deferred scripts. Also, scripts which aren&amp;apos;t deferred or async (e.g., <c>&amp;lt;script&amp;gt;</c>) will wait for already-parsed stylesheets to load.</para><para>A different event, <see cref="Windowload"/>, should be used only to detect a fully-loaded page. It is a common mistake to use <c>load</c> where <c>DOMContentLoaded</c> would be more appropriate.</para><para>This event is not cancelable.</para>
<para>-Related events: <see cref="Windowload"/>, <see cref="Documentreadystatechange"/>, <see cref="Windowbeforeunload"/>, <see cref="Windowunload"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentDOMContentLoaded>
<DocumentElementFromPoint>
<summary>
The <strong><c>elementFromPoint()</c></strong><br/>method, available on the <see cref="Document"/> object, returns the topmost <see cref="Element"/> at the specified coordinates<br/>(relative to the viewport).
</summary>
<remarks>
<para>If the element at the specified point belongs to another document (for example, the<br/>document of an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see>), that document's parent element is returned<br/>(the <c>&amp;lt;iframe&amp;gt;</c> itself). If the element at the given point is anonymous<br/>or XBL generated content, such as a textbox&amp;apos;s scroll bars, then the first non-anonymous<br/>ancestor element (for example, the textbox) is returned.</para><para>Elements with <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events">pointer-events</see> set to <c>none</c> will be ignored,<br/>and the element below it will be returned.</para><para>If the method is run on another document (like an <c>&amp;lt;iframe&amp;gt;</c>&amp;apos;s<br/>subdocument), the coordinates are relative to the document where the method is being<br/>called.</para><para>If the specified point is outside the visible bounds of the document or either<br/>coordinate is negative, the result is <c>null</c>.</para><para>If you need to find the specific position inside the element, use<br/><see cref="Document.CaretPositionFromPoint"/>.</para>
<para>-<see cref="Document.ElementsFromPoint"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The topmost <see cref="Element"/> object located at the specified coordinates.</returns>
</DocumentElementFromPoint>
<DocumentElementsFromPoint>
<summary>
The <strong><c>elementsFromPoint()</c></strong> method<br/>of the <see cref="Document"/> interface returns an array of all elements<br/>at the specified coordinates (relative to the viewport).<br/>The elements are ordered from the topmost to the bottommost box of the viewport.
</summary>
<remarks>
<para>It operates in a similar way to the <see cref="Document.ElementFromPoint"/> method.</para>
<para>-<see cref="Document.ElementFromPoint"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An array of <see cref="'Element'"/> objects, ordered from the topmost to the bottommost box of the viewport.</returns>
</DocumentElementsFromPoint>
<DocumentEmbeds>
<summary>
The <strong><c>embeds</c></strong> read-only property of the<br/><see cref="Document"/> interface returns a list of the embedded<br/><see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed">embed</see> elements within the current document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/embeds"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLCollection"/>.</value>
</DocumentEmbeds>
<DocumentEnableStyleSheetsForSet>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> Enables the style sheets matching the specified name in the current style sheet set,<br/>and disables all other style sheets (except those without a title, which are always<br/>enabled).
</summary>
<remarks>
<para>-<see cref="Stylesheet"/><br/>-<see cref="Document.StyleSheets"/><br/>-<see cref="Document.LastStyleSheetSet"/><br/>-<see cref="Document.PreferredStyleSheetSet"/><br/>-<see cref="Document.SelectedStyleSheetSet"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentEnableStyleSheetsForSet>
<DocumentEvaluate>
<summary>
The <strong><c>evaluate()</c></strong> method of the <see cref="Document"/> interface selects elements based on the <see href="https://developer.mozilla.org/en-US/docs/Web/XML/XPath">XPath</see><br/>expression given in parameters.
</summary>
<remarks>
<para>XPath expressions can be evaluated on both HTML and XML documents.</para>
<para>-<see cref="Document.CreateExpression"/><br/>-<see cref="XPathResult"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An <see cref="XPathResult"/> linking to the selected nodes. If <c>result</c> was <c>null</c>, it is a new object,<br/>if not, it is the same object as the one passed as the <c>result</c> parameter.</returns>
</DocumentEvaluate>
<DocumentExecCommand>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>execCommand</c></strong> method implements multiple different commands. Some of them provide access to the clipboard, while others are for editing <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input">form inputs</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/contenteditable"><c>contenteditable</c></see> elements or entire documents (when switched to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode">design mode</see>).
</summary>
<remarks>
<para>To access the clipboard, the newer <see href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API">Clipboard API</see> is recommended over <c>execCommand()</c>. However, there is no replacement for the editing commands: unlike direct DOM manipulation, modifications performed by <c>execCommand()</c> preserve the undo buffer (edit history).</para><para>Most commands affect the document&amp;apos;s <see href="https://developer.mozilla.org/en-US/docs/Web/API/Selection">selection</see>. For example, some commands (bold, italics, etc.) format the currently selected text, while others delete the selection, insert new elements (replacing the selection) or affect an entire line (indenting). Only the currently active editable element can be modified, but some commands (e.g., <c>copy</c>) can work without an editable element.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Modifications performed by <c>execCommand()</c> may or may not trigger <see cref="Elementbeforeinput"/> and <see cref="Elementinput"/> events, depending on the browser and configuration. If triggered, the handlers for the events will run before <c>execCommand()</c> returns. Authors need to be careful about such recursive calls, especially if they call <c>execCommand()</c> in response to these events. From Firefox 82, nested <c>execCommand()</c> calls will always fail, see <see href="https://bugzil.la/1634262">bug 1634262</see>.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API">Clipboard API</see><br/>-MDN example: <see href="https://mdn.github.io/dom-examples/execcommand/">execCommands supported in your browser</see><br/>-<see cref="HTMLElement.ContentEditable"/><br/>-<see cref="Document.DesignMode"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A boolean value that is <c>false</c> if the command is unsupported or disabled.<blockquote class="NOTE"><h5>NOTE</h5><c>document.execCommand()</c> only returns<br/><c>true</c> if it is invoked as part of a user interaction. You can&amp;apos;t use it to<br/>verify browser support before calling a command.</blockquote></returns>
</DocumentExecCommand>
<DocumentExitFullscreen>
<summary>
The <see cref="Document"/> method<br/><strong><c>exitFullscreen()</c></strong> requests that the element on this<br/>document which is currently being presented in fullscreen mode be taken out of<br/>fullscreen mode, restoring the previous state of the screen. This usually<br/>reverses the effects of a previous call to <see cref="Element.RequestFullscreen"/>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Fullscreen API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">Guide to the Fullscreen API</see><br/>-<see cref="Element.RequestFullscreen"/><br/>-<see cref="Document.FullscreenElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:fullscreen">:fullscreen</see> and {{cssxref("::backdrop&amp;quot;)}}<br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see> <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe#allowfullscreen"><c>allowfullscreen</c></see><br/>attribute<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> which is resolved once the {{Glossary("user agent")}} has<br/>finished exiting fullscreen mode. If an error occurs while attempting to exit<br/>fullscreen mode, the <c>catch()</c> handler for the promise is called.</returns>
</DocumentExitFullscreen>
<DocumentExitPictureInPicture>
<summary>
The <strong><c>exitPictureInPicture()</c></strong> method of the <see cref="Document"/> interface<br/>requests that a video contained<br/>in this document, which is currently floating, be taken out of picture-in-picture<br/>mode, restoring the previous state of the screen. This usually reverses the<br/>effects of a previous call to <see cref="HTMLVideoElement.RequestPictureInPicture"/>.
</summary>
<remarks>
<para>-<see cref="HTMLVideoElement.RequestPictureInPicture"/><br/>-<see cref="HTMLVideoElement.DisablePictureInPicture"/><br/>-<see cref="Document.PictureInPictureEnabled"/><br/>-<see cref="Document.PictureInPictureElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:picture-in-picture">:picture-in-picture</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Picture-in-Picture_API#events">Picture-in-Picture events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPictureInPicture"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/>, which is resolved once the {{Glossary("user agent")}} has<br/>finished exiting picture-in-picture mode. If an error occurs while attempting to exit<br/>fullscreen mode, the <c>catch()</c> handler for the promise is called.</returns>
</DocumentExitPictureInPicture>
<DocumentExitPointerLock>
<summary>
The <strong><c>exitPointerLock()</c></strong> method of the <see cref="Document"/> interface asynchronously releases a pointer lock previously requested through <see cref="Element.RequestPointerLock"/>.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>While the <strong><c>exitPointerLock()</c></strong> method is called on the document, the <strong><c>requestPointerLock()</c></strong> method is called on an element.</para></blockquote><para>To track the success or failure of the request, it is necessary to listen for the <see cref="Documentpointerlockchange"/> and <see cref="Documentpointerlockerror"/> events.</para>
<para>-<see cref="Document.PointerLockElement"/><br/>-<see cref="Element.RequestPointerLock"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API">Pointer Lock</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentExitPointerLock>
<DocumentFeaturePolicy>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>featurePolicy</c></strong> read-only property of the <see cref="Document"/> interface returns the <see cref="FeaturePolicy"/> interface which provides a simple API for inspecting the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Permissions_Policy">Permissions Policies</see> applied to a specific document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/featurePolicy"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="FeaturePolicy"/> object that can be used to inspect the Permissions Policy settings applied to the document.</value>
</DocumentFeaturePolicy>
<DocumentFgColor>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> <strong><c>fgColor</c></strong> gets/sets the foreground color, or text color, of<br/>the current document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fgColor"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string representing the color as a word (e.g., <c>&amp;quot;red&amp;quot;</c>) or hexadecimal value (e.g., <c>&amp;quot;#ff0000&amp;quot;</c>).</value>
</DocumentFgColor>
<DocumentFirstElementChild>
<summary>
The <strong><c>Document.firstElementChild</c></strong> read-only property<br/>returns the document's first child <see cref="Element"/>, or <c>null</c> if there<br/>are no child elements.
</summary>
<remarks>
<para>For HTML documents, this is usually the only child, the root <c>&amp;lt;html&amp;gt;</c> element.</para><para>See <see cref="Element.FirstElementChild"/> for the first child element of specific elements within a document.</para>
<para>-<see cref="Element.FirstElementChild"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/firstElementChild"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Element"/> object, or <c>null</c>.</value>
</DocumentFirstElementChild>
<DocumentFonts>
<summary>
The <strong><c>fonts</c></strong> property of the <see cref="Document"/> interface returns the <see cref="FontFaceSet"/> interface of the document.
</summary>
<remarks>
<para>This feature is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API">CSS Font Loading API</see>.</para>
<para>-<see cref="FontFaceSet"/> interface<br/>-<see cref="FontFace"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fonts"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The returned value is the <see cref="FontFaceSet"/> interface of the document.<br/>The <c>FontFaceSet</c> interface is useful for loading new fonts, checking the status of previously loaded fonts etc.</value>
</DocumentFonts>
<DocumentForms>
<summary>
The <strong><c>forms</c></strong> read-only property of the <see cref="Document"/> interface returns an <see cref="HTMLCollection"/> listing all the {{HTMLElement("form")}} elements contained in the document.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Similarly, you can access a list of a form's component user input elements using the <see cref="HTMLFormElement.Elements"/> property.</para></blockquote><para>You can also access named <c>&amp;lt;form&amp;gt;</c> elements as properties of the <c>document</c> object.<br/>For example, <c>document[&amp;quot;login-form&amp;quot;]</c> and <c>document.forms[&amp;quot;login-form&amp;quot;]</c> can both be used to access the form named <c>login-form</c>.</para><blockquote class="WARNING"><h5>WARNING</h5><para>Relying on the <c>document[&amp;quot;form-name&amp;quot;]</c> pattern is dangerous and discouraged because it can lead to unexpected conflicts with existing or future APIs in the browser.<br/>For example, if a browser introduces a built-in <c>document[&amp;quot;login-form&amp;quot;]</c> property in the future, your code may no longer be able to access the form element.<br/>To avoid such conflicts, always use <c>document.forms</c> to access named forms.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms">HTML forms</see><br/>-{{HTMLElement("form")}} and the <see cref="HTMLFormElement"/> interface<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/forms"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLCollection"/> object listing all of the document's forms.<br/>Each item in the collection is a <see cref="HTMLFormElement"/> representing a single <c>&amp;lt;form&amp;gt;</c> element.If the document has no forms, the returned collection is empty, with a length of zero.</value>
</DocumentForms>
<DocumentFragmentDirective>
<summary>
The <strong><c>fragmentDirective</c></strong> read-only property of the <see cref="Document"/> interface returns the <see cref="FragmentDirective"/> for the current document.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/URI/Reference/Fragment/Text_fragments">Text fragments</see><br/>-{{cssxref(&amp;quot;::target-text&amp;quot;)}}<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fragmentDirective"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="FragmentDirective"/> object.</value>
</DocumentFragmentDirective>
<DocumentFullscreen>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The obsolete <see cref="Document"/> interface's <strong><c>fullscreen</c></strong> read-only property reports whether or not the document is currently displaying content in fullscreen mode.
</summary>
<remarks>
<para>Although this property is read-only, it will not throw if it is modified (even in strict mode); the setter is a no-operation and it will be ignored.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Since this property is deprecated, you can determine if fullscreen mode is active on the document by checking to see if <see cref="Document.FullscreenElement"/> is not <c>null</c>.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Fullscreen API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">Guide to the Fullscreen API</see><br/>-<see cref="Document.FullscreenEnabled"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A Boolean value which is <c>true</c> if the document is currently displaying an element in fullscreen mode; otherwise, the value is <c>false</c>.</value>
</DocumentFullscreen>
<DocumentFullscreenchange>
<summary>
The <strong><c>fullscreenchange</c></strong> event is fired immediately after the browser switches into or out of fullscreen mode.
</summary>
<remarks>
<para>The event is sent to the <c>Element</c> that is transitioning into or out of fullscreen mode, and this event then bubbles up to the <c>Document</c>.</para><para>To find out whether the <c>Element</c> is entering or exiting fullscreen mode, check the value of <see cref="Document.FullscreenElement"/>: if this value is <c>null</c> then the element is exiting fullscreen mode, otherwise it is entering fullscreen mode.</para><para>This event is not cancelable.</para>
<para>-<see cref="Documentfullscreenerror"/><br/>-<see cref="Element"/>: <see cref="Elementfullscreenchange"/> event<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Fullscreen API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">Guide to the Fullscreen API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentFullscreenchange>
<DocumentFullscreenElement>
<summary>
The<br/><strong><c>Document.fullscreenElement</c></strong> read-only<br/>property returns the <see cref="Element"/> that is currently being presented in<br/>fullscreen mode in this document, or <c>null</c> if fullscreen mode is not<br/>currently in use.
</summary>
<remarks>
<para>Although this property is read-only, it will not throw if it is modified (even in<br/>strict mode); the setter is a no-operation and it will be ignored.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Fullscreen API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">Guide to the Fullscreen API</see><br/>-<see cref="Element.RequestFullscreen"/><br/>-<see cref="Document.ExitFullscreen"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:fullscreen">:fullscreen</see> and {{cssxref("::backdrop&amp;quot;)}}<br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see> <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe#allowfullscreen"><c>allowfullscreen</c></see><br/>attribute<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The <see cref="Element"/> object that's currently in fullscreen mode; if fullscreen<br/>mode isn&amp;apos;t currently in use by the <c>document</c>, the returned<br/>value is <c>null</c>. If there are multiple elements in fullscreen mode, the topmost (most recently requested) element is returned.</value>
</DocumentFullscreenElement>
<DocumentFullscreenEnabled>
<summary>
The read-only <strong><c>fullscreenEnabled</c></strong><br/>property on the <see cref="Document"/> interface indicates whether or not fullscreen<br/>mode is available.
</summary>
<remarks>
<para>fullscreen mode is available only for a page that has no<br/>windowed plug-ins in any of its documents, and if all <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see> elements<br/>which contain the document have their <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe#allowfullscreen"><c>allowfullscreen</c></see><br/>attribute set.</para><para>Although this property is read-only, it will not throw if it is modified (even in<br/>strict mode); the setter is a no-operation and it will be ignored.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Fullscreen API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">Guide to the Fullscreen API</see><br/>-<see cref="Element.RequestFullscreen"/><br/>-<see cref="Document.ExitFullscreen"/><br/>-<see cref="Document.FullscreenElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:fullscreen">:fullscreen</see> and {{cssxref("::backdrop&amp;quot;)}}<br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see> <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe#allowfullscreen"><c>allowfullscreen</c></see><br/>attribute<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value which is <c>true</c> if the document and the<br/>elements within can be placed into fullscreen mode by calling<br/><see cref="Element.RequestFullscreen"/>. If fullscreen mode isn't available, this<br/>value is <c>false</c>.</value>
</DocumentFullscreenEnabled>
<DocumentFullscreenerror>
<summary>
The <strong><c>fullscreenerror</c></strong> event is fired when the browser cannot switch to fullscreen mode.
</summary>
<remarks>
<para>As with the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenchange_event"><c>fullscreenchange</c> event</see>, two <c>fullscreenerror</c> events are fired; the first is sent to the <see cref="Element"/> which failed to change modes, and the second is sent to the <see cref="Document"/> which owns that element.</para><para>For some reasons that switching into fullscreen mode might fail, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">the guide to the Fullscreen API</see>.</para><para>This event is not cancelable.</para>
<para>-<see cref="Documentfullscreenchange"/><br/>-<see cref="Element"/>: <see cref="Elementfullscreenerror"/> event<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Fullscreen API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">Guide to the Fullscreen API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenerror"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentFullscreenerror>
<DocumentGetAnimations>
<summary>
The <c>getAnimations()</c> method of the <see cref="Document"/> interface<br/>returns an array of all <see cref="Animation"/> objects currently in effect whose<br/>target elements are descendants of the document. This array includes <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animations</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions">CSS Transitions</see>, and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations</see>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animations</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions">CSS Transitions</see><br/>-<see cref="Element.GetAnimations"/> - Fetch only the animations on a single<br/><see cref="Element"/> and its descendants.<br/>-<see cref="Animation"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An {{jsxref("Array")}} of <see cref="Animation"/> objects, each representing one<br/>animation currently associated with elements which are descendants of the<br/><see cref="Document"/> on which it's called.</returns>
</DocumentGetAnimations>
<DocumentGetElementById>
<summary>
The <strong><c>getElementById()</c></strong> method of the <see cref="Document"/> interface returns an <see cref="Element"/> object representing the element whose <see cref="Element.Id"/> property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly.
</summary>
<remarks>
<para>If you need to get access to an element which doesn't have an ID, you can use <see cref="Document.QuerySelector"/> to find the element using any {{Glossary("CSS selector", "selector")}}.</para><blockquote class="NOTE"><h5>NOTE</h5><para>IDs should be unique inside a document. If two or more elements in a document have the same ID, this method returns the first element found.</para></blockquote>
<para>-<see cref="Document"/> reference for other methods and properties you can use to get references to elements in the document.<br/>-<see cref="Document.QuerySelector"/> for selectors via queries like <c>&amp;apos;div.myclass&amp;apos;</c><br/>-<see cref="Document.Evaluate"/> - has a utility method for selecting by <c>xml:id</c> in <see href="https://developer.mozilla.org/en-US/docs/Glossary/XML">XML</see> documents<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An <see cref="Element"/> object describing the DOM element object matching the specified ID, or <c>null</c> if no matching element was found in the document.</returns>
</DocumentGetElementById>
<DocumentGetElementsByClassName>
<summary>
The <strong><c>getElementsByClassName</c></strong> method of<br/><see cref="Document"/> interface returns an array-like object<br/>of all child elements which have all of the given class name(s).
</summary>
<remarks>
<para>When called on<br/>the <see cref="Document"/> object, the complete document is searched, including the<br/>root node. You may also call <see cref="Element.GetElementsByClassName"/> on any element; it will return only elements which are descendants of the specified root element with the given class name(s).</para><blockquote class="WARNING"><h5>WARNING</h5><para>This is a live <see cref="HTMLCollection"/>. Changes in the DOM will<br/>reflect in the array as the changes occur. If an element selected by this array no<br/>longer qualifies for the selector, it will automatically be removed. Be aware of this<br/>for iteration purposes.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A live <see cref="HTMLCollection"/> of found elements.</returns>
</DocumentGetElementsByClassName>
<DocumentGetElementsByName>
<summary>
The <strong><c>getElementsByName()</c></strong> method<br/>of the <see cref="Document"/> object returns a <see cref="NodeList"/> Collection of<br/>elements with a given <c>name</c> attribute in the document.
</summary>
<remarks>
<para>-<see cref="Document.GetElementById"/> to return a reference to an element by its<br/>unique <c>id</c><br/>-<see cref="Document.GetElementsByTagName"/> to return references to elements with<br/>the same <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName">tag name</see><br/>-<see cref="Document.QuerySelector"/> to return references to elements via CSS<br/>selectors like <c>&amp;apos;div.myclass&amp;apos;</c><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A live <see cref="NodeList"/> collection, meaning it automatically updates as new elements with the same <c>name</c> are added to, or removed from, the document.</returns>
</DocumentGetElementsByName>
<DocumentGetElementsByTagName>
<summary>
The <strong><c>getElementsByTagName</c></strong> method of<br/><see cref="Document"/> interface returns an<br/><see cref="HTMLCollection"/> of elements with the given tag name.
</summary>
<remarks>
<para>The complete<br/>document is searched, including the root node. The returned <c>HTMLCollection</c><br/>is live, meaning that it updates itself automatically to stay in sync with the DOM tree<br/>without having to call <c>document.getElementsByTagName()</c> again.</para>
<para>-<see cref="Element.GetElementsByTagName"/><br/>-<see cref="Document.GetElementById"/> to return a reference to an element by its<br/><c>id</c><br/>-<see cref="Document.GetElementsByName"/> to return a reference to an element by<br/>its <c>name</c><br/>-<see cref="Document.QuerySelector"/> for powerful selectors via queries like<br/><c>&amp;apos;div.myclass&amp;apos;</c><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A live <see cref="HTMLCollection"/> of found elements in the order they appear in the tree.</returns>
</DocumentGetElementsByTagName>
<DocumentGetElementsByTagNameNS>
<summary>
Returns a list of elements with the given tag name belonging to the given namespace.<br/>The complete document is searched, including the root node.
</summary>
<remarks>
<para>-<see cref="Element.GetElementsByTagNameNS"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagNameNS"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A live <see cref="HTMLCollection"/> of found elements in the order they appear in the tree.</returns>
</DocumentGetElementsByTagNameNS>
<DocumentGetSelection>
<summary>
The <strong><c>getSelection()</c></strong> method of the <see cref="Document"/> interface returns the <see cref="Selection"/> object associated with this document, representing the range of text selected by the user, or the current position of the caret.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getSelection"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Selection"/> object, or <c>null</c> if the document has no <see href="https://developer.mozilla.org/en-US/docs/Glossary/Browsing_context">browsing context</see> (for example, it is the document of an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see> that is not attached to a document).</returns>
</DocumentGetSelection>
<DocumentHasFocus>
<summary>
The <strong><c>hasFocus()</c></strong> method of the <see cref="Document"/> interface returns a boolean value indicating whether the document or any element inside the document has focus.<br/>This method can be used to determine whether the active element in a document has focus.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>When viewing a document, an element with focus is always the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement">active element</see> in the document, but an active element does not necessarily have focus.<br/>For example, an active element within a popup window that is not the foreground doesn&amp;apos;t have focus.</para></blockquote>
<para>-<see cref="Document.ActiveElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API">Using the Page Visibility API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns><c>false</c> if the active element in the document has no focus;<br/><c>true</c> if the active element in the document has focus.</returns>
</DocumentHasFocus>
<DocumentHasStorageAccess>
<summary>
The <strong><c>hasStorageAccess()</c></strong> method of the <see cref="Document"/> interface returns a {{jsxref("Promise")}} that resolves with a boolean value indicating whether the document has access to <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Third-party_cookies">third-party</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API#unpartitioned_versus_partitioned_cookies">unpartitioned</see> cookies.
</summary>
<remarks>
<para>This method is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API">Storage Access API</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This method is another name for <see cref="Document.HasUnpartitionedCookieAccess"/>. There are no current plans to remove this method in favor of <see cref="Document.HasUnpartitionedCookieAccess"/>.</para></blockquote>
<para>-<see cref="Document.HasUnpartitionedCookieAccess"/>, <see cref="Document.RequestStorageAccess"/>, <see cref="Document.RequestStorageAccessFor"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API/Using">Using the Storage Access API</see><br/>-<see href="https://webkit.org/blog/8124/introducing-storage-access-api/">Introducing Storage Access API</see> (WebKit blog)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/hasStorageAccess"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that resolves with a boolean value indicating whether the document has access to third-party cookies â€” <c>true</c> if it does, and <c>false</c> if not.The result returned by this method can be inaccurate in a couple of circumstances:<blockquote class="NOTE"><h5>NOTE</h5>If the promise gets resolved and a user gesture event was being processed when the function was originally called, the resolve handler will run as if a user gesture was being processed, so it will be able to call APIs that require user activation.</blockquote></returns>
</DocumentHasStorageAccess>
<DocumentHasUnpartitionedCookieAccess>
<summary>
The <strong><c>hasUnpartitionedCookieAccess()</c></strong> method of the <see cref="Document"/> interface returns a {{jsxref("Promise")}} that resolves with a boolean value indicating whether the document has access to <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Third-party_cookies">third-party</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API#unpartitioned_versus_partitioned_cookies">unpartitioned</see> cookies.
</summary>
<remarks>
<para>This method is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API">Storage Access API</see>.</para><para>This method is a new name for <see cref="Document.HasStorageAccess"/>.</para>
<para>-<see cref="Document.HasStorageAccess"/>, <see cref="Document.RequestStorageAccess"/>, <see cref="Document.RequestStorageAccessFor"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API/Using">Using the Storage Access API</see><br/>-<see href="https://webkit.org/blog/8124/introducing-storage-access-api/">Introducing Storage Access API</see> (WebKit blog)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/hasUnpartitionedCookieAccess"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that resolves with a boolean value indicating whether the document has access to third-party cookies â€” <c>true</c> if it does, and <c>false</c> if not.See <see cref="Document.HasStorageAccess"/> for more details.</returns>
</DocumentHasUnpartitionedCookieAccess>
<DocumentHead>
<summary>
The <strong><c>head</c></strong> read-only property of<br/>the <see cref="Document"/> interface returns the {{HTMLElement("head")}} element of<br/>the current document.
</summary>
<remarks>
<para>-<see cref="Document.Body"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/head"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLHeadElement"/>.</value>
</DocumentHead>
<DocumentHidden>
<summary>
The <strong><c>Document.hidden</c></strong> read-only property returns a Boolean<br/>value indicating if the page is considered hidden or not.
</summary>
<remarks>
<para>The <see cref="Document.VisibilityState"/> property provides an alternative way to determine whether the page is hidden.</para>
<para>-<see cref="Document.VisibilityState"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/hidden"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A Boolean value, <c>true</c> if the page is hidden, and <c>false</c> otherwise.</value>
</DocumentHidden>
<DocumentImages>
<summary>
The <strong><c>images</c></strong> read-only property of the <see cref="Document"/> interface returns a <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection">collection</see> of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement">images</see> in the current HTML document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/images"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLCollection"/> providing a live list of all of the images contained in the current document.<br/>Each entry in the collection is an <see cref="HTMLImageElement"/> representing a single image element.</value>
</DocumentImages>
<DocumentImplementation>
<summary>
The <strong><c>Document.implementation</c></strong> property returns a<br/><see cref="DOMImplementation"/> object associated with the current document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="DOMImplementation"/> object.</value>
</DocumentImplementation>
<DocumentImportNode>
<summary>
The <see cref="Document"/> object's <strong><c>importNode()</c></strong> method creates a copy of a<br/><see cref="Node"/> or <see cref="DocumentFragment"/> from another document, to be<br/>inserted into the current document later.
</summary>
<remarks>
<para>The imported node is not yet included in the document tree. To include it, you need to<br/>call an insertion method such as <see cref="Node.AppendChild"/> or<br/><see cref="Node.InsertBefore"/> with a node that <strong>is</strong><br/>currently in the document tree.</para><para>Unlike <see cref="Document.AdoptNode"/>, the original node is not removed from its<br/>original document. The imported node is a clone of the original.</para>
<para>-<see cref="Document.AdoptNode"/>, which behaves very similar to this method<br/>-<see cref="Node.AppendChild"/><br/>-<see cref="Node.InsertBefore"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The copied <c>importedNode</c> in the scope of the importing document.<blockquote class="NOTE"><h5>NOTE</h5><c>importedNode</c>'s <see cref="Node.ParentNode"/> is <c>null</c>, since it has not yet been inserted into the document tree!</blockquote></returns>
</DocumentImportNode>
<DocumentLastElementChild>
<summary>
The <strong><c>Document.lastElementChild</c></strong> read-only property<br/>returns the document's last child <see cref="Element"/>, or <c>null</c> if there<br/>are no child elements.
</summary>
<remarks>
<para>For HTML documents, this is usually the only child, the root <c>&amp;lt;html&amp;gt;</c> element.</para><para>See <see cref="Element.LastElementChild"/> for the last child element of specific elements within a document.</para>
<para>-<see cref="Element.LastElementChild"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/lastElementChild"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The root <c>&amp;lt;html&amp;gt;</c> element.</value>
</DocumentLastElementChild>
<DocumentLastModified>
<summary>
The <strong><c>lastModified</c></strong> property of the <see cref="Document"/><br/>interface returns a string containing the date and local time on which the current document<br/>was last modified.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</DocumentLastModified>
<DocumentLastStyleSheetSet>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Document.lastStyleSheetSet</c></strong> property returns the last enabled style sheet set. This property&amp;apos;s<br/>value changes whenever the <see cref="Document.SelectedStyleSheetSet"/> property is<br/>changed.
</summary>
<remarks>
<para>-<see cref="Document.PreferredStyleSheetSet"/><br/>-<see cref="Document.SelectedStyleSheetSet"/><br/>-<see cref="Document.StyleSheetSets"/><br/>-<see cref="Document.EnableStyleSheetsForSet"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The style sheet set that was most recently set. If the current style sheet set has not been changed by setting <see cref="Document.SelectedStyleSheetSet"/>, the returned value is <c>null</c>.<blockquote class="NOTE"><h5>NOTE</h5>This value doesn&amp;apos;t change when<br/><see cref="Document.EnableStyleSheetsForSet"/> is called.</blockquote></value>
</DocumentLastStyleSheetSet>
<DocumentLinkColor>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Document.linkColor</c></strong> property gets/sets the color of<br/>links within the document.
</summary>
<remarks>
<para>This property is deprecated. As an alternative, you can set the CSS<br/>{{cssxref("color")}} property on either HTML anchor links (<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a">a</see>) or on<br/><see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:link">:link</see> pseudo-classes.</para>
<para>-<see cref="Document.VlinkColor"/><br/>-<see cref="Document.AlinkColor"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/linkColor"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string representing the color as a word (e.g., <c>red</c>) or hexadecimal value (e.g., <c>#ff0000</c>).When set to the <c>null</c> value, that <c>null</c> value is converted to the empty string (<c>&amp;quot;&amp;quot;</c>), so <c>document.linkColor = null</c> is equivalent to <c>document.linkColor = &amp;quot;&amp;quot;</c>.</value>
</DocumentLinkColor>
<DocumentLinks>
<summary>
The <strong><c>links</c></strong> read-only property of the <see cref="Document"/> interface returns a collection of all {{HTMLElement("area")}} elements and {{HTMLElement("a")}} elements in a document with a value for the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/a#href">href</see> attribute.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/links"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLCollection"/>.</value>
</DocumentLinks>
<DocumentLocation>
<summary>
The <strong><c>Document.location</c></strong> read-only property returns a<br/><see cref="Location"/> object, which contains information about the URL of the document<br/>and provides methods for changing that URL and loading another URL.
</summary>
<remarks>
<para>Though <c>Document.location</c> is a <strong>read-only</strong> <c>Location</c><br/>object, you can also assign a string to it. This means that you can<br/>work with document.location as if it were a string in most cases:<br/><c>document.location = &amp;apos;http://www.example.com&amp;apos;</c> is a synonym of<br/><c>document.location.href = &amp;apos;http://www.example.com&amp;apos;</c>. If you assign another<br/>string to it, browser will load the website you assigned.</para><para>To retrieve just the URL as a string, the read-only <see cref="Document.URL"/><br/>property can also be used.</para><para>If the current document is not in a browsing context, the returned value is<br/><c>null</c>.</para>
<para>-The interface of the returned value, <see cref="Location"/><br/>-A similar information, but attached to the <see href="https://developer.mozilla.org/en-US/docs/Glossary/browsing context">browsing context</see>,<br/><see cref="Window.Location"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/location"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Location"/> object.</value>
</DocumentLocation>
<DocumentMoveBefore>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>moveBefore()</c></strong> method of the <see cref="Document"/> interface moves a given <see cref="Node"/> inside the <c>Document</c> DOM node as a direct child, before a given reference node.
</summary>
<remarks>
<para>-<see cref="DocumentFragment.MoveBefore"/><br/>-<see cref="Element.MoveBefore"/><br/>-<see cref="Node.InsertBefore"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/moveBefore"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentMoveBefore>
<DocumentMozSetImageElement>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>Document.mozSetImageElement()</c></strong> method changes the<br/>element being used as the CSS background for a background with a given background<br/>element ID.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/element">element</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSetImageElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentMozSetImageElement>
<DocumentOpen>
<summary>
The <strong><c>Document.open()</c></strong> method opens a document for<br/>{{domxref(&amp;quot;Document.write&amp;quot;, &amp;quot;writing&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;1&amp;quot;)}}.
</summary>
<remarks>
<para>This does come with some side effects. For example:</para>
<para>-<see cref="Document"/><br/>-<see cref="Window.Open"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/open"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <c>Document</c> object instance.</returns>
</DocumentOpen>
<DocumentParseHTMLUnsafe>
<summary>
The <strong><c>parseHTMLUnsafe()</c></strong> static method of the <see cref="Document"/> object is used to parse an HTML input, optionally filtering unwanted HTML elements and attributes, in order to create a new <see cref="Document"/> instance.
</summary>
<remarks>
<para>Unlike with <see cref="Document.ParseHTML"/>, XSS-unsafe HTML entities are not guaranteed to be removed.</para>
<para>-<see cref="Document.ParseHTML"/><br/>-<see cref="Element.SetHTML"/> and <see cref="Element.SetHTMLUnsafe"/><br/>-<see cref="ShadowRoot.SetHTML"/> and <see cref="ShadowRoot.SetHTMLUnsafe"/><br/>-<see cref="DOMParser.ParseFromString"/> for parsing HTML or XML into a DOM tree<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API">HTML Sanitizer API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/parseHTMLUnsafe"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Document"/>.</returns>
</DocumentParseHTMLUnsafe>
<DocumentParseHTML>
<summary>
The <strong><c>parseHTML()</c></strong> static method of the <see cref="Document"/> object provides an XSS-safe method to parse and sanitize a string of HTML in order to create a new <see cref="Document"/> instance.
</summary>
<remarks>
<para>-<see cref="Document.ParseHTMLUnsafe"/><br/>-<see cref="Element.SetHTML"/> and <see cref="Element.SetHTMLUnsafe"/><br/>-<see cref="ShadowRoot.SetHTML"/> and <see cref="ShadowRoot.SetHTMLUnsafe"/><br/>-<see cref="DOMParser.ParseFromString"/> for parsing HTML or XML into a DOM tree<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API">HTML Sanitizer API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/parseHTML"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Document"/>.</returns>
</DocumentParseHTML>
<DocumentPictureInPictureElement>
<summary>
The read-only <strong><c>pictureInPictureElement</c></strong> property of the <see cref="Document"/><br/>interface returns the <see cref="Element"/> that is currently being<br/>presented in picture-in-picture mode in this document, or <c>null</c> if<br/>picture-in-picture mode is not currently in use.
</summary>
<remarks>
<para>Although this property is read-only, it will not throw if it is modified (even in<br/>strict mode); the setter is a no-operation and will be ignored.</para>
<para>-<see cref="HTMLVideoElement.RequestPictureInPicture"/><br/>-<see cref="HTMLVideoElement.DisablePictureInPicture"/><br/>-<see cref="Document.PictureInPictureEnabled"/><br/>-<see cref="Document.ExitPictureInPicture"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:picture-in-picture">:picture-in-picture</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pictureInPictureElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A reference to the <see cref="Element"/> object that's currently in picture-in-picture mode.Returns <c>null</c> if the document has no associated element in picture-in-picture mode. For example, there&amp;apos;s no picture-in-picture element, or the element is from an iframe.</value>
</DocumentPictureInPictureElement>
<DocumentPictureInPictureEnabled>
<summary>
The read-only<br/><strong><c>pictureInPictureEnabled</c></strong> property of the<br/><see cref="Document"/> interface indicates whether or not picture-in-picture mode is<br/>available.
</summary>
<remarks>
<para>Picture-in-Picture mode is available by default unless specified<br/>otherwise by a <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Permissions-Policy/picture-in-picture">Permissions-Policy</see>.</para><para>Although this property is read-only, it will not throw if it is modified (even in<br/>strict mode); the setter is a no-operation and will be ignored.</para>
<para>-<see cref="HTMLVideoElement.RequestPictureInPicture"/><br/>-<see cref="HTMLVideoElement.DisablePictureInPicture"/><br/>-<see cref="Document.ExitPictureInPicture"/><br/>-<see cref="Document.PictureInPictureElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:picture-in-picture">:picture-in-picture</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pictureInPictureEnabled"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value, which is <c>true</c> if a video can enter<br/>picture-in-picture and be displayed in a floating window by calling<br/><see cref="HTMLVideoElement.RequestPictureInPicture"/>. If picture-in-picture mode isn't<br/>available, this value is <c>false</c>.</value>
</DocumentPictureInPictureEnabled>
<DocumentPlugins>
<summary>
The <strong><c>plugins</c></strong> read-only property of the<br/><see cref="Document"/> interface returns an <see cref="HTMLCollection"/> object<br/>containing one or more <see cref="HTMLEmbedElement"/>s representing the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed">embed</see> elements in the current document.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>For a list of installed plugins, use <see href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/plugins">Navigator.plugins</see><br/>instead.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/plugins"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLCollection"/>.</value>
</DocumentPlugins>
<DocumentPointerlockchange>
<summary>
The <strong><c>pointerlockchange</c></strong> event is fired when the pointer is locked/unlocked.
</summary>
<remarks>
<para>The event handler can use <see cref="Document.PointerLockElement"/> to determine whether the pointer is locked, and if so, to which element it is locked.</para><para>This event is not cancelable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API">Using Pointer Lock API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerlockchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentPointerlockchange>
<DocumentPointerLockElement>
<summary>
The <strong><c>pointerLockElement</c></strong> read-only property of the <see cref="Document"/> interface provides the element set as the target for mouse events while the pointer is locked.<br/>It is <c>null</c> if lock is pending, pointer is unlocked, or the target is in another document.
</summary>
<remarks>
<para>-<see cref="Document.ExitPointerLock"/><br/>-<see cref="Element.RequestPointerLock"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API">Pointer Lock</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="Element"/> or <c>null</c>.</value>
</DocumentPointerLockElement>
<DocumentPointerlockerror>
<summary>
The <strong><c>pointerlockerror</c></strong> event is fired when locking the pointer failed (for technical reasons or because the permission was denied).
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API">Using Pointer Lock API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerlockerror"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentPointerlockerror>
<DocumentPreferredStyleSheetSet>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>preferredStyleSheetSet</c></strong> property returns the preferred style sheet set as set by the page<br/>author.
</summary>
<remarks>
<para>-<see cref="Document.LastStyleSheetSet"/><br/>-<see cref="Document.SelectedStyleSheetSet"/><br/>-<see cref="Document.StyleSheetSets"/><br/>-<see cref="Document.EnableStyleSheetsForSet"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/preferredStyleSheetSet"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The author&amp;apos;s preferred style sheet set. This is determined from the order of style sheet declarations and the<br/><c>Default-Style</c> HTTP header.If there isn&amp;apos;t a preferred style sheet set defined by the author, the empty string (<c>&amp;quot;&amp;quot;</c>) is returned.</value>
</DocumentPreferredStyleSheetSet>
<DocumentPrepend>
<summary>
The <strong><c>Document.prepend()</c></strong> method<br/>inserts a set of <see cref="Node"/> objects or strings before<br/>the first child of the document. Strings<br/>are inserted as equivalent <see cref="Text"/> nodes.
</summary>
<remarks>
<para>This method prepends a child to a <c>Document</c>. To prepend to an arbitrary element in the tree, see <see cref="Element.Prepend"/>.</para>
<para>-<see cref="Document.Append"/><br/>-<see cref="Element.Prepend"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentPrepend>
<DocumentPrerendering>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>prerendering</c></strong> read-only property of the <see cref="Document"/> interface returns <c>true</c> if the document is currently in the process of prerendering, as initiated via the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API">Speculation Rules API</see>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API">Speculation Rules API</see><br/>-<see cref="Document.Prerenderingchange"/> event<br/>-<see cref="PerformanceNavigationTiming.ActivationStart"/> property<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/prerendering"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean. Returns <c>true</c> if the document is currently in the process of prerendering, and <c>false</c> if it is not. <c>false</c> will be returned for documents that have finished prerendering, and documents that were not prerendered.</value>
</DocumentPrerendering>
<DocumentPrerenderingchange>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>prerenderingchange</c></strong> event is fired on a prerendered document when it is activated (i.e., the user views the page).
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API">Speculation Rules API</see><br/>-<see cref="Document.Prerendering"/> property<br/>-<see cref="PerformanceNavigationTiming.ActivationStart"/> property<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/prerenderingchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentPrerenderingchange>
<DocumentQueryCommandEnabled>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Document.queryCommandEnabled()</c></strong> method reports whether<br/>or not the specified editor command is enabled by the browser.
</summary>
<remarks>
<para>-<see cref="Document.ExecCommand"/><br/>-<see cref="Document.QueryCommandSupported"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandEnabled"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>Returns a boolean value which is <c>true</c> if the command is enabled<br/>and <c>false</c> if the command isn&amp;apos;t.</returns>
</DocumentQueryCommandEnabled>
<DocumentQueryCommandState>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>queryCommandState()</c></strong> method will tell you if the current selection has a certain <see cref="Document.ExecCommand"/> command applied.
</summary>
<remarks>
<para>-<see cref="HTMLElement.ContentEditable"/><br/>-<see cref="Document.DesignMode"/><br/>-Browser bugs related to <c>queryCommandState()</c>: <see href="https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate">Scribe&amp;apos;s &amp;quot;Browser Inconsistencies&amp;quot; documentation</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandState"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns><c>queryCommandState()</c> can return a boolean value or <c>null</c> if the state is unknown.</returns>
</DocumentQueryCommandState>
<DocumentQueryCommandSupported>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Document.queryCommandSupported()</c></strong> method reports<br/>whether or not the specified editor command is supported by the browser.
</summary>
<remarks>
<para>-<see cref="Document.ExecCommand"/><br/>-<see cref="Document.QueryCommandEnabled"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandSupported"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>Returns a boolean value which is <c>true</c> if the command is supported<br/>and <c>false</c> if the command isn&amp;apos;t.</returns>
</DocumentQueryCommandSupported>
<DocumentQuerySelector>
<summary>
The <see cref="Document"/> method <strong><c>querySelector()</c></strong><br/>returns the first <see cref="Element"/> within the document that matches the specified<br/><see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors">CSS selector</see>, or group of CSS selectors. If no matches are found, <c>null</c> is returned.
</summary>
<remarks>
<para>The matching is done using depth-first pre-order traversal of the document&amp;apos;s nodes starting with the first element in the document&amp;apos;s markup and iterating through sequential nodes by order of the number of child nodes.</para><para>If the specified selector matches an ID that is incorrectly used more than once in the<br/>document, the first element with that ID is returned.</para><para><see href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements">CSS pseudo-elements</see> will never return any elements.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Locating_DOM_elements_using_selectors">Locating DOM elements using selectors</see><br/>-<see cref="Element.QuerySelector"/><br/>-<see cref="Document.QuerySelectorAll"/><br/>-<see cref="Element.QuerySelectorAll"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An <see cref="Element"/> object representing the first element in the document<br/>that matches the specified set of <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors">CSS selectors</see>, or <c>null</c> is returned if there are no matches.If you need a list of all elements matching the specified selectors, you should use<br/><see cref="Document.QuerySelectorAll"/> instead.</returns>
</DocumentQuerySelector>
<DocumentQuerySelectorAll>
<summary>
The <see cref="Document"/> method <strong><c>querySelectorAll()</c></strong><br/>returns a static (not live) <see cref="NodeList"/> representing a list of the<br/>document&amp;apos;s elements that match the specified group of selectors.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Locating_DOM_elements_using_selectors">Locating DOM elements using selectors</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors">Attribute selectors</see> in the CSS<br/>Guide<br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Attribute_selectors">Attribute selectors</see> in the MDN Learning Area<br/>-<see cref="Element.QuerySelector"/> and <see cref="Element.QuerySelectorAll"/><br/>-<see cref="Document.QuerySelector"/><br/>-<see cref="DocumentFragment.QuerySelector"/> and<br/><see cref="DocumentFragment.QuerySelectorAll"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A non-live <see cref="NodeList"/> containing one <see cref="Element"/> object for<br/>each element that matches at least one of the specified selectors or an empty<br/><see cref="NodeList"/> in case of no matches. The elements are in document order â€” that is, parents before children, earlier siblings before later siblings.<blockquote class="NOTE"><h5>NOTE</h5>If the specified <c>selectors</c> include a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements">CSS pseudo-element</see>, the returned list<br/>is always empty.</blockquote></returns>
</DocumentQuerySelectorAll>
<DocumentReadyState>
<summary>
The <strong><c>Document.readyState</c></strong> property describes the loading state of the <see cref="Document"/>.<br/>When the value of this property changes, a <see cref="Documentreadystatechange"/> event fires on the <see cref="Document"/> object.
</summary>
<remarks>
<para>-Related events:-<see cref="Documentreadystatechange"/><br/>-<see cref="DocumentDOMContentLoaded"/><br/>-<see cref="Windowload"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The <c>readyState</c> of a document can be one of following:</value>
</DocumentReadyState>
<DocumentReadystatechange>
<summary>
The <strong><c>readystatechange</c></strong> event is fired when the <see cref="Document.ReadyState"/> attribute of a document has changed.
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para>
<para>-Related events: <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event"><c>DOMContentLoaded</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event"><c>load</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event"><c>beforeunload</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event"><c>unload</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/readystatechange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentReadystatechange>
<DocumentReferrer>
<summary>
The <strong><c>Document.referrer</c></strong> property returns the <see href="https://www.w3.org/Addressing/#background">URI</see> of the page that linked to<br/>this page.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The value is an empty string if the user navigated to the page directly (not through a<br/>link, but, for example, by using a bookmark). Because this property returns only a<br/>string, it doesn&amp;apos;t give you document object model (DOM) access to the referring page.Inside an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see>, the <c>Document.referrer</c> will initially<br/>be set to the <see cref="HTMLAnchorElementhref"/> of the parent's<br/><see cref="Windowlocation"/> in same-origin requests.<br/>In cross-origin requests, it's the <see cref="HTMLAnchorElementorigin"/> of the parent's <c>Window.location</c> by default.<br/>For more information, see the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Referrer-Policy#strict-origin-when-cross-origin">Referrer-Policy: strict-origin-when-cross-origin</see> documentation.</value>
</DocumentReferrer>
<DocumentReleaseCapture>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>releaseCapture()</c></strong> method releases mouse capture if<br/>it&amp;apos;s currently enabled on an element within this document.<br/>Once mouse capture is released, mouse events will no longer all be directed to the element on which capture is enabled.
</summary>
<remarks>
<para>Enabling mouse capture on an element is done by calling <see cref="Element.SetCapture"/>.</para>
<para>-<see cref="Element.SetCapture"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentReleaseCapture>
<DocumentReplaceChildren>
<summary>
The <strong><c>Document.replaceChildren()</c></strong> method replaces the<br/>existing children of a <c>Document</c> with a specified new set of children.
</summary>
<remarks>
<para>-<see cref="Document.Prepend"/><br/>-<see cref="Document.Append"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/replaceChildren"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentReplaceChildren>
<DocumentRequestStorageAccess>
<summary>
The <strong><c>requestStorageAccess()</c></strong> method of the <see cref="Document"/> interface allows content loaded in a third-party context (i.e., embedded in an {{htmlelement("iframe")}}) to request access to <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Third-party_cookies">third-party cookies</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/State_Partitioning#state_partitioning">unpartitioned state</see>. This is relevant to user agents that, by default, block access to third-party, <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API#unpartitioned_versus_partitioned_cookies">unpartitioned</see> cookies to improve privacy (e.g., to prevent tracking), and is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API">Storage Access API</see>.
</summary>
<remarks>
<para>To check whether permission to access third-party cookies has already been granted, you can call <see cref="Permissions.Query"/>, specifying the feature name <c>&amp;quot;storage-access&amp;quot;</c>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Usage of this feature may be blocked by a <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/storage-access">Permissions-Policy/storage-access</see> <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Permissions_Policy">Permissions Policy</see> set on your server. In addition, the document must pass additional browser-specific checks such as allowlists, blocklists, on-device classification, user settings, anti-<see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/Clickjacking">clickjacking</see> heuristics, or prompting the user for explicit permission.</para></blockquote>
<para>-<see cref="Document.HasStorageAccess"/>, <see cref="Document.HasUnpartitionedCookieAccess"/>, <see cref="Document.RequestStorageAccessFor"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API/Using">Using the Storage Access API</see><br/>-<see href="https://webkit.org/blog/8124/introducing-storage-access-api/">Introducing Storage Access API</see> (WebKit blog)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/requestStorageAccess"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that fulfills with <c>undefined</c> if the access to third-party cookies was granted and no <c>types</c> parameter was provided, fulfills with <see cref="StorageAccessHandle"/> if the access to unpartitioned state requested by the <c>types</c> parameter was provided, and rejects if access was denied.<c>requestStorageAccess()</c> requests are automatically denied unless the embedded content is currently processing a user gesture such as a tap or click (<see href="https://developer.mozilla.org/en-US/docs/Glossary/transient activation">transient activation</see>), or unless permission was already granted previously. If permission was not previously granted, they need to be run inside a user gesture-based event handler. The user gesture behavior depends on the state of the promise:</returns>
</DocumentRequestStorageAccess>
<DocumentRequestStorageAccessFor>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>requestStorageAccessFor()</c></strong> method of the <see cref="Document"/> interface allows top-level sites to request third-party cookie access on behalf of embedded content originating from another site in the same <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API/Related_website_sets">related website set</see>. It returns a <see cref="Promise"/> that resolves if the access was granted, and rejects if access was denied.
</summary>
<remarks>
<para>-<see cref="Document.HasStorageAccess"/>, <see cref="Document.HasUnpartitionedCookieAccess"/>, <see cref="Document.RequestStorageAccess"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API/Using">Using the Storage Access API</see><br/>-<see href="https://webkit.org/blog/8124/introducing-storage-access-api/">Introducing Storage Access API</see> (WebKit blog)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/requestStorageAccessFor"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that fulfills with <c>undefined</c> if the access to third-party cookies was granted and rejects if access was denied.<c>requestStorageAccessFor()</c> requests are automatically denied unless the top-level content is currently processing a user gesture such as a tap or click (<see href="https://developer.mozilla.org/en-US/docs/Glossary/transient activation">transient activation</see>), or unless permission was already granted previously. If permission was not previously granted, they must run inside a user gesture-based event handler. The user gesture behavior depends on the state of the promise:</returns>
</DocumentRequestStorageAccessFor>
<DocumentRootElement>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> <strong><c>Document.rootElement</c></strong> returns the <see cref="Element"/><br/>that is the root element of the <see cref="Document"/> if it is an<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/SVGElementsvg">svg</see> element, otherwise <c>null</c>. It is deprecated in favor of<br/><see cref="Document.DocumentElement"/>, which returns the root element for all<br/>documents.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/rootElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>For SVG elements, the <see cref="Element"/> that is the root element of the <see cref="Document"/>; otherwise <c>null</c>.If the document is a non-empty SVG document, then the <c>rootElement</c> will be<br/>an <see cref="SVGSVGElement"/>, identical to the <c>documentElement</c>.</value>
</DocumentRootElement>
<DocumentScripts>
<summary>
The <strong><c>scripts</c></strong> property of the <see cref="Document"/><br/>interface returns a list of the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script">script</see><br/>elements in the document. The returned object is an<br/><see cref="HTMLCollection"/>.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scripts"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLCollection"/>. You can use this just like an array to get all the<br/>elements in the list.</value>
</DocumentScripts>
<DocumentScrollend>
<summary>
The <strong><c>scrollend</c></strong> event fires when the document view has completed scrolling.<br/>Scrolling is considered completed when the scroll position has no more pending updates and the user has completed their gesture.
</summary>
<remarks>
<para>Scroll position updates include smooth or instant mouse wheel scrolling, keyboard scrolling, scroll-snap events, or other APIs and gestures which cause the scroll position to update.<br/>User gestures like touch panning or trackpad scrolling aren&amp;apos;t complete until pointers or keys have released.<br/>If the scroll position did not change, then no scrollend event fires.</para><para>For detecting when scrolling inside an element is complete, see the <see cref="Elementscrollend"/> event of <c>Element</c>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event">Document <c>scroll</c> event</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event">Element <c>scrollend</c> event</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event">Element <c>scroll</c> event</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollend"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentScrollend>
<DocumentScrollingElement>
<summary>
The <strong><c>scrollingElement</c></strong> read-only property of the<br/><see cref="Document"/> interface returns a reference to the <see cref="Element"/> that<br/>scrolls the document. In standards mode, this is the root element of the<br/>document, <see cref="Document.DocumentElement"/>.
</summary>
<remarks>
<para>When in quirks mode, the <c>scrollingElement</c> attribute returns the HTML<br/><c>body</c> element if it exists and is <strong>not</strong> <see href="https://drafts.csswg.org/cssom-view/#potentially-scrollable">potentially scrollable</see>, otherwise it returns <c>null</c>. This may look surprising but is true according to both the specification and browsers.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The <see cref="Element"/> that scrolls the document, usually the root element (unless not in standard mode).</value>
</DocumentScrollingElement>
<DocumentScrollsnapchange>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>scrollsnapchange</c></strong> event of the <see cref="Document"/> interface is fired on the document <see href="https://developer.mozilla.org/en-US/docs/Glossary/Scroll_container">scroll container</see> at the end of a scrolling operation when a new scroll snap target is selected.
</summary>
<remarks>
<para>This event works in much the same way as the <see cref="Element"/> interface's <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollsnapchange_event"><c>scrollsnapchange</c></see> event, except that the overall HTML document has to be set as the scroll snap container (i.e., {{cssxref("scroll-snap-type")}} is set on the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html">html</see> element).</para>
<para>-<see cref="Documentscrollsnapchanging"/> event<br/>-<see cref="Documentscrollend"/> event<br/>-<see cref="SnapEvent"/><br/>-CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type">scroll-snap-type</see> property<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap">CSS scroll snap module</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap/Using_scroll_snap_events">Using scroll snap events</see><br/>-<see href="https://developer.chrome.com/blog/scroll-snap-events">Scroll Snap Events</see> on developer.chrome.com (2024)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollsnapchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentScrollsnapchange>
<DocumentScrollsnapchanging>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>scrollsnapchanging</c></strong> event of the <see cref="Document"/> interface is fired on the <see href="https://developer.mozilla.org/en-US/docs/Glossary/Scroll_container">scroll container</see> when the browser determines a new scroll snap target is pending, i.e., it will be selected when the current scroll gesture ends.
</summary>
<remarks>
<para>This event works in much the same way as the <see cref="Element"/> interface's <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollsnapchanging_event"><c>scrollsnapchanging</c></see> event, except that the overall HTML document has to be set as the scroll snap container (i.e., {{cssxref("scroll-snap-type")}} is set on the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html">html</see> element).</para>
<para>-<see cref="Documentscrollsnapchange"/> event<br/>-<see cref="Documentscrollend"/> event<br/>-<see cref="SnapEvent"/><br/>-CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type">scroll-snap-type</see> property<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap">CSS scroll snap module</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap/Using_scroll_snap_events">Using scroll snap events</see><br/>-<see href="https://developer.chrome.com/blog/scroll-snap-events">Scroll Snap Events</see> on developer.chrome.com (2024)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollsnapchanging"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentScrollsnapchanging>
<DocumentScroll>
<summary>
The <strong><c>scroll</c></strong> event fires when the document view has been scrolled.<br/>To detect when scrolling has completed, see the <see cref="Documentscrollend"/> event of <c>Document</c>.<br/>For element scrolling, see <see cref="Elementscroll"/> event of <c>Element</c>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollend_event">Document: <c>scrollend</c> event</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event">Element: <c>scroll</c> event</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event">Element: <c>scrollend</c> event</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentScroll>
<DocumentSecuritypolicyviolation>
<summary>
The <strong><c>securitypolicyviolation</c></strong> event is fired when a <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP">Content Security Policy</see> is violated.
</summary>
<remarks>
<para>The event is fired on the document when there is a violation of the document CSP policy (and may also bubble from elements in the document).</para><para>This event <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbles</see> to the <see cref="Window"/> object, and is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composed">composed</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>You should generally add the handler for this event to a top level object (i.e., <see cref="Window"/> or <see cref="Document"/>).<br/>While HTML elements can technically be the target of the <c>securitypolicyviolation</c> event, in reality this event does not fire on themâ€”for example, a blocked <c>&amp;lt;img&amp;gt;</c> source directly triggers this event on <c>document</c> as the target, instead of bubbling from the <c>&amp;lt;img&amp;gt;</c> element.</para></blockquote>
<para>-The <see cref="Elementsecuritypolicyviolation"/> event of the <see cref="Element"/> interface<br/>-The <see cref="WorkerGlobalScopesecuritypolicyviolation"/> event of the <see cref="WorkerGlobalScope"/> interface<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP">HTTP &amp;gt; Content Security Policy</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/securitypolicyviolation"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentSecuritypolicyviolation>
<DocumentSelectedStyleSheetSet>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>selectedStyleSheetSet</c></strong> property indicates the name of the style sheet set that&amp;apos;s currently in use.
</summary>
<remarks>
<para>-<see cref="Document.LastStyleSheetSet"/><br/>-<see cref="Document.PreferredStyleSheetSet"/><br/>-<see cref="Document.StyleSheetSets"/><br/>-<see cref="Document.EnableStyleSheetsForSet"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The name of the style sheet set currently in use. You can also set the current style sheet set using this property.Setting the value of this property is equivalent to calling<br/><see cref="Document.EnableStyleSheetsForSet"/> with the value of<br/><c>currentStyleSheetSet</c>, then setting the value of<br/><c>lastStyleSheetSet</c> to that value as well.<blockquote class="NOTE"><h5>NOTE</h5>This attribute&amp;apos;s value is live; directly changing<br/>the <c>disabled</c> attribute on style sheets will affect the value of this<br/>attribute.</blockquote></value>
</DocumentSelectedStyleSheetSet>
<DocumentSelectionchange>
<summary>
The <strong><c>selectionchange</c></strong> event of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Selection">Selection API</see> is fired when the current <see cref="Selection"/> of a <see cref="Document"/> is changed.
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para><para>The event can be handled by adding an event listener for <c>selectionchange</c> or using the <c>onselectionchange</c> event handler.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This event is not quite the same as the <c>selectionchange</c> events fired when the text selection in an {{HTMLElement("input")}} or {{HTMLElement("textarea")}} element is changed. See the <see cref="HTMLInputElement.Selectionchange"/> event of <c>HTMLInputElement</c> for more details.</para></blockquote>
<para>-<see cref="Nodeselectstart"/><br/>-<see cref="Document.GetSelection"/><br/>-<see cref="Selection"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/selectionchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentSelectionchange>
<DocumentStartViewTransition>
<summary>
The <strong><c>startViewTransition()</c></strong> method of the <see cref="Document"/> interface starts a new same-document (SPA) <see href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API">view transition</see> and returns a <see cref="ViewTransition"/> object to represent it.
</summary>
<remarks>
<para>When <c>startViewTransition()</c> is invoked, a sequence of steps is followed as explained in <see href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API/Using#the_view_transition_process">The view transition process</see>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:active-view-transition">:active-view-transition</see> pseudo-class<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:active-view-transition-type">:active-view-transition-type</see> pseudo-class<br/>-<see href="https://developer.chrome.com/docs/web-platform/view-transitions/">Smooth transitions with the View Transition API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/startViewTransition"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="ViewTransition"/> object instance.</returns>
</DocumentStartViewTransition>
<DocumentStyleSheets>
<summary>
The <strong><c>styleSheets</c></strong> read-only property of the <see cref="Document"/> interface returns a <see cref="'StyleSheetList'"/> of <see cref="'CSSStyleSheet'"/> objects, for stylesheets explicitly linked into or embedded in a document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheets"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The returned list is ordered as follows:</value>
</DocumentStyleSheets>
<DocumentStyleSheetSets>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>styleSheetSets</c></strong> read-only property returns a live list of all of the currently-available style sheet sets.
</summary>
<remarks>
<para>-<see cref="Stylesheet"/><br/>-<see cref="Document.StyleSheets"/><br/>-<see cref="Document.LastStyleSheetSet"/><br/>-<see cref="Document.PreferredStyleSheetSet"/><br/>-<see cref="Document.SelectedStyleSheetSet"/><br/>-<see cref="Document.EnableStyleSheetsForSet"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheetSets"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A list of style sheet sets that are available.</value>
</DocumentStyleSheetSets>
<DocumentTimeline>
<summary>
The <c>timeline</c> readonly property of the <see cref="Document"/> interface represents the default timeline of the current document. This timeline is a special instance of <see cref="DocumentTimeline"/>.
</summary>
<remarks>
<para>This timeline is unique to each <c>document</c> and persists for the lifetime of the <c>document</c> including calls to <see cref="Document.Open"/>.</para><para>This timeline expresses the time in milliseconds since <see cref="Performance.TimeOrigin"/>.<br/>Prior to the time origin, the timeline is inactive, and its <see cref="AnimationTimeline.CurrentTime"/> is <c>null</c>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>A document timeline that is associated with a non-active document (a <see cref="Document"/> not associated with a <see cref="Window"/>, {{htmlelement("iframe")}}, or {{htmlelement("frame")}}) is also considered to be inactive.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API</see><br/>-<see cref="AnimationTimeline"/><br/>-<see cref="AnimationTimeline.CurrentTime"/><br/>-<see cref="DocumentTimeline"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/timeline"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="DocumentTimeline"/> object.</value>
</DocumentTimeline>
<DocumentTitle>
<summary>
The <strong><c>document.title</c></strong> property gets or sets the current title of the document.<br/>When present, it defaults to the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/title"><c>&amp;lt;title&amp;gt;</c></see>.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/title"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string containing the <strong>document</strong>&amp;apos;s title. If the title was overridden by setting <c>document.title</c>, it contains that value. Otherwise, it contains the title specified in the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/title"><c>&amp;lt;title&amp;gt;</c></see> element.<c>newTitle</c> is the new title of the document. The assignment<br/>affects the return value of <c>document.title</c>, the title displayed for the<br/>document (e.g., in the titlebar of the window or tab), and it also affects the DOM of the<br/>document (e.g., the content of the <c>&amp;lt;title&amp;gt;</c> element in an HTML<br/>document).</value>
</DocumentTitle>
<DocumentURL>
<summary>
The <strong><c>URL</c></strong> read-only property of the <see cref="Document"/><br/>interface returns the document location as a string.
</summary>
<remarks>
<para>-The <see cref="Document.DocumentURI"/> property which returns the same value.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/URL"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string containing the URL of the document.</value>
</DocumentURL>
<DocumentVisibilitychange>
<summary>
The <c>visibilitychange</c> event is fired at the document when the contents of its tab have become visible or have been hidden.
</summary>
<remarks>
<para>The event is not cancelable.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API">Page Visibility API</see><br/>-<see cref="Document.VisibilityState"/><br/>-<see cref="Document.Hidden"/><br/>-<see href="https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/">Don&amp;apos;t lose user and app state, use Page Visibility</see> explains in detail why you should use <c>visibilitychange</c>, not <c>beforeunload</c>/<c>unload</c>.<br/>-<see href="https://developer.chrome.com/docs/web-platform/page-lifecycle-api">Page Lifecycle API</see> gives best-practices guidance on handling page lifecycle behavior in your web applications.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentVisibilitychange>
<DocumentVisibilityState>
<summary>
The <strong><c>Document.visibilityState</c></strong><br/>read-only property returns the visibility of the document. It can be used to check whether the document is in the background or in a minimized window, or is otherwise not visible to the user.
</summary>
<remarks>
<para>When the value of this property changes, the <see cref="Documentvisibilitychange"/> event is sent to the <see cref="Document"/>.</para><para>The <see cref="Document.Hidden"/> property provides an alternative way to determine whether the page is hidden.</para>
<para>-<see cref="Document.Hidden"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API">Page Visibility API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</DocumentVisibilityState>
<DocumentVlinkColor>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Document.vlinkColor</c></strong> property gets/sets the color of<br/>links that the user has visited in the document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/vlinkColor"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string representing the color as a word (e.g., <c>&amp;quot;red&amp;quot;</c>) or hexadecimal value (e.g., <c>&amp;quot;#ff0000&amp;quot;</c>).When set to the <c>null</c> value, that <c>null</c> value is converted to the empty string (<c>&amp;quot;&amp;quot;</c>), so <c>document.vlinkColor = null</c> is equivalent to <c>document.vlinkColor = &amp;quot;&amp;quot;</c>.</value>
</DocumentVlinkColor>
<DocumentWrite>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>Use of the <c>document.write()</c> method is strongly discouraged.<br/>Avoid using it, and where possible replace it in existing code.</blockquote>
</summary>
<remarks>
<para>As <see href="https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#document.write()">the HTML spec itself warns</see>:</para><blockquote><para>This method has very idiosyncratic behavior.<br/>In some cases, this method can affect the state of the <see href="https://html.spec.whatwg.org/multipage/parsing.html#html-parser">HTML parser</see> while the parser is running, resulting in a DOM that does not correspond to the source of the document (e.g., if the string written is the string &amp;quot;<c>&amp;lt;plaintext&amp;gt;</c>&amp;quot; or &amp;quot;<c>&amp;lt;!--</c>&amp;quot;).<br/>In other cases, the call can clear the current page first, as if <see cref="Document.Open"/> had been called.<br/>In yet more cases, the method is simply ignored, or throws an exception. Users agents are <see href="https://html.spec.whatwg.org/multipage/parsing.html#document-written-scripts-intervention">explicitly allowed to avoid executing <c>script</c> elements inserted via this method</see>.<br/>And to make matters even worse, the exact behavior of this method can in some cases be dependent on network latency, which can lead to failures that are very hard to debug.<br/>For all these reasons, use of this method is strongly discouraged.</para></blockquote><blockquote class="WARNING"><h5>WARNING</h5><para>This API parses its input as HTML, writing the result into the DOM.<br/>APIs like this are known as <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#concepts_and_usage">injection sinks</see>, and are potentially a vector for <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS">cross-site-scripting (XSS)</see> attacks, if the input originally came from an attacker.</para><para>For this reason it's much safer to pass only <see cref="TrustedHTML"/> objects into this method, and to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#using_a_csp_to_enforce_trusted_types">enforce</see> this using the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/require-trusted-types-for"><c>require-trusted-types-for</c></see> CSP directive.<br/>This means you can be sure that the input has been passed through a transformation function, which has the chance to <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS#sanitization">sanitize</see> the input to remove potentially dangerous markup, such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script">script</see> elements and event handler attributes.</para></blockquote><para>The <strong><c>write()</c></strong> method of the <see cref="Document"/> interface writes text in one or more <see cref="TrustedHTML"/> or string parameters to a document stream opened by <see cref="Document.Open"/>.</para>
<para>-<see cref="Document.Writeln"/><br/>-<see cref="Element.InnerHTML"/><br/>-<see cref="Document.CreateElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API">Trusted Types API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS">Cross-site scripting (XSS)</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/write"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentWrite>
<DocumentWriteln>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>This API parses its input as HTML, writing the result into the DOM.<br/>APIs like this are known as <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#concepts_and_usage">injection sinks</see>, and are potentially a vector for <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS">cross-site-scripting (XSS)</see> attacks, if the input originally came from an attacker.</blockquote>
</summary>
<remarks>
<para>For this reason it's much safer to pass only <see cref="TrustedHTML"/> objects into this method, and to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#using_a_csp_to_enforce_trusted_types">enforce</see> this using the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/require-trusted-types-for"><c>require-trusted-types-for</c></see> CSP directive.<br/>This means you can be sure that the input has been passed through a transformation function, which has the chance to <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS#sanitization">sanitize</see> the input to remove potentially dangerous markup, such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script">script</see> elements and event handler attributes.</para><para>The <strong><c>writeln()</c></strong> method of the <see cref="Document"/> interface writes text in one or more <see cref="TrustedHTML"/> or string parameters to a document stream opened by <see cref="Document.Open"/>, followed by a newline character.</para><para>The method is essentially the same as <see cref="Document.Write"/> but adds a newline (information in the linked topic also applies to this method).<br/>This newline will only be visible if it is injected inside an element where newlines are displayed.<br/>The additional information in <see cref="Document.Write"/> also applies to this method.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</DocumentWriteln>
<DocumentXmlEncoding>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> Returns the encoding as determined by the XML declaration. Should be <c>null</c> if unspecified or unknown.
</summary>
<remarks>
<blockquote class="WARNING"><h5>WARNING</h5><para>Do not use this attribute; it has been removed from the DOM Level 4 specification and is no longer supported in Firefox 10.0.</para></blockquote><para>Consider the following XML Declaration:</para><para>Then, the result should be &amp;quot;UTF-16&amp;quot;.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/xmlEncoding"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentXmlEncoding>
<DocumentXmlVersion>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> Returns the version number as specified in the XML declaration (e.g., <c>&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;</c>) or &amp;quot;1.0&amp;quot; if the declaration is absent.
</summary>
<remarks>
<para>This attribute was never really useful, since it always returned 1.0, and has been removed in DOM Level 4. As such, Firefox 10 no longer implements it. Its primary use in the past was to detect whether or not the document was being rendered as XML rather than HTML. To detect this, you can create an element with its name in lower case, then check to see if it gets converted into all upper case (in which case the document is in the non-XML HTML mode):</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/xmlVersion"> <em>See also on MDN</em> </seealso></para>
</remarks>
</DocumentXmlVersion>
</docs>