<docs>
<DocumentExecCommand>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> When an HTML document has been switched to<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode"><c>designMode</c></see>, its<br/><c>document</c> object exposes an <strong><c>execCommand</c></strong><br/>method to run commands that manipulate the current editable region, such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">form inputs</see> or<br/><see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable"><c>contentEditable</c></see><br/>elements.
</summary>
<remarks>
<para>Most commands affect the document&amp;apos;s <see href="https://developer.mozilla.org/en-US/docs/Web/API/Selection">selection</see> (bold, italics, etc.), while others<br/>insert new elements (adding a link), or affect an entire line (indenting). When using<br/><c>contentEditable</c>, <c>execCommand()</c> affects the currently active<br/>editable element.</para><para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API">Clipboard API</see> can be used instead of <c>execCommand</c> in many cases, but <c>execCommand</c> is still sometimes useful. In particular, the Clipboard API doesn&amp;apos;t replace the <c>insertText</c> command, which you can use to programmatically replace text at the cursor while preserving the undo buffer (edit history) in plain <c>textarea</c> and <c>input</c> elements.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API">Clipboard API</see><br/>-<see cref="HTMLElement.ContentEditable"/><br/>-<see cref="Document.DesignMode"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A boolean value that is <c>false</c> if the command is unsupported or disabled.<blockquote class="NOTE"><h5>NOTE</h5><strong>Note:</strong> <c>document.execCommand()</c> only returns<br/><c>true</c> if it is invoked as part of a user interaction. You can&amp;apos;t use it to<br/>verify browser support before calling a command. From Firefox 82, nested<br/><c>document.execCommand()</c> calls will always return <c>false</c>.</blockquote></returns>
</DocumentExecCommand>
</docs>