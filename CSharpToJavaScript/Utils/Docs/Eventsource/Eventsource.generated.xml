<docs>
<EventSource>
<summary>
The <strong><c>EventSource</c></strong> interface is web content&amp;apos;s interface to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">server-sent events</see>.
</summary>
<remarks>
<para>An <c>EventSource</c> instance opens a persistent connection to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</see> server, which sends <see href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events">events</see> in <c>text/event-stream</c> format. The connection remains open until closed by calling <see cref="EventSource.Close"/>.</para><para></para><para>Once the connection is opened, incoming messages from the server are delivered to your code in the form of events. If there is an event field in the incoming message, the triggered event is the same as the event field value. If no event field is present, then a generic <see cref="EventSource/message_event"/> event is fired.</para><para>Unlike <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">WebSockets</see>, server-sent events are unidirectional; that is, data messages are delivered in one direction, from the server to the client (such as a user&amp;apos;s web browser). That makes them an excellent choice when there&amp;apos;s no need to send data from the client to the server in message form. For example, <c>EventSource</c> is a useful approach for handling things like social media status updates, news feeds, or delivering data into a <see href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage">client-side storage</see> mechanism like <see href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">web storage</see>.</para><blockquote class="WARNING"><h5>WARNING</h5><para><strong>Warning:</strong> When <strong>not used over HTTP/2</strong>, SSE suffers from a limitation to the maximum number of open connections, which can be specially painful when opening various tabs as the limit is <strong>per browser</strong> and set to a very low number (6). The issue has been marked as &amp;quot;Won&amp;apos;t fix&amp;quot; in <see href="https://crbug.com/275955">Chrome</see> and <see href="https://bugzil.la/906896">Firefox</see>. This limit is per browser + domain, so that means that you can open 6 SSE connections across all of the tabs to <c>www.example1.com</c> and another 6 SSE connections to <c>www.example2.com.</c> (from <see href="https://stackoverflow.com/questions/5195452/websockets-vs-server-sent-events-eventsource/5326159">Stackoverflow</see>). When using HTTP/2, the maximum number of simultaneous <strong>HTTP streams</strong> is negotiated between the server and the client (defaults to 100).</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">Server-sent events</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events">Using server-sent events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EventSource>
</docs>