<docs>
<FileSystemHandleQueryPermission>
<summary>
The <strong><c>queryPermission()</c></strong> method of the<br/><see cref="FileSystemHandle"/> interface queries the current permission state of the<br/>current handle.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API">File System API</see><br/>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/file-system-access">The File System Access API: simplifying access to local files</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle/queryPermission"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} that resolves with <see cref="'PermissionStatus.State'"/> which is one of <c>&amp;apos;granted&amp;apos;</c>, <c>&amp;apos;denied&amp;apos;</c> or <c>&amp;apos;prompt&amp;apos;</c>. It may also reject with one of the exceptions below.If this resolves with &amp;quot;prompt&amp;quot;, the website will have to call <c>requestPermission()</c> before any<br/>operations on the handle can be done. If this resolves with &amp;quot;denied&amp;quot; any operations will<br/>reject. Usually handles returned by the local file system handle factories will<br/>initially resolves with &amp;quot;granted&amp;quot; for their read permission state. However, other than through<br/>the user revoking permission, a handle retrieved from IndexedDB is also likely to resolves with<br/>&amp;quot;prompt&amp;quot;.</returns>
</FileSystemHandleQueryPermission>
</docs>