<docs>
<GPU>
<summary>
The <strong><c>GPU</c></strong> interface of the {{domxref(&amp;quot;WebGPU API&amp;quot;, &amp;quot;WebGPU API&amp;quot;, &amp;quot;&amp;quot;, "nocode")}} is the starting point for using WebGPU. It can be used to return a <see cref="GPUAdapter"/> from which you can request devices, configure features and limits, and more.
</summary>
<remarks>
<para>The <c>GPU</c> object for the current context is accessed via the <see cref="Navigator.Gpu"/> or <see cref="WorkerNavigator.Gpu"/> properties.</para><para></para>
<para>-The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API">WebGPU API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/GPU"> <em>See also on MDN</em> </seealso></para>
</remarks>
</GPU>
<GPUGetPreferredCanvasFormat>
<summary>
The <strong><c>getPreferredCanvasFormat()</c></strong> method of the<br/><see cref="GPU"/> interface returns the optimal canvas texture format for displaying 8-bit depth, standard dynamic range content on the current system.
</summary>
<remarks>
<para>This is commonly used to provide a <see cref="GPUCanvasContext.Configure"/> call with the optimal <c>format</c> value for the current system. This is recommended â€” if you don&amp;apos;t use the preferred format when configuring the canvas context, you may incur additional overhead, such as additional texture copies, depending on the platform.</para>
<para>-The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API">WebGPU API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/GPU/getPreferredCanvasFormat"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A string indicating a canvas texture format. The value can be <c>rgba8unorm</c> or <c>bgra8unorm</c>.</returns>
</GPUGetPreferredCanvasFormat>
<GPURequestAdapter>
<summary>
The <strong><c>requestAdapter()</c></strong> method of the<br/><see cref="GPU"/> interface returns a {{jsxref("Promise")}} that fulfills with a <see cref="GPUAdapter"/> object instance. From this you can request a <see cref="GPUDevice"/>, adapter info, features, and limits.
</summary>
<remarks>
<para>Note that the user agent chooses whether to return an adapter. If so, it chooses according to the provided options. If no options are provided, the device will provide access to the default adapter, which is usually good enough for most purposes.</para>
<para>-The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API">WebGPU API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/GPU/requestAdapter"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} that fulfills with a <see cref="GPUAdapter"/> object instance if the request is successful.<c>requestAdapter()</c> will resolve to <c>null</c> if an appropriate adapter is not available.</returns>
</GPURequestAdapter>
<GPUWgslLanguageFeatures>
<summary>
The <strong><c>wgslLanguageFeatures</c></strong> read-only property of the<br/><see cref="GPU"/> interface returns a <see cref="WGSLLanguageFeatures"/> object that reports the <see href="https://gpuweb.github.io/gpuweb/wgsl/#language-extension">WGSL language extensions</see> supported by the WebGPU implementation.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Not all WGSL language extensions are available to WebGPU in all browsers that support the API. We recommend you thoroughly test any extensions you choose to use.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API">WebGPU API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/GPU/wgslLanguageFeatures"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="WGSLLanguageFeatures"/> object instance. This is a <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">setlike</see> object.</value>
</GPUWgslLanguageFeatures>
</docs>