<docs>
<GPUBufferUsage>
<summary>
The <strong><c>usage</c></strong> read-only property of the<br/><see cref="GPUBuffer"/> interface contains the {{glossary("bitwise flags")}} representing the allowed usages of the <c>GPUBuffer</c>.
</summary>
<remarks>
<para><c>usage</c> is set via the <c>usage</c> property in the descriptor object passed into the originating <see cref="GPUDevice.CreateBuffer"/> call.</para>
<para>-The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API">WebGPU API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/GPUBuffer/usage"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The bitwise flags representing the original usages set when the <c>GPUBuffer</c> was first created. The returned number is the sum of decimal values representing the different flags, as seen in the table below.<table><tr><td>Bitwise flag</td><td>Usage description</td><td>Hex equiv.</td><td>Decimal equiv.</td></tr><tr><td><c>GPUBufferUsage.COPY_SRC</c></td><td>The buffer can be used as the source of a copy operation, for example the source argument of a <see cref="GPUCommandEncoder.CopyBufferToBuffer"/> call.</td><td>0x0004</td><td>4</td></tr><tr><td><c>GPUBufferUsage.COPY_DST</c></td><td>The buffer can be used as the destination of a copy/write operation, for example the destination argument of a <see cref="GPUCommandEncoder.CopyTextureToBuffer"/> call.</td><td>0x0008</td><td>8</td></tr><tr><td><c>GPUBufferUsage.INDEX</c></td><td>The buffer can be used as an index buffer, for example as the <c>buffer</c> argument passed to <see cref="GPURenderPassEncoder.SetIndexBuffer"/>.</td><td>0x0010</td><td>16</td></tr><tr><td><c>GPUBufferUsage.INDIRECT</c></td><td>The buffer can be used to store indirect command arguments, for example as the <c>indirectBuffer</c> argument of a <see cref="GPURenderPassEncoder.DrawIndirect"/> or <see cref="GPUComputePassEncoder.DispatchWorkgroupsIndirect"/> call.</td><td>0x0100</td><td>256</td></tr><tr><td><c>GPUBufferUsage.MAP_READ</c></td><td>The buffer can be mapped for reading, for example when calling <see cref="GPUBuffer.MapAsync"/> with a <c>mode</c> of <c>GPUMapMode.READ</c>. This flag may only be combined with <c>GPUBufferUsage.COPY_DST</c>.</td><td>0x0001</td><td>1</td></tr><tr><td><c>GPUBufferUsage.MAP_WRITE</c></td><td>The buffer can be mapped for writing, for example when calling <see cref="GPUBuffer.MapAsync"/> with a <c>mode</c> of <c>GPUMapMode.WRITE</c>. This flag may only be combined with <c>GPUBufferUsage.COPY_SRC</c>.</td><td>0x0002</td><td>2</td></tr><tr><td><c>GPUBufferUsage.QUERY_RESOLVE</c></td><td>The buffer can be used to capture query results, for example as the destination argument of a <see cref="GPUCommandEncoder.ResolveQuerySet"/> call.</td><td>0x0200</td><td>512</td></tr><tr><td><c>GPUBufferUsage.STORAGE</c></td><td>The buffer can be used as a storage buffer, for example as a resource in a bind group entry when creating a <see cref="GPUBindGroup"/> (via <see cref="GPUDevice.CreateBindGroup"/>), which adheres to a <see cref="GPUBindGroupLayout"/> entry with a buffer binding layout <c>type</c> of <c>&amp;quot;storage&amp;quot;</c> or <c>&amp;quot;read-only-storage&amp;quot;</c>.</td><td>0x0080</td><td>128</td></tr><tr><td><c>GPUBufferUsage.UNIFORM</c></td><td>The buffer can be used as a uniform buffer, for example as a resource in a bind group entry when creating a <see cref="GPUBindGroup"/> (via <see cref="GPUDevice.CreateBindGroup"/>), which adheres to a <see cref="GPUBindGroupLayout"/> entry with a buffer binding layout <c>type</c> of <c>&amp;quot;uniform&amp;quot;</c>.</td><td>0x0040</td><td>64</td></tr><tr><td><c>GPUBufferUsage.VERTEX</c></td><td>The buffer can be used as a vertex buffer, for example as the <c>buffer</c> argument passed to <see cref="GPURenderPassEncoder.SetVertexBuffer"/>.</td><td>0x0020</td><td>32</td></tr></table></value>
</GPUBufferUsage>
</docs>