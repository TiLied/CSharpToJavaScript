<docs>
<GPURenderBundleEncoder>
<summary>
The <strong><c>GPURenderBundleEncoder</c></strong> interface of the {{domxref(&amp;quot;WebGPU API&amp;quot;, &amp;quot;WebGPU API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}} is used to pre-record bundles of commands.
</summary>
<remarks>
<para>The command bundles are encoded by calling the methods of <c>GPURenderBundleEncoder</c>; once the desired commands have been encoded, they are recorded into a <see cref="GPURenderBundle"/> object instance using the <see cref="GPURenderBundleEncoder.Finish"/> method. These render bundles can then be reused across multiple render passes by passing the <c>GPURenderBundle</c> objects into <see cref="GPURenderPassEncoder.ExecuteBundles"/> calls.</para><para>In effect, this is like a partial render pass â€” <c>GPURenderBundleEncoder</c>s have all the same functionality available as <see cref="GPURenderPassEncoder"/>s, except that they can't begin and end occlusion queries, and can't set the scissor rect, viewport, blend constant, and stencil reference. The <c>GPURenderBundle</c> will inherit all these values from the <see cref="GPURenderPassEncoder"/> that executes it.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> Currently set vertex buffers, index buffers, bind groups, and pipeline are all cleared prior to executing a render bundle, and once the render bundle has finished executing.</para></blockquote><para>Reusing pre-recoded commands can significantly improve app performance in situations where JavaScript draw call overhead is a bottleneck. Render bundles are most effective in situations where a batch of objects will be drawn the same way across multiple views or frames, with the only differences being the buffer content being used (such as updated matrix uniforms). A good example is VR rendering. Recording the rendering as a render bundle and then tweaking the view matrix and replaying it for each eye is a more efficient way to issue draw calls for both renderings of the scene.</para><para>A <c>GPURenderBundleEncoder</c> object instance is created via the <see cref="GPUDevice.CreateRenderBundleEncoder"/> property.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> The methods of <c>GPURenderBundleEncoder</c> are functionally identical to their equivalents available on <see cref="GPURenderPassEncoder"/>, except for <see cref="GPURenderBundleEncoder.Finish"/>, which is similar in purpose to <see cref="GPUCommandEncoder.Finish"/>.</para></blockquote><para></para>
<para>-The <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API">WebGPU API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder"> <em>See also on MDN</em> </seealso></para>
</remarks>
</GPURenderBundleEncoder>
</docs>