<docs>
<HTMLAttributesRelModulepreload>
<summary>
The <strong><c>modulepreload</c></strong> keyword, for the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel"><c>rel</c></see> attribute of the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link">link</see> element, provides a declarative way to preemptively fetch a <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">module script</see>, parse and compile it, and store it in the document&amp;apos;s module map for later execution.
</summary>
<remarks>
<para>Preloading allows modules and their dependencies to be downloaded early, and can also significantly reduce the overall download and processing time.<br/>This is because it allows pages to fetch modules in parallel, instead of sequentially as each module is processed and its dependencies are discovered.<br/>Note however that you can&amp;apos;t just preload everything!<br/>What you choose to preload must be balanced against other operations that might then be starved, adversely affecting user experience.</para><para>Links with <c>rel=&amp;quot;modulepreload&amp;quot;</c> are similar to those with <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload"><c>rel=&amp;quot;preload&amp;quot;</c></see>.<br/>The main difference is that <c>preload</c> just downloads the file and stores it in the cache, while <c>modulepreload</c> gets the module, parses and compiles it, and puts the results into the module map so that it is ready to execute.</para><para>When using <c>modulepreload</c> the fetch request mode is always <see href="https://developer.mozilla.org/en-US/docs/Web/API/Request/mode#cors"><c>cors</c></see>, and the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin"><c>crossorigin</c></see> property is used to determine the request <see href="https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials">credential mode</see>.<br/>If <c>crossorigin</c> is set to <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin#anonymous"><c>anonymous</c></see> or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin#sect1"><c>&amp;quot;&amp;quot;</c></see> (default), then the credentials mode is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials#same-origin"><c>same-origin</c></see>, and user credentials such as cookies and authentication are only sent for requests with the <c>same-origin</c>.<br/>If <c>crossorigin</c> is set to <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin#use-credentials"><c>use-credentials</c></see> then the credentials mode is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials#include"><c>include</c></see>, and user credentials for both single- and cross-origin requests.</para><para>The <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#as"><c>as</c></see> attribute is optional for links with <c>rel=&amp;quot;modulepreload&amp;quot;</c>, and defaults to <c>&amp;quot;script&amp;quot;</c>.<br/>It can be set to <c>&amp;quot;script&amp;quot;</c> or any script-like destination, such as <c>&amp;quot;audioworklet&amp;quot;</c>, <c>&amp;quot;paintworklet&amp;quot;</c>, <c>&amp;quot;serviceworker&amp;quot;</c>, <c>&amp;quot;sharedworker&amp;quot;</c>, or <c>&amp;quot;worker&amp;quot;</c>.<br/>An <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/Event"><c>Event</c></see> named &amp;quot;error&amp;quot; is fired on the element if any other destination is used.</para><para>A browser <strong>may</strong> additionally also choose to automatically fetch any dependencies of the module resource.<br/>Note however that this is a browser-specific optimization â€” the only approach to ensure that all browsers will try to preload a module&amp;apos;s dependencies is to individually specify them!<br/>Further, the events named <c>load</c> or <c>error</c> fire immediately following success or failure of loading the <strong>specified</strong> resources.<br/>If dependencies are automatically fetched, no additional events are fired in the main thread (although you might monitor additional requests in a service worker or on the server).</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Performance/Speculative_loading">Speculative loading</see> for a comparison of <c>&amp;lt;link rel=&amp;quot;modulepreload&amp;quot;&amp;gt;</c> and other similar performance improvement features.<br/>-<see href="https://developer.chrome.com/blog/modulepreload">Preloading modules</see> (developer.chrome.com)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/modulepreload"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTMLAttributesRelModulepreload>
</docs>