<docs>
<HTMLCollection>
<summary>
The <strong><c>HTMLCollection</c></strong> interface represents a generic collection (array-like object similar to <see cref="Functions/arguments"/>) of elements (in document order) and offers methods and properties for selecting from the list.
</summary>
<remarks>
<para>An <c>HTMLCollection</c> in the HTML DOM is live; it is automatically updated when the underlying document is changed. For this reason it is a good idea to make a copy (e.g., using <see cref="Array/from"/>) to iterate over if adding, moving, or removing nodes.</para><para>This interface is called <c>HTMLCollection</c> for historical reasons, because before the modern DOM, collections implementing this interface could only have HTML elements as their items.</para><para>This interface was an <see href="https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156">attempt to create an unmodifiable list</see> and only continues to be supported to not break code that&amp;apos;s already using it. Modern APIs represent list structures using types based on JavaScript <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">arrays</see>, thus making many array methods available, and at the same time imposing additional semantics on their usage (such as making their items read-only).</para><para>These historical reasons do not mean that you as a developer should avoid <c>HTMLCollection</c>. You don&amp;apos;t create <c>HTMLCollection</c> objects yourself, but you get them from APIs such as <see cref="Document.GetElementsByClassName"/>, and these APIs are not deprecated. However, be careful of the semantic differences from a real array.</para>
<para>-<see cref="NodeList"/><br/>-<see cref="HTMLFormControlsCollection"/>, <see cref="HTMLOptionsCollection"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection"> <em>See also on MDN</em> </seealso></para>
</remarks>
</HTMLCollection>
</docs>