<docs>
<JavaScriptReferenceStatementsLet>
<summary>
The <strong><c>let</c></strong> declaration declares re-assignable, block-scoped local variables, optionally initializing each to a value.
</summary>
<remarks>
<para>EmbedInteractiveExample("pages/js/statement-let.html")</para>
<para>-<see cref="Statements/var"/><br/>-<see cref="Statements/const"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting">Hoisting</see><br/>-<see href="https://hacks.mozilla.org/2015/07/es6-in-depth-let-and-const/">ES6 In Depth: <c>let</c> and <c>const</c></see> on hacks.mozilla.org (2015)<br/>-<see href="https://blog.mozilla.org/addons/2015/10/14/breaking-changes-let-const-firefox-nightly-44/">Breaking changes in <c>let</c> and <c>const</c> in Firefox 44</see> on blog.mozilla.org (2015)<br/>-<see href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20%26%20closures/ch3.md">You Don&amp;apos;t Know JS: Scope &amp; Closures, Ch.3: Function vs. Block Scope</see> by Kyle Simpson<br/>-<see href="https://stackoverflow.com/questions/33198849/what-is-the-temporal-dead-zone/33198850">What is the Temporal Dead Zone?</see> on Stack Overflow<br/>-<see href="https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var">What is the difference between using <c>let</c> and <c>var</c>?</see> on Stack Overflow<br/>-<see href="https://stackoverflow.com/questions/37916940/why-was-the-name-let-chosen-for-block-scoped-variable-declarations-in-javascri">Why was the name &amp;apos;let&amp;apos; chosen for block-scoped variable declarations in JavaScript?</see> on Stack Overflow<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"> <em>See also on MDN</em> </seealso></para>
</remarks>
</JavaScriptReferenceStatementsLet>
</docs>