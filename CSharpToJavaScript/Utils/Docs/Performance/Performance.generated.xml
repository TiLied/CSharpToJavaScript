<docs>
<Performance>
<summary>
The <strong><c>Performance</c></strong> interface provides access to performance-related information for the current page.
</summary>
<remarks>
<para>Performance entries are specific to each execution context. You can access performance information for code running in a window via <see cref="Window.Performance"/>, and for code running in a worker via <see cref="WorkerGlobalScope.Performance"/>.</para><para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Performance>
<PerformanceClearMarks>
<summary>
The <strong><c>clearMarks()</c></strong> method removes all or specific <see cref="PerformanceMark"/> objects from the browser's performance timeline.
</summary>
<remarks>
<para>-<see cref="PerformanceMark"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</PerformanceClearMarks>
<PerformanceClearMeasures>
<summary>
The <strong><c>clearMeasures()</c></strong> method removes all or specific <see cref="PerformanceMeasure"/> objects from the browser's performance timeline.
</summary>
<remarks>
<para>-<see cref="PerformanceMeasure"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</PerformanceClearMeasures>
<PerformanceClearResourceTimings>
<summary>
The <strong><c>clearResourceTimings()</c></strong> method removes all performance entries with an <see cref="PerformanceEntry.EntryType"/> of <c>&amp;quot;resource&amp;quot;</c> from the browser&amp;apos;s performance timeline and sets the size of the performance resource data buffer to zero.
</summary>
<remarks>
<para>To set the size of the browser&amp;apos;s performance resource data buffer, use the<br/><see cref="Performance.SetResourceTimingBufferSize"/> method.</para><para>To get notified when the browser's resource timing buffer is full, listen for the <see cref="Performance.Resourcetimingbufferfull"/> event.</para>
<para>-<see cref="Performance.SetResourceTimingBufferSize"/><br/>-<see cref="Performance.Resourcetimingbufferfull"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearResourceTimings"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</PerformanceClearResourceTimings>
<PerformanceEventCounts>
<summary>
The read-only <c>performance.eventCounts</c> property is an <see cref="EventCounts"/> map containing the number of events which have been dispatched per event type.
</summary>
<remarks>
<para>Not all event types are exposed. You can only get counts for event types supported by the <see cref="PerformanceEventTiming"/> interface.</para>
<para>-<see cref="EventCounts"/><br/>-<see cref="PerformanceEventTiming"/><br/>-<see cref="Map"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/eventCounts"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="EventCounts"/> map.<br/>(A read-only <see cref="Map"/> without the <c>clear()</c>, <c>delete()</c>, and <c>set()</c> methods).</value>
</PerformanceEventCounts>
<PerformanceGetEntries>
<summary>
The <strong><c>getEntries()</c></strong> method returns an array of all <see cref="PerformanceEntry"/> objects currently present in the performance timeline.
</summary>
<remarks>
<para>If you are only interested in performance entries of certain types or that have certain names, see <see cref="Performance.GetEntriesByType"/> and <see cref="Performance.GetEntriesByName"/>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This method does not notify you about new performance entries; you will only get entries that are present in the performance timeline at the time you call this method.<br/>To receive notifications about entries as they become available, use a <see cref="PerformanceObserver"/>.</para></blockquote><para>The following entry types are not supported by this method at all and won&amp;apos;t be returned even if entries for these types might exist:</para><para>To access entries of these types, you must use a <see cref="PerformanceObserver"/> instead.</para>
<para>-<see cref="Performance.GetEntriesByType"/><br/>-<see cref="Performance.GetEntriesByName"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An {{jsxref("Array")}} of <see cref="PerformanceEntry"/> objects. The items will be in chronological order based on the entries' <see cref="PerformanceEntry.StartTime"/>.</returns>
</PerformanceGetEntries>
<PerformanceGetEntriesByName>
<summary>
The <strong><c>getEntriesByName()</c></strong> method returns an array of <see cref="PerformanceEntry"/> objects currently present in the performance timeline with the given <strong>name</strong> and <strong>type</strong>.
</summary>
<remarks>
<para>If you are interested in performance entries of certain types, see <see cref="Performance.GetEntriesByType"/>. For all performance entries, see <see cref="Performance.GetEntries"/>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This method does not notify you about new performance entries; you will only get entries that are present in the performance timeline at the time you call this method.<br/>To receive notifications about entries as they become available, use a <see cref="PerformanceObserver"/>.</para></blockquote><para>The following entry types are not supported by this method at all and won&amp;apos;t be returned even if entries for these types might exist:</para><para>To access entries of these types, you must use a <see cref="PerformanceObserver"/> instead.</para>
<para>-<see cref="Performance.GetEntries"/><br/>-<see cref="Performance.GetEntriesByType"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An {{jsxref("Array")}} of <see cref="PerformanceEntry"/> objects that have the specified <c>name</c> and <c>type</c>.<br/>The items will be in chronological order based on the entries' <see cref="PerformanceEntry.StartTime"/>. If no objects meet the<br/>specified criteria, an empty array is returned.</returns>
</PerformanceGetEntriesByName>
<PerformanceGetEntriesByType>
<summary>
The <strong><c>getEntriesByType()</c></strong> method returns an array of <see cref="PerformanceEntry"/> objects currently present in the performance timeline for a given <strong>type</strong>.
</summary>
<remarks>
<para>If you are interested in performance entries of certain name, see <see cref="Performance.GetEntriesByName"/>. For all performance entries, see <see cref="Performance.GetEntries"/>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This method does not notify you about new performance entries; you will only get entries that are present in the performance timeline at the time you call this method.<br/>To receive notifications about entries as they become available, use a <see cref="PerformanceObserver"/>.</para></blockquote><para>The following entry types are not supported by this method at all and won&amp;apos;t be returned even if entries for these types might exist:</para><para>To access entries of these types, you must use a <see cref="PerformanceObserver"/> instead.</para>
<para>-<see cref="Performance.GetEntries"/><br/>-<see cref="Performance.GetEntriesByName"/><br/>-<see cref="PerformanceObserver.SupportedEntryTypes"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An {{jsxref("Array")}} of <see cref="PerformanceEntry"/> objects that have the specified <c>type</c>. The items will be in chronological order based on the entries' <see cref="PerformanceEntry.StartTime"/>. If no objects have the specified <c>type</c>, or no argument is provided, an empty array is returned.</returns>
</PerformanceGetEntriesByType>
<PerformanceMark>
<summary>
The <strong><c>mark()</c></strong> method creates a named <see cref="PerformanceMark"/> object representing a high resolution timestamp marker in the browser's performance timeline.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The <see cref="PerformanceMark"/> entry that was created.</returns>
</PerformanceMark>
<PerformanceMeasure>
<summary>
The <strong><c>measure()</c></strong> method creates a named <see cref="PerformanceMeasure"/> object representing a time measurement between two marks in the browser's performance timeline.
</summary>
<remarks>
<para>When measuring between two marks, there is a <strong>start mark</strong> and <strong>end mark</strong>, respectively.<br/>The named timestamp is referred to as a <strong>measure</strong>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The <see cref="PerformanceMeasure"/> entry that was created.The returned <strong>measure</strong> will have the following property values:</returns>
</PerformanceMeasure>
<PerformanceMeasureUserAgentSpecificMemory>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>measureUserAgentSpecificMemory()</c></strong> method is used to estimate the memory usage of a web application including all its iframes and workers.
</summary>
<remarks>
<para>-<see cref="Window.SetTimeout"/><br/>-<see href="https://web.dev/articles/monitor-total-page-memory-usage">Monitor your web page&amp;apos;s total memory usage with measureUserAgentSpecificMemory() - web.dev</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/measureUserAgentSpecificMemory"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that resolves to an object containing the following properties:An example return value looks like this:</returns>
</PerformanceMeasureUserAgentSpecificMemory>
<PerformanceMemory>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The non-standard and legacy <strong><c>memory</c></strong> read-only property returns the size of the JavaScript heap which can be helpful to measure and reduce the memory footprint of websites.
</summary>
<remarks>
<para>Note that the information this API provides is unreliable as it might overestimate actual memory usage if web pages share the same heap, or might underestimate actual memory usage if web pages use workers and/or cross-site iframes that are allocated in separate heaps. It is not standardized what &amp;quot;heap&amp;quot; means exactly. The API is only available in Chromium-based browsers.</para><para>A new API aiming to replace <c>performance.memory</c> is <see cref="Performance.MeasureUserAgentSpecificMemory"/>. It tries to estimate the memory used by a web page.</para>
<para>-<see cref="Performance.MeasureUserAgentSpecificMemory"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>Returns an object with the following properties:</value>
</PerformanceMemory>
<PerformanceNavigation>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The legacy<br/><strong><c>Performance.navigation</c></strong><br/>read-only property returns a <see cref="PerformanceNavigation"/> object representing<br/>the type of navigation that occurs in the given browsing context, such as the number of<br/>redirections needed to fetch the resource.
</summary>
<remarks>
<para>This property is not available in workers.</para><blockquote class="WARNING"><h5>WARNING</h5><para>This property is deprecated in the <see href="https://w3c.github.io/navigation-timing/#obsolete">Navigation Timing Level 2 specification</see>. Please use the<br/><see cref="PerformanceNavigationTiming"/> interface instead.</para></blockquote>
<para>-The <see cref="Performance"/> interface it belongs to.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/navigation"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="PerformanceNavigation"/> object.</value>
</PerformanceNavigation>
<PerformanceNow>
<summary>
The <strong><c>performance.now()</c></strong> method returns a high resolution timestamp in milliseconds. It represents the time elapsed since <see cref="Performance.TimeOrigin"/> (the time when navigation has started in window contexts, or the time when the worker is run in <see cref="Worker"/> and <see cref="ServiceWorker"/> contexts).
</summary>
<remarks>
<para>-<see cref="Performance.TimeOrigin"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/now"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>Returns a <see cref="DOMHighResTimeStamp"/> measured in milliseconds.</returns>
</PerformanceNow>
<PerformanceResourcetimingbufferfull>
<summary>
The <c>resourcetimingbufferfull</c> event is fired when the browser&amp;apos;s <see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/setResourceTimingBufferSize">resource timing buffer</see> is full.
</summary>
<remarks>
<para>-<see cref="Performance.ClearResourceTimings"/><br/>-<see cref="Performance.SetResourceTimingBufferSize"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/resourcetimingbufferfull"> <em>See also on MDN</em> </seealso></para>
</remarks>
</PerformanceResourcetimingbufferfull>
<PerformanceSetResourceTimingBufferSize>
<summary>
The <strong><c>setResourceTimingBufferSize()</c></strong> method sets the desired size of the browser&amp;apos;s resource timing buffer which stores the <c>&amp;quot;resource&amp;quot;</c> performance entries.
</summary>
<remarks>
<para>The specification requires the resource timing buffer initially to be 250 or greater.</para><para>To clear the browser&amp;apos;s performance resource data buffer, use the<br/><see cref="Performance.ClearResourceTimings"/> method.</para><para>To get notified when the browser's resource timing buffer is full, listen for the <see cref="Performance.Resourcetimingbufferfull"/> event.</para>
<para>-<see cref="Performance.ClearResourceTimings"/><br/>-<see cref="Performance.Resourcetimingbufferfull"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/setResourceTimingBufferSize"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</PerformanceSetResourceTimingBufferSize>
<PerformanceTimeOrigin>
<summary>
The <strong><c>timeOrigin</c></strong> read-only property of the <see cref="Performance"/> interface returns the high resolution timestamp that is used as the baseline for performance-related timestamps.
</summary>
<remarks>
<para>In Window contexts, this value represents the time when navigation has started. In <see cref="Worker"/> and <see cref="ServiceWorker"/> contexts, this value represents the time when the worker is run. You can use this property to synchronize the time origins between the contexts (see example below).</para><blockquote class="NOTE"><h5>NOTE</h5><para>The value of <c>performance.timeOrigin</c> may differ from the value returned by <see cref="DateNow"/> executed at the time origin, because <c>Date.now()</c> may have been impacted by system and user clock adjustments, clock skew, etc. The <c>timeOrigin</c> property is a <see href="https://w3c.github.io/hr-time/#dfn-monotonic-clock">monotonic clock</see> which current time never decreases and which isn&amp;apos;t subject to these adjustments.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A high resolution timestamp which considered to be the beginning of the current document&amp;apos;s lifetime. It&amp;apos;s calculated like this:</value>
</PerformanceTimeOrigin>
<PerformanceTiming>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The legacy<br/><strong><c>Performance.timing</c></strong> read-only<br/>property returns a <see cref="PerformanceTiming"/> object containing latency-related<br/>performance information.
</summary>
<remarks>
<para>This property is not available in workers.</para><blockquote class="WARNING"><h5>WARNING</h5><para>This property is deprecated in the <see href="https://w3c.github.io/navigation-timing/#obsolete">Navigation Timing Level 2 specification</see>. Please use the <see cref="PerformanceNavigationTiming"/><br/>interface instead.</para></blockquote>
<para>-The <see cref="Performance"/> interface it belongs to.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/timing"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="PerformanceTiming"/> object.</value>
</PerformanceTiming>
<PerformanceToJSON>
<summary>
The <strong><c>toJSON()</c></strong> method of the <see cref="Performance"/> interface is a {{Glossary("Serialization","serializer")}}; it returns a JSON representation of the <see cref="Performance"/> object.
</summary>
<remarks>
<para>-<see cref="JSON"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("JSON")}} object that is the serialization of the <see cref="Performance"/> object.The returned JSON doesn't contain the <see cref="Performance.EventCounts"/> property because it is of type <see cref="EventCounts"/>, which doesn't provide a <c>toJSON()</c> operation.<blockquote class="NOTE"><h5>NOTE</h5>The JSON object contains the serialization of the deprecated <see cref="Performance.Timing"/> and <see cref="Performance.Navigation"/> properties. To get a JSON representation of the newer <see cref="PerformanceNavigationTiming"/> interface, call <see cref="PerformanceNavigationTiming.ToJSON"/> instead.</blockquote></returns>
</PerformanceToJSON>
</docs>