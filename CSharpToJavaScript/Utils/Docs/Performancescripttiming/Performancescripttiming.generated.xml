<docs>
<PerformanceScriptTiming>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>PerformanceScriptTiming</c></strong> interface is specified in the Long Animation Frames API and provides metrics on individual scripts that contribute to long animation frames (LoAFs).
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming"> <em>See also on MDN</em> </seealso></para>
</remarks>
</PerformanceScriptTiming>
<PerformanceScriptTimingExecutionStart>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>executionStart</c></strong> read-only property of the <see cref="PerformanceScriptTiming"/> interface returns a <see cref="DOMHighResTimeStamp"/> indicating the time when the script compilation finished and execution started.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/executionStart"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="DOMHighResTimeStamp"/>.</value>
</PerformanceScriptTimingExecutionStart>
<PerformanceScriptTimingForcedStyleAndLayoutDuration>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>forcedStyleAndLayoutDuration</c></strong> read-only property of the <see cref="PerformanceScriptTiming"/> interface returns a <see cref="DOMHighResTimeStamp"/> indicating the total time spent, in milliseconds, by the script processing forced layout/style. See <see href="https://web.dev/articles/avoid-large-complex-layouts-and-layout-thrashing#avoid_layout_thrashing">Avoid layout thrashing</see> to understand what causes this.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/forcedStyleAndLayoutDuration"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="DOMHighResTimeStamp"/>.</value>
</PerformanceScriptTimingForcedStyleAndLayoutDuration>
<PerformanceScriptTimingInvoker>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>invoker</c></strong> read-only property of the <see cref="PerformanceScriptTiming"/> interface returns a string value indicating the identity of the feature that, when invoked, ran the script.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/invoker"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string, the structure of which depends on the script's <see cref="PerformanceScriptTiming.InvokerType"/> value:<table><tr><td><c>invokerType</c></td><td><c>invoker</c> string structure</td><td>Example(s)</td></tr><tr><td><c>&amp;quot;user-callback&amp;quot;</c></td><td>The object class the containing function is defined on, followed by a dot, followed by the function name.</td><td><c>&amp;quot;Window.requestAnimationFrame&amp;quot;</c>, <c>&amp;quot;Window.setTimeout&amp;quot;</c></td></tr><tr><td><c>&amp;quot;event-listener&amp;quot;</c></td><td>The <see cref="Element.TagName"/> of the element, followed by a hash and its <c>id</c> (<c>#id</c>) or by <c>src=</c> and its <c>src</c> value in square brackets (<c>[src=url]</c>) if an <c>id</c> is not present, followed by a dot, followed by the event handler property.</td><td><c>&amp;quot;IMG#hero.onload&amp;quot;</c>, <c>&amp;quot;IMG[src=https://example.com/img.jpg].onload&amp;quot;</c>, <c>&amp;quot;BUTTON#updateCart.onclick&amp;quot;</c></td></tr><tr><td><c>&amp;quot;resolve-promise&amp;quot;</c> or <c>&amp;quot;reject-promise&amp;quot;</c></td><td>The object and method that invoked the promise, followed by a dot, followed by <c>&amp;quot;then&amp;quot;</c> for <c>&amp;quot;resolve-promise&amp;quot;</c> and <c>&amp;quot;catch&amp;quot;</c> for <c>&amp;quot;reject-promise&amp;quot;</c>.</td><td><c>&amp;quot;Response.json.then&amp;quot;</c>, <c>&amp;quot;Response.json.catch&amp;quot;</c></td></tr><tr><td><c>&amp;quot;classic-script&amp;quot;</c> or <c>&amp;quot;module-script&amp;quot;</c></td><td>The source URL of the invoking script.</td><td><c>&amp;quot;https://example.com/scripts/myscript.js&amp;quot;</c></td></tr></table></value>
</PerformanceScriptTimingInvoker>
<PerformanceScriptTimingInvokerType>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>invokerType</c></strong> read-only property of the <see cref="PerformanceScriptTiming"/> interface returns a string value indicating the type of feature that, when invoked, ran the script.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/invokerType"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string indicating the invoker type of the script entry point. Possible values are:The structure of the <see cref="PerformanceScriptTiming.Invoker"/> value depends on the script's <c>invokerType</c> value. Check out the <c>invoker</c> page for more details.</value>
</PerformanceScriptTimingInvokerType>
<PerformanceScriptTimingPauseDuration>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>pauseDuration</c></strong> read-only property of the <see cref="PerformanceScriptTiming"/> interface returns a <see cref="DOMHighResTimeStamp"/> indicating the total time, in milliseconds, spent by the script on "pausing" synchronous operations (for example, <see cref="Window.Alert"/> calls or synchronous <see cref="XMLHttpRequest"/>s).
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/pauseDuration"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="DOMHighResTimeStamp"/>.</value>
</PerformanceScriptTimingPauseDuration>
<PerformanceScriptTimingSourceCharPosition>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>sourceCharPosition</c></strong> read-only property of the <see cref="PerformanceScriptTiming"/> interface returns a number representing the script character position of the script feature that contributed to the long animation frame (LoAF).
</summary>
<remarks>
<para>It is important to note that the reported function location will be the "entry point" of the script, that is, the top level of the stack, not any specific slow sub-function. See <see cref="PerformanceScriptTiming.SourceFunctionName"/> for more discussion around this.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/sourceCharPosition"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number. Returns <c>-1</c> if the script character position was not found.</value>
</PerformanceScriptTimingSourceCharPosition>
<PerformanceScriptTimingSourceFunctionName>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>sourceFunctionName</c></strong> read-only property of the <see cref="PerformanceScriptTiming"/> interface returns a string representing the name of the function that contributed to the long animation frame (LoAF).
</summary>
<remarks>
<para>It is important to note that the reported function name will be the &amp;quot;entry point&amp;quot; of the script, that is, the top level of the stack, not any specific slow sub-function.</para><para>For example, if an event handler calls a top-level function, which then calls a slow sub-function, the <c>source*</c> fields will report the name and location of the top-level function, not the slow sub-function â€” the function that was passed to the platform API is always the one reported. This is because of performance reasons; a full stack trace is costly.</para><para>In the following snippet:</para><para><c>sourceFunctionName</c> would report <c>libFunc</c>, not <c>slowFunction</c>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/sourceFunctionName"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string. Returns an empty string if the function name was not found.</value>
</PerformanceScriptTimingSourceFunctionName>
<PerformanceScriptTimingSourceURL>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>sourceURL</c></strong> read-only property of the <see cref="PerformanceScriptTiming"/> interface returns a string representing the URL of the script.
</summary>
<remarks>
<para>It is important to note that the reported function location will be the "entry point" of the script, that is, the top level of the stack, not any specific slow sub-function. See <see cref="PerformanceScriptTiming.SourceFunctionName"/> for more discussion around this.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/sourceURL"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string. Returns an empty string if the URL was not found.</value>
</PerformanceScriptTimingSourceURL>
<PerformanceScriptTimingToJSON>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>toJSON()</c></strong> method of the <see cref="PerformanceScriptTiming"/> interface is a {{Glossary("Serialization","serializer")}}; it returns a JSON representation of the <c>PerformanceScriptTiming</c> object.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="JSON"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/toJSON"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("JSON")}} object that is the serialization of the <see cref="PerformanceScriptTiming"/> object.</returns>
</PerformanceScriptTimingToJSON>
<PerformanceScriptTimingWindow>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>window</c></strong> read-only property of the <see cref="PerformanceScriptTiming"/> interface returns a reference to a <see cref="Window"/> object representing the <c>window</c> of the container (i.e., either the top-level document or an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see>) in which the long animation frame (LoAF)-causing script was executed.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/window"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Window"/> object, or <c>null</c> if the window is no longer active (the object reference is a <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef"><c>WeakRef</c></see>).</value>
</PerformanceScriptTimingWindow>
<PerformanceScriptTimingWindowAttribution>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>windowAttribution</c></strong> read-only property of the <see cref="PerformanceScriptTiming"/> interface returns an enumerated value describing the relationship of the container (i.e., either the top-level document or an {{htmlelement("iframe")}}) in which the long animation frame (LoAF)-causing script was executed, relative to the window running the current document.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Long_animation_frame_timing">Long animation frame timing</see><br/>-<see cref="PerformanceLongAnimationFrameTiming"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceScriptTiming/windowAttribution"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An enumerated value, which can be one of:</value>
</PerformanceScriptTimingWindowAttribution>
</docs>