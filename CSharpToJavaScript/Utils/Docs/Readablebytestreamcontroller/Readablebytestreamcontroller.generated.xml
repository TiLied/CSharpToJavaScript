<docs>
<ReadableByteStreamController>
<summary>
The <strong><c>ReadableByteStreamController</c></strong> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Streams API</see> represents a controller for a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_byte_streams">readable byte stream</see>.<br/>It allows control of the state and internal queue of a <see cref="ReadableStream"/> with an underlying byte source, and enables efficient zero-copy transfer of data from the underlying source to a consumer when the stream's internal queue is empty.
</summary>
<remarks>
<para>An instance of this controller type is created if an <c>underlyingSource</c> object with the property <c>type=&amp;quot;bytes&amp;quot;</c> is passed as an argument to the <see href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream#type"><c>ReadableStream()</c> constructor</see>.<br/>The <c>underlyingSource</c> object may also define <see href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream#start"><c>start()</c></see> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream#pull"><c>pull()</c></see> callback functions.<br/>These are called with the controller as a parameter, in order to setup the underlying source, and request data when needed.</para><para>The underlying source uses the controller to supply data to the stream via its <see href="https://developer.mozilla.org#readablebytestreamcontroller.byobrequest"><c>byobRequest</c></see> property or <see href="https://developer.mozilla.org#readablebytestreamcontroller.enqueue"><c>enqueue()</c></see> method.<br/><see href="https://developer.mozilla.org#readablebytestreamcontroller.byobrequest"><c>byobRequest</c></see> is a <see cref="ReadableStreamBYOBRequest"/> object that represents a pending request from a consumer to make a zero-copy transfer of data direct to a consumer.<br/><c>byobRequest</c> must be used to copy data if it exists (do not use <c>enqueue()</c> in this case)!<br/>If the underlying source needs to pass data to the stream and <c>byobRequest</c> is <c>null</c> then the source can call <see href="https://developer.mozilla.org#readablebytestreamcontroller.enqueue"><c>enqueue()</c></see> to add the data to the stream&amp;apos;s internal queues.</para><para>Note that the <see href="https://developer.mozilla.org#readablebytestreamcontroller.byobrequest"><c>byobRequest</c></see> is only created in &amp;quot;BYOB mode&amp;quot; when there is a request from a reader and the stream&amp;apos;s internal queue is empty.<br/>"BYOB mode" is enabled when using a <see cref="ReadableStreamBYOBReader"/> (typically constructed by calling <see cref="ReadableStream.GetReader"/> with the argument <c>{ mode: &amp;apos;byob&amp;apos; }</c>).<br/>It is also enabled when using a default reader and <see href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream#autoallocatechunksize"><c>autoAllocateChunkSize</c></see> is specified in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream#autoallocatechunksize"><c>ReadableController()</c> constructor</see>.</para><para>An underlying byte source can also use the controller to <see href="https://developer.mozilla.org#readablebytestreamcontroller.close"><c>close()</c></see> the stream when all the data has been sent and report errors from the underlying source using <see href="https://developer.mozilla.org#readablebytestreamcontroller.error"><c>error()</c></see>.<br/>The controller&amp;apos;s <see href="https://developer.mozilla.org#readablebytestreamcontroller.desiredsize"><c>desiredSize</c></see> property is used to apply &amp;quot;backpressure&amp;quot;, informing the underlying source of the size of the internal queue (small values indicate that the queue is filling up, hinting to the underlying source that it is be desirable to pause or throttle the inflow).</para><para>Note that even though the controller is primarily used by the underlying byte source, there is no reason it cannot be stored used by other parts of the system to signal the stream.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Streams API concepts</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_byte_streams">Using readable byte streams</see><br/>-<see cref="ReadableStream"/><br/>-<see href="https://whatwg-stream-visualizer.glitch.me/">WHATWG Stream Visualizer</see>, for a basic visualization of readable, writable, and transform streams.<br/>-<see href="https://github.com/MattiasBuelens/web-streams-polyfill">Web-streams-polyfill</see> or <see href="https://github.com/stardazed/sd-streams">sd-streams</see> - polyfills<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ReadableByteStreamController>
</docs>