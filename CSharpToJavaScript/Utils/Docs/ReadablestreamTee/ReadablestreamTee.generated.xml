<docs>
<ReadableStreamTee>
<summary>
The <strong><c>tee()</c></strong> method of the<br/><see cref="ReadableStream"/> interface <see href="https://streams.spec.whatwg.org/#tee-a-readable-stream">tees</see> the current readable stream, returning a<br/>two-element array containing the two resulting branches as<br/>new <see cref="ReadableStream"/> instances.
</summary>
<remarks>
<para>This is useful for allowing two readers to read a stream sequentially or simultaneously,<br/>perhaps at different speeds.<br/>For example, you might do this in a ServiceWorker if you want to fetch<br/>a response from the server and stream it to the browser, but also stream it to the<br/>ServiceWorker cache. Since a response body cannot be consumed more than once, you&amp;apos;d need<br/>two copies to do this.</para><para>A teed stream will partially signal backpressure at the rate of the <strong>faster</strong> consumer<br/>of the two <c>ReadableStream</c> branches,<br/>and unread data is enqueued internally on the slower consumed <c>ReadableStream</c><br/>without any limit or backpressure.<br/>That is, when <strong>both</strong> branches have an unread element in their internal queue,<br/>then the original <c>ReadableStream</c>&amp;apos;s controller&amp;apos;s internal queue will start to fill up,<br/>and once its <see cref="ReadableStreamDefaultController.DesiredSize"/> ≤ 0<br/>or byte stream controller <see cref="ReadableByteStreamController.DesiredSize"/> ≤ 0,<br/>then the controller will stop calling <c>pull(controller)</c> on the<br/>underlying source passed to <see cref="ReadableStream.ReadableStream"/>.<br/>If only one branch is consumed, then the entire body will be enqueued in memory.<br/>Therefore, you should not use the built-in <c>tee()</c> to read very large streams<br/>in parallel at different speeds.<br/>Instead, search for an implementation that fully backpressures<br/>to the speed of the <strong>slower</strong> consumed branch.</para><para>To cancel the stream you then need to cancel both resulting branches. Teeing a stream<br/>will generally lock it for the duration, preventing other readers from locking it.</para>
<para>-<see cref="ReadableStream.ReadableStream"/> constructor<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#teeing_a_stream">Teeing a stream</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/tee"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An {{jsxref("Array")}} containing two <see cref="ReadableStream"/> instances.</returns>
</ReadableStreamTee>
</docs>