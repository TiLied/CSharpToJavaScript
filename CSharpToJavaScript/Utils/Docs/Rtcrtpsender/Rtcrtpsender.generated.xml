<docs>
<RTCRtpSender>
<summary>
The <strong><c>RTCRtpSender</c></strong> interface provides the ability to control and obtain details about how a particular <see cref="MediaStreamTrack"/> is encoded and sent to a remote peer.
</summary>
<remarks>
<para>With it, you can configure the encoding used for the corresponding track, get information about the device's media capabilities, and so forth. You can also obtain access to an <see cref="RTCDTMFSender"/> which can be used to send {{Glossary("DTMF")}} codes (to simulate the user pressing buttons on a telephone's dial pad) to the remote peer.</para>
<para>-WebRTC API<br/>-<see cref="RTCPeerConnection.AddTrack"/><br/>-<see cref="RTCPeerConnection.GetSenders"/><br/>-<see cref="RTCRtpReceiver"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender"> <em>See also on MDN</em> </seealso></para>
</remarks>
</RTCRtpSender>
<RTCRtpSenderDtmf>
<summary>
The read-only <strong><c>dtmf</c></strong> property on the<br/><strong><see cref="RTCRtpSender"/></strong> interface returns a<br/><see cref="RTCDTMFSender"/> object which can be used to send {{Glossary("DTMF")}} tones<br/>over the <see cref="RTCPeerConnection"/>. See <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_DTMF">Using DTMF</see> for details on how to<br/>make use of the returned <c>RTCDTMFSender</c> object.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_DTMF">Using DTMF with WebRTC</see><br/>-<see cref="RTCPeerConnection"/><br/>-<see cref="RTCDTMFSender"/><br/>-<see cref="RTCRtpSender"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/dtmf"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="RTCDTMFSender"/> which can be used to send DTMF over the RTP session, or<br/><c>null</c> if the track being carried by the RTP session or the<br/><see cref="RTCPeerConnection"/> as a whole doesn't support DTMF.<blockquote class="NOTE"><h5>NOTE</h5>Only audio tracks can support DTMF, and typically only one audio track per<br/><c>RTCPeerConnection</c> will have an associated <see cref="RTCDTMFSender"/></blockquote></value>
</RTCRtpSenderDtmf>
<RTCRtpSenderGetCapabilities>
<summary>
The <strong>static method</strong> <strong><c>RTCRtpSender.getCapabilities()</c></strong> returns an object describing the codec and header extension capabilities supported by the <see cref="RTCRtpSender"/>.
</summary>
<remarks>
<para>You can, similarly, obtain the capabilities of <see cref="RTCRtpReceiver"/> objects on the device by calling the static function <see cref="RTCRtpReceiver.GetCapabilities"/>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/getCapabilities"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A new object that indicates what capabilities the browser has for sending the specified media kind over an <see cref="RTCPeerConnection"/>.<br/>If the browser doesn&amp;apos;t have any support for the given media <c>kind</c>, the returned value is <c>null</c>.The returned object has the following properties:</returns>
</RTCRtpSenderGetCapabilities>
<RTCRtpSenderGetParameters>
<summary>
The <strong><c>getParameters()</c></strong> method of the <see cref="RTCRtpSender"/> interface returns an object describing the current configuration for how the sender's <see cref="RTCRtpSender.Track"/> will be encoded and transmitted to a remote <see cref="RTCRtpReceiver"/>.
</summary>
<remarks>
<para>-<see cref="RTCRtpSender.SetParameters"/><br/>-<see cref="RTCRtpReceiver.GetParameters"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/getParameters"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An object indicating the current configuration of the sender. &amp;lt;!-- RTCRtpSendParameters, derived from RTCRtpParameters --&amp;gt;</returns>
</RTCRtpSenderGetParameters>
<RTCRtpSenderGetStats>
<summary>
The <see cref="RTCRtpSender"/> method <strong><c>getStats()</c></strong> asynchronously requests an <see cref="RTCStatsReport"/> object which provides statistics about outgoing traffic on the <see cref="RTCPeerConnection"/> which owns the sender, returning a {{jsxref("Promise")}} which is fulfilled when the results are available.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC API</see><br/>-<see cref="RTCStatsReport"/><br/>-<see cref="RTCRtpReceiver.GetStats"/><br/>-<see cref="RTCPeerConnection.GetStats"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/getStats"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A JavaScript <see cref="Promise"/> which is fulfilled once the statistics are available.<br/>The promise's fulfillment handler receives as a parameter a <see cref="RTCStatsReport"/> object containing the collected statistics.The returned <c>RTCStatsReport</c> accumulates the statistics for all of the streams being sent using the <c>RTCRtpSender</c>, as well as the statistics for any dependencies those streams have.These might include, for example, statistics with <see href="https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport#the_statistic_types">types</see>: <see href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats"><c>outbound-rtp</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats"><c>candidate-pair</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats"><c>local-candidate</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats"><c>remote-candidate</c></see>.</returns>
</RTCRtpSenderGetStats>
<RTCRtpSenderReplaceTrack>
<summary>
The <see cref="RTCRtpSender"/> method<br/><strong><c>replaceTrack()</c></strong> replaces the track currently being used<br/>as the sender's source with a new <see cref="MediaStreamTrack"/>.
</summary>
<remarks>
<para>The new<br/>track must be of the same media kind (audio, video, etc.) and switching the track should<br/>not require negotiation.</para><para>Among the use cases for <c>replaceTrack()</c> is the common need to switch<br/>between the rear- and front-facing cameras on a phone. With <c>replaceTrack()</c>,<br/>you can have a track object for each camera and switch between the two as needed. See<br/>the example <see href="https://developer.mozilla.org#switching_video_cameras">switching video cameras</see> below.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/replaceTrack"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> which is fulfilled once the track has been successfully<br/>replaced. The promise is rejected if the track cannot be replaced for any reason; this<br/>is commonly because the change would require renegotiation of the codec, which is not<br/>allowed (see <see href="https://developer.mozilla.org#things_that_require_negotiation">Things that require negotiation</see>).If <c>newTrack</c> was omitted or was <c>null</c>,<br/><c>replaceTrack()</c> stops the sender. No negotiation is required in this case.When the promise is fulfilled, the fulfillment handler receives a value of<br/><c>undefined</c>.</returns>
</RTCRtpSenderReplaceTrack>
<RTCRtpSenderSetParameters>
<summary>
The <strong><c>setParameters()</c></strong> method of the <see cref="RTCRtpSender"/> interface applies changes the configuration of sender's <see cref="RTCRtpSender.Track"/>, which is the <see cref="MediaStreamTrack"/> for which the <c>RTCRtpSender</c> is responsible.
</summary>
<remarks>
<para>In other words, <c>setParameters()</c> updates the configuration of the <see href="https://developer.mozilla.org/en-US/docs/Glossary/RTP">RTP</see> transmission as well as the encoding configuration for a specific outgoing media track on the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC</see> connection.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Media/Guides/Formats/WebRTC_codecs">Codecs used by WebRTC</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Media">Web media technologies</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setParameters"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} that resolves when the <see cref="RTCRtpSender.Track"/> property is updated with the given parameters.</returns>
</RTCRtpSenderSetParameters>
<RTCRtpSenderSetStreams>
<summary>
The <see cref="RTCRtpSender"/> method <strong><c>setStreams()</c></strong> associates the sender's <see cref="RTCRtpSender.Track"/> with the specified <see cref="MediaStream"/> objects.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setStreams"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</RTCRtpSenderSetStreams>
<RTCRtpSenderTrack>
<summary>
The <strong><c>track</c></strong> read-only property of<br/>the <see cref="RTCRtpSender"/> interface returns the <see cref="MediaStreamTrack"/><br/>which is being handled by the <c>RTCRtpSender</c>.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/track"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="MediaStreamTrack"/> object representing the media associated with the<br/><c>RTCRtpSender</c>. If no track is associated with the sender, this value is<br/><c>null</c>, in which case the sender transmits nothing.</value>
</RTCRtpSenderTrack>
<RTCRtpSenderTransform>
<summary>
The <strong><c>transform</c></strong> property of the <see cref="RTCRtpSender"/> object is used to insert a transform stream (<see cref="TransformStream"/>) running in a worker thread into the sender pipeline.<br/>This allows stream transforms to be applied to encoded video and audio frames after they are output by a codec, and before they are sent.
</summary>
<remarks>
<para>The transform that is to be added is defined using an <see cref="RTCRtpScriptTransform"/> and its associated <see cref="Worker"/>.<br/>If the transform is set synchronously immediately after creating the <c>RTCRtpSender</c> it will receive the first full frame generated by the sender&amp;apos;s encoder.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_Encoded_Transforms">Using WebRTC Encoded Transforms</see><br/>-<see cref="RTCRtpReceiver.Transform"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/transform"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="RTCRtpScriptTransform"/>&amp;lt;!-- or {{domxref(&amp;quot;SFrameTransform&amp;quot;)}} --&amp;gt;, or <c>null</c> if the sender has no associated transform stream.</value>
</RTCRtpSenderTransform>
<RTCRtpSenderTransport>
<summary>
The read-only <strong><c>transport</c></strong> property of an<br/><see cref="RTCRtpSender"/> object provides the <see cref="RTCDtlsTransport"/> object<br/>used to interact with the underlying transport over which the sender is exchanging<br/>Real-time Transport Control Protocol (<see href="https://developer.mozilla.org/en-US/docs/Glossary/RTCP">RTCP</see>) packets.
</summary>
<remarks>
<para>This transport is responsible for receiving the data for the media on the sender&amp;apos;s<br/><see cref="RTCRtpReceiver.Track"/>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/transport"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="RTCDtlsTransport"/> object representing the underlying transport being<br/>used by the sender to exchange packets with the remote peer, or <c>null</c> if the<br/>sender isn&amp;apos;t yet connected to a transport.</value>
</RTCRtpSenderTransport>
</docs>