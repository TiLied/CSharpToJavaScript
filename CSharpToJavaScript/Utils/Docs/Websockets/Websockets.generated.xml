<docs>
<WebSockets_APIWriting_WebSocket_servers>
<summary>
A WebSocket server is nothing more than an application listening on any port of a TCP server that follows a specific protocol. The task of creating a custom server tends to scare people; however, it can be straightforward to implement a simple WebSocket server on your platform of choice.
</summary>
<remarks>
<para>A WebSocket server can be written in any server-side programming language that is capable of <see href="https://en.wikipedia.org/wiki/Berkeley_sockets">Berkeley sockets</see>, such as C(++), Python, <see href="https://developer.mozilla.org/en-US/docs/Glossary/PHP">PHP</see>, or <see href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Node_server_without_framework">server-side JavaScript</see>. This is not a tutorial in any specific language, but serves as a guide to facilitate writing your own server.</para><para>This article assumes you're already familiar with how <see href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP">HTTP</see> works, and that you have a moderate level of programming experience. Depending on language support, knowledge of TCP sockets may be required. The scope of this guide is to present the minimum knowledge you need to write a WebSocket server.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Note:</strong> Read the latest official WebSockets specification, <see href="https://datatracker.ietf.org/doc/rfc6455/?include_text=1">RFC 6455</see>. Sections 1 and 4-7 are especially interesting to server implementors. Section 10 discusses security and you should definitely peruse it before exposing your server.</para></blockquote><para>A WebSocket server is explained on a very low level here. WebSocket servers are often separate and specialized servers (for load-balancing or other practical reasons), so you will often use a <see href="https://en.wikipedia.org/wiki/Reverse_proxy">reverse proxy</see> (such as a regular HTTP server) to detect WebSocket handshakes, pre-process them, and send those clients to a real WebSocket server. This means that you don&amp;apos;t have to bloat your server code with cookie and authentication handlers (for example).</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WebSockets_APIWriting_WebSocket_servers>
</docs>