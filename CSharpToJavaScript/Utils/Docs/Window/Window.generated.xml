<docs>
<Window>
<summary>
The <strong><c>Window</c></strong> interface represents a window containing a <see href="https://developer.mozilla.org/en-US/docs/Glossary/DOM">DOM</see> document; the <c>document</c> property points to the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document">DOM document</see> loaded in that window.
</summary>
<remarks>
<para>A window for a given document can be obtained using the <see cref="Document.DefaultView"/> property.</para><para>A global variable, <c>window</c>, representing the window in which the script is running, is exposed to JavaScript code.</para><para>The <c>Window</c> interface is home to a variety of functions, namespaces, objects, and constructors which are not necessarily directly associated with the concept of a user interface window. However, the <c>Window</c> interface is a suitable place to include these items that need to be globally available. Many of these are documented in the <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference">JavaScript Reference</see> and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">DOM Reference</see>.</para><para>In a tabbed browser, each tab is represented by its own <c>Window</c> object; the global <c>window</c> seen by JavaScript code running within a given tab always represents the tab in which the code is running. That said, even in a tabbed browser, some properties and methods still apply to the overall window that contains the tab, such as <see cref="Window.ResizeTo"/> and <see cref="Window.InnerHeight"/>. Generally, anything that can't reasonably pertain to a tab pertains to the window instead.</para><para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Window>
</docs>