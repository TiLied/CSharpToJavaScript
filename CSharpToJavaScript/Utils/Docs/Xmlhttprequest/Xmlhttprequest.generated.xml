<docs>
<XMLHttpRequest>
<summary>
<c>XMLHttpRequest</c> (XHR) objects are used to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.
</summary>
<remarks>
<para></para><para>Despite its name, <c>XMLHttpRequest</c> can be used to retrieve any type of data, not just XML.</para><para>If your communication needs to involve receiving event data or message data from a server, consider using <see href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">server-sent events</see> through the <see cref="EventSource"/> interface. For full-duplex communication, <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">WebSockets</see> may be a better choice.</para>
<para>-<see cref="XMLSerializer"/>: Serializing a DOM tree into XML<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequest>
<XMLHttpRequestAbort>
<summary>
The <strong><c>XMLHttpRequest.abort()</c></strong> method aborts the request if<br/>it has already been sent. When a request is aborted, its<br/><see cref="XMLHttpRequest.ReadyState"/> is changed to<br/><c>XMLHttpRequest.UNSENT</c> (0) and the request&amp;apos;s<br/><see cref="XMLHttpRequest.Status"/> code is set to 0.
</summary>
<remarks>
<para>If the request is still in progress (its <c>readyState</c> is not <c>XMLHttpRequest.DONE</c> or <c>XMLHttpRequest.UNSENT</c>), a <see cref="XMLHttpRequestreadystatechange"/> event, <see cref="XMLHttpRequestabort"/>, and a <see cref="XMLHttpRequestloadend"/> event are dispatched, in that order. For synchronous requests, no events are dispatched and an error is thrown instead.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</XMLHttpRequestAbort>
<XMLHttpRequestAbort>
<summary>
The <c>abort</c> event is fired when a request has been aborted, for example because the program called <see cref="XMLHttpRequest.Abort"/>.
</summary>
<remarks>
<para>-Related events: <see cref="XMLHttpRequestloadstart"/>, <see cref="XMLHttpRequestload"/>, <see cref="XMLHttpRequestprogress"/>, <see cref="XMLHttpRequesterror"/>, <see cref="XMLHttpRequestloadend"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest#monitoring_progress">Monitoring progress</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestAbort>
<XMLHttpRequestError>
<summary>
The <c>error</c> event is fired when the request encountered an error.
</summary>
<remarks>
<para>-Related events: <see cref="XMLHttpRequestloadstart"/>, <see cref="XMLHttpRequestload"/>, <see cref="XMLHttpRequestprogress"/>, <see cref="XMLHttpRequestloadend"/>, <see cref="XMLHttpRequestabort"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest#monitoring_progress">Monitoring progress</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/error"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestError>
<XMLHttpRequestGetAllResponseHeaders>
<summary>
The <see cref="XMLHttpRequest"/> method<br/><strong><c>getAllResponseHeaders()</c></strong> returns all the response<br/>headers, separated by <see href="https://developer.mozilla.org/en-US/docs/Glossary/'CRLF'">'CRLF'</see>, as a string, or returns <c>null</c><br/>if no response has been received.
</summary>
<remarks>
<para>If a network error happened, an empty string<br/>is returned.</para><blockquote class="NOTE"><h5>NOTE</h5><para>For multipart requests, this returns the headers from the<br/><strong>current</strong> part of the request, not from the original channel.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-Setting request headers: <see cref="XMLHttpRequest.SetRequestHeader"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A string representing all of the response&amp;apos;s headers (except those<br/>whose field name is <c>Set-Cookie</c>) separated by <see href="https://developer.mozilla.org/en-US/docs/Glossary/'CRLF'">'CRLF'</see>,<br/>or <c>null</c> if no response has been received. If a network error<br/>happened, an empty string is returned.An example of what a raw header string looks like:Each line is terminated by both carriage return and line feed characters<br/>(<c>\r\n</c>). These are essentially delimiters separating each of the headers.<blockquote class="NOTE"><h5>NOTE</h5>In modern browsers, the header names are returned in all lower<br/>case, as per the latest spec.</blockquote></returns>
</XMLHttpRequestGetAllResponseHeaders>
<XMLHttpRequestGetResponseHeader>
<summary>
The <see cref="XMLHttpRequest"/> method<br/><strong><c>getResponseHeader()</c></strong> returns the string containing the<br/>text of a particular header&amp;apos;s value.
</summary>
<remarks>
<para>If there are multiple response headers<br/>with the same name, then their values are returned as a single concatenated string,<br/>where each value is separated from the previous one by a pair of comma and space. The<br/><c>getResponseHeader()</c> method returns the value as a UTF byte sequence.</para><blockquote class="NOTE"><h5>NOTE</h5><para>The search for the header name is case-insensitive.</para></blockquote><para>If you need to get the raw string of all of the headers, use the<br/><see cref="XMLHttpRequest.GetAllResponseHeaders"/> method,<br/>which returns the entire raw header string.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers">HTTP headers</see><br/>-<see cref="XMLHttpRequest.GetAllResponseHeaders"/><br/>-<see cref="XMLHttpRequest.Response"/><br/>-Setting request headers: <see cref="XMLHttpRequest.SetRequestHeader"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A string representing the header&amp;apos;s text value, or <c>null</c><br/>if either the response has not yet been received or the header doesn&amp;apos;t exist in the<br/>response.</returns>
</XMLHttpRequestGetResponseHeader>
<XMLHttpRequestLoadend>
<summary>
The <strong><c>loadend</c></strong> event is fired when a request has completed, whether successfully (after <see cref="XMLHttpRequestload"/>) or unsuccessfully (after <see cref="XMLHttpRequestabort"/> or <see cref="XMLHttpRequesterror"/>).
</summary>
<remarks>
<para>-Related events: <see cref="XMLHttpRequestloadstart"/>, <see cref="XMLHttpRequestload"/>, <see cref="XMLHttpRequestprogress"/>, <see cref="XMLHttpRequesterror"/>, <see cref="XMLHttpRequestabort"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest#monitoring_progress">Monitoring progress</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/loadend"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestLoadend>
<XMLHttpRequestLoadstart>
<summary>
The <strong><c>loadstart</c></strong> event is fired when a request has started to load data.
</summary>
<remarks>
<para>-Related events: <see cref="XMLHttpRequestloadend"/>, <see cref="XMLHttpRequestload"/>, <see cref="XMLHttpRequestprogress"/>, <see cref="XMLHttpRequesterror"/>, <see cref="XMLHttpRequestabort"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest#monitoring_progress">Monitoring progress</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/loadstart"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestLoadstart>
<XMLHttpRequestLoad>
<summary>
The <c>load</c> event is fired when an <see cref="XMLHttpRequest"/> transaction completes successfully.
</summary>
<remarks>
<para>-Related events: <see cref="XMLHttpRequestloadstart"/>, <see cref="XMLHttpRequestloadend"/>, <see cref="XMLHttpRequestprogress"/>, <see cref="XMLHttpRequesterror"/>, <see cref="XMLHttpRequestabort"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest#monitoring_progress">Monitoring progress</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/load"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestLoad>
<XMLHttpRequestOpen>
<summary>
The <see cref="XMLHttpRequest"/> method <strong><c>open()</c></strong><br/>initializes a newly-created request, or re-initializes an existing one.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Calling this method for an already active request<br/>(one for which <c>open()</c> has already been called) is the equivalent of calling<br/><see cref="XMLHttpRequest.Abort"/>.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-Related <see cref="XMLHttpRequest"/> methods:<br/><see cref="XMLHttpRequest.SetRequestHeader"/>,<br/><see cref="XMLHttpRequest.Send"/>, and<br/><see cref="XMLHttpRequest.Abort"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</XMLHttpRequestOpen>
<XMLHttpRequestOverrideMimeType>
<summary>
The <see cref="XMLHttpRequest"/> method<br/><strong><c>overrideMimeType()</c></strong> specifies a MIME type other than the<br/>one provided by the server to be used instead when interpreting the data being<br/>transferred in a request.
</summary>
<remarks>
<para>This may be used, for example, to force a stream to<br/>be treated and parsed as <c>&amp;quot;text/xml&amp;quot;</c>, even if the server does not report it<br/>as such. This method must be called before calling <see cref="XMLHttpRequest.Send"/>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-<see cref="XMLHttpRequest.ResponseType"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</XMLHttpRequestOverrideMimeType>
<XMLHttpRequestProgress>
<summary>
The <strong><c>progress</c></strong> event is fired periodically when a request receives more data.
</summary>
<remarks>
<para>-Related events: <see cref="XMLHttpRequestloadstart"/>, <see cref="XMLHttpRequestload"/>, <see cref="XMLHttpRequestloadend"/>, <see cref="XMLHttpRequesterror"/>, <see cref="XMLHttpRequestabort"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest#monitoring_progress">Monitoring progress</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/progress"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestProgress>
<XMLHttpRequestReadyState>
<summary>
The <strong>XMLHttpRequest.readyState</strong> property returns the state an XMLHttpRequest client is in. An XHR client exists in one of the following states:
</summary>
<remarks>
<table><tr><td><para>Value</para></td><td><para>State</para></td><td><para>Description</para></td></tr><tr><td><para><c>0</c></para></td><td><para><c>UNSENT</c></para></td><td><para>Client has been created. <c>open()</c> not called yet.</para></td></tr><tr><td><para><c>1</c></para></td><td><para><c>OPENED</c></para></td><td><para><c>open()</c> has been called.</para></td></tr><tr><td><para><c>2</c></para></td><td><para><c>HEADERS_RECEIVED</c></para></td><td><para><c>send()</c> has been called, and headers and status are available.</para></td></tr><tr><td><para><c>3</c></para></td><td><para><c>LOADING</c></para></td><td><para>Downloading; <c>responseText</c> holds partial data.</para></td></tr><tr><td><para><c>4</c></para></td><td><para><c>DONE</c></para></td><td><para>The operation is complete.</para></td></tr></table>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestReadyState>
<XMLHttpRequestReadystatechange>
<summary>
The <c>readystatechange</c> event is fired whenever the <see cref="XMLHttpRequest.ReadyState"/> property of the <see cref="XMLHttpRequest"/> changes.
</summary>
<remarks>
<blockquote class="WARNING"><h5>WARNING</h5><para>This should not be used with synchronous requests and must<br/>not be used from native code.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readystatechange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestReadystatechange>
<XMLHttpRequestResponse>
<summary>
The <see cref="XMLHttpRequest"/><br/><strong><c>response</c></strong> property returns the response&amp;apos;s body content as<br/>an {{jsxref("ArrayBuffer")}}, a <see cref="Blob"/>, a <see cref="Document"/>,<br/>a JavaScript <see cref="Object"/>, or a string, depending on the value<br/>of the request's <see cref="XMLHttpRequest.ResponseType"/><br/>property.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-Getting text and HTML/XML data: <see cref="XMLHttpRequest.ResponseText"/> and<br/><see cref="XMLHttpRequest.ResponseXML"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An appropriate object based on the value of <see cref="XMLHttpRequest.ResponseType"/>.<br/>You may attempt to request the data be provided in a specific format<br/>by setting the value of <c>responseType</c> after calling<br/><see cref="XMLHttpRequest.Open"/> to initialize the request but before<br/>calling <see cref="XMLHttpRequest.Send"/> to send the request to the server.The value is <c>null</c> if the request is not yet complete or was unsuccessful,<br/>with the exception that when reading text data using a <c>responseType</c> of<br/><c>&amp;quot;text&amp;quot;</c> or the empty string (<c>&amp;quot;&amp;quot;</c>), the response can contain the<br/>response so far while the request is still in the <c>LOADING</c><br/><see cref="XMLHttpRequest.ReadyState"/> (3).</value>
</XMLHttpRequestResponse>
<XMLHttpRequestResponseText>
<summary>
The read-only <see cref="XMLHttpRequest"/> property<br/><strong><c>responseText</c></strong> returns the text received from a server<br/>following a request being sent.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string which contains either the textual data received using the<br/><c>XMLHttpRequest</c> or <c>&amp;quot;&amp;quot;</c> if the request failed or if no content has been received yet.While handling an asynchronous request, the value of <c>responseText</c> always<br/>has the current content received from the server, even if it&amp;apos;s incomplete because the<br/>data has not been completely received yet.You know the entire content has been received when the value of<br/><see cref="XMLHttpRequest.ReadyState"/> becomes<br/><c>XMLHttpRequest.DONE</c> (<c>4</c>), and<br/><see cref="XMLHttpRequest.Status"/> becomes 200 (<c>&amp;quot;OK&amp;quot;</c>).</value>
</XMLHttpRequestResponseText>
<XMLHttpRequestResponseType>
<summary>
The <see cref="XMLHttpRequest"/> property<br/><strong><c>responseType</c></strong> is an enumerated string value specifying<br/>the type of data contained in the response.
</summary>
<remarks>
<para>It also lets the author change the<br/>response type. If an empty string is set as the value of <c>responseType</c>, the<br/>default value of <c>text</c> is used.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest">HTML in XMLHttpRequest</see><br/>-The response data: <see cref="XMLHttpRequest.Response"/>,<br/><see cref="XMLHttpRequest.ResponseText"/>, and<br/><see cref="XMLHttpRequest.ResponseXML"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string which specifies what type of data the response contains.<br/>It can take the following values:<blockquote class="NOTE"><h5>NOTE</h5>When setting <c>responseType</c> to a particular value, the author should make<br/>sure that the server is actually sending a response compatible with that format. If<br/>the server returns data that is not compatible with the <c>responseType</c> that<br/>was set, the value of <see cref="XMLHttpRequest.Response"/> will be<br/><c>null</c>.</blockquote></value>
</XMLHttpRequestResponseType>
<XMLHttpRequestResponseURL>
<summary>
The read-only <strong><c>XMLHttpRequest.responseURL</c></strong> property returns the serialized URL of the response or the empty string if the URL is <c>null</c>. If the URL is returned, any URL fragment present in the URL will be stripped away. The value of <c>responseURL</c> will be the final URL obtained after any redirects.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestResponseURL>
<XMLHttpRequestResponseXML>
<summary>
The <strong><c>XMLHttpRequest.responseXML</c></strong> read-only property returns<br/>a <see cref="Document"/> containing the HTML or XML retrieved by the request; or<br/><c>null</c> if the request was unsuccessful, has not yet been sent, or if the data<br/>can&amp;apos;t be parsed as XML or HTML.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>The name <c>responseXML</c> is an artifact of this<br/>property&amp;apos;s history; it works for both HTML and XML.</para></blockquote><para>Usually, the response is parsed as <c>&amp;quot;text/xml&amp;quot;</c>. If the<br/><see cref="XMLHttpRequest.ResponseType"/> is set to<br/><c>&amp;quot;document&amp;quot;</c> and the request was made asynchronously, instead the response is<br/>parsed as <c>&amp;quot;text/html&amp;quot;</c>. <c>responseXML</c> is <c>null</c> for<br/>any other types of data, as well as for <see href="https://developer.mozilla.org/en-US/docs/Web/URI/Reference/Schemes/data"><c>data:</c> URLs</see>.</para><para>If the server doesn't specify the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type">Content-Type</see> as<br/><c>&amp;quot;text/xml&amp;quot;</c> or <c>&amp;quot;application/xml&amp;quot;</c>, you can use<br/><see cref="XMLHttpRequest.OverrideMimeType"/> to parse it as XML anyway.</para><para>This property isn&amp;apos;t available to workers.</para>
<para>-<see cref="XMLHttpRequest"/><br/>-<see cref="XMLHttpRequest.Response"/><br/>-<see cref="XMLHttpRequest.ResponseType"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/XML/Guides/Parsing_and_serializing_XML">Parsing and serializing XML</see><br/>-Parsing XML into a DOM tree: <see cref="DOMParser"/><br/>-Serializing a DOM tree into XML: <see cref="XMLSerializer"/> (specifically, the<br/><see cref="XMLSerializer.SerializeToString"/> method)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Document"/> from parsing the XML or HTML received using<br/><see cref="XMLHttpRequest"/>, or <c>null</c> if no data was received or if the<br/>data is not XML/HTML.</value>
</XMLHttpRequestResponseXML>
<XMLHttpRequestSend>
<summary>
The <see cref="XMLHttpRequest"/> method<br/><strong><c>send()</c></strong> sends the request to the server.
</summary>
<remarks>
<para>If the<br/>request is asynchronous (which is the default), this method returns as soon as the<br/>request is sent and the result is delivered using events. If the request is synchronous,<br/>this method doesn&amp;apos;t return until the response has arrived.</para><para><c>send()</c> accepts an optional parameter which lets you specify the request&amp;apos;s<br/>body; this is primarily used for requests such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT">PUT</see>. If the request<br/>method is <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET">GET</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD">HEAD</see>, the <c>body</c><br/>parameter is ignored and the request body is set to <c>null</c>.</para><para>If no <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept">Accept</see> header has been set using the<br/><see cref="XMLHttpRequest.SetRequestHeader"/>, an<br/><c>Accept</c> header with the type <c>&amp;quot;*/*&amp;quot;</c> (any type) is sent.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest">HTML in XMLHttpRequest</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</XMLHttpRequestSend>
<XMLHttpRequestSetAttributionReporting>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>setAttributionReporting()</c></strong> method of the<br/><see cref="XMLHttpRequest"/> interface indicates that you want the request's response to be able to register a JavaScript-based <see href="https://developer.mozilla.org/en-US/docs/Web/API/Attribution_Reporting_API/Registering_sources#javascript-based_event_sources">attribution source</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/Attribution_Reporting_API/Registering_triggers#javascript-based_attribution_triggers">attribution trigger</see>.
</summary>
<remarks>
<para>See the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Attribution_Reporting_API">Attribution Reporting API</see> for more details.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Attribution_Reporting_API">Attribution Reporting API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setAttributionReporting"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<c>undefined</c>).</returns>
</XMLHttpRequestSetAttributionReporting>
<XMLHttpRequestSetRequestHeader>
<summary>
The <see cref="XMLHttpRequest"/> method <strong><c>setRequestHeader()</c></strong> sets the value of an HTTP request header.<br/>When using <c>setRequestHeader()</c>, you must call it after calling <see cref="XMLHttpRequest.Open"/>, but before calling <see cref="XMLHttpRequest.Send"/>.<br/>If this method is called several times with the same header, the values are merged into one single request header.
</summary>
<remarks>
<para>Each time you call <c>setRequestHeader()</c> after the first time you call it, the specified text is appended to the end of the existing header&amp;apos;s content.</para><para>If no <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept">Accept</see> header has been set using this, an <c>Accept</c> header with the type <c>&amp;quot;*/*&amp;quot;</c> is sent with the request when <see cref="XMLHttpRequest.Send"/> is called.</para><para>For security reasons, there are several <see href="https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_request_header">Forbidden_request_header</see> whose values are controlled by the user agent. Any attempt to set a value for one of those headers from frontend JavaScript code will be ignored without warning or error.</para><para>In addition, the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Authorization"><c>Authorization</c></see> HTTP header may be added to a request, but will be removed if the request is redirected cross-origin.</para><blockquote class="NOTE"><h5>NOTE</h5><para>For your custom fields, you may encounter a &amp;quot;<strong>not allowed by Access-Control-Allow-Headers in preflight response</strong>&amp;quot; exception when you send requests across domains.<br/>In this situation, you need to set up the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers">Access-Control-Allow-Headers</see> in your response header at server side.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest">HTML in XMLHttpRequest</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</XMLHttpRequestSetRequestHeader>
<XMLHttpRequestStatus>
<summary>
The read-only <strong><c>XMLHttpRequest.status</c></strong> property returns the numerical HTTP <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status">status code</see> of the <c>XMLHttpRequest</c>&amp;apos;s response.
</summary>
<remarks>
<para>Before the request completes, the value of <c>status</c> is 0. Browsers also report a status of 0 in case of <c>XMLHttpRequest</c> errors.</para>
<para>-List of <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status">HTTP status</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number.</value>
</XMLHttpRequestStatus>
<XMLHttpRequestStatusText>
<summary>
The read-only <strong><c>XMLHttpRequest.statusText</c></strong> property returns a string containing the response&amp;apos;s status message as returned by the HTTP server. Unlike <see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status"><c>XMLHttpRequest.status</c></see> which indicates a numerical status code, this property contains the <strong>text</strong> of the response status, such as &amp;quot;OK&amp;quot; or &amp;quot;Not Found&amp;quot;. If the request&amp;apos;s <see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState"><c>readyState</c></see> is in <c>UNSENT</c> or <c>OPENED</c> state, the value of <c>statusText</c> will be an empty string.
</summary>
<remarks>
<para>If the server response doesn&amp;apos;t explicitly specify a status text, <c>statusText</c> will assume the default value &amp;quot;OK&amp;quot;.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Responses over an HTTP/2 connection will always have an empty string as status message as HTTP/2 does not support them.</para></blockquote>
<para>-List of <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status">HTTP status</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</see><br/>-<see href="https://fetch.spec.whatwg.org/#concept-response-status-message">WHATWG Fetch Living Standard</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/statusText"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</XMLHttpRequestStatusText>
<XMLHttpRequestTimeout>
<summary>
The <strong><c>XMLHttpRequest.timeout</c></strong> property is an <c>unsigned long</c> representing the number of milliseconds a request can take before automatically being terminated. The default value is 0, which means there is no timeout. Timeout shouldn't be used for synchronous XMLHttpRequests requests used in a <see href="https://developer.mozilla.org/en-US/docs/Glossary/'document environment'">'document environment'</see> or it will throw an <c>InvalidAccessError</c> exception. When a timeout happens, a <see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout_event">timeout</see> event is fired.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>You may not use a timeout for synchronous requests with an owning window.</para></blockquote><para><see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Synchronous_and_Asynchronous_Requests#example_using_a_timeout">Using a timeout with an asynchronous request</see>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestTimeout>
<XMLHttpRequestTimeout>
<summary>
The <strong><c>timeout</c></strong> event is fired when progression is terminated due to preset time expiring.
</summary>
<remarks>
<para>-<see cref="XMLHttpRequest"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestTimeout>
<XMLHttpRequestUpload>
<summary>
The <see cref="XMLHttpRequest"/> <c>upload</c> property returns an <see cref="XMLHttpRequestUpload"/> object that can be observed to monitor an upload's progress.
</summary>
<remarks>
<para>It is an opaque object, but because it's also an <see cref="XMLHttpRequestEventTarget"/>, event listeners can be attached to track its process.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Attaching event listeners to this object prevents the request from being a &amp;quot;simple request&amp;quot; and will cause a preflight request to be issued if cross-origin; see <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CORS">CORS</see>. Because of this, event listeners need to be registered before calling <see cref="XMLHttpRequest.Send"/> or upload events won't be dispatched.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para>The spec also seems to indicate that event listeners should be attached after <see cref="XMLHttpRequest.Open"/>. However, browsers are buggy on this matter, and often need the listeners to be registered <strong>before</strong> <see cref="XMLHttpRequest.Open"/> to work.</para></blockquote><para>The following events can be triggered on an upload object and used to monitor the upload:</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-<see cref="XMLHttpRequestUpload"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XMLHttpRequestUpload>
<XMLHttpRequestWithCredentials>
<summary>
The <strong><c>XMLHttpRequest.withCredentials</c></strong> property is a boolean value that indicates whether or not cross-site <c>Access-Control</c> requests should be made using credentials such as cookies, authentication headers or TLS client certificates. Setting <c>withCredentials</c> has no effect on same-origin requests.
</summary>
<remarks>
<para>In addition, this flag is also used to indicate when cookies are to be ignored in the response. The default is <c>false</c>. <c>XMLHttpRequest</c> responses from a different domain cannot set cookie values for their own domain unless <c>withCredentials</c> is set to <c>true</c> before making the request. The <see href="https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Third-party_cookies">third-party cookies</see> obtained by setting <c>withCredentials</c> to <c>true</c> will still honor same-origin policy and hence can not be accessed by the requesting script through <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie">document.cookie</see> or from response headers.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This never affects same-origin requests.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para><c>XMLHttpRequest</c> responses from a different domain <strong>cannot</strong> set cookie values for their own domain unless <c>withCredentials</c> is set to <c>true</c> before making the request, regardless of <c>Access-Control-</c> header values.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean.</value>
</XMLHttpRequestWithCredentials>
<XMLHttpRequestXMLHttpRequest>
<summary>
The <strong><c>XMLHttpRequest()</c></strong> constructor<br/>creates a new <see cref="XMLHttpRequest"/>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest">Using XMLHttpRequest</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest">HTML in XMLHttpRequest</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/XMLHttpRequest"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A new <see cref="XMLHttpRequest"/> object. The object must be prepared by at least<br/>calling <see cref="XMLHttpRequest.Open"/> to initialize it before calling<br/><see cref="XMLHttpRequest.Send"/> to send the request to the server.</returns>
</XMLHttpRequestXMLHttpRequest>
</docs>