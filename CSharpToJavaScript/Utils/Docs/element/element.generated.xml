<docs>
<Element>
<summary>
<strong><c>Element</c></strong> is the most general base class from which all element objects (i.e., objects that represent elements) in a <see cref="Document"/> inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from <c>Element</c>.
</summary>
<remarks>
<para>For example, the <see cref="HTMLElement"/> interface is the base interface for HTML elements. Similarly, the <see cref="SVGElement"/> interface is the basis for all SVG elements, and the <see cref="MathMLElement"/> interface is the base interface for MathML elements. Most functionality is specified further down the class hierarchy.</para><para>Languages outside the realm of the Web platform, like XUL through the <c>XULElement</c> interface, also implement <c>Element</c>.</para><para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Element>
<ElementAttachShadow>
<summary>
The <strong><c>Element.attachShadow()</c></strong> method attaches a shadow DOM tree to the specified element and returns a reference to its <see cref="ShadowRoot"/>.
</summary>
<remarks>
<para>-<see cref="ShadowRoot.Mode"/><br/>-<see cref="ShadowRoot.DelegatesFocus"/><br/>-<see cref="ShadowRoot.SlotAssignment"/><br/>-Declaratively attach a shadow root with the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/template#shadowrootmode"><c>shadowrootmode</c></see> attribute of the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/template"><c>&amp;lt;template&amp;gt;</c> element</see><br/>-<see href="https://web.dev/articles/declarative-shadow-dom">Declarative shadow DOM</see> on web.dev (2023)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>Returns a <see cref="ShadowRoot"/> object.</returns>
</ElementAttachShadow>
<ElementPointercancel>
<summary>
The <strong><c>pointercancel</c></strong> event is fired when the browser determines that there are unlikely to be any more pointer events, or if after the <see cref="Elementpointerdown"/> event is fired, the pointer is then used to manipulate the viewport by panning, zooming, or scrolling.
</summary>
<remarks>
<para>Some examples of situations that will trigger a <c>pointercancel</c> event:</para><blockquote class="NOTE"><h5>NOTE</h5><para>After the <c>pointercancel</c> event is fired, the browser will also send <see cref="Elementpointerout"/> followed by <see cref="Elementpointerleave"/>.</para></blockquote>
<para>-Related events-<see cref="'Elementgotpointercapture'"/><br/>-<see cref="'Elementlostpointercapture'"/><br/>-<see cref="'Elementpointerover'"/><br/>-<see cref="'Elementpointerenter'"/><br/>-<see cref="'Elementpointerdown'"/><br/>-<see cref="'Elementpointermove'"/><br/>-<see cref="'Elementpointerup'"/><br/>-<see cref="'Elementpointerout'"/><br/>-<see cref="'Elementpointerleave'"/><br/>-<see cref="'Elementpointerrawupdate'"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementPointercancel>
<ElementAriaModal>
<summary>
The <strong><c>ariaModal</c></strong> property of the <see cref="Element"/> interface reflects the value of the <c>aria-modal</c> attribute, which indicates whether an element is modal when displayed. Applying the <c>aria-modal</c> property to an element with <c>role=&amp;quot;dialog&amp;quot;</c> replaces the technique of using aria-hidden on the background for informing assistive technologies that content outside a dialog is inert.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/dialog_role">ARIA: dialog role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaModal"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaModal>
<ElementClick>
<summary>
An element receives a <strong><c>click</c></strong> event when any of the following occurs:
</summary>
<remarks>
<para>If the button is pressed on one element and the pointer is moved outside the element before the button is released, the event is fired on the most specific ancestor element that contained both elements.</para><para><c>click</c> fires after both the <see cref="Elementmousedown"/> and <see cref="Elementmouseup"/> events have fired, in that order.</para><para>The event is a device-independent event â€” meaning it can be activated by touch, keyboard, mouse, and any other mechanism provided by assistive technology.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementauxclick"/><br/>-<see cref="Elementcontextmenu"/><br/>-<see cref="Elementdblclick"/><br/>-<see cref="Elementmousedown"/><br/>-<see cref="Elementmouseup"/><br/>-<see cref="Elementpointerdown"/><br/>-<see cref="Elementpointerup"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/click"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementClick>
<ElementClientLeft>
<summary>
The <strong><c>clientLeft</c></strong> read-only property of the <see cref="Element"/> interface returns the width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered. <c>clientLeft</c> does not include the left margin or the left padding.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>When an element has <c>display: inline</c>, <c>clientLeft</c> returns <c>0</c> regardless of the element&amp;apos;s border.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements">Determining the dimensions of elements</see><br/>-<see cref="HTMLElement.OffsetLeft"/><br/>-<see cref="Element.ScrollLeft"/><br/>-<see cref="Element.ClientHeight"/><br/>-<see cref="Element.ClientWidth"/><br/>-<see cref="Element.ClientTop"/><br/>-<see cref="Element.GetBoundingClientRect"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An integer.</value>
</ElementClientLeft>
<ElementMousewheel>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong>obsolete</strong> and <strong>non-standard</strong> <strong><c>mousewheel</c></strong> event is fired asynchronously at an <see cref="Element"/> to provide updates while a mouse wheel or similar device is operated. The <c>mousewheel</c> event was never part of any standard, and while it was implemented by several browsers, it was never implemented by Firefox.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Instead of this obsolete event, use the standard <see cref="Element.Wheel"/> event.</para></blockquote>
<para>-The standard <see cref="Elementwheel"/> event to listen to instead.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mousewheel"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementMousewheel>
<ElementBeforeinput>
<summary>
The DOM <strong><c>beforeinput</c></strong> event fires when the value of an {{HTMLElement("input")}} or {{HTMLElement("textarea")}} element is about to be modified. But in contrast to the <see cref="Elementinput"/> event, it does not fire on the {{HTMLElement("select")}} element. The event also applies to elements with <see cref="HTMLElement.ContentEditable"/> enabled, and to any element when <see cref="Document.DesignMode"/> is turned on.
</summary>
<remarks>
<para>This allows web apps to override text edit behavior before the browser modifies the DOM tree, and provides more control over input events to improve performance.</para><para>In the case of <c>contenteditable</c> and <c>designMode</c>, the event target is the <strong>editing host</strong>. If these properties apply to multiple elements, the editing host is the nearest ancestor element whose parent isn&amp;apos;t editable.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Not every user modification results in <c>beforeinput</c> firing. Also the event may fire but be non-cancelable. This may happen when the modification is done by autocomplete, by accepting a correction from a spell checker, by password manager autofill, by <see href="https://developer.mozilla.org/en-US/docs/Glossary/Input method editor">Input method editor</see>, or in other ways. The details vary by browser and OS. To override the edit behavior in all situations, the code needs to handle the <c>input</c> event and possibly revert any modifications that were not handled by the <c>beforeinput</c> handler. See bugs <see href="https://bugzil.la/1673558">1673558</see> and <see href="https://bugzil.la/1763669">1763669</see>.</para></blockquote>
<para>-Related event: <see cref="Elementinput"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/beforeinput"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementBeforeinput>
<ElementInsertAdjacentText>
<summary>
The <strong><c>insertAdjacentText()</c></strong> method of the <see cref="Element"/> interface, given a relative position and a string, inserts a new text node at the given position relative to the element it is called from.
</summary>
<remarks>
<para>-<see cref="Element.InsertAdjacentElement"/><br/>-<see cref="Element.InsertAdjacentHTML"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementInsertAdjacentText>
<ElementAfterscriptexecute>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>This event was a proposal in an early version of the specification. Do not rely on it.</blockquote>
</summary>
<remarks>
<para>The <strong><c>afterscriptexecute</c></strong> event is fired after a script has been executed.</para><para>It is a proprietary event specific to Gecko (Firefox).</para><para>This event is not cancelable.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/beforescriptexecute_event"><c>beforescriptexecute</c></see> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/afterscriptexecute"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementAfterscriptexecute>
<ElementBlur>
<summary>
The <strong><c>blur</c></strong> event fires when an element has lost focus. The event does not bubble, but the related <see cref="Elementfocusout"/> event that follows does bubble.
</summary>
<remarks>
<para>An element will lose focus if another element is selected.<br/>An element will also lose focus if a style that does not allow focus is applied, such as <c>hidden</c>, or if the element is removed from the document â€” in both of these cases focus moves to the <c>body</c> element (viewport).<br/>Note however that <c>blur</c> is not fired when a focused element is removed from the document.</para><para>The opposite of <c>blur</c> is the <see cref="Elementfocus"/> event, which fires when the element has <strong>received</strong> focus.</para><para>The <c>blur</c> event is not cancelable.</para>
<para>-The <see cref="HTMLElement.Blur"/> method<br/>-Related events: <see cref="Elementfocus"/>, <see cref="Elementfocusin"/>, <see cref="Elementfocusout"/><br/>-This event on <c>Window</c> targets: <see cref="Windowblur"/> event<br/>-<see href="https://javascript.info/focus-blur">Focusing: focus/blur</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/blur"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementBlur>
<ElementPointerenter>
<summary>
The <c>pointerenter</c> event fires when a pointing device is moved into the hit test boundaries of an element or one of its descendants, including as a result of a <see cref="Elementpointerdown"/> event from a device that does not support hover (see <see cref="Elementpointerdown"/>). Otherwise, <c>pointerenter</c> works the same as <see cref="Elementmouseenter"/>, and are dispatched at the same time. They are also dispatched at the same time as <see cref="Elementmouseover"/> and <see cref="Elementpointerover"/> events, if appropriate.
</summary>
<remarks>
<para>-Related events-<see cref="'Elementgotpointercapture'"/><br/>-<see cref="'Elementlostpointercapture'"/><br/>-<see cref="'Elementpointerover'"/><br/>-<see cref="'Elementpointerdown'"/><br/>-<see cref="'Elementpointermove'"/><br/>-<see cref="'Elementpointerup'"/><br/>-<see cref="'Elementpointercancel'"/><br/>-<see cref="'Elementpointerout'"/><br/>-<see cref="'Elementpointerleave'"/><br/>-<see cref="'Elementpointerrawupdate'"/><br/>-<see cref="Elementmouseenter"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementPointerenter>
<ElementReplaceWith>
<summary>
The <strong><c>Element.replaceWith()</c></strong> method replaces this<br/><c>Element</c> in the children list of its parent with a set of<br/><see cref="Node"/> objects or strings. Strings are inserted as equivalent <see cref="Text"/> nodes.
</summary>
<remarks>
<para>-<see cref="Node.ReplaceChild"/><br/>-<see cref="NodeList"/><br/>-<see cref="CharacterData.ReplaceWith"/><br/>-<see cref="DocumentType.ReplaceWith"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementReplaceWith>
<ElementHasAttribute>
<summary>
The <strong><c>Element.hasAttribute()</c></strong> method returns a<br/><strong>Boolean</strong> value indicating whether the specified element has the<br/>specified attribute or not.
</summary>
<remarks>
<para>-<see cref="Element.HasAttributes"/><br/>-<see cref="Element.GetAttribute"/><br/>-<see cref="Element.SetAttribute"/><br/>-<see cref="Element.RemoveAttribute"/><br/>-<see cref="Element.ToggleAttribute"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A boolean.</returns>
</ElementHasAttribute>
<ElementAuxclick>
<summary>
The <strong><c>auxclick</c></strong> event is fired at an <see cref="Element"/> when a non-primary pointing device button (any mouse button other than the primaryâ€”usually leftmostâ€”button) has been pressed and released both within the same element.
</summary>
<remarks>
<para><c>auxclick</c> is fired after the <see cref="Elementmousedown"/> and <see cref="Elementmouseup"/> events have been fired, in that order.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementclick"/><br/>-<see cref="Elementcontextmenu"/><br/>-<see cref="Elementdblclick"/><br/>-<see cref="Elementmousedown"/><br/>-<see cref="Elementmouseup"/><br/>-<see cref="Elementpointerdown"/><br/>-<see cref="Elementpointerup"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementAuxclick>
<ElementBefore>
<summary>
The <strong><c>Element.before()</c></strong> method inserts a set of<br/><see cref="Node"/> objects or strings in the children list of this<br/><c>Element</c>&amp;apos;s parent, just before this <c>Element</c>.<br/>Strings are inserted as equivalent <see cref="Text"/> nodes.
</summary>
<remarks>
<para>-<see cref="Element.After"/><br/>-<see cref="Element.Append"/><br/>-<see cref="Element.InsertAdjacentElement"/><br/>-<see cref="CharacterData.Before"/><br/>-<see cref="DocumentType.Before"/><br/>-<see cref="Node.AppendChild"/><br/>-<see cref="Node.InsertBefore"/><br/>-<see cref="NodeList"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/before"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementBefore>
<ElementMouseover>
<summary>
The <strong><c>mouseover</c></strong> event is fired at an <see cref="Element"/> when a pointing device (such as a mouse or trackpad) is used to move the cursor onto the element or one of its child elements.
</summary>
<remarks>
<para>If the target element has child elements, <c>mouseout</c> and <c>mouseover</c> events fire as the mouse moves over the boundaries of these elements too, not just the target element itself. Usually, <c>mouseenter</c> and <c>mouseleave</c> events&amp;apos; behavior is more sensible, because they are not affected by moving into child elements.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementmousedown"/><br/>-<see cref="Elementmouseup"/><br/>-<see cref="Elementmousemove"/><br/>-<see cref="Elementclick"/><br/>-<see cref="Elementdblclick"/><br/>-<see cref="Elementmouseout"/><br/>-<see cref="Elementmouseenter"/><br/>-<see cref="Elementmouseleave"/><br/>-<see cref="Elementcontextmenu"/><br/>-<see cref="Elementpointerover"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementMouseover>
<ElementScrollWidth>
<summary>
The <strong><c>scrollWidth</c></strong> read-only property of the <see cref="Element"/> interface is a measurement of the width of an element's content, including content not visible on the screen due to overflow.
</summary>
<remarks>
<para>The <c>scrollWidth</c> value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar. The width is measured in the same way as <see cref="Element.ClientWidth"/>: it includes the element's padding, but not its border, margin or vertical scrollbar (if present). It can also include the width of pseudo-elements such as {{cssxref("::before&amp;quot;)}} or {{cssxref(&amp;quot;::after&amp;quot;)}}. If the element&amp;apos;s content can fit without a need for horizontal scrollbar, its <c>scrollWidth</c> is equal to <see cref="Element.ClientWidth"/>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements">Determining the dimensions of elements</see><br/>-<see cref="HTMLElement.OffsetWidth"/><br/>-<see cref="Element.ClientWidth"/><br/>-<see cref="Element.ScrollHeight"/><br/>-<see cref="Element.ScrollLeft"/><br/>-<see cref="Element.ScrollTop"/><br/>-<see cref="Element.GetBoundingClientRect"/><br/>-<see cref="Element.ScrollTo"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An integer.</value>
</ElementScrollWidth>
<ElementDOMMouseScroll>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The DOM <c>DOMMouseScroll</c> event is fired asynchronously when mouse wheel or similar device is operated and the accumulated scroll amount is over 1 line or 1 page since last event. It's represented by the <see cref="MouseScrollEvent"/> interface. This event was only implemented by Firefox. You should instead use the standard <see cref="Element.Wheel"/> event.
</summary>
<remarks>
<para>If you want to prevent the default action of mouse wheel events, it&amp;apos;s not enough to handle only this event on Gecko because If scroll amount by a native mouse wheel event is less than 1 line (or less than 1 page when the system setting is by page scroll), other mouse wheel events may be fired without this event.</para><para>On Gecko 17 (Firefox 17) or later, you need to call <c>preventDefault()</c> of <c>wheel</c> events which must be fired for every native event.</para><para>Use the standardized <see cref="Elementwheel"/> event if available.</para>
<para>-<see cref="MouseScrollEvent"/><br/>-Gecko&amp;apos;s legacy pixel scroll event: <c>MozMousePixelScroll</c><br/>-Non-Gecko browsers&amp;apos; legacy mouse wheel event: <c>mousewheel</c><br/>-Standardized wheel event: <c>wheel</c><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/DOMMouseScroll"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementDOMMouseScroll>
<ElementAriaColIndexText>
<summary>
The <strong><c>ariaColIndexText</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-colindextext"><c>aria-colindextext</c></see> attribute, which defines a human readable text alternative of aria-colindex.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/table_role">ARIA: table role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaColIndexText"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementAriaColIndexText>
<ElementFullscreenerror>
<summary>
The <strong><c>fullscreenerror</c></strong> event is fired when the browser cannot switch to fullscreen mode.
</summary>
<remarks>
<para>As with the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event"><c>fullscreenchange</c> event</see>, two <c>fullscreenerror</c> events are fired; the first is sent to the <see cref="Element"/> which failed to change modes, and the second is sent to the <see cref="Document"/> which owns that element.</para><para>For some reasons that switching into fullscreen mode might fail, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">the guide to the Fullscreen API</see>.</para><para>This event is not cancelable.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event"><c>fullscreenchange</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Fullscreen API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">Guide to the Fullscreen API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementFullscreenerror>
<ElementClassName>
<summary>
The <strong><c>className</c></strong> property of the<br/><see cref="Element"/> interface gets and sets the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/class"><c>class</c> attribute</see><br/>of the specified element.
</summary>
<remarks>
<para>-<see cref="Element.ClassList"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/className"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string variable representing the class or space-separated classes of the current element.</value>
</ElementClassName>
<ElementToggleAttribute>
<summary>
The <strong><c>toggleAttribute()</c></strong> method of the<br/><see cref="Element"/> interface toggles a Boolean attribute (removing it if it is<br/>present and adding it if it is not present) on the given element.
</summary>
<remarks>
<para>-<see cref="Element.HasAttribute"/><br/>-<see cref="Element.GetAttribute"/><br/>-<see cref="Element.RemoveAttribute"/><br/>-<see cref="Element.SetAttribute"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns><c>true</c> if attribute <strong><c>name</c></strong> is eventually<br/>present, and <c>false</c> otherwise.</returns>
</ElementToggleAttribute>
<ElementGetAttributeNS>
<summary>
The <strong><c>getAttributeNS()</c></strong> method of the <see cref="Element"/><br/>interface returns the string value of the attribute with the specified namespace and<br/>name. If the named attribute does not exist, the value returned will either be<br/><c>null</c> or <c>&amp;quot;&amp;quot;</c> (the empty string); see <see href="https://developer.mozilla.org#notes">Notes</see> for<br/>details.
</summary>
<remarks>
<para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="Element.GetAttribute"/> method instead.</para>
<para>-<see cref="Element.HasAttributeNS"/><br/>-<see cref="Element.SetAttributeNS"/><br/>-<see cref="Element.RemoveAttributeNS"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The string value of the specified attribute. If the attribute doesn&amp;apos;t exist, the result<br/>is <c>null</c>.<blockquote class="NOTE"><h5>NOTE</h5>Earlier versions of the DOM specification had<br/>this method described as returning an empty string for non-existent attributes, but it<br/>was not typically implemented this way since null makes more sense. The DOM4<br/>specification now says this method should return null for non-existent attributes.</blockquote></returns>
</ElementGetAttributeNS>
<ElementAriaOrientation>
<summary>
The <strong><c>ariaOrientation</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-orientation"><c>aria-orientation</c></see> attribute, which indicates whether the element&amp;apos;s orientation is horizontal, vertical, or unknown/ambiguous.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaOrientation"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaOrientation>
<ElementAriaBrailleRoleDescription>
<summary>
The <strong><c>ariaBrailleRoleDescription</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-brailleroledescription"><c>aria-brailleroledescription</c></see> attribute, which defines the ARIA braille role description of the element.
</summary>
<remarks>
<para>This property may be used to provide an abbreviated version of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-roledescription"><c>aria-roledescription</c></see> value.<br/>It should only be used if <c>aria-roledescription</c> is present and in the rare case where it is too verbose for braille.<br/>The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-brailleroledescription"><c>aria-brailleroledescription</c></see> contains additional information about when the property should be set.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaBrailleRoleDescription"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementAriaBrailleRoleDescription>
<ElementReplaceChildren>
<summary>
The <strong><c>Element.replaceChildren()</c></strong> method replaces the<br/>existing children of a <see cref="Node"/> with a specified new set of children. These<br/>can be string or <see cref="Node"/> objects.
</summary>
<remarks>
<para>-<see cref="Element.Prepend"/><br/>-<see cref="Element.Append"/><br/>-<see cref="NodeList"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceChildren"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementReplaceChildren>
<ElementAriaMultiLine>
<summary>
The <strong><c>ariaMultiLine</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-multiline"><c>aria-multiline</c></see> attribute, which indicates whether a text box accepts multiple lines of input or only a single line.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Where possible use an HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see> element with <c>type=&amp;quot;text&amp;quot;</c> or a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea">textarea</see> as these have built in semantics and do not require ARIA attributes.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/textbox_role">ARIA: textbox role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaMultiLine"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaMultiLine>
<ElementTouchend>
<summary>
The <c>touchend</c> event fires when one or more touch points are removed from the touch surface. Remember that it is possible to get a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event"><c>touchcancel</c></see> event instead.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events">Touch events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementTouchend>
<ElementGetAttributeNames>
<summary>
The <strong><c>getAttributeNames()</c></strong> method of the<br/><see cref="Element"/> interface returns the attribute names of the element as an<br/><see cref="Array"/> of strings. If the element has no attributes it returns an empty<br/>array.
</summary>
<remarks>
<para>Using <c>getAttributeNames()</c> along with<br/><see cref="Element.GetAttribute"/>, is a memory-efficient and<br/>performant alternative to accessing <see cref="Element.Attributes"/>.</para><para>The names returned by <strong><c>getAttributeNames()</c></strong> are <strong>qualified</strong> attribute names, meaning that attributes with a namespace prefix have their names returned with that namespace prefix (<strong>not</strong> the actual namespace), followed by a colon, followed by the attribute name (for example, <strong><c>xlink:href</c></strong>), while any attributes which have no namespace prefix have their names returned as-is (for example, <strong><c>href</c></strong>).</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An (<see cref="Array"/>) of strings.</returns>
</ElementGetAttributeNames>
<ElementQuerySelector>
<summary>
The <strong><c>querySelector()</c></strong> method of the <see cref="Element"/><br/>interface returns the first element that is a descendant of the element on which it is<br/>invoked that matches the specified group of selectors.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Locating_DOM_elements_using_selectors">Locating DOM elements using selectors</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors">Attribute selectors</see> in the CSS<br/>Guide<br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Attribute_selectors">Attribute selectors</see> in the MDN Learning Area<br/>-<see cref="Element.QuerySelectorAll"/><br/>-<see cref="Document.QuerySelector"/> and<br/><see cref="Document.QuerySelectorAll"/><br/>-<see cref="DocumentFragment.QuerySelector"/> and<br/><see cref="DocumentFragment.QuerySelectorAll"/><br/>-Other methods that take selectors: <see cref="Element.Closest"/> and<br/><see cref="Element.Matches"/>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The first descendant element of <c>baseElement</c> which matches the specified<br/>group of <c>selectors</c>. The entire hierarchy of elements is considered when<br/>matching, including those outside the set of elements including <c>baseElement</c><br/>and its descendants; in other words, <c>selectors</c> is first applied to the<br/>whole document, not the <c>baseElement</c>, to generate an initial list of<br/>potential elements. The resulting elements are then examined to see if they are<br/>descendants of <c>baseElement</c>. The first match of those remaining elements is<br/>returned by the <c>querySelector()</c> method.If no matches are found, the returned value is <c>null</c>.</returns>
</ElementQuerySelector>
<ElementScroll>
<summary>
The <strong><c>scroll()</c></strong> method of the <see cref="Element"/><br/>interface scrolls the element to a particular set of coordinates inside a given<br/>element.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementScroll>
<ElementChildElementCount>
<summary>
The <strong><c>Element.childElementCount</c></strong> read-only property<br/>returns the number of child elements of this element.
</summary>
<remarks>
<para>-<see cref="Document.ChildElementCount"/><br/>-<see cref="DocumentFragment.ChildElementCount"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/childElementCount"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementChildElementCount>
<ElementGetHTML>
<summary>
The <strong><c>getHTML()</c></strong> method of the <see cref="Element"/> interface is used to serialize an element's DOM to an HTML string.
</summary>
<remarks>
<para>The method provides an options argument that enables the serialization of child nodes that are shadow roots.<br/>The options can be used to include nested shadow roots that have been set as <see cref="ShadowRootserializable"/>, and/or a specified array of <see cref="ShadowRoot"/> objects, which may be either open or closed.</para><para>Without arguments, child nodes that are shadow roots are not serialized, and this method behaves in the same way as reading the value of <see cref="Element.InnerHTML"/>.</para><para>Note that some browsers serialize the <c>&amp;lt;</c> and <c>&amp;gt;</c> characters as <c>&amp;lt;</c> and <c>&amp;gt;</c> when they appear in attribute values (see <see href="https://developer.mozilla.org#browser_compatibility">Browser compatibility</see>).<br/>This is to prevent a potential security vulnerability (<see href="https://www.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass.html">mutation XSS</see>) in which an attacker can craft input that bypasses a <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS#sanitization">sanitization function</see>, enabling a cross-site scripting (XSS) attack.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getHTML"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A string that represents the HTML serialization of the element.</returns>
</ElementGetHTML>
<ElementAttributes>
<summary>
The <strong><c>Element.attributes</c></strong> property returns a live collection<br/>of all attribute nodes registered to the specified node. It is a<br/><see cref="NamedNodeMap"/>, not an <c>Array</c>, so it has no <see cref="Array"/><br/>methods and the <see cref="Attr"/> nodes' indexes may differ among browsers. To be more<br/>specific, <c>attributes</c> is a key/value pair of strings that represents any<br/>information regarding that attribute.
</summary>
<remarks>
<para>-<see cref="NamedNodeMap"/>, the interface of the returned object<br/>-Cross-browser compatibility considerations: on <see href="https://quirksmode.org/dom/core/#attributes">quirksmode</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="NamedNodeMap"/> object.</value>
</ElementAttributes>
<ElementSetAttribute>
<summary>
The <strong><c>setAttribute()</c></strong> method of the <see cref="Element"/> interface sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.
</summary>
<remarks>
<para>To get the current value of an attribute, use <see cref="Element.GetAttribute"/>; to remove an attribute, call <see cref="Element.RemoveAttribute"/>.</para><para>If you need to work with the <see cref="Attr"/> node (such as cloning from another element) before adding it, you can use the <see cref="Element.SetAttributeNode"/> method instead.</para>
<para>-<see cref="Element.HasAttribute"/><br/>-<see cref="Element.GetAttribute"/><br/>-<see cref="Element.RemoveAttribute"/><br/>-<see cref="Element.ToggleAttribute"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementSetAttribute>
<ElementRemoveAttributeNode>
<summary>
The <strong><c>removeAttributeNode()</c></strong> method of the <see cref="Element"/> interface removes the specified <see cref="Attr"/> node from the element.
</summary>
<remarks>
<para>If you don't need to inspect the attribute node before removing it, you can use the <see cref="Element.RemoveAttribute"/> method instead.</para>
<para>-<see cref="Document.CreateAttribute"/><br/>-<see cref="Element.GetAttributeNode"/><br/>-<see cref="Element.SetAttributeNode"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNode"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The attribute node that was removed.</returns>
</ElementRemoveAttributeNode>
<ElementAriaBusy>
<summary>
The <strong><c>ariaBusy</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-busy"><c>aria-busy</c></see> attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaBusy"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaBusy>
<ElementTouchstart>
<summary>
The <c>touchstart</c> event is fired when one or more touch points are placed on the touch surface.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events">Touch events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementTouchstart>
<ElementAriaSetSize>
<summary>
The <strong><c>ariaSetSize</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-setsize"><c>aria-setsize</c></see> attribute, which defines the number of items in the current set of listitems or treeitems.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/tab_role">ARIA: tab role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaSetSize"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string containing an integer.</value>
</ElementAriaSetSize>
<ElementTagName>
<summary>
The <strong><c>tagName</c></strong> read-only property<br/>of the <see cref="Element"/> interface returns the tag name of the element on which<br/>it&amp;apos;s called.
</summary>
<remarks>
<para>For example, if the element is an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img">img</see>, its<br/><c>tagName</c> property is <c>IMG</c> (for HTML documents; it may be cased<br/>differently for XML/XHTML documents). Note: You can use the <see cref="Element.LocalName"/> property<br/>to access the Element&amp;apos;s local name â€” which for the case in the example is <c>img</c> (lowercase).</para>
<para>-<see cref="Element.LocalName"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string indicating the element&amp;apos;s tag name. This string&amp;apos;s capitalization depends on the<br/>document type:For <see cref="Element"/> objects, the value of <c>tagName</c> is the same as<br/>the value of the <see cref="Node.NodeName"/> property the element object<br/>inherits from <see cref="Node"/>.</value>
</ElementTagName>
<ElementHasPointerCapture>
<summary>
The <strong><c>hasPointerCapture()</c></strong> method of the<br/><see cref="Element"/> interface checks whether the element on which it is invoked has<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events#pointer_capture">pointer capture</see> for the pointer identified by the given pointer ID.
</summary>
<remarks>
<para>-<see cref="Element.SetPointerCapture"/><br/>-<see cref="Element.ReleasePointerCapture"/><br/>-{{ domxref(&amp;quot;Pointer_events&amp;quot;,&amp;quot;Pointer Events&amp;quot;, &amp;quot;&amp;quot;, 1) }}<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A boolean value â€” <c>true</c> if the element does have pointer capture for the pointer identified by the given pointer ID, <c>false</c> if it doesn&amp;apos;t.</returns>
</ElementHasPointerCapture>
<ElementGetAttributeNode>
<summary>
Returns the specified attribute of the specified element, as an <see cref="Attr"/> node.
</summary>
<remarks>
<para>This method is useful if you need the attribute&amp;apos;s <see href="https://developer.mozilla.org/en-US/docs/Web/API/Attr#instance_properties">instance properties</see>.<br/>If you only need the attribute's value, you can use the <see cref="Element.GetAttribute"/> method instead.</para>
<para>-<see cref="Document.CreateAttribute"/><br/>-<see cref="Element.SetAttributeNode"/><br/>-<see cref="Element.RemoveAttributeNode"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNode"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An <c>Attr</c> node for the attribute.</returns>
</ElementGetAttributeNode>
<ElementClosest>
<summary>
The <strong><c>closest()</c></strong> method of the <see cref="Element"/> interface traverses the element and its parents (heading toward the document root) until it finds a node that matches the specified <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Basic_selectors">CSS selector</see>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors">CSS selectors</see> module<br/>-Other <see cref="Element"/> methods that take selectors: <see cref="Element.QuerySelector"/>, <see cref="Element.QuerySelectorAll"/>, and <see cref="Element.Matches"/>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/closest"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The closest ancestor <see cref="Element"/> or itself, which matches the <c>selectors</c>. If there are no such element, <c>null</c>.</returns>
</ElementClosest>
<ElementAriaSort>
<summary>
The <strong><c>ariaSort</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-sort"><c>aria-sort</c></see> attribute, which indicates if items in a table or grid are sorted in ascending or descending order.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/table_role">ARIA: table role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaSort"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaSort>
<ElementElementTiming>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>elementTiming</c></strong> property of the <see cref="Element"/> interface identifies elements for observation in the <see cref="PerformanceElementTiming"/> API. The <c>elementTiming</c> property reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/elementtiming"><c>elementtiming</c></see> attribute.
</summary>
<remarks>
<para>-<see cref="PerformanceElementTiming"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/elementtiming"><c>elementtiming</c></see> HTML attribute<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/elementTiming"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementElementTiming>
<ElementKeydown>
<summary>
The <strong><c>keydown</c></strong> event is fired when a key is pressed.
</summary>
<remarks>
<para>Unlike the deprecated <see cref="Elementkeypress"/> event, the <c>keydown</c> event is fired for all keys, regardless of whether they produce a character value.</para><para>The <c>keydown</c> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event"><c>keyup</c></see> events provide a code indicating which key is pressed, while <c>keypress</c> indicates which character was entered. For example, a lowercase &amp;quot;a&amp;quot; will be reported as 65 by <c>keydown</c> and <c>keyup</c>, but as 97 by <c>keypress</c>. An uppercase &amp;quot;A&amp;quot; is reported as 65 by all events.</para><para>The event target of a key event is the currently focused element which is processing the keyboard activity. This includes: <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea">textarea</see>, anything that is <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/contenteditable"><c>contentEditable</c></see>, and anything else that can be interacted with the keyboard, such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a">a</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button">button</see>, and <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary">summary</see>. If no suitable element is in focus, the event target will be the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body">body</see> or the root. The event <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbles</see>. It can reach <see cref="Document"/> and <see cref="Window"/>.</para><para>The event target might change between different key events. For example, the <c>keydown</c> target for pressing the &amp;lt;kbd&amp;gt;Tab&amp;lt;/kbd&amp;gt; key would be different from the <c>keyup</c> target, because the focus has changed.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/input_event"><c>input</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event"><c>keypress</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event"><c>keyup</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementKeydown>
<ElementCurrentCSSZoom>
<summary>
The <strong><c>currentCSSZoom</c></strong> read-only property of the <see cref="Element"/> interface provides the "effective" <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/zoom">CSS <c>zoom</c></see> of an element, taking into account the zoom applied to the element and all its parent elements.
</summary>
<remarks>
<para>The value calculated by multiplying the CSS <c>zoom</c> values of the element and all of its parents.<br/>For example, if three elements with zoom values of 2, 1.5, and 3, are nested within each other, the most deeply nested element will have a <c>currentCSSZoom</c> value of 9.<br/>If the element doesn&amp;apos;t have a CSS box, for example because <c>display: none</c> is set on the element or one of its parents, then the <c>currentCSSZoom</c> is set to 1.</para><para>Note that some methods, such as <see cref="Element.GetBoundingClientRect"/>, return dimensions and position that are relative to the viewport, and hence include the effects of CSS <c>zoom</c>.<br/>Other properties and methods return values that are relative to the element itself, and do not include the effects of zooming.<br/>These include, for example, <c>client*</c> properties such as <see cref="Element.ClientHeight"/>, <c>scroll*()</c> methods like <see cref="Element.Scroll"/>, and <c>offset*</c> properties such as <see cref="HTMLElement.OffsetHeight"/>.<br/>The <c>currentCSSZoom</c> property can be used to scale these values to adjust for the effects of zooming.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/zoom">CSS <c>zoom</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/currentCSSZoom"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number indicating the effective CSS zoom on the element, or 1 if the element is not rendered.</value>
</ElementCurrentCSSZoom>
<ElementTransitionrun>
<summary>
The <strong><c>transitionrun</c></strong> event is fired when a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions/Using_CSS_transitions">CSS transition</see> is first created, i.e., before any <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay">transition-delay</see> has begun.
</summary>
<remarks>
<para>This event is not cancelable.</para>
<para>-The <see cref="TransitionEvent"/> interface<br/>-CSS properties: <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition">transition</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay">transition-delay</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-duration">transition-duration</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property">transition-property</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function">transition-timing-function</see><br/>-Related events: <see cref="Elementtransitionend"/>, <see cref="Elementtransitionstart"/>, <see cref="Elementtransitioncancel"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementTransitionrun>
<ElementPointerdown>
<summary>
The <c>pointerdown</c> event is fired when a pointer becomes active. For mouse, it is fired when the device transitions from no buttons pressed to at least one button pressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer.
</summary>
<remarks>
<para>This behavior is different from <see cref="Elementmousedown"/> events. When using a physical mouse, <c>mousedown</c> events fire whenever any button on a mouse is pressed down. <c>pointerdown</c> events fire only upon the first button press; subsequent button presses don&amp;apos;t fire <c>pointerdown</c> events.</para><blockquote class="NOTE"><h5>NOTE</h5><para>For touchscreen browsers that allow <see href="https://w3c.github.io/pointerevents/#dfn-direct-manipulation">direct manipulation</see>, a <c>pointerdown</c> event triggers <see href="https://w3c.github.io/pointerevents/#dfn-implicit-pointer-capture">implicit pointer capture</see>, which causes the target to capture all subsequent pointer events as if they were occurring over the capturing target. Accordingly, <c>pointerover</c>, <c>pointerenter</c>, <c>pointerleave</c>, and <c>pointerout</c> <strong>will not fire</strong> as long as this capture is set. The capture can be released manually by calling <see cref="'element.ReleasePointerCapture'"/> on the target element, or it will be implicitly released after a <c>pointerup</c> or <c>pointercancel</c> event.</para></blockquote>
<para>-Related events-<see cref="'Elementgotpointercapture'"/><br/>-<see cref="'Elementlostpointercapture'"/><br/>-<see cref="'Elementpointerover'"/><br/>-<see cref="'Elementpointerenter'"/><br/>-<see cref="'Elementpointermove'"/><br/>-<see cref="'Elementpointerup'"/><br/>-<see cref="'Elementpointercancel'"/><br/>-<see cref="'Elementpointerout'"/><br/>-<see cref="'Elementpointerleave'"/><br/>-<see cref="'Elementpointerrawupdate'"/><br/>-<see cref="Elementmousedown"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementPointerdown>
<ElementBeforexrselect>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>beforexrselect</c></strong> event is fired before WebXR select events (<see cref="XRSessionselect"/>, <see cref="XRSessionselectstart"/>, <see cref="XRSessionselectend"/>) are dispatched. It can be used to suppress XR world input events while the user is interacting with a DOM overlay UI.
</summary>
<remarks>
<para>This event <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbles</see>, is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable">cancelable</see> and is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composed">composed</see>.</para>
<para>-<see cref="XRSessionselect"/> event<br/>-<see cref="XRSessionselectstart"/> event<br/>-<see cref="XRSessionselectend"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/beforexrselect"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementBeforexrselect>
<ElementAriaChecked>
<summary>
The <strong><c>ariaChecked</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-checked"><c>aria-checked</c></see> attribute, which indicates the current &amp;quot;checked&amp;quot; state of checkboxes, radio buttons, and other widgets that have a checked state.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Where possible use an HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see> element with <c>type=&amp;quot;checkbox&amp;quot;</c> as this element has built in semantics and does not require ARIA attributes.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/checkbox_role">ARIA: checkbox role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaChecked"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaChecked>
<ElementAriaExpanded>
<summary>
The <strong><c>ariaExpanded</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-expanded"><c>aria-expanded</c></see> attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaExpanded"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaExpanded>
<ElementCheckVisibility>
<summary>
The <strong><c>checkVisibility()</c></strong> method of the <see cref="Element"/> interface checks whether the element is visible.
</summary>
<remarks>
<para>The method returns <c>false</c> in either of the following situations:</para><para>The optional parameter enables additional checks to test for other interpretations of what &amp;quot;visible&amp;quot; means.<br/>For example, you can further check whether an element has an opacity of <c>0</c>, if the value of the element <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/visibility"><c>visibility</c></see> property makes it invisible, or if the element <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility">content-visibility</see> property has a value of <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility#auto"><c>auto</c></see> and its rendering is currently being skipped.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns><c>false</c> if any of the following conditions are met, otherwise <c>true</c>:</returns>
</ElementCheckVisibility>
<ElementSetAttributeNodeNS>
<summary>
The <strong><c>setAttributeNodeNS()</c></strong> method of the <see cref="Element"/> interface adds a new namespaced <see cref="Attr"/> node to an element.
</summary>
<remarks>
<para>If you don't need to work with the attribute node (such as cloning from another element) before adding it, you can use the <see cref="Element.SetAttributeNS"/> method instead.</para><para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="Element.SetAttribute"/> method instead.</para>
<para>-<see cref="Document.CreateAttribute"/><br/>-<see cref="Document.CreateAttributeNS"/><br/>-<see cref="Element.GetAttributeNodeNS"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNodeNS"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The replaced attribute node, if any, returned by this function.</returns>
</ElementSetAttributeNodeNS>
<ElementSetAttributeNode>
<summary>
The <strong><c>setAttributeNode()</c></strong> method of the <see cref="Element"/> interface adds a new <see cref="Attr"/> node to the specified element.
</summary>
<remarks>
<para>If you don't need to work with the attribute node (such as cloning from another element) before adding it, you can use the <see cref="Element.SetAttribute"/> method instead.</para>
<para>-<see cref="Document.CreateAttribute"/><br/>-<see cref="Element.GetAttributeNode"/><br/>-<see cref="Element.RemoveAttributeNode"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNode"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The replaced attribute node, if any, returned by this function.</returns>
</ElementSetAttributeNode>
<ElementDblclick>
<summary>
The <strong><c>dblclick</c></strong> event fires when a pointing device button (such as a mouse&amp;apos;s primary button) is double-clicked; that is, when it&amp;apos;s rapidly clicked twice on a single element within a very short span of time.
</summary>
<remarks>
<para><c>dblclick</c> fires after two <see cref="Elementclick"/> events (and by extension, after two pairs of <see cref="Element.Mousedown"/> and <see cref="Element.Mouseup"/> events).</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementauxclick"/><br/>-<see cref="Elementclick"/><br/>-<see cref="Elementcontextmenu"/><br/>-<see cref="Elementmousedown"/><br/>-<see cref="Elementmouseup"/><br/>-<see cref="Elementpointerdown"/><br/>-<see cref="Elementpointerup"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementDblclick>
<ElementAriaAtomic>
<summary>
The <strong><c>ariaAtomic</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-atomic"><c>aria-atomic</c></see> attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-relevant"><c>aria-relevant</c></see> attribute.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaAtomic"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaAtomic>
<ElementScrollLeft>
<summary>
The <strong><c>scrollLeft</c></strong> property of the <see cref="Element"/> interface gets or sets the number of pixels by which an element's content is scrolled from its left edge. This value is subpixel precise in modern browsers, meaning that it isn't necessarily a whole number.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements">Determining the dimensions of elements</see><br/>-<see cref="HTMLElement.OffsetLeft"/><br/>-<see cref="Element.ClientLeft"/><br/>-<see cref="Element.ScrollHeight"/><br/>-<see cref="Element.ScrollWidth"/><br/>-<see cref="Element.ScrollTop"/><br/>-<see cref="Element.GetBoundingClientRect"/><br/>-<see cref="Element.ScrollTo"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A double-precision floating-point value indicating the number of pixels by which the element is currently scrolled horizontally from the origin, where a positive value means the element is scrolled to the right (to reveal more content to the right). If the element isn&amp;apos;t scrolled at all left or right, then <c>scrollLeft</c> is 0. If the document is not the active document, the returned value is 0. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component.It&amp;apos;s possible for <c>scrollLeft</c> to be negative if the element can be scrolled to the left from the initial containing block. For example, if the element's <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/direction">direction</see> is <c>rtl</c> (right-to-left) and content grows to the left, then <c>scrollLeft</c> is <c>0</c> when the scrollbar is at its rightmost position (at the start of the scrolled content), and then increasingly negative as you scroll towards the end of the content.Safari responds to overscrolling by updating <c>scrollLeft</c> beyond the maximum scroll position (unless the default "bounce" effect is disabled, such as by setting <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior">overscroll-behavior</see> to <c>none</c>), while Chrome and Firefox do not.The <c>scrollLeft</c> property can be set, which causes the element to scroll to the specified horizontal position, in the same way as using <see cref="Element.Scroll"/> with <c>behavior: &amp;quot;auto&amp;quot;</c>.</value>
</ElementScrollLeft>
<ElementRemove>
<summary>
The <strong><c>Element.remove()</c></strong> method removes the element from its parent node.<br/>If it has no parent node, calling <c>remove()</c> does nothing.
</summary>
<remarks>
<para>-<see cref="CharacterData.Remove"/><br/>-<see cref="DocumentType.Remove"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/remove"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementRemove>
<ElementInsertAdjacentHTML>
<summary>
<blockquote class="WARNING"><h5>WARNING</h5>This method parses its input as HTML or XML, writing the result into the DOM.<br/>APIs like this are known as <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#concepts_and_usage">injection sinks</see>, and are potentially a vector for <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS">cross-site-scripting (XSS)</see> attacks, if the input originally came from an attacker.</blockquote>
</summary>
<remarks>
<para>You can reduce the risk by assigning <see cref="TrustedHTML"/> objects instead of strings, and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#using_a_csp_to_enforce_trusted_types">enforcing trusted types</see> using the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/require-trusted-types-for"><c>require-trusted-types-for</c></see> CSP directive.<br/>This ensures that the input is passed through a transformation function, which has the chance to <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS#sanitization">sanitize</see> the input to remove potentially dangerous markup, such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script">script</see> elements and event handler attributes.</para><para>The <strong><c>insertAdjacentHTML()</c></strong> method of the <see cref="Element"/> interface parses the specified input as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position.</para>
<para>-<see cref="Element.InsertAdjacentElement"/><br/>-<see cref="Element.InsertAdjacentText"/><br/>-<see cref="XMLSerializer"/>: Serialize a DOM tree into an XML string<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API">Trusted Types API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementInsertAdjacentHTML>
<ElementGetElementsByTagNameNS>
<summary>
The <strong><c>Element.getElementsByTagNameNS()</c></strong> method returns a<br/>live <see cref="HTMLCollection"/> of elements with the given tag name belonging to the<br/>given namespace. It is similar to <see cref="Document.GetElementsByTagNameNS"/>, except<br/>that its search is restricted to descendants of the specified element.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A live <see cref="HTMLCollection"/> of found elements in the order they appear in the tree.</returns>
</ElementGetElementsByTagNameNS>
<ElementAriaRequired>
<summary>
The <strong><c>ariaRequired</c></strong> property of the <see cref="Element"/> interface reflects the value of the <c>aria-required</c> attribute, which indicates that user input is required on the element before a form may be submitted.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Where possible use an HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see> element with <c>type=&amp;quot;text&amp;quot;</c> or a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea">textarea</see> as these have built in semantics and do not require ARIA attributes.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/textbox_role">ARIA: textbox role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRequired"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaRequired>
<ElementAriaPlaceholder>
<summary>
The <strong><c>ariaPlaceholder</c></strong> property of the <see cref="Element"/> interface reflects the value of the <c>aria-placeholder</c> attribute, which defines a short hint intended to aid the user with data entry when the control has no value.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Where possible use an HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see> element with <c>type=&amp;quot;text&amp;quot;</c> or a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea">textarea</see> as these have built in semantics and do not require ARIA attributes.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/textbox_role">ARIA: textbox role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaPlaceholder"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementAriaPlaceholder>
<ElementInput>
<summary>
The <strong><c>input</c></strong> event fires when the <c>value</c> of an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select">select</see>, or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea">textarea</see> element has been changed as a direct result of a user action (such as typing in a textbox or checking a checkbox).
</summary>
<remarks>
<para>The event also applies to elements with <see cref="HTMLElement.ContentEditable"/> enabled, and to any element when <see cref="Document.DesignMode"/> is turned on. In the case of <c>contenteditable</c> and <c>designMode</c>, the event target is the <strong>editing host</strong>. If these properties apply to multiple elements, the editing host is the nearest ancestor element whose parent isn&amp;apos;t editable.</para><para>For <c>&amp;lt;input&amp;gt;</c> elements with <c>type=checkbox</c> or <c>type=radio</c>, the <c>input</c> event should fire whenever a user toggles the control, per the <see href="https://html.spec.whatwg.org/multipage/input.html#the-input-element:event-input-2">HTML Living Standard specification</see>. However, historically this has not always been the case. Check compatibility, or use the <see cref="HTMLElementchange"/> event instead for elements of these types.</para><para>For <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea">textarea</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see> elements that accept text input (<c>type=text</c>, <c>type=tel</c>, etc.), the interface is <see cref="InputEvent"/>; for others, the interface is <see cref="Event"/>.</para><para>The <c>input</c> event is fired every time the <c>value</c> of the element changes. This is unlike the <see cref="HTMLElementchange"/> event, which only fires when the value is committed, such as by pressing the enter key or selecting a value from a list of options. Note that the <c>input</c> event is not fired when JavaScript changes an element&amp;apos;s <c>value</c> programmatically.</para>
<para>-Related events-<see cref="Elementbeforeinput"/><br/>-<see cref="HTMLElementchange"/><br/>-<see cref="HTMLInputElementinvalid"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/input"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementInput>
<ElementFocusout>
<summary>
The <strong><c>focusout</c></strong> event fires when an element has lost focus, after the <see cref="Elementblur"/> event. The two events differ in that <c>focusout</c> bubbles, while <c>blur</c> does not.
</summary>
<remarks>
<para>The opposite of <c>focusout</c> is the <see cref="Elementfocusin"/> event, which fires when the element has received focus.</para><para>The <c>focusout</c> event is not cancelable.</para>
<para>-Related events: <see cref="Elementblur"/>, <see cref="Elementfocus"/>, <see cref="Elementfocusin"/><br/>-<see href="https://javascript.info/focus-blur">Focusing: focus/blur</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementFocusout>
<ElementTouchmove>
<summary>
The <c>touchmove</c> event is fired when one or more touch points are moved along the touch surface.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events">Touch events</see><br/>-<see cref="Elementmousemove"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementTouchmove>
<ElementAriaControlsElements>
<summary>
The <strong><c>ariaControlsElements</c></strong> property of the <see cref="Element"/> interface is an array containing the elements that are controlled by the element it is applied to.<br/>For example, this might be set on a <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/combobox_role">combobox</see> to indicate the element that it pops up, or on a <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/scrollbar_role"><c>scrollbar</c></see> to indicate the ID of the element it controls.
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-controls"><c>aria-controls</c></see> topic contains additional information about how the attribute and property should be used.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-controls"><c>aria-controls</c></see> attribute<br/>-<see cref="ElementInternals.AriaControlsElements"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Reflected_attributes#reflected_element_references">Reflected element references</see> in the <strong>Attribute reflection</strong> guide<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaControlsElements"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An array of subclasses of <see cref="HTMLElement"/>, representing the elements that are controlled by this element.When read, the returned array is static and read-only.<br/>When written, the assigned array is copied: subsequent changes to the array do not affect the value of the property.</value>
</ElementAriaControlsElements>
<ElementCompositionend>
<summary>
The <strong><c>compositionend</c></strong> event is fired when a text composition system such as an <see href="https://developer.mozilla.org/en-US/docs/Glossary/input method editor">input method editor</see> completes or cancels the current composition session.
</summary>
<remarks>
<para>For example, this event could be fired after a user finishes entering a Chinese character using a <see href="https://en.wikipedia.org/wiki/Pinyin">Pinyin</see> <see href="https://developer.mozilla.org/en-US/docs/Glossary/Input method editor">Input method editor</see>.</para>
<para>-Related events: <see cref="Elementcompositionstart"/>, <see cref="Elementcompositionupdate"/>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementCompositionend>
<ElementWebkitmouseforcedown>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> After a <see cref="Element.Mousedown"/> event has been fired at the element, if and when sufficient pressure has been applied to the mouse or trackpad button to qualify as a "force click," Safari begins sending <strong><c>webkitmouseforcedown</c></strong> events to the element.
</summary>
<remarks>
<para><strong><c>webkitmouseforcedown</c></strong> is a proprietary, WebKit-specific event. It is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Force_Touch_events">Force Touch events</see> feature.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementwebkitmouseforcewillbegin"/><br/>-<see cref="Elementwebkitmouseforceup"/><br/>-<see cref="Elementwebkitmouseforcechanged"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcedown"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementWebkitmouseforcedown>
<ElementScrollIntoView>
<summary>
The <see cref="Element"/> interface's<br/><strong><c>scrollIntoView()</c></strong> method scrolls the element&amp;apos;s ancestor<br/>containers such that the element on which <c>scrollIntoView()</c> is called is<br/>visible to the user.
</summary>
<remarks>
<para>-<see cref="Element.ScrollIntoViewIfNeeded"/> {{non-standard_inline}}<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementScrollIntoView>
<ElementSetAttributeNS>
<summary>
<c>setAttributeNS</c> adds a new attribute or changes the value of an attribute<br/>with the given namespace and name.
</summary>
<remarks>
<para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="Element.SetAttribute"/> method instead.</para>
<para>-<see cref="Element.HasAttributeNS"/><br/>-<see cref="Element.GetAttributeNS"/><br/>-<see cref="Element.RemoveAttributeNS"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementSetAttributeNS>
<ElementAriaActiveDescendantElement>
<summary>
The <strong><c>ariaActiveDescendantElement</c></strong> property of the <see cref="Element"/> interface represents the current active element when focus is on a <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/composite_role"><c>composite</c></see> widget, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/combobox_role"><c>combobox</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/textbox_role"><c>textbox</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/group_role"><c>group</c></see>, or <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/application_role"><c>application</c></see>.
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-activedescendant"><c>aria-activedescendant</c></see> topic contains additional information about how the attribute and property should be used.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-activedescendant"><c>aria-activedescendant</c></see> attribute<br/>-<see cref="ElementInternals.AriaActiveDescendantElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Reflected_attributes#reflected_element_references">Reflected element references</see> in the <strong>Attribute reflection</strong> guide.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaActiveDescendantElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An subclass of <see cref="HTMLElement"/> that represents the active descendant, or <c>null</c> if there is no active descendant.</value>
</ElementAriaActiveDescendantElement>
<ElementPointerover>
<summary>
The <c>pointerover</c> event is fired when a pointing device is moved into an element&amp;apos;s hit test boundaries.
</summary>
<remarks>
<para><c>pointerover</c> events have the same problems as <see cref="Elementmouseover"/>. If the target element has child elements, <c>pointerout</c> and <c>pointerover</c> events fire as the pointer moves over the boundaries of these elements too, not just the target element itself. Usually, <see cref="Elementpointerenter"/> and <see cref="Elementpointerleave"/> events' behavior is more sensible, because they are not affected by moving into child elements.</para>
<para>-Related events-<see cref="'Elementgotpointercapture'"/><br/>-<see cref="'Elementlostpointercapture'"/><br/>-<see cref="'Elementpointerenter'"/><br/>-<see cref="'Elementpointerdown'"/><br/>-<see cref="'Elementpointermove'"/><br/>-<see cref="'Elementpointerup'"/><br/>-<see cref="'Elementpointercancel'"/><br/>-<see cref="'Elementpointerout'"/><br/>-<see cref="'Elementpointerleave'"/><br/>-<see cref="'Elementpointerrawupdate'"/><br/>-<see cref="Elementmouseover"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementPointerover>
<ElementAfter>
<summary>
The <strong><c>Element.after()</c></strong> method inserts a set of<br/><see cref="Node"/> objects or strings in the children list of the<br/><c>Element</c>&amp;apos;s parent, just after the <c>Element</c>.<br/>Strings are inserted as equivalent <see cref="Text"/> nodes.
</summary>
<remarks>
<para>-<see cref="Element.Before"/><br/>-<see cref="Element.Append"/><br/>-<see cref="Element.InsertAdjacentElement"/><br/>-<see cref="CharacterData.After"/><br/>-<see cref="DocumentType.After"/><br/>-<see cref="Node.AppendChild"/><br/>-<see cref="NodeList"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/after"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementAfter>
<ElementAriaDescribedByElements>
<summary>
The <strong><c>ariaDescribedByElements</c></strong> property of the <see cref="Element"/> interface is an array containing the element (or elements) that provide an accessible description for the element it is applied to.<br/>The accessible description is similar to the accessible label (see <see cref="ElementariaLabelledByElements"/>), but provides more verbose information.
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-describedby"><c>aria-describedby</c></see> topic contains additional information about how the attribute and property should be used.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-describedby"><c>aria-describedby</c></see> attribute<br/>-<see cref="ElementInternals.AriaDescribedByElements"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Reflected_attributes#reflected_element_references">Reflected element references</see> in the <strong>Attribute reflection</strong> guide<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaDescribedByElements"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An array of subclasses of <see cref="HTMLElement"/>.<br/>The inner text of these elements can be joined with spaces to get the accessible description.When read, the returned array is a static and read-only.<br/>When written, the assigned array is copied: subsequent changes to the array do not affect the value of the property.</value>
</ElementAriaDescribedByElements>
<ElementAriaLive>
<summary>
The <strong><c>ariaLive</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-live"><c>aria-live</c></see> attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Guides/Live_regions">live region</see>.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaLive"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaLive>
<ElementPointermove>
<summary>
The <c>pointermove</c> event is fired when a pointer changes coordinates, and the pointer has not been <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event">canceled</see> by a browser <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action">touch-action</see>. It's very similar to the <see cref="Elementmousemove"/> event, but with more features.
</summary>
<remarks>
<para>These events happen whether or not any pointer buttons are pressed. They can fire at a very high rate, depends on how fast the user moves the pointer, how fast the machine is, what other tasks and processes are happening, etc.</para>
<para>-Related events-<see cref="'Elementgotpointercapture'"/><br/>-<see cref="'Elementlostpointercapture'"/><br/>-<see cref="'Elementpointerover'"/><br/>-<see cref="'Elementpointerenter'"/><br/>-<see cref="'Elementpointerdown'"/><br/>-<see cref="'Elementpointerup'"/><br/>-<see cref="'Elementpointercancel'"/><br/>-<see cref="'Elementpointerout'"/><br/>-<see cref="'Elementpointerleave'"/><br/>-<see cref="'Elementpointerrawupdate'"/><br/>-<see cref="Elementmousemove"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementPointermove>
<ElementPaste>
<summary>
The <strong><c>paste</c></strong> event of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API">Clipboard API</see> is fired when the user has initiated a &amp;quot;paste&amp;quot; action through the browser&amp;apos;s user interface.
</summary>
<remarks>
<para>If the cursor is in an editable context (for example, in a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea">textarea</see> or an element with <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/contenteditable"><c>contenteditable</c></see> attribute set to <c>true</c>) then the default action is to insert the contents of the clipboard into the document at the cursor position.</para><para>A handler for this event can access the clipboard contents by calling <see cref="DataTransfergetData"/> on the event's <c>clipboardData</c> property.</para><para>To override the default behavior (for example to insert some different data or a transformation of the clipboard contents) an event handler must cancel the default action using <see cref="EventpreventDefault"/>, and then insert its desired data manually.</para><para>It&amp;apos;s possible to construct and dispatch a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events#creating_and_dispatching_events">synthetic</see> <c>paste</c> event, but this will not affect the document&amp;apos;s contents.</para><para>This event <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbles</see> up the DOM tree, eventually to <see cref="Document"/> and <see cref="Window"/>, is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable">cancelable</see> and is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composed">composed</see>.</para>
<para>-<see cref="Elementcut"/> event<br/>-<see cref="Elementcopy"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/paste"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementPaste>
<ElementGetAnimations>
<summary>
The <c>getAnimations()</c> method of the <see cref="Element"/> interface<br/>(specified on the <c>Animatable</c> mixin) returns an array of all<br/><see cref="Animation"/> objects affecting this element or which are scheduled to do so<br/>in future. It can optionally return <see cref="Animation"/> objects for descendant<br/>elements too.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This array includes <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animations</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions">CSS Transitions</see>, and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations</see>.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animations</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions">CSS Transitions</see><br/>-<see cref="Document.GetAnimations"/> - Fetch all animations in the document<br/>-<see cref="Animation"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAnimations"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An {{jsxref("Array")}} of <see cref="Animation"/> objects, each representing an<br/>animation currently targeting the <see cref="Element"/> on which this method is called,<br/>or one of its descendant elements if <c>{ subtree: true }</c> is specified.</returns>
</ElementGetAnimations>
<ElementScrollBy>
<summary>
The <strong><c>scrollBy()</c></strong> method of the <see cref="Element"/><br/>interface scrolls an element by the given amount.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementScrollBy>
<ElementClientTop>
<summary>
The <strong><c>clientTop</c></strong> read-only property of the <see cref="Element"/> interface returns the width of the top border of an element in pixels.
</summary>
<remarks>
<para>All that lies between the <c>offsetTop</c> and <c>clientTop</c> is the element&amp;apos;s border. This is because the <c>offsetTop</c> indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, including padding. Therefore, the <c>clientTop</c> value is always equal to the <c>border-top-width</c>, rounded to integer. For example, if the computed <c>border-top-width</c> is zero, then <c>clientTop</c> is also zero.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements">Determining the dimensions of elements</see><br/>-<see cref="HTMLElement.OffsetTop"/><br/>-<see cref="Element.ScrollTop"/><br/>-<see cref="Element.ClientHeight"/><br/>-<see cref="Element.ClientWidth"/><br/>-<see cref="Element.ClientLeft"/><br/>-<see cref="Element.GetBoundingClientRect"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An integer.</value>
</ElementClientTop>
<ElementAriaAutoComplete>
<summary>
The <strong><c>ariaAutoComplete</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-autocomplete"><c>aria-autocomplete</c></see> attribute, which indicates whether inputting text could trigger display of one or more predictions of the user&amp;apos;s intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaAutoComplete"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaAutoComplete>
<ElementPreviousElementSibling>
<summary>
The <strong><c>Element.previousElementSibling</c></strong><br/>read-only property returns the <see cref="Element"/> immediately prior to the specified<br/>one in its parent's <see cref="Element.Children"/> list, or <c>null</c> if the specified element is the first one in the list.
</summary>
<remarks>
<para>-<see cref="Element.NextElementSibling"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="Element"/> object, or <c>null</c>.</value>
</ElementPreviousElementSibling>
<ElementFocusin>
<summary>
The <strong><c>focusin</c></strong> event fires when an element has received focus, after the <see cref="Elementfocus"/> event. The two events differ in that <c>focusin</c> bubbles, while <c>focus</c> does not.
</summary>
<remarks>
<para>The opposite of <c>focusin</c> is the <see cref="Elementfocusout"/> event, which fires when the element has lost focus.</para><para>The <c>focusin</c> event is not cancelable.</para>
<para>-Related events: <see cref="Elementblur"/>, <see cref="Elementfocus"/>, <see cref="Elementfocusout"/><br/>-<see href="https://javascript.info/focus-blur">Focusing: focus/blur</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementFocusin>
<ElementScrollLeftMax>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>Element.scrollLeftMax</c></strong> read-only property returns a<br/>number representing the maximum left scroll offset possible for the<br/>element.
</summary>
<remarks>
<para>-<see cref="Element.ScrollTopMax"/> giving the same information for the other axis.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeftMax"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number.</value>
</ElementScrollLeftMax>
<ElementAriaRowIndexText>
<summary>
The <strong><c>ariaRowIndexText</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-rowindextext"><c>aria-rowindextext</c></see> attribute, which defines a human readable text alternative of aria-rowindex.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/table_role">ARIA: table role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRowIndexText"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementAriaRowIndexText>
<ElementAriaRowSpan>
<summary>
The <strong><c>ariaRowSpan</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-rowspan"><c>aria-rowspan</c></see> attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/table_role">ARIA: table role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRowSpan"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string which contains an integer.</value>
</ElementAriaRowSpan>
<ElementAriaDisabled>
<summary>
The <strong><c>ariaDisabled</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-disabled"><c>aria-disabled</c></see> attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Where possible, use the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see> element with <c>type=&amp;quot;button&amp;quot;</c> or the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button">button</see> element â€” because those elements have built in semantics and do not require ARIA attributes.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaDisabled"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaDisabled>
<ElementGesturechange>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>gesturechange</c></strong> event is fired when digits move during a touch gesture.
</summary>
<remarks>
<para>It is a proprietary event specific to WebKit.</para>
<para>-<see href="https://developer.apple.com/documentation/webkitjs/gestureevent">GestureEventClassReference at the Safari Developer Library</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/gesturechange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementGesturechange>
<ElementAriaColIndex>
<summary>
The <strong><c>ariaColIndex</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-colindex"><c>aria-colindex</c></see> attribute, which defines an element&amp;apos;s column index or position with respect to the total number of columns within a table, grid, or treegrid.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/table_role">ARIA: table role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaColIndex"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string which contains an integer.</value>
</ElementAriaColIndex>
<ElementAriaBrailleLabel>
<summary>
The <strong><c>ariaBrailleLabel</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-braillelabel"><c>aria-braillelabel</c></see> attribute, which defines the ARIA braille label of the element.
</summary>
<remarks>
<para>This element label may be used by assistive technologies that can present content in braille, but should only be set if a braille-specific label would improve the user experience.<br/>The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-braillelabel"><c>aria-braillelabel</c></see> contains additional information about when the property should be set.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaBrailleLabel"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementAriaBrailleLabel>
<ElementAriaLevel>
<summary>
The <strong><c>ariaLevel</c></strong> property of the <see cref="Element"/> interface reflects the value of the <c>aria-level</c> attribute, which defines the hierarchical level of an element within a structure.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Where possible use an HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements">Heading_Elements</see> or other correct heading level as these have built in semantics and do not require ARIA attributes.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/heading_role">ARIA: heading role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaLevel"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string containing an integer.</value>
</ElementAriaLevel>
<ElementAriaInvalid>
<summary>
The <strong><c>ariaInvalid</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-invalid"><c>aria-invalid</c></see> attribute. Relevant for the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/application_role"><c>application</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/checkbox_role"><c>checkbox</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/combobox_role"><c>combobox</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/gridcell_role"><c>gridcell</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/listbox_role"><c>listbox</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/radiogroup_role"><c>radiogroup</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/slider_role"><c>slider</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/spinbutton_role"><c>spinbutton</c></see>, <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/textbox_role"><c>textbox</c></see>, and <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/tree_role"><c>tree</c></see> roles, it indicates to the accessibility API whether the entered value does not conform to the format expected by the application.
</summary>
<remarks>
<para>If the attribute is not present, or is set to the empty string, assistive technology will treat the value as if it were set to <c>false</c>. If the attribute is present but set to a value other than <c>false</c>, <c>grammar</c>, <c>spelling</c> or the empty string (<c>&amp;quot;&amp;quot;</c>), assistive technology treats the value as <c>true</c>. The property reflects the attribute value as set, not as handled by assistive technology.</para>
<para>-<see cref="Element.AriaRequired"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-required"><c>aria-required</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-errormessage"><c>aria-errormessage</c></see><br/>-<see cref="Element.AriaErrorMessageElements"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaInvalid"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaInvalid>
<ElementAriaReadOnly>
<summary>
The <strong><c>ariaReadOnly</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-readonly"><c>aria-readonly</c></see> attribute, which indicates that the element is not editable, but is otherwise operable.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Where possible use an HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see> element with <c>type=&amp;quot;text&amp;quot;</c> or a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea">textarea</see> as these have built in semantics and do not require ARIA attributes.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/textbox_role">ARIA: textbox role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaReadOnly"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaReadOnly>
<ElementHasAttributeNS>
<summary>
The <strong><c>hasAttributeNS()</c></strong> method of the <see cref="Element"/> interface returns a boolean value indicating whether the current element has the specified attribute with the specified namespace.
</summary>
<remarks>
<para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="Element.HasAttribute"/> method instead.</para>
<para>-<see cref="Element.GetAttributeNS"/><br/>-<see cref="Element.SetAttributeNS"/><br/>-<see cref="Element.RemoveAttributeNS"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A boolean.</returns>
</ElementHasAttributeNS>
<ElementContextmenu>
<summary>
The <strong><c>contextmenu</c></strong> event fires when the user attempts to open a context menu. This event is typically triggered by clicking the right mouse button, or by pressing the context menu key.
</summary>
<remarks>
<para>In the latter case, the context menu is displayed at the bottom left of the focused element, unless the element is a tree, in which case the context menu is displayed at the bottom left of the current row.</para><para>Any right-click event that is not disabled (by calling the click event's <see cref="Event.PreventDefault"/> method) will result in a <c>contextmenu</c> event being fired at the targeted element.</para><blockquote class="NOTE"><h5>NOTE</h5><para>An exception to this in Firefox: if the user holds down the &amp;lt;kbd&amp;gt;Shift&amp;lt;/kbd&amp;gt; key while right-clicking, then the context menu will be shown without a <c>contextmenu</c> event being fired.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementauxclick"/><br/>-<see cref="Elementclick"/><br/>-<see cref="Elementdblclick"/><br/>-<see cref="Elementmousedown"/><br/>-<see cref="Elementmouseup"/><br/>-<see cref="Elementpointerdown"/><br/>-<see cref="Elementpointerup"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementContextmenu>
<ElementScrollsnapchanging>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>scrollsnapchanging</c></strong> event of the <see cref="Element"/> interface is fired on the <see href="https://developer.mozilla.org/en-US/docs/Glossary/Scroll_container">scroll container</see> when the browser determines a new scroll snap target is pending, i.e., it will be selected when the current scroll gesture ends.
</summary>
<remarks>
<para>Specifically, this event fires during a scrolling gesture, each time the user moves over potential new snap targets. For example, the user could scroll slowly by dragging their finger on a touch screen device, or hold down the mouse button on a scroll bar and move the mouse. <c>scrollsnapchanging</c> can therefore fire multiple times for each scrolling gesture.</para><para>However, it does not fire on all potential snap targets for a scrolling gesture that moves over multiple snap targets. Rather, it fires just for the last target that the snapping will potentially rest on.</para>
<para>-<see cref="Elementscrollsnapchange"/> event<br/>-<see cref="Documentscrollend"/> event<br/>-<see cref="SnapEvent"/><br/>-CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type">scroll-snap-type</see> property<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap">CSS scroll snap module</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap/Using_scroll_snap_events">Using scroll snap events</see><br/>-<see href="https://developer.chrome.com/blog/scroll-snap-events">Scroll Snap Events</see> on developer.chrome.com (2024)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollsnapchanging"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementScrollsnapchanging>
<ElementPrepend>
<summary>
The <strong><c>Element.prepend()</c></strong> method inserts a set of<br/><see cref="Node"/> objects or strings before the first child<br/>of the <see cref="Element"/>. Strings are inserted as<br/>equivalent <see cref="Text"/> nodes.
</summary>
<remarks>
<para>-<see cref="Element.Append"/><br/>-<see cref="Node.AppendChild"/><br/>-<see cref="Node.InsertBefore"/><br/>-<see cref="Element.Before"/><br/>-<see cref="Element.InsertAdjacentElement"/><br/>-<see cref="NodeList"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementPrepend>
<ElementComputedStyleMap>
<summary>
The <strong><c>computedStyleMap()</c></strong> method of<br/>the <see cref="Element"/> interface returns a <see cref="StylePropertyMapReadOnly"/><br/>interface which provides a read-only representation of a CSS declaration block that is<br/>an alternative to <see cref="CSSStyleDeclaration"/>.
</summary>
<remarks>
<para>-<see cref="Window.GetComputedStyle"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/computedStyleMap"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="StylePropertyMapReadOnly"/> object.Unlike <see cref="Window.GetComputedStyle"/>, the return value contains <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Value_processing#computed_value">computed values</see>, not <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Value_processing#resolved_value">resolved values</see>. For most properties, they are the same, except a few layout-related properties, where the resolved value is the <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Value_processing#used_value">used value</see> instead of the computed value. See the <see href="https://developer.mozilla.org#comparison_with_getcomputedstyle">comparison with <c>getComputedStyle()</c></see> example for details.</returns>
</ElementComputedStyleMap>
<ElementGotpointercapture>
<summary>
The <strong><c>gotpointercapture</c></strong> event is fired when an element captures a pointer using <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture"><c>setPointerCapture()</c></see>.
</summary>
<remarks>
<para>-Related events-<see cref="'Elementlostpointercapture'"/><br/>-<see cref="'Elementpointerover'"/><br/>-<see cref="'Elementpointerenter'"/><br/>-<see cref="'Elementpointerdown'"/><br/>-<see cref="'Elementpointermove'"/><br/>-<see cref="'Elementpointerup'"/><br/>-<see cref="'Elementpointercancel'"/><br/>-<see cref="'Elementpointerout'"/><br/>-<see cref="'Elementpointerleave'"/><br/>-<see cref="'Elementpointerrawupdate'"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementGotpointercapture>
<ElementAriaRelevant>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>ariaRelevant</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-relevant"><c>aria-relevant</c></see> attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This is used to describe what changes in an <c>aria-live</c> region are relevant and should be announced.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRelevant"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string containing one or more of the following values, space separated:</value>
</ElementAriaRelevant>
<ElementGestureend>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>gestureend</c></strong> event is fired when there are no longer multiple fingers contacting the touch surface, thus ending the gesture.
</summary>
<remarks>
<para>It is a proprietary event specific to WebKit.</para>
<para>-<see href="https://developer.apple.com/documentation/webkitjs/gestureevent">GestureEventClassReference at the Safari Developer Library</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/gestureend"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementGestureend>
<ElementGetAttributeNodeNS>
<summary>
The <strong><c>getAttributeNodeNS()</c></strong> method of the <see cref="Element"/> interface returns the namespaced <see cref="Attr"/> node of an element.
</summary>
<remarks>
<para>This method is useful if you need the namespaced attribute&amp;apos;s <see href="https://developer.mozilla.org/en-US/docs/Web/API/Attr#instance_properties">instance properties</see>.<br/>If you only need the namespaced attribute's value, you can use the <see cref="Element.GetAttributeNS"/> method instead.</para><para>If you need the <see cref="Attr"/> node of an element in HTML documents and the attribute is not namespaced, use the <see cref="Element.GetAttributeNode"/> method instead.</para>
<para>-<see cref="Document.CreateAttribute"/><br/>-<see cref="Document.CreateAttributeNS"/><br/>-<see cref="Element.SetAttributeNodeNS"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNodeNS"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The node for specified attribute.</returns>
</ElementGetAttributeNodeNS>
<ElementScrollend>
<summary>
The <strong><c>scrollend</c></strong> event fires when element scrolling has completed.<br/>Scrolling is considered completed when the scroll position has no more pending updates and the user has completed their gesture.
</summary>
<remarks>
<para>Scroll position updates include smooth or instant mouse wheel scrolling, keyboard scrolling, scroll-snap events, or other APIs and gestures which cause the scroll position to update.<br/>User gestures like touch panning or trackpad scrolling aren&amp;apos;t complete until pointers or keys have released.<br/>If the scroll position did not change, then no scrollend event fires.</para><para>For detecting when scrolling inside a Document is complete, see the <see cref="Documentscrollend"/> event of <c>Document</c>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event">Element <c>scroll</c> event</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollend_event">Document <c>scrollend</c> event</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event">Document <c>scroll</c> event</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementScrollend>
<ElementFullscreenchange>
<summary>
The <strong><c>fullscreenchange</c></strong> event is fired immediately after an <see cref="Element"/> switches into or out of fullscreen mode.
</summary>
<remarks>
<para>This event is sent to the <c>Element</c> which is transitioning into or out of fullscreen mode.</para><para>To find out whether the <c>Element</c> is entering or exiting fullscreen mode, check the value of <see cref="Document.FullscreenElement"/>: if this value is <c>null</c> then the element is exiting fullscreen mode, otherwise it is entering fullscreen mode.</para><para>This event is not cancelable.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenchange_event">Document: fullscreenchange event</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event">Element: fullscreenerror event</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Fullscreen API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">Guide to the Fullscreen API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementFullscreenchange>
<ElementRequestPointerLock>
<summary>
The <strong><c>requestPointerLock()</c></strong> method of the <see cref="Element"/> interface lets you asynchronously ask for the pointer to be locked on the given element.
</summary>
<remarks>
<para>To track the success or failure of the request, it is necessary to listen for the <see cref="Documentpointerlockchange"/> and <see cref="Documentpointerlockerror"/> events at the <see cref="Document"/> level.</para><blockquote class="NOTE"><h5>NOTE</h5><para>In the current specification, <c>requestPointerLock()</c> only communicates the success or failure of the request by firing <see cref="Documentpointerlockchange"/> or <see cref="Documentpointerlockerror"/> events. <see href="https://github.com/w3c/pointerlock/pull/49">A proposed update to the specification</see> updates <c>requestPointerLock()</c> to return a <see cref="Promise"/> which communicates success or failure. This page documents the version that returns a <see cref="Promise"/>. However, note that this version is not yet a standard and is not implemented by all browsers. See <see href="https://developer.mozilla.org#browser_compatibility">Browser compatibility</see> for more information.</para></blockquote>
<para>-<see cref="Document.PointerLockElement"/><br/>-<see cref="Document.ExitPointerLock"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API">Pointer Lock</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> that resolves with <see cref="Undefined"/>.</returns>
</ElementRequestPointerLock>
<ElementAriaValueNow>
<summary>
The <strong><c>ariaValueNow</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-valuenow"><c>aria-valuenow</c></see> attribute, which defines the current value for a range widget.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaValueNow"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string which contains a number.</value>
</ElementAriaValueNow>
<ElementRole>
<summary>
The <strong><c>role</c></strong> property of the <see cref="Element"/> interface returns the explicitly set <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles">WAI-ARIA role</see> for the element.
</summary>
<remarks>
<para>All HTML elements have an implicit ARIA role, even if that role is <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/generic_role"><c>generic</c></see>. This semantic association allows tools to present and support interaction with the object in a manner that is consistent with user expectations about other objects of that type. The <c>role</c> attribute is used to explicitly set the element's ARIA role, overriding the implicit role. For example, a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul">ul</see>, which has an implicit <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/list_role"><c>list</c></see> role, might have <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/treegrid_role"><c>role=&amp;quot;treegrid&amp;quot;</c></see> explicitly set. The <c>role</c> property reflects the explicitly set value of the <c>role</c> attributeâ€”in this case <c>treegrid</c>; it does not return the element&amp;apos;s implicit <c>list</c> role unless explicitly set.</para><para>The full list of defined ARIA roles can be found on the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles">ARIA roles</see> reference page.</para>
<para>-<see cref="ElementInternals.Role"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes">ARIA attributes</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/role"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string; the value of the <c>role</c> attribute or <c>null</c> if not explicitly set.</value>
</ElementRole>
<ElementInnerHTML>
<summary>
<blockquote class="WARNING"><h5>WARNING</h5>This property parses its input as HTML, writing the result into the DOM.<br/>APIs like this are known as <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#concepts_and_usage">injection sinks</see>, and are potentially a vector for <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS">cross-site-scripting (XSS)</see> attacks, if the input originally came from an attacker.</blockquote>
</summary>
<remarks>
<para>You can mitigate this risk by always assigning <c>TrustedHTML</c> objects instead of strings and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#using_a_csp_to_enforce_trusted_types">enforcing trusted types</see>.<br/>See <see href="https://developer.mozilla.org#security_considerations">Security considerations</see> for more information.</para><para>The <strong><c>innerHTML</c></strong> property of the <see cref="Element"/> interface gets or sets the HTML or XML markup contained within the element, omitting any {{glossary("shadow tree", "shadow roots")}} in both cases.</para><para>To insert the HTML into the document rather than replace the contents of an element, use the method <see cref="Element.InsertAdjacentHTML"/>.</para>
<para>-<see cref="Node.TextContent"/> and <see cref="HTMLElement.InnerText"/><br/>-<see cref="Element.InsertAdjacentHTML"/><br/>-<see cref="Element.OuterHTML"/><br/>-Parsing HTML or XML into a DOM tree: <see cref="DOMParser"/><br/>-Serializing a DOM tree into an XML string: <see cref="XMLSerializer"/><br/>-<see cref="Element.GetHTML"/><br/>-<see cref="ShadowRoot.GetHTML"/><br/>-<see cref="Element.SetHTMLUnsafe"/><br/>-<see cref="ShadowRoot.SetHTMLUnsafe"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API">Trusted Types API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>Getting the property returns a string containing the HTML serialization of the element&amp;apos;s descendants.Setting the property accepts either a <see cref="TrustedHTML"/> object or a string. It parses this value as HTML and replaces all the element's descendants with the result.<br/>When set to the <c>null</c> value, that <c>null</c> value is converted to the empty string (<c>&amp;quot;&amp;quot;</c>), so <c>elt.innerHTML = null</c> is equivalent to <c>elt.innerHTML = &amp;quot;&amp;quot;</c>.</value>
</ElementInnerHTML>
<ElementKeyup>
<summary>
The <strong><c>keyup</c></strong> event is fired when a key is released.
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event"><c>keydown</c></see> and <c>keyup</c> events provide a code indicating which key is pressed, while <c>keypress</c> indicates which character was entered. For example, a lowercase &amp;quot;a&amp;quot; will be reported as 65 by <c>keydown</c> and <c>keyup</c>, but as 97 by <c>keypress</c>. An uppercase &amp;quot;A&amp;quot; is reported as 65 by all events.</para><para>The event target of a key event is the currently focused element which is processing the keyboard activity. This includes: <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea">textarea</see>, anything that is <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/contenteditable"><c>contentEditable</c></see>, and anything else that can be interacted with the keyboard, such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a">a</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button">button</see>, and <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary">summary</see>. If no suitable element is in focus, the event target will be the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body">body</see> or the root. The event <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbles</see>. It can reach <see cref="Document"/> and <see cref="Window"/>.</para><para>The event target might change between different key events. For example, the <c>keydown</c> target for pressing the &amp;lt;kbd&amp;gt;Tab&amp;lt;/kbd&amp;gt; key would be different from the <c>keyup</c> target, because the focus has changed.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/input_event"><c>input</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event"><c>keydown</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event"><c>keypress</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementKeyup>
<ElementReleasePointerCapture>
<summary>
The <strong><c>releasePointerCapture()</c></strong> method of the<br/><see cref="Element"/> interface releases (stops) <see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events#pointer_capture"><strong>pointer capture</strong></see> that was<br/>previously set for a specific (<see cref="PointerEvent"/>) <strong>pointer</strong>.
</summary>
<remarks>
<para>-<see cref="Element.HasPointerCapture"/><br/>-<see cref="Element.SetPointerCapture"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">Pointer events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementReleasePointerCapture>
<ElementBeforescriptexecute>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>This event was a proposal in an early version of the specification. Do not rely on it.</blockquote>
</summary>
<remarks>
<para>The <strong><c>beforescriptexecute</c></strong> event is fired when a script is about to be executed. Cancelling the event prevents the script from executing.</para><para>It is a proprietary event specific to Gecko (Firefox).</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/afterscriptexecute_event"><c>afterscriptexecute</c></see> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/beforescriptexecute"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementBeforescriptexecute>
<ElementPrefix>
<summary>
The <strong><c>Element.prefix</c></strong> read-only property returns the<br/>namespace prefix of the specified element, or <c>null</c> if no prefix is<br/>specified.
</summary>
<remarks>
<para>-<see cref="Element.NamespaceURI"/><br/>-<see cref="Element.LocalName"/><br/>-<see cref="Attr.Prefix"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementPrefix>
<ElementAriaMultiSelectable>
<summary>
The <strong><c>ariaMultiSelectable</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-multiselectable"><c>aria-multiselectable</c></see> attribute, which indicates that the user may select more than one item from the current selectable descendants.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Where possible use an HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select">select</see> element as this has built in semantics and does not require ARIA attributes.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/listbox_role">ARIA: listbox role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaMultiSelectable"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaMultiSelectable>
<ElementAriaDetailsElements>
<summary>
The <strong><c>ariaDetailsElements</c></strong> property of the <see cref="Element"/> interface is an array containing the element (or elements) that provide an accessible details for the element it is applied to.<br/>The accessible details are similar to the accessible description (see <see cref="ElementariaDescribedByElements"/>), but provides more verbose information.
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-details"><c>aria-details</c></see> topic contains additional information about how the attribute and property should be used.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-details"><c>aria-details</c></see> attribute<br/>-<see cref="ElementInternals.AriaDetailsElements"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Reflected_attributes#reflected_element_references">Reflected element references</see> in the <strong>Attribute reflection</strong> guide.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaDetailsElements"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An array of subclasses of <see cref="HTMLElement"/>.<br/>The inner text of these elements can be joined with spaces to get the accessible details.When read, the returned array is a static and read-only.<br/>When written, the assigned array is copied: subsequent changes to the array do not affect the value of the property.</value>
</ElementAriaDetailsElements>
<ElementWebkitmouseforcechanged>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The non-standard <strong><c>webkitmouseforcechanged</c></strong> event is fired by Safari each time the amount of pressure changes on the trackpad/touchscreen.
</summary>
<remarks>
<para><strong><c>webkitmouseforcechanged</c></strong> is a proprietary, WebKit-specific event introduced by Apple to support their <see href="https://developer.mozilla.org/en-US/docs/Web/API/Force_Touch_events">Force Touch events</see> feature.</para><para>This event first fires after the <see cref="Elementmousedown"/> event and stops firing before the <see cref="Elementmouseup"/> event.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementwebkitmouseforcewillbegin"/><br/>-<see cref="Elementwebkitmouseforcedown"/><br/>-<see cref="Elementwebkitmouseforceup"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcechanged"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementWebkitmouseforcechanged>
<ElementSetPointerCapture>
<summary>
The <strong><c>setPointerCapture()</c></strong> method of the<br/><see cref="Element"/> interface is used to designate a specific element as the<br/><strong>capture target</strong> of future pointer events. Subsequent events for the pointer will<br/>be targeted at the capture element until capture is released (via<br/><see cref="Element.ReleasePointerCapture"/> or the<br/><see cref="Elementpointerup"/> event is fired).
</summary>
<remarks>
<para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events#pointer_capture">pointer events</see> for an overview and examples of how pointer capture works.</para>
<para>-<see cref="Element.HasPointerCapture"/><br/>-<see cref="Element.ReleasePointerCapture"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">Pointer events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementSetPointerCapture>
<ElementAriaRowIndex>
<summary>
The <strong><c>ariaRowIndex</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-rowindex"><c>aria-rowindex</c></see> attribute, which defines an element&amp;apos;s row index or position with respect to the total number of rows within a table, grid, or treegrid.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/table_role">ARIA: table role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRowIndex"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string which contains an integer.</value>
</ElementAriaRowIndex>
<ElementMousemove>
<summary>
The <c>mousemove</c> event is fired at an element when a pointing device (usually a mouse) is moved while the cursor&amp;apos;s hotspot is inside it.
</summary>
<remarks>
<para>These events happen whether or not any mouse buttons are pressed. They can fire at a very high rate, depends on how fast the user moves the mouse, how fast the machine is, what other tasks and processes are happening, etc.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementmousedown"/><br/>-<see cref="Elementmouseup"/><br/>-<see cref="Elementclick"/><br/>-<see cref="Elementdblclick"/><br/>-<see cref="Elementmouseover"/><br/>-<see cref="Elementmouseout"/><br/>-<see cref="Elementmouseenter"/><br/>-<see cref="Elementmouseleave"/><br/>-<see cref="Elementcontextmenu"/><br/>-<see cref="Elementpointermove"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementMousemove>
<ElementKeypress>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>keypress</c></strong> event is fired when a <see href="https://w3c.github.io/uievents/#unicode-character-categories">letter, number, punctuation, or symbol</see> key is pressed, or else when the &amp;lt;kbd&amp;gt;Enter&amp;lt;/kbd&amp;gt; key is pressed â€” including when the &amp;lt;kbd&amp;gt;Enter&amp;lt;/kbd&amp;gt; key is pressed in combination with the &amp;lt;kbd&amp;gt;Shift&amp;lt;/kbd&amp;gt; key or &amp;lt;kbd&amp;gt;Ctrl&amp;lt;/kbd&amp;gt; key. Otherwise, when a modifier key such as the &amp;lt;kbd&amp;gt;Alt&amp;lt;/kbd&amp;gt;, &amp;lt;kbd&amp;gt;Shift&amp;lt;/kbd&amp;gt;, &amp;lt;kbd&amp;gt;Ctrl&amp;lt;/kbd&amp;gt;, &amp;lt;kbd&amp;gt;Meta&amp;lt;/kbd&amp;gt;, &amp;lt;kbd&amp;gt;Esc&amp;lt;/kbd&amp;gt;, or &amp;lt;kbd&amp;gt;Option&amp;lt;/kbd&amp;gt; key is pressed in isolation, the <c>keypress</c> event is <strong>not</strong> fired.
</summary>
<remarks>
<blockquote class="WARNING"><h5>WARNING</h5><para>Since this event has been deprecated, you should use <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/beforeinput_event"><c>beforeinput</c></see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event"><c>keydown</c></see> instead.</para></blockquote><para>The event <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbles</see>. It can reach <see cref="Document"/> and <see cref="Window"/>.</para>
<para>-The <see cref="Document"/> interface, which the event also targets.<br/>-Related events:-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/input_event"><c>input</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event"><c>keydown</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event"><c>keyup</c></see><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementKeypress>
<ElementGesturestart>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>gesturestart</c></strong> event is fired when multiple fingers contact the touch surface, thus starting a new gesture. During the gesture, <see cref="Elementgesturechange"/> events will be fired. When the gesture has ended, a <see cref="Elementgestureend"/> event will be fired.
</summary>
<remarks>
<para>It is a proprietary event specific to WebKit.</para>
<para>-<see href="https://developer.apple.com/documentation/webkitjs/gestureevent">GestureEventClassReference at the Safari Developer Library</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/gesturestart"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementGesturestart>
<ElementFocus>
<summary>
The <strong><c>focus</c></strong> event fires when an element has received focus. The event does not bubble, but the related <see cref="Elementfocusin"/> event that follows does bubble.
</summary>
<remarks>
<para>The opposite of <c>focus</c> is the <see cref="Elementblur"/> event, which fires when the element has <strong>lost</strong> focus.</para><para>The <c>focus</c> event is not cancelable.</para>
<para>-The <see cref="HTMLElement.Focus"/> method<br/>-Related events: <see cref="Elementblur"/>, <see cref="Elementfocusin"/>, <see cref="Elementfocusout"/><br/>-This event on <c>Window</c> targets: <see cref="Windowfocus"/> event<br/>-<see href="https://javascript.info/focus-blur">Focusing: focus/blur</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/focus"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementFocus>
<ElementHasAttributes>
<summary>
The <strong><c>hasAttributes()</c></strong> method of the <see cref="Element"/><br/>interface returns a boolean value indicating whether the current element has any<br/>attributes or not.
</summary>
<remarks>
<para>-<see cref="Element.Attributes"/><br/>-<see cref="Element.HasAttribute"/><br/>-<see cref="Element.GetAttribute"/><br/>-<see cref="Element.SetAttribute"/><br/>-<see cref="Element.RemoveAttribute"/><br/>-<see cref="Element.ToggleAttribute"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A boolean.</returns>
</ElementHasAttributes>
<ElementCompositionstart>
<summary>
The <strong><c>compositionstart</c></strong> event is fired when a text composition system such as an <see href="https://developer.mozilla.org/en-US/docs/Glossary/input method editor">input method editor</see> starts a new composition session.
</summary>
<remarks>
<para>For example, this event could be fired after a user starts entering a Chinese character using a <see href="https://en.wikipedia.org/wiki/Pinyin">Pinyin</see> <see href="https://developer.mozilla.org/en-US/docs/Glossary/Input method editor">Input method editor</see>.</para>
<para>-Related events: <see cref="Elementcompositionend"/>, <see cref="Elementcompositionupdate"/>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementCompositionstart>
<ElementGetElementsByClassName>
<summary>
The <see cref="Element"/> method<br/><strong><c>getElementsByClassName()</c></strong> returns a live<br/><see cref="HTMLCollection"/> which contains every descendant element which has the<br/>specified class name or names.
</summary>
<remarks>
<para>The method <see cref="Document.GetElementsByClassName"/><br/>on the <see cref="Document"/> interface works essentially the same way, except it acts<br/>on the entire document, starting at the document root.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An <see cref="HTMLCollection"/> providing a live-updating list of every element which<br/>is a member of every class in <c>names</c>.</returns>
</ElementGetElementsByClassName>
<ElementSecuritypolicyviolation>
<summary>
The <strong><c>securitypolicyviolation</c></strong> event is fired when a <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP">Content Security Policy</see> is violated.
</summary>
<remarks>
<para>The event is fired on the element when there is a violation of the CSP policy.</para><para>This event <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbles</see> to the <see cref="Window"/> object, and is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composed">composed</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>You should generally add the handler for this event to a top level object (i.e., <see cref="Window"/> or <see cref="Document"/>).<br/>While HTML elements can technically be the target of the <c>securitypolicyviolation</c> event, in reality this event does not fire on themâ€”for example, a blocked <c>&amp;lt;img&amp;gt;</c> source directly triggers this event on <c>document</c> as the target, instead of bubbling from the <c>&amp;lt;img&amp;gt;</c> element.</para></blockquote>
<para>-The <see cref="Documentsecuritypolicyviolation"/> event of the <see cref="Document"/> interface<br/>-The <see cref="WorkerGlobalScopesecuritypolicyviolation"/> event of the <see cref="WorkerGlobalScope"/> interface<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP">HTTP &amp;gt; Content Security Policy</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementSecuritypolicyviolation>
<ElementAriaRoleDescription>
<summary>
The <strong><c>ariaRoleDescription</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-roledescription"><c>aria-roledescription</c></see> attribute, which defines a human-readable, author-localized description for the role of an element.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/application_role">ARIA: application role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRoleDescription"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementAriaRoleDescription>
<ElementAriaColSpan>
<summary>
The <strong><c>ariaColSpan</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-colspan"><c>aria-colspan</c></see> attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/table_role">ARIA: table role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaColSpan"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string which contains an integer.</value>
</ElementAriaColSpan>
<ElementScrollHeight>
<summary>
The <strong><c>scrollHeight</c></strong> read-only property of the <see cref="Element"/> interface is a measurement of the height of an element's content, including content not visible on the screen due to overflow.
</summary>
<remarks>
<para><see href="https://developer.mozilla.orgscrollheight.png">The user&amp;apos;s viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom. The scroll height goes from the container&amp;apos;s padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.</see></para><para>The <c>scrollHeight</c> value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar. The height is measured in the same way as <see cref="Element.ClientHeight"/>: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present). It can also include the height of pseudo-elements such as {{cssxref("::before&amp;quot;)}} or {{cssxref(&amp;quot;::after&amp;quot;)}}. If the element&amp;apos;s content can fit without a need for vertical scrollbar, its <c>scrollHeight</c> is equal to <see cref="Element.ClientHeight"/>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements">Determining the dimensions of elements</see><br/>-<see cref="HTMLElement.OffsetHeight"/><br/>-<see cref="Element.ClientHeight"/><br/>-<see cref="Element.ScrollWidth"/><br/>-<see cref="Element.ScrollLeft"/><br/>-<see cref="Element.ScrollTop"/><br/>-<see cref="Element.GetBoundingClientRect"/><br/>-<see cref="Element.ScrollTo"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An integer.</value>
</ElementScrollHeight>
<ElementAnimationiteration>
<summary>
The <strong><c>animationiteration</c></strong> event is fired when an iteration of a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animation</see> ends, and another one begins. This event does not occur at the same time as the <see cref="Elementanimationend"/> event, and therefore does not occur for animations with an <c>animation-iteration-count</c> of one.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animations</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations/Using_CSS_animations">Using CSS Animations</see><br/>-<see cref="AnimationEvent"/><br/>-Related events: <see cref="Elementanimationstart"/>, <see cref="Elementanimationend"/>, <see cref="Elementanimationcancel"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementAnimationiteration>
<ElementScrollTopMax>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>Element.scrollTopMax</c></strong> read-only property returns a<br/>number representing the maximum top scroll offset possible for the<br/>element.
</summary>
<remarks>
<para>-<see cref="Element.ScrollLeftMax"/> giving the same information for the other axis.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTopMax"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number.</value>
</ElementScrollTopMax>
<ElementAnimate>
<summary>
The <see cref="Element"/> interface's <strong><c>animate()</c></strong> method<br/>is a shortcut method which creates a new <see cref="Animation"/>, applies it to the<br/>element, then plays the animation. It returns the created <see cref="Animation"/><br/>object instance.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Elements can have multiple animations applied to them. You can get a list of the<br/>animations that affect an element by calling <see cref="Element.GetAnimations"/>.</para></blockquote>
<para>-<see cref="Animation"/><br/>-<see cref="Element.GetAnimations"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-range-end">animation-range-end</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-range-start">animation-range-start</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline">animation-timeline</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll-driven_animations">CSS scroll-driven animations</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animate"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>Returns an <see cref="Animation"/>.</returns>
</ElementAnimate>
<ElementClientWidth>
<summary>
The <strong><c>clientWidth</c></strong> read-only property of the <see cref="Element"/> interface is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels. It includes padding but excludes borders, margins, and vertical scrollbars (if present).
</summary>
<remarks>
<para>When <c>clientWidth</c> is used on the root element (the <c>&amp;lt;html&amp;gt;</c> element), (or on <c>&amp;lt;body&amp;gt;</c> if the document is in quirks mode), the viewport&amp;apos;s width (excluding any scrollbar) is returned.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements">Determining the dimensions of elements</see><br/>-<see cref="HTMLElement.OffsetWidth"/><br/>-<see cref="Element.ScrollWidth"/><br/>-<see cref="Element.ClientHeight"/><br/>-<see cref="Element.ClientLeft"/><br/>-<see cref="Element.ClientTop"/><br/>-<see cref="Element.GetBoundingClientRect"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An integer.</value>
</ElementClientWidth>
<ElementContentvisibilityautostatechange>
<summary>
The <strong><c>contentvisibilityautostatechange</c></strong> event fires on any element with <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility">content-visibility</see> set on it when it starts or stops being <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Using_CSS_containment#relevant_to_the_user">relevant to the user</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Using_CSS_containment#skips_its_contents">skipping its contents</see>.
</summary>
<remarks>
<para>While the element is not relevant (between the start and end events), the user agent skips an element&amp;apos;s rendering, including layout and painting, which can significantly improve page rendering speed.<br/>The <c>contentvisibilityautostatechange</c> event provides a way for an app's code to also start or stop rendering processes (e.g., drawing on a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas">canvas</see>) when they are not needed, thereby conserving processing power.</para><para>Note that even when hidden from view, element contents will remain semantically relevant (e.g., to assistive technology users), so this signal should not be used to skip significant semantic DOM updates.</para>
<para>-<see cref="ContentVisibilityAutoStateChangeEvent"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment">CSS Containment</see><br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility">content-visibility</see> property<br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/contain">contain</see> property<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementContentvisibilityautostatechange>
<ElementPointerrawupdate>
<summary>
The <strong><c>pointerrawupdate</c></strong> event is fired when a pointer changes any properties that don't fire <see cref="'Elementpointerdown'"/> or <see cref="'Elementpointerup'"/> events.<br/>See <see cref="'Elementpointermove'"/> for a list of these properties.
</summary>
<remarks>
<para>The <c>pointerrawupdate</c> event may have coalesced events if there is already another <c>pointerrawupdate</c> event with the same pointer ID that hasn&amp;apos;t been dispatched in the event loop.<br/>For information on coalesced events, see the <see cref="PointerEvent.GetCoalescedEvents"/> documentation.</para><para><c>pointerrawupdate</c> is intended for applications that require high-precision input handling and cannot achieve smooth interaction using coalesced <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event"><c>pointermove</c></see> events alone.<br/>However, because listening to <c>pointerrawupdate</c> events can affect performance, you should add these listeners only if your JavaScript needs high-frequency events and can handle them as quickly as they are dispatched.<br/>For most use cases, other pointer event types should suffice.</para><para>This event <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbles</see> and is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composed">composed</see>, but is not <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable">cancelable</see> and has no default action.</para>
<para>-Related events-<see cref="'Elementgotpointercapture'"/><br/>-<see cref="'Elementlostpointercapture'"/><br/>-<see cref="'Elementpointerover'"/><br/>-<see cref="'Elementpointerenter'"/><br/>-<see cref="'Elementpointerdown'"/><br/>-<see cref="'Elementpointermove'"/><br/>-<see cref="'Elementpointerup'"/><br/>-<see cref="'Elementpointercancel'"/><br/>-<see cref="'Elementpointerout'"/><br/>-<see cref="'Elementpointerleave'"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerrawupdate"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementPointerrawupdate>
<ElementMousedown>
<summary>
The <strong><c>mousedown</c></strong> event is fired at an <see cref="Element"/> when a pointing device button is pressed while the pointer is inside the element.
</summary>
<remarks>
<para>This differs from the <see cref="Elementclick"/> event in that <c>click</c> is fired after a full click action occurs; that is, the mouse button is pressed and released while the pointer remains inside the same element. <c>mousedown</c> is fired the moment the button is initially pressed.</para><para>This behavior is different from <see cref="Elementpointerdown"/> events. When using a physical mouse, <c>mousedown</c> events fire whenever any button on a mouse is pressed down. <c>pointerdown</c> events fire only upon the first button press; subsequent button presses don&amp;apos;t fire <c>pointerdown</c> events.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementmouseup"/><br/>-<see cref="Elementmousemove"/><br/>-<see cref="Elementclick"/><br/>-<see cref="Elementdblclick"/><br/>-<see cref="Elementmouseover"/><br/>-<see cref="Elementmouseout"/><br/>-<see cref="Elementmouseenter"/><br/>-<see cref="Elementmouseleave"/><br/>-<see cref="Elementcontextmenu"/><br/>-<see cref="Elementpointerdown"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementMousedown>
<ElementAriaColCount>
<summary>
The <strong><c>ariaColCount</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-colcount"><c>aria-colcount</c></see> attribute, which defines the number of columns in a table, grid, or treegrid.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/table_role">ARIA: table role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaColCount"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementAriaColCount>
<ElementTransitionend>
<summary>
The <strong><c>transitionend</c></strong> event is fired when a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions/Using_CSS_transitions">CSS transition</see> has completed. In the case where a transition is removed before completion, such as if the <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property">transition-property</see> is removed or <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/display">display</see> is set to <c>none</c>, then the event will not be generated.
</summary>
<remarks>
<para>The <c>transitionend</c> event is fired in both directions - as it finishes transitioning to the transitioned state, and when it fully reverts to the default or non-transitioned state. If there is no transition delay or duration, if both are 0s or neither is declared, there is no transition, and none of the transition events are fired. If the <c>transitioncancel</c> event is fired, the <c>transitionend</c> event will not fire.</para><para>This event is not cancelable.</para>
<para>-The <see cref="TransitionEvent"/> interface<br/>-CSS properties: <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition">transition</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay">transition-delay</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-duration">transition-duration</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property">transition-property</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function">transition-timing-function</see><br/>-Related events: <see cref="Elementtransitionrun"/>, <see cref="Elementtransitionstart"/>, <see cref="Elementtransitioncancel"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementTransitionend>
<ElementPointerup>
<summary>
The <c>pointerup</c> event is fired when a pointer is no longer active. Remember that it is possible to get a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event"><c>pointercancel</c></see> event instead.
</summary>
<remarks>
<para>This behavior is different from <see cref="Elementmouseup"/> events. When using a physical mouse, <c>mouseup</c> events fire whenever any button on a mouse is released. <c>pointerup</c> events fire only upon the last button release; previous button releases, while other buttons are held down, don&amp;apos;t fire <c>pointerup</c> events.</para>
<para>-Related events-<see cref="'Elementgotpointercapture'"/><br/>-<see cref="'Elementlostpointercapture'"/><br/>-<see cref="'Elementpointerover'"/><br/>-<see cref="'Elementpointerenter'"/><br/>-<see cref="'Elementpointerdown'"/><br/>-<see cref="'Elementpointermove'"/><br/>-<see cref="'Elementpointercancel'"/><br/>-<see cref="'Elementpointerout'"/><br/>-<see cref="'Elementpointerleave'"/><br/>-<see cref="'Elementpointerrawupdate'"/><br/>-<see cref="Elementmouseup"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementPointerup>
<ElementSetHTMLUnsafe>
<summary>
<blockquote class="WARNING"><h5>WARNING</h5>This method parses its input as HTML, writing the result into the DOM.<br/>APIs like this are known as <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#concepts_and_usage">injection sinks</see>, and are potentially a vector for <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS">cross-site-scripting (XSS)</see> attacks, if the input originally came from an attacker.</blockquote>
</summary>
<remarks>
<para>You can mitigate this risk by always passing <c>TrustedHTML</c> objects instead of strings and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#using_a_csp_to_enforce_trusted_types">enforcing trusted types</see>.<br/>See <see href="https://developer.mozilla.org#security_considerations">Security considerations</see> for more information.</para><blockquote class="NOTE"><h5>NOTE</h5><para><see cref="Element.SetHTML"/> should almost always be used instead of this method â€” on browsers where it is supported â€” as it always removes XSS-unsafe HTML entities.</para></blockquote><para>The <strong><c>setHTMLUnsafe()</c></strong> method of the <see cref="Element"/> interface is used to parse HTML input into a <see cref="DocumentFragment"/>, optionally filtering out unwanted elements and attributes, and those that don't belong in the context, and then using it to replace the element's subtree in the DOM.</para>
<para>-<see cref="ShadowRoot.SetHTMLUnsafe"/><br/>-<see cref="Element.InnerHTML"/><br/>-<see cref="Document.ParseHTML"/> and <see cref="Document.ParseHTMLUnsafe"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setHTMLUnsafe"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<c>undefined</c>).</returns>
</ElementSetHTMLUnsafe>
<ElementLostpointercapture>
<summary>
The <strong><c>lostpointercapture</c></strong> event is fired when a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events#pointer_capture">captured pointer</see> is released.
</summary>
<remarks>
<para>-Related events-<see cref="'Elementgotpointercapture'"/><br/>-<see cref="'Elementpointerover'"/><br/>-<see cref="'Elementpointerenter'"/><br/>-<see cref="'Elementpointerdown'"/><br/>-<see cref="'Elementpointermove'"/><br/>-<see cref="'Elementpointerup'"/><br/>-<see cref="'Elementpointercancel'"/><br/>-<see cref="'Elementpointerout'"/><br/>-<see cref="'Elementpointerleave'"/><br/>-<see cref="'Elementpointerrawupdate'"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementLostpointercapture>
<ElementAriaPressed>
<summary>
The <strong><c>ariaPressed</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-pressed"><c>aria-pressed</c></see> attribute, which indicates the current &amp;quot;pressed&amp;quot; state of toggle buttons.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Where possible use an HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see> element with <c>type=&amp;quot;button&amp;quot;</c> or the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button">button</see> element as these have built in semantics and do not require ARIA attributes.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/button_role">ARIA: button role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaPressed"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaPressed>
<ElementAnimationcancel>
<summary>
The <strong><c>animationcancel</c></strong> event is fired when a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animation</see> unexpectedly aborts. In other words, any time it stops running without sending an <see cref="Elementanimationend"/> event. This might happen when the {{cssxref("animation-name")}} is changed such that the animation is removed, or when the animating node is hidden using CSS. Therefore, either directly or because any of its containing nodes are hidden.
</summary>
<remarks>
<para>An event handler for this event can be added by setting the <c>onanimationcancel</c> property, or using <see cref="EventTarget.AddEventListener"/>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animations</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations/Using_CSS_animations">Using CSS Animations</see><br/>-<see cref="AnimationEvent"/><br/>-Related events: <see cref="Elementanimationstart"/>, <see cref="Elementanimationend"/>, <see cref="Elementanimationiteration"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementAnimationcancel>
<ElementFirstElementChild>
<summary>
The <strong><c>Element.firstElementChild</c></strong> read-only property<br/>returns an element's first child <see cref="Element"/>, or <c>null</c> if there<br/>are no child elements.
</summary>
<remarks>
<para><c>Element.firstElementChild</c> includes only element nodes.<br/>To get all child nodes, including non-element nodes like text and comment nodes, use <see cref="Node.FirstChild"/>.</para>
<para>-<see cref="Element.NextElementSibling"/><br/>-<see cref="Element.LastElementChild"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="Element"/> object, or <c>null</c>.</value>
</ElementFirstElementChild>
<ElementNextElementSibling>
<summary>
The <strong><c>Element.nextElementSibling</c></strong> read-only<br/>property returns the element immediately following the specified one in its parent&amp;apos;s<br/><see cref="Element.Children"/> list, or <c>null</c> if the specified element is the last one in the list.
</summary>
<remarks>
<para>-<see cref="Element.PreviousElementSibling"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Element"/> object, or <c>null</c>.</value>
</ElementNextElementSibling>
<ElementWheel>
<summary>
The <strong><c>wheel</c></strong> event fires when the user rotates a wheel button on a pointing device (typically a mouse). It is also fired for related devices that simulate wheel actions, such as trackpads and mouse balls.
</summary>
<remarks>
<para>This event replaces the non-standard deprecated <see cref="Elementmousewheel"/> event.</para><para>Don&amp;apos;t confuse the <c>wheel</c> event with the <see cref="Elementscroll"/> event:</para><para>Therefore, do not rely on the <c>wheel</c> event&amp;apos;s <c>delta*</c> properties to get the scrolling direction. Instead, detect value changes of <see cref="Element.ScrollLeft"/> and <see cref="Element.ScrollTop"/> of the target in the <c>scroll</c> event.</para><para>The <c>wheel</c> event is cancelable. In some browsers, only the first <c>wheel</c> event in a sequence is cancelable, and later events are non-cancelable. If the event is canceled, no scrolling or zooming is performed. This may cause performance issues as the browser has to wait for every wheel event to be processed before actually scrolling the content. You can avoid this by setting <c>passive: true</c> when calling <see cref="EventTarget.AddEventListener"/>, which may cause the browser to generate non-cancelable <c>wheel</c> events.</para>
<para>-<see cref="WheelEvent"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementWheel>
<ElementRemoveAttribute>
<summary>
The <see cref="Element"/> method<br/><strong><c>removeAttribute()</c></strong> removes the attribute with the<br/>specified name from the element.
</summary>
<remarks>
<para>-<see cref="Element.HasAttribute"/><br/>-<see cref="Element.GetAttribute"/><br/>-<see cref="Element.SetAttribute"/><br/>-<see cref="Element.ToggleAttribute"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementRemoveAttribute>
<ElementGetElementsByTagName>
<summary>
The<br/><strong><c>Element.getElementsByTagName()</c></strong> method returns a live<br/><see cref="HTMLCollection"/> of elements with the given <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName">tag name</see>.
</summary>
<remarks>
<para>All descendants of the<br/>specified element are searched, but not the element itself. The returned list is<br/><strong>live</strong>, which means it updates itself with the DOM tree automatically.<br/>Therefore, there is no need to call <c>Element.getElementsByTagName()</c> with<br/>the same element and arguments repeatedly if the DOM changes in between calls.</para><para>When called on an HTML element in an HTML document, <c>getElementsByTagName</c><br/>lower-cases the argument before searching for it. This is undesirable when trying to<br/>match <see href="https://developer.mozilla.org/en-US/docs/Glossary/camel_case">camel_case</see> SVG elements (such as<br/><see href="https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Element/linearGradient"><c>&amp;lt;linearGradient&amp;gt;</c></see>)<br/>in an HTML document. Instead, use <see cref="Element.GetElementsByTagNameNS"/>,<br/>which preserves the capitalization of the tag name.</para><para><c>Element.getElementsByTagName</c> is similar to<br/><see cref="Document.GetElementsByTagName"/>, except that it only searches for<br/>elements that are descendants of the specified element.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <strong>live</strong> <see cref="HTMLCollection"/> of elements with a matching tag name, in the order they appear. If no elements are found, the <c>HTMLCollection</c> is empty.</returns>
</ElementGetElementsByTagName>
<ElementShadowRoot>
<summary>
The <c>Element.shadowRoot</c> read-only property<br/>represents the shadow root hosted by the element.
</summary>
<remarks>
<para>Use <see cref="Element.AttachShadow"/> to add a shadow root to an existing element.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="ShadowRoot"/> object instance, or <c>null</c> if the associated<br/>shadow root was attached with its <see cref="ShadowRoot.Mode"/> set to<br/><c>closed</c>. (See <see cref="Element.AttachShadow"/> for further details).Some built-in elements, such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">input</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img">img</see>, have user-agent shadow roots that are closed to script. Therefore, their <c>shadowRoot</c> property is always <c>null</c>.</value>
</ElementShadowRoot>
<ElementAriaDescription>
<summary>
The <strong><c>ariaDescription</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-description"><c>aria-description</c></see> attribute, which defines a string value that describes or annotates the current element.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaDescription"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementAriaDescription>
<ElementAnimationend>
<summary>
The <strong><c>animationend</c></strong> event is fired when a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animation</see> has completed. If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the <c>animationend</c> event is not fired.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animations</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations/Using_CSS_animations">Using CSS Animations</see><br/>-<see cref="AnimationEvent"/><br/>-Related events: <see cref="Elementanimationstart"/>, <see cref="Elementanimationcancel"/>, <see cref="Elementanimationiteration"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementAnimationend>
<ElementAriaValueText>
<summary>
The <strong><c>ariaValueText</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-valuetext"><c>aria-valuetext</c></see> attribute, which defines the human-readable text alternative of aria-valuenow for a range widget.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaValueText"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementAriaValueText>
<ElementCopy>
<summary>
The <strong><c>copy</c></strong> event of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API">Clipboard API</see> fires when the user initiates a copy action through the browser&amp;apos;s user interface.
</summary>
<remarks>
<para>The event&amp;apos;s default action is to copy the selection (if any) to the clipboard.</para><para>A handler for this event can <strong>modify</strong> the clipboard contents by calling <see cref="DataTransfer.SetData"/> on the event's <see cref="ClipboardEvent.ClipboardData"/> property, and cancelling the event's default action using <see cref="EventpreventDefault"/>.</para><para>However, the handler cannot <strong>read</strong> the clipboard data.</para><para>It&amp;apos;s possible to construct and dispatch a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events#creating_and_dispatching_events">synthetic</see> <c>copy</c> event, but this will not affect the system clipboard.</para><para>This event <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbles</see> up the DOM tree, eventually to <see cref="Document"/> and <see cref="Window"/>, is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable">cancelable</see> and is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composed">composed</see>.</para>
<para>-<see cref="Elementcut"/> event<br/>-<see cref="Elementpaste"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/copy"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementCopy>
<ElementAriaHasPopup>
<summary>
The <strong><c>ariaHasPopup</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-haspopup"><c>aria-haspopup</c></see> attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaHasPopup"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:<blockquote class="WARNING"><h5>WARNING</h5>Be aware that support for the different <c>aria-haspopup</c> values can vary depending on the element to which the attribute is specified. Ensure that when using <c>aria-haspopup</c>, it is done in accordance to the ARIA specification, and that it behaves as expected when testing with necessary browsers and assistive technologies.</blockquote></value>
</ElementAriaHasPopup>
<ElementTransitioncancel>
<summary>
The <strong><c>transitioncancel</c></strong> event is fired when a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions/Using_CSS_transitions">CSS transition</see> is canceled.
</summary>
<remarks>
<para>-The <see cref="TransitionEvent"/> interface<br/>-CSS properties: <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition">transition</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay">transition-delay</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-duration">transition-duration</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property">transition-property</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function">transition-timing-function</see><br/>-Related events: <see cref="Elementtransitionrun"/>, <see cref="Elementtransitionstart"/>, <see cref="Elementtransitionend"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementTransitioncancel>
<ElementAriaFlowToElements>
<summary>
The <strong><c>ariaFlowToElements</c></strong> property of the <see cref="Element"/> interface is an array containing the element (or elements) that provide an alternate reading order of content, overriding the general default reading order at the user's discretion.<br/>If just one element is provided this is the next element in the reading order.<br/>If multiple elements are provided, then each element represents a possible path that should be offered to the user for selection.
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-flowto"><c>aria-flowto</c></see> topic contains additional information about how the attribute and property should be used.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-flowto"><c>aria-flowto</c></see> attribute<br/>-<see cref="ElementInternals.AriaFlowToElements"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Reflected_attributes#reflected_element_references">Reflected element references</see> in the <strong>Attribute reflection</strong> guide.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaFlowToElements"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An array of subclasses of <see cref="HTMLElement"/>.When read, the returned array is a static and read-only.<br/>When written, the assigned array is copied: subsequent changes to the array do not affect the value of the property.</value>
</ElementAriaFlowToElements>
<ElementMouseenter>
<summary>
The <strong><c>mouseenter</c></strong> event is fired at an <see cref="Element"/> when a pointing device (usually a mouse) is initially moved so that its hotspot is within the element at which the event was fired.
</summary>
<remarks>
<para>Note that &amp;quot;moving into an element&amp;quot; refers to the element&amp;apos;s position in the DOM tree, not to its visual position. For example, if a child element is positioned so it is placed outside its parent, then moving into the child element will trigger <c>mouseenter</c> on the parent element, even though the pointer is still outside the bounds of the parent element.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementmousedown"/><br/>-<see cref="Elementmouseup"/><br/>-<see cref="Elementmousemove"/><br/>-<see cref="Elementclick"/><br/>-<see cref="Elementdblclick"/><br/>-<see cref="Elementmouseover"/><br/>-<see cref="Elementmouseout"/><br/>-<see cref="Elementmouseleave"/><br/>-<see cref="Elementcontextmenu"/><br/>-<see cref="Elementpointerenter"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementMouseenter>
<ElementDOMActivate>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>DOMActivate</c></strong> event is fired at an element when it becomes active, such as when it is clicked on using the mouse or a keypress is used to navigate to it.
</summary>
<remarks>
<para>-<see cref="UIEvent"/><br/>-<see cref="Elementclick"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/DOMActivate"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementDOMActivate>
<ElementAppend>
<summary>
The <strong><c>Element.append()</c></strong> method<br/>inserts a set of <see cref="Node"/> objects or strings after<br/>the last child of the <c>Element</c>. Strings<br/>are inserted as equivalent <see cref="Text"/> nodes.
</summary>
<remarks>
<para>Differences from <see cref="Node.AppendChild"/>:</para>
<para>-<see cref="Element.Prepend"/><br/>-<see cref="Node.AppendChild"/><br/>-<see cref="Element.After"/><br/>-<see cref="Element.InsertAdjacentElement"/><br/>-<see cref="NodeList"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/append"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementAppend>
<ElementTransitionstart>
<summary>
The <strong><c>transitionstart</c></strong> event is fired when a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions/Using_CSS_transitions">CSS transition</see> has actually started, i.e., after any <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay">transition-delay</see> has ended.
</summary>
<remarks>
<para>This event is not cancelable.</para>
<para>-The <see cref="TransitionEvent"/> interface<br/>-CSS properties: <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition">transition</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay">transition-delay</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-duration">transition-duration</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property">transition-property</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function">transition-timing-function</see><br/>-Related events: <see cref="Elementtransitionend"/>, <see cref="Elementtransitionrun"/>, <see cref="Elementtransitioncancel"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementTransitionstart>
<ElementRequestFullscreen>
<summary>
The <strong><c>Element.requestFullscreen()</c></strong><br/>method issues an asynchronous request to make the element be displayed in fullscreen<br/>mode.
</summary>
<remarks>
<para>It&amp;apos;s not guaranteed that the element will be put into full screen mode. If permission<br/>to enter full screen mode is granted, the returned <see cref="Promise"/> will resolve<br/>and the element will receive a <see cref="Elementfullscreenchange"/> event to let it know that<br/>it&amp;apos;s now in full screen mode. If permission is denied, the promise is rejected and the<br/>element receives a <see cref="Elementfullscreenerror"/> event instead. If the element has been<br/>detached from the original document, then the document receives these events instead.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API">Fullscreen API</see><br/>-<see cref="Document.ExitFullscreen"/><br/>-<see cref="Document.Fullscreen"/><br/>-<see cref="Document.FullscreenElement"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/:fullscreen">:fullscreen</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe#allowfullscreen"><c>allowfullscreen</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Promise"/> which is resolved with a value of <c>undefined</c> when<br/>the transition to full screen is complete.</returns>
</ElementRequestFullscreen>
<ElementPart>
<summary>
The <strong><c>part</c></strong> property of the <see cref="Element"/> interface<br/>represents the part identifier(s) of the element (i.e., set using the <c>part</c><br/>attribute), returned as a <see cref="DOMTokenList"/>. These can be used to style parts<br/>of a shadow DOM, via the {{cssxref(&amp;quot;::part&amp;quot;)}} pseudo-element.
</summary>
<remarks>
<para>-{{cssxref(&amp;quot;::part&amp;quot;)}}<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/part">part</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/part"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="DOMTokenList"/> object.</value>
</ElementPart>
<ElementGetBoundingClientRect>
<summary>
The <strong><c>Element.getBoundingClientRect()</c></strong> method returns a<br/><see cref="DOMRect"/> object providing information about the size of an element and its<br/>position relative to the <see href="https://developer.mozilla.org/en-US/docs/Glossary/Viewport">viewport</see>.
</summary>
<remarks>
<para>-<see cref="Element.GetClientRects"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The returned value is a <see cref="DOMRect"/> object which is the smallest rectangle<br/>which contains the entire element, including its padding and border-width. The<br/><c>left</c>, <c>top</c>, <c>right</c>, <c>bottom</c>,<br/><c>x</c>, <c>y</c>, <c>width</c>, and <c>height</c> properties<br/>describe the position and size of the overall rectangle in pixels. Properties other than<br/><c>width</c> and <c>height</c> are relative to the top-left of the viewport.<see href="https://developer.mozilla.orgelement-box-diagram.png">DOMRect object that is the smallest rectangle containing the entire element.</see>The <c>width</c> and <c>height</c> properties of the <see cref="DOMRect"/><br/>object returned by the method include the <c>padding</c> and<br/><c>border-width</c>, not only the content width/height. In the standard box model,<br/>this would be equal to the <c>width</c> or <c>height</c> property of the<br/>element + <c>padding</c> + <c>border-width</c>. But<br/>if <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing"><c>box-sizing: border-box</c></see> is<br/>set for the element this would be directly equal to its <c>width</c> or<br/><c>height</c>.The returned value can be thought of as the union of the rectangles returned by<br/><see cref="Element.GetClientRects"/> for the element, i.e., the CSS<br/>border-boxes associated with the element.Empty border-boxes are completely ignored. If all the element&amp;apos;s border-boxes are empty,<br/>then a rectangle is returned with a <c>width</c> and <c>height</c> of zero<br/>and where the <c>top</c> and <c>left</c> are the top-left of the border-box<br/>for the first CSS box (in content order) for the element.The amount of scrolling that has been done of the viewport area (or any other<br/>scrollable element) is taken into account when computing the bounding rectangle. This<br/>means that the rectangle&amp;apos;s boundary edges (<c>top</c>, <c>right</c>,<br/><c>bottom</c>, <c>left</c>) change their values every time the scrolling<br/>position changes (because their values are relative to the viewport and not absolute).If you need the bounding rectangle relative to the top-left corner of the document,<br/>just add the current scrolling position to the <c>top</c> and <c>left</c><br/>properties (these can be obtained using <see cref="Window.ScrollY"/> and<br/><see cref="Window.ScrollX"/>) to get a bounding rectangle which is independent from the<br/>current scrolling position.</returns>
</ElementGetBoundingClientRect>
<ElementMatches>
<summary>
The <strong><c>matches()</c></strong> method of the <see cref="Element"/> interface tests whether the element would be selected by the specified <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Basic_selectors">CSS selector</see>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors">CSS selectors</see> module<br/>-Other <see cref="Element"/> methods that take selectors: <see cref="Element.QuerySelector"/>, <see cref="Element.QuerySelectorAll"/>, and <see cref="Element.Closest"/>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/matches"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns><c>true</c> if the <see cref="Element"/> matches the <c>selectors</c>. Otherwise, <c>false</c>.</returns>
</ElementMatches>
<ElementTouchcancel>
<summary>
The <c>touchcancel</c> event is fired when one or more touch points have been disrupted in an implementation-specific manner.
</summary>
<remarks>
<para>Some examples of situations that will trigger a <c>touchcancel</c> event:</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementTouchcancel>
<ElementBeforematch>
<summary>
An element receives a <strong><c>beforematch</c></strong> event when it is in the <strong>hidden until found</strong> state and the browser is about to reveal its content because the user has found the content through the &amp;quot;find in page&amp;quot; feature or through fragment navigation.
</summary>
<remarks>
<para>-The HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/hidden"><c>hidden</c></see> attribute<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/beforematch"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementBeforematch>
<ElementInsertAdjacentElement>
<summary>
The <strong><c>insertAdjacentElement()</c></strong> method of the<br/><see cref="Element"/> interface inserts a given element node at a given position<br/>relative to the element it is invoked upon.
</summary>
<remarks>
<para>-<see cref="Element.InsertAdjacentHTML"/><br/>-<see cref="Element.InsertAdjacentText"/><br/>-<see cref="Node.InsertBefore"/> (similar to <c>beforebegin</c>, with<br/>different arguments)<br/>-<see cref="Node.AppendChild"/> (same effect as <c>beforeend</c>)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The element that was inserted, or <c>null</c>, if the insertion failed.</returns>
</ElementInsertAdjacentElement>
<ElementLastElementChild>
<summary>
The <strong><c>Element.lastElementChild</c></strong> read-only property<br/>returns an element's last child <see cref="Element"/>, or <c>null</c> if there<br/>are no child elements.
</summary>
<remarks>
<para><c>Element.lastElementChild</c> includes only element nodes.<br/>To get all child nodes, including non-element nodes like text and comment nodes, use <see cref="Node.LastChild"/>.</para>
<para>-<see cref="Element.PreviousElementSibling"/><br/>-<see cref="Element.FirstElementChild"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="Element"/> object, or <c>null</c>.</value>
</ElementLastElementChild>
<ElementScrollsnapchange>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>scrollsnapchange</c></strong> event of the <see cref="Element"/> interface is fired on the <see href="https://developer.mozilla.org/en-US/docs/Glossary/Scroll_container">scroll container</see> at the end of a scrolling operation when a new scroll snap target has been selected, just before the corresponding <see cref="Elementscrollend"/> event fires.
</summary>
<remarks>
<para>A scrolling operation ends when the user finishes scrolling within a scroll container â€” for example using a touch gesture or by dragging the mouse pointer on a scroll bar â€” and releases the gesture.</para>
<para>-<see cref="Elementscrollsnapchanging"/> event<br/>-<see cref="Documentscrollend"/> event<br/>-<see cref="SnapEvent"/><br/>-CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type">scroll-snap-type</see> property<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap">CSS scroll snap module</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap/Using_scroll_snap_events">Using scroll snap events</see><br/>-<see href="https://developer.chrome.com/blog/scroll-snap-events">Scroll Snap Events</see> on developer.chrome.com (2024)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollsnapchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementScrollsnapchange>
<ElementCompositionupdate>
<summary>
The <strong><c>compositionupdate</c></strong> event is fired when a new character is received in the context of a text composition session controlled by a text composition system such as an <see href="https://developer.mozilla.org/en-US/docs/Glossary/input method editor">input method editor</see>.
</summary>
<remarks>
<para>For example, this event could be fired while a user enters a Chinese character using a <see href="https://en.wikipedia.org/wiki/Pinyin">Pinyin</see> <see href="https://developer.mozilla.org/en-US/docs/Glossary/Input method editor">Input method editor</see>.</para>
<para>-Related events: <see cref="Elementcompositionstart"/>, <see cref="Elementcompositionend"/>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementCompositionupdate>
<ElementGetClientRects>
<summary>
The <strong><c>getClientRects()</c></strong> method of the <see cref="Element"/><br/>interface returns a collection of <see cref="DOMRect"/> objects that indicate the<br/>bounding rectangles for each <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Introduction_to_the_CSS_box_model">CSS border box</see> in a client.
</summary>
<remarks>
<para>Most elements only have one border box each, but a multiline <see href="https://developer.mozilla.org/en-US/docs/Glossary/Inline-level_content">inline-level element</see> (such as a multiline<br/><see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span">span</see> element, by default) has a border box around each line.</para>
<para>-<see cref="Element.GetBoundingClientRect"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The returned value is a collection of <see cref="DOMRect"/> objects, one for each CSS<br/>border box associated with the element. Each <see cref="DOMRect"/> object describes the border box, in pixels, with the top-left<br/>relative to the top-left of the viewport. For tables with captions, the caption is<br/>included even though it&amp;apos;s outside the border box of the table. When called on SVG<br/>elements other than an outer-<c>&amp;lt;svg&amp;gt;</c>, the &amp;quot;viewport&amp;quot; that the resulting<br/>rectangles are relative to is the viewport that the element&amp;apos;s<br/>outer-<c>&amp;lt;svg&amp;gt;</c> establishes (and to be clear, the rectangles are also<br/>transformed by the outer-<c>&amp;lt;svg&amp;gt;</c>&amp;apos;s <c>viewBox</c> transform, if<br/>any).The amount of scrolling that has been done of the viewport area (or any other<br/>scrollable element) is taken into account when computing the rectangles.The returned rectangles do not include the bounds of any child elements that might<br/>happen to overflow.For HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area">area</see> elements, SVG elements that do not render anything<br/>themselves, <c>display:none</c> elements, and generally any elements that are not<br/>directly rendered, an empty list is returned.Rectangles are returned even for CSS boxes that have empty border-boxes. The<br/><c>left</c>, <c>top</c>, <c>right</c>, and <c>bottom</c><br/>coordinates can still be meaningful.Fractional pixel offsets are possible.</returns>
</ElementGetClientRects>
<ElementLocalName>
<summary>
The <strong><c>Element.localName</c></strong> read-only property returns the<br/>local part of the qualified name of an element.
</summary>
<remarks>
<para>-<see cref="Element.TagName"/><br/>-<see cref="Element.NamespaceURI"/><br/>-<see cref="Element.Prefix"/><br/>-<see cref="Attr.LocalName"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/localName"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string representing the local part of the element&amp;apos;s qualified name.</value>
</ElementLocalName>
<ElementAssignedSlot>
<summary>
The <strong><c>assignedSlot</c></strong> read-only<br/>property of the <see cref="Element"/> interface returns an<br/><see cref="HTMLSlotElement"/> representing the {{htmlelement("slot")}} element the<br/>node is inserted in.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/assignedSlot"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="'HTMLSlotElement'"/> instance, or <c>null</c> if the element is not<br/>assigned to a slot, or if the associated shadow root was attached with its<br/><see cref="ShadowRoot.Mode"/> set to <c>closed</c> (see<br/><see cref="Element.AttachShadow"/> for further details).</value>
</ElementAssignedSlot>
<ElementSlot>
<summary>
The <strong><c>slot</c></strong> property of the <see cref="Element"/> interface<br/>returns the name of the shadow DOM slot the element is inserted in.
</summary>
<remarks>
<para>A slot is a placeholder inside a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components">web component</see> that users can fill with their own markup (see <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots">Using templates and slots</see> for more information).</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/slot"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementSlot>
<ElementScrollTo>
<summary>
The <strong><c>scrollTo()</c></strong> method of the <see cref="Element"/><br/>interface scrolls to a particular set of coordinates inside a given element.
</summary>
<remarks>
<para>-<see cref="Element.ScrollTop"/>, <see cref="Element.ScrollLeft"/><br/>-<see cref="Window.ScrollTo"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementScrollTo>
<ElementWebkitmouseforceup>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The non-standard <strong><c>webkitmouseforceup</c></strong> event is fired by Safari at an <see cref="Element"/> some time after the <see cref="Elementwebkitmouseforcedown"/> event, when pressure on the button has been reduced sufficiently to end the "force click".
</summary>
<remarks>
<para><strong><c>webkitmouseforceup</c></strong> is a proprietary, WebKit-specific event. It is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Force_Touch_events">Force Touch events</see> feature.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementwebkitmouseforcewillbegin"/><br/>-<see cref="Elementwebkitmouseforcedown"/><br/>-<see cref="Elementwebkitmouseforcechanged"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforceup"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementWebkitmouseforceup>
<ElementAriaPosInSet>
<summary>
The <strong><c>ariaPosInSet</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-posinset"><c>aria-posinset</c></see> attribute, which defines an element&amp;apos;s number or position in the current set of listitems or treeitems.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaPosInSet"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string containing an integer.</value>
</ElementAriaPosInSet>
<ElementMoveBefore>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>moveBefore()</c></strong> method of the <see cref="Element"/> interface moves a given <see cref="Node"/> inside the invoking node as a direct child, before a given reference node.
</summary>
<remarks>
<para>-<see cref="Document.MoveBefore"/><br/>-<see cref="DocumentFragment.MoveBefore"/><br/>-<see cref="Node.InsertBefore"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/moveBefore"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementMoveBefore>
<ElementMozMousePixelScroll>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The Firefox-only, <strong>non-standard</strong>, and <strong>obsolete</strong> <strong><c>MozMousePixelScroll</c></strong> event is fired at an <see cref="Element"/> asynchronously when a mouse wheel or similar device is operated. It's represented by the <see cref="MouseScrollEvent"/> interface.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Do not use this non-standard and obsolete event. Instead, you should always use the standard <see cref="Element.Wheel"/> event.</para></blockquote>
<para>-<see cref="MouseScrollEvent"/><br/>-Gecko&amp;apos;s legacy line or page scroll event: <c>DOMMouseScroll</c><br/>-Non-Gecko browsers&amp;apos; legacy mouse wheel event: <c>mousewheel</c><br/>-Standardized wheel event: <c>wheel</c><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/MozMousePixelScroll"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementMozMousePixelScroll>
<ElementAriaSelected>
<summary>
The <strong><c>ariaSelected</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-selected"><c>aria-selected</c></see> attribute, which indicates the current &amp;quot;selected&amp;quot; state of elements that have a selected state.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/tab_role">ARIA: tab role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaSelected"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaSelected>
<ElementAriaHidden>
<summary>
The <strong><c>ariaHidden</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-hidden"><c>aria-hidden</c></see>) attribute, which indicates whether the element is exposed to an accessibility API.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaHidden"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaHidden>
<ElementMouseup>
<summary>
The <strong><c>mouseup</c></strong> event is fired at an <see cref="Element"/> when a button on a pointing device (such as a mouse or trackpad) is released while the pointer is located inside it.
</summary>
<remarks>
<para><c>mouseup</c> events are the counterpoint to <see cref="Element.Mousedown"/> events.</para><para>This behavior is different from <see cref="Elementpointerup"/> events. When using a physical mouse, <c>mouseup</c> events fire whenever any button on a mouse is released. <c>pointerup</c> events fire only upon the last button release; previous button releases, while other buttons are held down, don&amp;apos;t fire <c>pointerup</c> events.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementmousedown"/><br/>-<see cref="Elementmousemove"/><br/>-<see cref="Elementclick"/><br/>-<see cref="Elementdblclick"/><br/>-<see cref="Elementmouseover"/><br/>-<see cref="Elementmouseout"/><br/>-<see cref="Elementmouseenter"/><br/>-<see cref="Elementmouseleave"/><br/>-<see cref="Elementcontextmenu"/><br/>-<see cref="Elementpointerup"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementMouseup>
<ElementPointerout>
<summary>
The <c>pointerout</c> event is fired for several reasons including: pointing device is moved out of the <strong>hit test</strong> boundaries of an element; firing the <see cref="Elementpointerup"/> event for a device that does not support hover (see <see cref="Elementpointerup"/>); after firing the <see cref="Elementpointercancel"/> event (see <see cref="Elementpointercancel"/>); when a pen stylus leaves the hover range detectable by the digitizer.
</summary>
<remarks>
<para><c>pointerout</c> events have the same problems as <see cref="Elementmouseout"/>. If the target element has child elements, <c>pointerout</c> and <c>pointerover</c> events fire as the pointer moves over the boundaries of these elements too, not just the target element itself. Usually, <see cref="Elementpointerenter"/> and <see cref="Elementpointerleave"/> events' behavior is more sensible, because they are not affected by moving into child elements.</para>
<para>-Related events-<see cref="'Elementgotpointercapture'"/><br/>-<see cref="'Elementlostpointercapture'"/><br/>-<see cref="'Elementpointerover'"/><br/>-<see cref="'Elementpointerenter'"/><br/>-<see cref="'Elementpointerdown'"/><br/>-<see cref="'Elementpointermove'"/><br/>-<see cref="'Elementpointerup'"/><br/>-<see cref="'Elementpointercancel'"/><br/>-<see cref="'Elementpointerleave'"/><br/>-<see cref="'Elementpointerrawupdate'"/><br/>-<see cref="Elementmouseout"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementPointerout>
<ElementCut>
<summary>
The <strong><c>cut</c></strong> event of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API">Clipboard API</see> is fired when the user has initiated a &amp;quot;cut&amp;quot; action through the browser&amp;apos;s user interface.
</summary>
<remarks>
<para>If the user attempts a cut action on uneditable content, the <c>cut</c> event still fires but the event object contains no data.</para><para>The event&amp;apos;s default action is to copy the current selection (if any) to the system clipboard and remove it from the document.</para><para>A handler for this event can <strong>modify</strong> the clipboard contents by calling <see cref="DataTransfer.SetData"/> on the event's <see cref="ClipboardEvent.ClipboardData"/> property, and cancelling the default action using <see cref="EventpreventDefault"/>.</para><para>Note though that cancelling the default action will also prevent the document from being updated. So an event handler which wants to emulate the default action for &amp;quot;cut&amp;quot; while modifying the clipboard must also manually remove the selection from the document.</para><para>The handler cannot <strong>read</strong> the clipboard data.</para><para>It&amp;apos;s possible to construct and dispatch a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events#creating_and_dispatching_events">synthetic</see> <c>cut</c> event, but this will not affect the system clipboard or the document&amp;apos;s contents.</para><para>This event <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbles</see> up the DOM tree, eventually to <see cref="Document"/> and <see cref="Window"/>, is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable">cancelable</see> and is <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composed">composed</see>.</para>
<para>-<see cref="Elementcopy"/> event<br/>-<see cref="Elementpaste"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/cut"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementCut>
<ElementNamespaceURI>
<summary>
The <strong><c>Element.namespaceURI</c></strong> read-only property returns the namespace URI of the element, or <c>null</c> if the element is not in a namespace.
</summary>
<remarks>
<para>-<see cref="Element.LocalName"/><br/>-<see cref="Element.Prefix"/><br/>-<see cref="Attr.NamespaceURI"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string, or <c>null</c>.</value>
</ElementNamespaceURI>
<ElementAriaValueMin>
<summary>
The <strong><c>ariaValueMin</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-valuemin"><c>aria-valuemin</c></see> attribute, which defines the minimum allowed value for a range widget.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaValueMin"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string which contains a number.</value>
</ElementAriaValueMin>
<ElementMouseout>
<summary>
The <strong><c>mouseout</c></strong> event is fired at an <see cref="Element"/> when a pointing device (usually a mouse) is used to move the cursor so that it is no longer contained within the element or one of its children.
</summary>
<remarks>
<para><c>mouseout</c> is also delivered to an element if the cursor enters a child element, because the child element obscures the visible area of the element.</para><para>If the target element has child elements, <c>mouseout</c> and <c>mouseover</c> events fire as the mouse moves over the boundaries of these elements too, not just the target element itself. Usually, <see cref="Elementmouseenter"/> and <see cref="Elementmouseleave"/> events' behavior is more sensible, because they are not affected by moving into child elements.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementmousedown"/><br/>-<see cref="Elementmouseup"/><br/>-<see cref="Elementmousemove"/><br/>-<see cref="Elementclick"/><br/>-<see cref="Elementdblclick"/><br/>-<see cref="Elementmouseover"/><br/>-<see cref="Elementmouseenter"/><br/>-<see cref="Elementmouseleave"/><br/>-<see cref="Elementcontextmenu"/><br/>-<see cref="Elementpointerout"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementMouseout>
<ElementAriaLabelledByElements>
<summary>
The <strong><c>ariaLabelledByElements</c></strong> property of the <see cref="Element"/> interface is an array containing the element (or elements) that provide an accessible name for the element it is applied to.
</summary>
<remarks>
<para>The property is primarily intended to provide a label for elements that don&amp;apos;t have a standard method for defining their accessible name.<br/>For example, this might be used to name a generic container element, such as a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div">div</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span">span</see>, or a grouping of elements, such as an image with a slider that can be used to change its opacity.<br/>The property takes precedence over other mechanisms for providing an accessible name for elements, and may therefore also be used to provide a name for elements that would normally get it from their inner content or from an associated element such as a label.</para><para>The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-labelledby"><c>aria-labelledby</c></see> topic contains additional information about how the attribute and property should be used.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-labelledby"><c>aria-labelledby</c></see> attribute<br/>-<see cref="ElementInternals.AriaLabelledByElements"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Reflected_attributes#reflected_element_references">Reflected element references</see> in the <strong>Attribute reflection</strong> guide.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaLabelledByElements"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An array of elements.<br/>The inner text of these elements can be joined with spaces to get the accessible name.When read, the returned array is a static and read-only.<br/>When written, the assigned array is copied: subsequent changes to the array do not affect the value of the property.</value>
</ElementAriaLabelledByElements>
<ElementSetCapture>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> Call this method during the handling of a mousedown event to retarget all mouse events<br/>to this element until the mouse button is released or <see cref="Document.ReleaseCapture"/> is called.
</summary>
<remarks>
<blockquote class="WARNING"><h5>WARNING</h5><para>This interface never had much cross-browser<br/>support and you are probably looking for <see cref="Element.SetPointerCapture"/> instead,<br/>from the Pointer Events API.</para></blockquote>
<para>-<see cref="Document.ReleaseCapture"/><br/>-<see cref="Element.SetPointerCapture"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementSetCapture>
<ElementAriaOwnsElements>
<summary>
The <strong><c>ariaOwnsElements</c></strong> property of the <see cref="Element"/> interface is an array containing the element (or elements) that define a visual, functional, or contextual relationship between a parent element that it is applied to, and its child elements.<br/>This is used when the DOM hierarchy cannot be used to represent the relationship, and it would not otherwise be available to assistive technology,
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-owns"><c>aria-owns</c></see> topic contains additional information about how the attribute and property should be used.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-flowto"><c>aria-owns</c></see> attribute<br/>-<see cref="ElementInternals.AriaOwnsElements"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Reflected_attributes#reflected_element_references">Reflected element references</see> in the <strong>Attribute reflection</strong> guide.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaOwnsElements"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An array of subclasses of <see cref="HTMLElement"/>.When read, the returned array is a static and read-only.<br/>When written, the assigned array is copied: subsequent changes to the array do not affect the value of the property.</value>
</ElementAriaOwnsElements>
<ElementRemoveAttributeNS>
<summary>
The <strong><c>removeAttributeNS()</c></strong> method of the<br/><see cref="Element"/> interface removes the specified attribute with the specified namespace from an element.
</summary>
<remarks>
<para>If you are working with HTML and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="Element.RemoveAttribute"/> method instead.</para>
<para>-<see cref="Element.HasAttributeNS"/><br/>-<see cref="Element.GetAttributeNS"/><br/>-<see cref="Element.SetAttributeNS"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementRemoveAttributeNS>
<ElementClientHeight>
<summary>
The <strong><c>clientHeight</c></strong> read-only property of the <see cref="Element"/> interface is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels. It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
</summary>
<remarks>
<para><c>clientHeight</c> can be calculated as: CSS <c>height</c> + CSS <c>padding</c> - height of horizontal scrollbar (if present).</para><para>When <c>clientHeight</c> is used on the root element (the <c>&amp;lt;html&amp;gt;</c> element), (or on <c>&amp;lt;body&amp;gt;</c> if the document is in quirks mode), the viewport&amp;apos;s height (excluding any scrollbar) is returned.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements">Determining the dimensions of elements</see><br/>-<see cref="HTMLElement.OffsetHeight"/><br/>-<see cref="Element.ScrollHeight"/><br/>-<see cref="Element.ClientWidth"/><br/>-<see cref="Element.ClientLeft"/><br/>-<see cref="Element.ClientTop"/><br/>-<see cref="Element.GetBoundingClientRect"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An integer.</value>
</ElementClientHeight>
<ElementSetHTML>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>setHTML()</c></strong> method of the <see cref="Element"/> interface provides an XSS-safe method to parse and sanitize a string of HTML into a <see cref="DocumentFragment"/>, and then insert it into the DOM as a subtree of the element.
</summary>
<remarks>
<para>-<see cref="Element.SetHTMLUnsafe"/><br/>-<see cref="ShadowRoot.SetHTML"/> and <see cref="ShadowRoot.SetHTMLUnsafe"/><br/>-<see cref="Document.ParseHTML"/> and <see cref="Document.ParseHTMLUnsafe"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API">HTML Sanitizer API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setHTML"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<c>undefined</c>).</returns>
</ElementSetHTML>
<ElementGetAttribute>
<summary>
The <strong><c>getAttribute()</c></strong> method of the<br/><see cref="Element"/> interface returns the value of a specified attribute on the<br/>element.
</summary>
<remarks>
<para>If the given attribute does not exist, the value returned will be <c>null</c>.</para><para>If you need to inspect the <see cref="Attr"/> node's properties, you can use the <see cref="Element.GetAttributeNode"/> method instead.</para>
<para>-<see cref="Element.HasAttribute"/><br/>-<see cref="Element.SetAttribute"/><br/>-<see cref="Element.RemoveAttribute"/><br/>-<see cref="Element.ToggleAttribute"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A string containing the value of <c>attributeName</c> if the attribute exists, otherwise <c>null</c>.</returns>
</ElementGetAttribute>
<ElementAriaErrorMessageElements>
<summary>
The <strong><c>ariaErrorMessageElements</c></strong> property of the <see cref="Element"/> interface is an array containing the element (or elements) that provide an error message for the element it is applied to.
</summary>
<remarks>
<para>The <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-errormessage"><c>aria-errormessage</c></see> topic contains additional information about how the attribute and property should be used.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-errormessage"><c>aria-errormessage</c></see> attribute<br/>-<see cref="ElementInternals.AriaErrorMessageElements"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Reflected_attributes#reflected_element_references">Reflected element references</see> in the <strong>Attribute reflection</strong> guide.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaErrorMessageElements"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An array of subclasses of <see cref="HTMLElement"/>.<br/>The inner text of these elements can be joined with spaces to get the error message.When read, the returned array is a static and read-only.<br/>When written, the assigned array is copied: subsequent changes to the array do not affect the value of the property.</value>
</ElementAriaErrorMessageElements>
<ElementAnimationstart>
<summary>
The <strong><c>animationstart</c></strong> event is fired when a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animation</see> has started. If there is an {{cssxref("animation-delay")}}, this event will fire once the delay period has expired. A negative delay will cause the event to fire with an <see cref="AnimationEventelapsedTime"/> equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations">CSS Animations</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations/Using_CSS_animations">Using CSS Animations</see><br/>-<see cref="AnimationEvent"/><br/>-Related events: <see cref="Elementanimationend"/>, <see cref="Elementanimationiteration"/>, <see cref="Elementanimationcancel"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementAnimationstart>
<ElementQuerySelectorAll>
<summary>
The <see cref="Element"/> method <strong><c>querySelectorAll()</c></strong><br/>returns a static (not live) <see cref="NodeList"/> representing a list of elements<br/>matching the specified group of selectors which are descendants of the element on which<br/>the method was called.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Locating_DOM_elements_using_selectors">Locating DOM elements using selectors</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors">Attribute selectors</see> in the CSS<br/>Guide<br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Attribute_selectors">Attribute selectors</see> in the MDN Learning Area<br/>-<see cref="Element.QuerySelector"/><br/>-<see cref="Document.QuerySelector"/> and<br/><see cref="Document.QuerySelectorAll"/><br/>-<see cref="DocumentFragment.QuerySelector"/> and<br/><see cref="DocumentFragment.QuerySelectorAll"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A non-live <see cref="NodeList"/> containing one <see cref="Element"/> object for<br/>each descendant node that matches at least one of the specified selectors. The elements are in document order â€” that is, parents before children, earlier siblings before later siblings.<blockquote class="NOTE"><h5>NOTE</h5>If the specified <c>selectors</c> include a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements">CSS pseudo-element</see>, the returned list<br/>is always empty.</blockquote></returns>
</ElementQuerySelectorAll>
<ElementAriaRowCount>
<summary>
The <strong><c>ariaRowCount</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-rowcount"><c>aria-rowcount</c></see> attribute, which defines the total number of rows in a table, grid, or treegrid.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/table_role">ARIA: table role</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRowCount"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string which contains an integer.</value>
</ElementAriaRowCount>
<ElementScroll>
<summary>
The <strong><c>scroll</c></strong> event fires when an element has been scrolled.<br/>To detect when scrolling has completed, see the <see cref="Elementscrollend"/> event of <c>Element</c>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event">Element <c>scrollend</c> event</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event">Document <c>scroll</c> event</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollend_event">Document <c>scrollend</c> event</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementScroll>
<ElementChildren>
<summary>
The read-only <strong><c>children</c></strong> property returns a live <see cref="HTMLCollection"/><br/>which contains all of the child <see cref="Element"/> of the element upon which it was called.
</summary>
<remarks>
<para><c>Element.children</c> includes only element nodes. To get all child nodes, including non-element nodes like text and comment nodes, use <see cref="Node.ChildNodes"/>.</para>
<para>-<see cref="Node.ChildNodes"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/children"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="HTMLCollection"/> which is a live, ordered collection of the DOM<br/>elements which are children of <c>node</c>. You can access the<br/>individual child nodes in the collection by using either the<br/><see cref="HTMLCollection.Item"/> method on the collection, or by using<br/>JavaScript array-style notation.If the element has no element children, then <c>children</c> is an empty list with a<br/><c>length</c> of <c>0</c>.</value>
</ElementChildren>
<ElementAriaValueMax>
<summary>
The <strong><c>ariaValueMax</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-valuemax"><c>aria-valuemax</c></see> attribute, which defines the maximum allowed value for a range widget.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaValueMax"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string which contains a number.</value>
</ElementAriaValueMax>
<ElementPointerleave>
<summary>
The <c>pointerleave</c> event is fired when a pointing device is moved out of the hit test boundaries of an element. For pen devices, this event is fired when the stylus leaves the hover range detectable by the digitizer. Otherwise, <c>pointerleave</c> works the same as <see cref="Elementmouseleave"/>, and are dispatched at the same time. They are also dispatched at the same time as <see cref="Elementmouseout"/> and <see cref="Elementpointerout"/> events, if appropriate.
</summary>
<remarks>
<para>-Related events-<see cref="'Elementgotpointercapture'"/><br/>-<see cref="'Elementlostpointercapture'"/><br/>-<see cref="'Elementpointerover'"/><br/>-<see cref="'Elementpointerenter'"/><br/>-<see cref="'Elementpointerdown'"/><br/>-<see cref="'Elementpointermove'"/><br/>-<see cref="'Elementpointerup'"/><br/>-<see cref="'Elementpointercancel'"/><br/>-<see cref="'Elementpointerout'"/><br/>-<see cref="'Elementpointerrawupdate'"/><br/>-<see cref="Elementmouseleave"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementPointerleave>
<ElementScrollIntoViewIfNeeded>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>Element.scrollIntoViewIfNeeded()</c></strong> method scrolls the current element into the visible area of the browser window if it&amp;apos;s not already within the visible area of the browser window. If the element is already within the visible area of the browser window, then no scrolling takes place. This method is a proprietary variation of the standard <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView"><c>Element.scrollIntoView()</c></see> method.
</summary>
<remarks>
<para>-<see href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=17152">W3C CSSOM bug 17152: Support centering an element when scrolling into view.</see> (feature request for a standardized equivalent to <c>scrollIntoViewIfNeeded</c>)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</ElementScrollIntoViewIfNeeded>
<ElementAriaCurrent>
<summary>
The <strong><c>ariaCurrent</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-current"><c>aria-current</c></see> attribute, which indicates the element that represents the current item within a container or set of related elements.
</summary>
<remarks>
<para>-<see href="https://tink.uk/using-the-aria-current-attribute/">Using the aria-current attribute</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaCurrent"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string with one of the following values:</value>
</ElementAriaCurrent>
<ElementScrollTop>
<summary>
The <strong><c>scrollTop</c></strong> property of the <see cref="Element"/> interface gets or sets the number of pixels by which an element's content is scrolled from its top edge. This value is subpixel precise in modern browsers, meaning that it isn't necessarily a whole number.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements">Determining the dimensions of elements</see><br/>-<see cref="HTMLElement.OffsetTop"/><br/>-<see cref="Element.ClientTop"/><br/>-<see cref="Element.ScrollHeight"/><br/>-<see cref="Element.ScrollWidth"/><br/>-<see cref="Element.ScrollLeft"/><br/>-<see cref="Element.GetBoundingClientRect"/><br/>-<see cref="Element.ScrollTo"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A double-precision floating-point value indicating the number of pixels by which the element is currently scrolled vertically from the origin, where a positive value means the element is scrolled down (to reveal more content to the bottom). If the element isn&amp;apos;t scrolled at all up or down, then <c>scrollTop</c> is 0. If the document is not the active document, the returned value is 0. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component.It&amp;apos;s possible for <c>scrollTop</c> to be negative if the element can be scrolled up from the initial containing block. For example, if the element's <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction">flex-direction</see> is <c>column-reverse</c> and content grows upwards, then <c>scrollTop</c> is <c>0</c> when the scrollbar is at its bottommost position (at the start of the scrolled content), and then increasingly negative as you scroll towards the end of the content.Safari responds to overscrolling by updating <c>scrollTop</c> beyond the maximum scroll position (unless the default "bounce" effect is disabled, such as by setting <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior">overscroll-behavior</see> to <c>none</c>), while Chrome and Firefox do not. For example, <c>scrollTop</c> may be negative on Safari just by continuing to scroll up when the element is already at the top.The <c>scrollTop</c> property can be set, which causes the element to scroll to the specified vertical position, in the same way as using <see cref="Element.Scroll"/> with <c>behavior: &amp;quot;auto&amp;quot;</c>.</value>
</ElementScrollTop>
<ElementId>
<summary>
The <strong><c>id</c></strong> property of the <see cref="Element"/> interface<br/>represents the element&amp;apos;s identifier, reflecting the<br/><see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/id"><strong><c>id</c></strong></see><br/>global attribute.
</summary>
<remarks>
<para>If the <c>id</c> value is not the empty string, it must be unique in a document.</para><para>The <c>id</c> is often used with <see cref="Document.GetElementById"/> to retrieve a particular element.<br/>Another common case is to use an element&amp;apos;s <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors">ID as a selector</see> when styling the document with <see href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Identifiers are case-sensitive, but you should avoid creating<br/>IDs that differ only in the capitalization.</para></blockquote>
<para>-The DOM <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/id"><strong>id</strong></see><br/>global attribute.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/id"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementId>
<ElementWebkitmouseforcewillbegin>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> Safari for macOS fires the non-standard <strong><c>webkitmouseforcewillbegin</c></strong> event at an <see cref="Element"/> before firing the initial <see cref="Elementmousedown"/> event.
</summary>
<remarks>
<para>This offers the opportunity to tell the system not to trigger any default Force Touch actions if and when the click turns into a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Force_Touch_events">Force Touch events</see>.</para><para>To instruct macOS not to engage any default Force Touch actions if the user apply enough pressure to activate a Force Touch event, call <see cref="Event.PreventDefault"/> on the <c>webkitmouseforcewillbegin</c> event object.</para><para><strong><c>webkitmouseforcewillbegin</c></strong> is a proprietary, WebKit-specific event. It is part of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Force_Touch_events">Force Touch events</see> feature.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementwebkitmouseforcedown"/><br/>-<see cref="Elementwebkitmouseforceup"/><br/>-<see cref="Elementwebkitmouseforcechanged"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcewillbegin"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementWebkitmouseforcewillbegin>
<ElementMouseleave>
<summary>
The <strong><c>mouseleave</c></strong> event is fired at an <see cref="Element"/> when the cursor of a pointing device (usually a mouse) is moved out of it.
</summary>
<remarks>
<para><c>mouseleave</c> and <see cref="Elementmouseout"/> are similar but differ in that <c>mouseleave</c> does not bubble and <c>mouseout</c> does. This means that <c>mouseleave</c> is fired when the pointer has exited the element <strong>and</strong> all of its descendants, whereas <c>mouseout</c> is fired when the pointer leaves the element <strong>or</strong> leaves one of the element&amp;apos;s descendants, because of bubbling (even if the pointer is still within the element). Other than that, leave and out events for the same situation are dispatched at the same time, if appropriate.</para><para>The <c>mouseleave</c> and <c>mouseout</c> events will not be triggered when the element is replaced or removed from the DOM.</para><para>Note that &amp;quot;moving out of an element&amp;quot; refers to the element&amp;apos;s position in the DOM tree, not to its visual position. For example, if two sibling elements are positioned so one is placed inside the other, then moving from the outer element into the inner element will trigger <c>mouseleave</c> on the outer element, even though the pointer is still in the bounds of the outer element.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see cref="Elementmousedown"/><br/>-<see cref="Elementmouseup"/><br/>-<see cref="Elementmousemove"/><br/>-<see cref="Elementclick"/><br/>-<see cref="Elementdblclick"/><br/>-<see cref="Elementmouseover"/><br/>-<see cref="Elementmouseout"/><br/>-<see cref="Elementmouseenter"/><br/>-<see cref="Elementcontextmenu"/><br/>-<see cref="Elementpointerleave"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave"> <em>See also on MDN</em> </seealso></para>
</remarks>
</ElementMouseleave>
<ElementClassList>
<summary>
The <strong><c>Element.classList</c></strong> is a read-only property that<br/>returns a live <see cref="DOMTokenList"/> collection of the <c>class</c><br/>attributes of the element. This can then be used to manipulate the class list.
</summary>
<remarks>
<para>Using <c>classList</c> is a convenient alternative to accessing an element&amp;apos;s list<br/>of classes as a space-delimited string via <see cref="Element.ClassName"/>.</para>
<para>-<see cref="Element.ClassName"/><br/>-<see cref="DOMTokenList"/><br/>-<see href="https://github.com/eligrey/classList.js"><c>classList.js</c></see> (a cross-browser JavaScript polyfill that fully implements <c>element.classList</c>)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="DOMTokenList"/> representing the contents of the element's<br/><c>class</c> attribute. If the <c>class</c> attribute is not set or empty,<br/>it returns an empty <c>DOMTokenList</c>, i.e., a <c>DOMTokenList</c> with<br/>the <c>length</c> property equal to <c>0</c>.Although the <c>classList</c> property itself is read-only, you can modify its associated <c>DOMTokenList</c> using the <see cref="DOMTokenListadd"/>, <see cref="DOMTokenListremove"/>, <see cref="DOMTokenListreplace"/>, and <see cref="DOMTokenListtoggle"/> methods.You can test whether the element contains a given class using the <see cref="DOMTokenListcontains"/> method.</value>
</ElementClassList>
<ElementOuterHTML>
<summary>
<blockquote class="WARNING"><h5>WARNING</h5>This property parses its input as HTML, writing the result into the DOM.<br/>APIs like this are known as <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#concepts_and_usage">injection sinks</see>, and are potentially a vector for <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Attacks/XSS">cross-site-scripting (XSS)</see> attacks, if the input originally came from an attacker.</blockquote>
</summary>
<remarks>
<para>You can mitigate this risk by always assigning <c>TrustedHTML</c> objects instead of strings and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#using_a_csp_to_enforce_trusted_types">enforcing trusted types</see>.<br/>See <see href="https://developer.mozilla.org#security_considerations">Security considerations</see> for more information.</para><para>The <strong><c>outerHTML</c></strong> attribute of the <see cref="Element"/> interface gets or sets the HTML or XML markup of the element and its descendants, omitting any {{glossary("shadow tree", "shadow roots")}} in both cases.</para><para>To get or set the contents of an element, use the <see cref="Element.InnerHTML"/> property instead.</para>
<para>-Serializing DOM trees into XML strings: <see cref="XMLSerializer"/><br/>-Parsing XML or HTML into DOM trees: <see cref="DOMParser"/><br/>-<see cref="HTMLElement.OuterText"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>Getting the property returns a string containing an HTML serialization of the <c>element</c> and its descendants.Setting the property accepts either a <see cref="TrustedHTML"/> object or a string.<br/>The input is parsed as HTML and replaces the element and all its descendants with the result.<br/>When set to the <c>null</c> value, that <c>null</c> value is converted to the empty string (<c>&amp;quot;&amp;quot;</c>), so <c>element.outerHTML = null</c> is equivalent to <c>element.outerHTML = &amp;quot;&amp;quot;</c>.</value>
</ElementOuterHTML>
<ElementAriaKeyShortcuts>
<summary>
The <strong><c>ariaKeyShortcuts</c></strong> property of the <see cref="Element"/> interface reflects the value of the <c>aria-keyshortcuts</c> attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaKeyShortcuts"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</ElementAriaKeyShortcuts>
<ElementAriaLabel>
<summary>
The <strong><c>ariaLabel</c></strong> property of the <see cref="Element"/> interface reflects the value of the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-label"><c>aria-label</c></see> attribute, which defines a string value that labels the current element.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaLabel"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string or <c>null</c>.</value>
</ElementAriaLabel>
</docs>