<docs>
<Event>
<summary>
The <strong><c>Event</c></strong> interface represents an event which takes place on an <see href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"><c>EventTarget</c></see>.
</summary>
<remarks>
<para>An event can be triggered by the user action e.g., clicking the mouse button or tapping keyboard, or generated by APIs to represent the progress of an asynchronous task. It can also be triggered programmatically, such as by calling the <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click"><c>HTMLElement.click()</c></see> method of an element, or by defining the event, then sending it to a specified target using <see href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent"><c>EventTarget.dispatchEvent()</c></see>.</para><para>There are many types of events, some of which use other interfaces based on the main <c>Event</c> interface. <c>Event</c> itself contains the properties and methods which are common to all events.</para><para>Many DOM elements can be set up to accept (or &amp;quot;listen&amp;quot; for) these events, and execute code in response to process (or &amp;quot;handle&amp;quot;) them. Event-handlers are usually connected (or &amp;quot;attached&amp;quot;) to various <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements">HTML elements</see> (such as <c>&amp;lt;button&amp;gt;</c>, <c>&amp;lt;div&amp;gt;</c>, <c>&amp;lt;span&amp;gt;</c>, etc.) using <see href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><c>EventTarget.addEventListener()</c></see>, and this generally replaces using the old HTML <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes">event handler attributes</see>. Further, when properly added, such handlers can also be disconnected if needed using <see href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener"><c>removeEventListener()</c></see>.</para><blockquote class="NOTE"><h5>NOTE</h5><para>One element can have several such handlers, even for the exact same event—particularly if separate, independent code modules attach them, each for its own independent purposes. (For example, a webpage with an advertising-module and statistics-module both monitoring video-watching.)</para></blockquote><para>When there are many nested elements, each with its own handler(s), event processing can become very complicated—especially where a parent element receives the very same event as its child elements because &amp;quot;spatially&amp;quot; they overlap so the event technically occurs in both, and the processing order of such events depends on the <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">Event bubbling</see> settings of each handler triggered.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events#event_index">Event index</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events">Learn: Introduction to events</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">Learn: Event bubbling</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events#creating_and_dispatching_events">Creating and triggering custom events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Event>
<EventCancelable>
<summary>
The <strong><c>cancelable</c></strong> read-only property of the <see cref="Event"/> interface indicates whether the event<br/>can be canceled, and therefore prevented as if the event never happened.
</summary>
<remarks>
<para>If the event is <strong>not</strong> cancelable, then its <c>cancelable</c> property will be<br/><c>false</c> and the event listener cannot stop the event from occurring.</para><para>Most browser-native events that can be canceled are the ones that result from the user<br/>interacting with the page. Canceling the <see cref="Elementclick"/>,<br/><see cref="Elementwheel"/>, or<br/><see cref="Windowbeforeunload"/> events would prevent the user<br/>from clicking on something, scrolling the page with the mouse wheel, or<br/>navigating away from the page, respectively.</para><para><see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/Event">Synthetic events</see> created by other JavaScript<br/>code define if they can be canceled when they are created.</para><para>To cancel an event, call the <see cref="Event.PreventDefault"/><br/>method on the event. This keeps the implementation from executing the default action<br/>that is associated with the event.</para><para>Event listeners that handle multiple kinds of events may want to check<br/><c>cancelable</c> before invoking their <see cref="Event.PreventDefault"/> methods.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value, which is <c>true</c> if the event can be<br/>canceled.</value>
</EventCancelable>
<EventTarget>
<summary>
The read-only <strong><c>target</c></strong> property of the<br/><see cref="Event"/> interface is a reference to the object onto which the event was<br/>dispatched. It is different from <see cref="Event.CurrentTarget"/> when the event<br/>handler is called during the bubbling or capturing phase of the event.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">Learn: Event bubbling</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/target"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The associated <see cref="EventTarget"/>.</value>
</EventTarget>
<EventCancelBubble>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>cancelBubble</c></strong> property of the <see cref="Event"/><br/>interface is deprecated. Use <see cref="Event.StopPropagation"/> instead.<br/>Setting its value to <c>true</c> before returning from an event handler prevents propagation<br/>of the event. In later implementations, setting this to <c>false</c> does nothing.<br/>See <see href="https://developer.mozilla.org#browser_compatibility">Browser compatibility</see> for details.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value. The value <c>true</c> means that the event must not be propagated further.</value>
</EventCancelBubble>
<EventBubbles>
<summary>
The <strong><c>bubbles</c></strong> read-only property of the <see cref="Event"/> interface indicates whether the event bubbles up through the DOM tree or not.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>See <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">Event bubbling</see> for more information on bubbling.</para></blockquote>
<para>-<see cref="Event.StopPropagation"/> to prevent further propagation of the current event in the capturing and bubbling phases<br/>-<see cref="Event.StopImmediatePropagation"/> to not call any further listeners for the same event at the same level in the DOM<br/>-<see cref="Event.PreventDefault"/> to allow propagation to continue but to disallow the browser to perform its default action should no listeners handle the event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value, which is <c>true</c> if the event bubbles up through the DOM tree.</value>
</EventBubbles>
<EventPreventDefault>
<summary>
The <strong><c>preventDefault()</c></strong> method of the <see cref="Event"/> interface tells the {{Glossary("user agent")}} that the event is being explicitly handled, so its default action, such as page scrolling, link navigation, or pasting text, should not be taken.
</summary>
<remarks>
<para>The event continues to propagate as usual,<br/>unless one of its event listeners calls<br/><see cref="Event.StopPropagation"/><br/>or <see cref="Event.StopImmediatePropagation"/>,<br/>either of which terminates propagation at once.</para><para>As noted below, calling <strong><c>preventDefault()</c></strong> for a<br/>non-cancelable event, such as one dispatched via<br/><see cref="EventTarget.DispatchEvent"/>, without specifying<br/><c>cancelable: true</c> has no effect.</para><para>If a passive listener calls <c>preventDefault()</c>, nothing will happen and a console warning may be generated.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Look for better alternatives than using <c>preventDefault()</c> to block default actions. For example, you can use the <c>disabled</c> or <c>readonly</c> attribute on a form control to prevent it from being interacted with, use <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Guides/Constraint_validation">HTML constraint validation</see> to reject invalid input, or use the <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow">overflow</see> property to prevent scrolling.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</EventPreventDefault>
<EventExplicitOriginalTarget>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The read-only <strong><c>explicitOriginalTarget</c></strong> property of the <see cref="Event"/> interface returns the non-anonymous original target of the event.
</summary>
<remarks>
<para>If the event was retargeted for some reason other than an anonymous boundary crossing, this will be set to the target before the retargeting occurs.</para><para>For example, mouse events are retargeted to their parent node when they happen over text nodes (see <see href="https://bugzil.la/185889">Firefox bug 185889</see>), and in that case <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget"><c>currentTarget</c></see> will show the parent while this property will show the text node.</para><para>This property also differs from <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget"><c>originalTarget</c></see> in that it will never contain anonymous content.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>Returns the <see cref="EventTarget"/> object, or null if there isn't one.</value>
</EventExplicitOriginalTarget>
<EventStopImmediatePropagation>
<summary>
The <strong><c>stopImmediatePropagation()</c></strong> method of the<br/><see cref="Event"/> interface prevents other listeners of the same event from being called.
</summary>
<remarks>
<para>If several listeners are attached to the same element for the same event type, they are called in the order in which they were added. If <c>stopImmediatePropagation()</c> is invoked during one such call, no remaining listeners will be called, either on that element or any other element.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</EventStopImmediatePropagation>
<EventInitEvent>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Event.initEvent()</c></strong> method is used to initialize the<br/>value of an <see cref="Event"/> created using <see cref="Document.CreateEvent"/>.
</summary>
<remarks>
<para>Events initialized in this way must have been created with the<br/><see cref="Document.CreateEvent"/> method.<br/>This method must be called to set the event<br/>before it is dispatched, using <see cref="EventTarget.DispatchEvent"/>.<br/>Once dispatched, it doesn&amp;apos;t do anything anymore.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>Do not use this method anymore as it is deprecated.</strong><br/>Instead use specific event constructors, like <see cref="Event.Event"/>.<br/>The section on <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events#creating_and_dispatching_events">Creating and dispatching events</see> gives more information about the way to use these.</para></blockquote>
<para>-The constructor to use instead of this deprecated method:<br/><see cref="Event.Event"/>. To create more specific event interfaces than <c>Event</c>, use the constructor defined for the desired event interface.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None.</returns>
</EventInitEvent>
<EventIsTrusted>
<summary>
The <strong><c>isTrusted</c></strong> read-only property of the<br/><see cref="Event"/> interface is a boolean value that is <c>true</c><br/>when the event was generated by the user agent (including via user actions and programmatic methods such as <see cref="HTMLElement.Focus"/>),<br/>and <c>false</c> when the event was dispatched via<br/><see cref="EventTarget.DispatchEvent"/>.<br/>The only exception is the <c>click</c> event, which initializes the <c>isTrusted</c><br/>property to <c>false</c> in user agents.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value.</value>
</EventIsTrusted>
<EventStopPropagation>
<summary>
The <strong><c>stopPropagation()</c></strong> method of the <see cref="Event"/><br/>interface prevents further propagation of the current event in the capturing and<br/>bubbling phases. It does not, however, prevent any default behaviors from occurring; for<br/>instance, clicks on links are still processed. If you want to stop those behaviors, see<br/>the <see cref="Event.PreventDefault"/> method. It also does not<br/>prevent propagation to other event-handlers of the current element. If you want to stop those,<br/>see <see cref="Event.StopImmediatePropagation"/>.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None.</returns>
</EventStopPropagation>
<EventEventPhase>
<summary>
The <strong><c>eventPhase</c></strong> read-only property of the<br/><see cref="Event"/> interface indicates which phase of the event flow is currently<br/>being evaluated.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>Returns an integer value which specifies the current evaluation phase of the event<br/>flow. Possible values are:</value>
</EventEventPhase>
<EventDefaultPrevented>
<summary>
The <strong><c>defaultPrevented</c></strong> read-only property of the <see cref="Event"/> interface returns a boolean value indicating whether or not the call to <see cref="Event.PreventDefault"/> canceled the event.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value, where <c>true</c> indicates that the default <see href="https://developer.mozilla.org/en-US/docs/Glossary/user agent">user agent</see> action was prevented, and <c>false</c> indicates that it was not.</value>
</EventDefaultPrevented>
<EventComposed>
<summary>
The read-only <strong><c>composed</c></strong> property of the<br/><see cref="Event"/> interface returns a boolean value which indicates whether<br/>or not the event will propagate across the shadow DOM boundary into the standard DOM.
</summary>
<remarks>
<para>All UA-dispatched UI events are composed (click/touch/mouseover/copy/paste, etc.). Most<br/>other types of events are not composed, and so will return <c>false</c>. For<br/>example, this includes synthetic events that are created without their<br/><c>composed</c> option set to <c>true</c>.</para><para>Propagation only occurs if the <see cref="Event.Bubbles"/> property is also<br/><c>true</c>. However, capturing only composed events are also handled at host as<br/>if they were in <c>AT_TARGET</c> phase. You can determine the path the event will<br/>follow through the shadow root to the DOM root by calling<br/><see cref="Event.ComposedPath"/>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composed"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value which is <c>true</c> if the event will cross from the<br/>shadow DOM into the standard DOM after reaching the shadow root. (That is, the first<br/>node in the shadow DOM in which the event began to propagate.)If this value is <c>false</c>, the shadow root will be the last node to be<br/>offered the event.</value>
</EventComposed>
<EventCurrentTarget>
<summary>
The <strong><c>currentTarget</c></strong> read-only property of the <see cref="Event"/> interface identifies the element to which the event handler has been attached.
</summary>
<remarks>
<para>This will not always be the same as the element on which the event was fired, because the event may have fired on a descendant of the element with the handler, and then <see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">bubbled</see> up to the element with the handler. The element on which the event was fired is given by <see cref="Event.Target"/>.</para><para>Note that the value of <c>currentTarget</c> is only available in a handler for the event. Outside an event handler it will be <c>null</c>. This means that, for example, if you take a reference to the <c>Event</c> object inside an event handler and then access its <c>currentTarget</c> property outside the event handler, its value will be <c>null</c>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling">Learn: Event bubbling</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="EventTarget"/> representing the object to which the current event handler is attached.</value>
</EventCurrentTarget>
<EventEvent>
<summary>
The <strong><c>Event()</c></strong> constructor creates a new <see cref="Event"/> object. An event created in this way is called a <strong>synthetic event</strong>, as opposed to an event fired by the browser, and can be <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events#creating_and_dispatching_events">dispatched</see> by a script.
</summary>
<remarks>
<para>-<see cref="Event"/><br/>-<see cref="EventTarget.DispatchEvent"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events#creating_and_dispatching_events">Creating and dispatching events</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/Event"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A new <see cref="Event"/> object.</returns>
</EventEvent>
<EventType>
<summary>
The <strong><c>type</c></strong> read-only property of the <see cref="Event"/><br/>interface returns a string containing the event&amp;apos;s type. It is set when the event is<br/>constructed and is the name commonly used to refer to the specific event, such as<br/><c>click</c>, <c>load</c>, or <c>error</c>.
</summary>
<remarks>
<para>-<see cref="EventTarget.AddEventListener"/><br/>-<see cref="EventTarget.RemoveEventListener"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/type"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string containing the type of <see cref="Event"/>.</value>
</EventType>
<EventOriginalTarget>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The read-only <strong><c>originalTarget</c></strong> property of the <see cref="Event"/> interface returns the original target of the event before any retargetings. Unlike <see cref="Event.ExplicitOriginalTarget"/> it can also be native anonymous content.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EventOriginalTarget>
<EventComposedPath>
<summary>
The <strong><c>composedPath()</c></strong> method of the <see cref="Event"/><br/>interface returns the event&amp;apos;s path which is an array of the objects on which listeners<br/>will be invoked. This does not include nodes in shadow trees if the shadow root was<br/>created with its <see cref="ShadowRoot.Mode"/> closed.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An array of <see cref="EventTarget"/> objects representing the objects on which an<br/>event listener will be invoked.</returns>
</EventComposedPath>
<EventReturnValue>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <see cref="Event"/> property<br/><strong><c>returnValue</c></strong> indicates whether the default action for<br/>this event has been prevented or not.
</summary>
<remarks>
<para>It is set to <c>true</c> by<br/>default, allowing the default action to occur. Setting this property to<br/><c>false</c> prevents the default action.</para><blockquote class="NOTE"><h5>NOTE</h5><para>While <c>returnValue</c> has been adopted into the DOM<br/>standard, it is present primarily to support existing code. Use<br/><see cref="Event.PreventDefault"/>, and<br/><see cref="Event.DefaultPrevented"/> instead of this historical<br/>property.</para></blockquote>
<para>-<see cref="HTMLDialogElement.ReturnValue"/>: the return value for the {{HTMLElement("dialog")}}.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value which is <c>true</c> if the event has not been<br/>canceled; otherwise, if the event has been canceled or the default has been prevented,<br/>the value is <c>false</c>.The value of <c>returnValue</c> is the opposite of the value returned by<br/><see cref="Event.DefaultPrevented"/>.</value>
</EventReturnValue>
<EventTimeStamp>
<summary>
The <strong><c>timeStamp</c></strong> read-only property of the <see cref="Event"/> interface returns the time (in milliseconds) at which the event was created.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>This value is the number of milliseconds elapsed from the beginning of the time origin until the event was created.<br/>If the global object is <see cref="Window"/>, the time origin is the moment the user clicked on the link, or the script that initiated the loading of the document.<br/>In a worker, the time origin is the moment of creation of the worker.The value is a <see cref="DOMHighResTimeStamp"/> accurate to 5 microseconds (0.005 ms), but the <see href="https://developer.mozilla.org#reduced_time_precision">precision is reduced</see> to prevent <see href="https://developer.mozilla.org/en-US/docs/Glossary/Fingerprinting">fingerprinting</see>.</value>
</EventTimeStamp>
<EventSrcElement>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The deprecated <strong><c>Event.srcElement</c></strong> is an alias for the <see cref="Event.Target"/> property. Use <see cref="Event.Target"/> instead.
</summary>
<remarks>
<para>-<see cref="Window.Event"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
</EventSrcElement>
</docs>