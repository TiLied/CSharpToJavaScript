<docs>
<IdleDeadline>
<summary>
The <c>IdleDeadline</c> interface is used as the data type of the input parameter to idle callbacks established by calling <see cref="Window.RequestIdleCallback"/>. It offers a method, <see cref="IdleDeadline.TimeRemaining"/>, which lets you determine how much longer the user agent estimates it will remain idle and a property, <see cref="IdleDeadline.DidTimeout"/>, which lets you determine if your callback is executing because its timeout duration expired.
</summary>
<remarks>
<para>To learn more about how request callbacks work, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API">Collaborative Scheduling of Background Tasks</see>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API">Cooperative Scheduling of Background Tasks API</see><br/>-<see cref="Window.RequestIdleCallback"/><br/>-<see cref="Window.CancelIdleCallback"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline"> <em>See also on MDN</em> </seealso></para>
</remarks>
</IdleDeadline>
<IdleDeadlineTimeRemaining>
<summary>
The <strong><c>timeRemaining()</c></strong> method<br/>on the <see cref="IdleDeadline"/> interface returns the estimated number of<br/>milliseconds remaining in the current idle period. The callback can call this method at<br/>any time to determine how much time it can continue to work before it must return. For<br/>example, if the callback finishes a task and has another one to begin, it can call<br/><c>timeRemaining()</c> to see if there&amp;apos;s enough time to complete the next task. If<br/>there isn&amp;apos;t, the callback can just return immediately, or look for other work to do with<br/>the remaining time.
</summary>
<remarks>
<para>By the time <c>timeRemaining()</c> reaches 0, it is suggested that the callback<br/>should return control to the user agent&amp;apos;s event loop.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API">Collaborative Scheduling of Background Tasks</see><br/>-<see cref="IdleDeadline"/><br/>-<see cref="Window.RequestIdleCallback"/><br/>-<see cref="Window.CancelIdleCallback"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline/timeRemaining"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="DOMHighResTimeStamp"/> value (which is a floating-point number)<br/>representing the number of milliseconds the user agent estimates are left in the current<br/>idle period. The value is ideally accurate to within about 5 microseconds.If the <see cref="IdleDeadline"/> object's <see cref="IdleDeadline.DidTimeout"/><br/>property is true, this method returns zero.</returns>
</IdleDeadlineTimeRemaining>
<IdleDeadlineDidTimeout>
<summary>
The read-only <strong><c>didTimeout</c></strong> property on the<br/><strong><see cref="IdleDeadline"/></strong> interface is a Boolean value which<br/>indicates whether or not the idle callback is being invoked because the timeout interval<br/>specified when <see cref="Window.RequestIdleCallback"/> was called has expired.
</summary>
<remarks>
<para>If <c>didTimeout</c> is <c>true</c>, the <c>IdleDeadline</c> object&amp;apos;s<br/><see cref="IdleDeadline.TimeRemaining"/> method will return<br/>approximately 0.</para><para>Idle callbacks support the concept of a timeout in order to ensure that whatever task<br/>they&amp;apos;re meant to perform actually happens, even if the user agent never has enough idle<br/>time available. Your callback will typically check the value of <c>didTimeout</c><br/>if it needs to perform an action even if the browser is too busy to grant you the time;<br/>you should react by performing the needed task or, ideally, a minimal amount of work<br/>that can be done to keep things moving along, then schedule a new callback to try again<br/>to get the rest of the work done.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API">Collaborative Scheduling of Background Tasks</see><br/>-<see cref="IdleDeadline"/><br/>-<see cref="Window.RequestIdleCallback"/><br/>-<see cref="Window.CancelIdleCallback"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline/didTimeout"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A Boolean which is <c>true</c> if the callback is running due to the callback&amp;apos;s<br/>timeout period elapsing or <c>false</c> if the callback is running because the<br/>user agent is idle and is offering time to the callback.</value>
</IdleDeadlineDidTimeout>
</docs>