<docs>
<Scheduler>
<summary>
The <strong><c>Scheduler</c></strong> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API">Prioritized Task Scheduling API</see> provides methods for scheduling prioritized tasks.
</summary>
<remarks>
<para>A <c>Scheduler</c> can be accessed from the global object using <see cref="Window.Scheduler"/> or <see cref="WorkerGlobalScope.Scheduler"/> within a worker.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Scheduler"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Scheduler>
<SchedulerYield>
<summary>
The <strong><c>yield()</c></strong> method of the <see cref="'Scheduler'"/> interface is used for yielding to the <see href="https://developer.mozilla.org/en-US/docs/Glossary/Main_thread">main thread</see> during a task and continuing execution later, with the continuation scheduled as a prioritized task (see the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API">Prioritized Task Scheduling API</see> for more information). This allows long-running work to be broken up so the browser stays responsive.
</summary>
<remarks>
<para>The task can continue when the promise returned by the method is resolved. The priority for when the promise is resolved defaults to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API#user-visible"><c>&amp;quot;user-visible&amp;quot;</c></see>, but can inherit a different priority if the <c>yield()</c> call occurs within a <see cref="'Scheduler.PostTask'"/> callback.</para><para>In addition, the continuation of work after the <c>yield()</c> call can be canceled if it occurs within a <c>postTask()</c> callback and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Scheduler/postTask#aborting_tasks">task is aborted</see>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API">Prioritized Task Scheduling API</see><br/>-<see cref="'Scheduler'"/><br/>-<see cref="'Scheduler.PostTask'"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Scheduler/yield"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>Returns a {{jsxref('Promise')}} that is fulfilled with {{jsxref('undefined')}}, or rejected with an <see cref="'AbortSignal.Reason'"/>.</returns>
</SchedulerYield>
<SchedulerPostTask>
<summary>
The <strong><c>postTask()</c></strong> method of the <see cref="Scheduler"/> interface is used for adding tasks to be <see href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API">scheduled</see> according to their <see href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API#task_priorities">priority</see>.
</summary>
<remarks>
<para>The method allows users to optionally specify a minimum delay before the task will run, a priority for the task, and a signal that can be used to modify the task priority and/or abort the task.<br/>It returns a promise that is resolved with the result of the task callback function, or rejected with the abort reason or an error thrown in the task.</para><para>Task priority can be <see href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API#mutable_and_immutable_task_priority">mutable or immutable</see>.<br/>If the task priority will never need to change then it should be set using the <c>options.priority</c> parameter (any priority set through a signal will then be ignored).<br/>You can still pass an <see cref="AbortSignal"/> (which has no priority) or <see cref="TaskSignal"/> to the <c>options.signal</c> parameter for aborting the task.</para><para>If the task priority might need to be changed the <c>options.priority</c> parameter must not be set.<br/>Instead a <see cref="TaskController"/> should be created and its <see cref="TaskSignal"/> should be passed to <c>options.signal</c>.<br/>The task priority will be initialized from the signal priority, and can later be modified using the signal's associated <see cref="TaskController"/>.</para><para>If no priority is set then the task priority defaults to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API#user-visible"><c>&amp;quot;user-visible&amp;quot;</c></see>.</para><para>If a delay is specified and greater than 0, then the execution of the task will be delayed for at least that many milliseconds.<br/>Otherwise the task is immediately scheduled for prioritization.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Scheduler/postTask"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>Returns a <see cref="Promise"/> that is resolved with the return value of the <c>callback</c> function, or which may be rejected with the <c>signal</c>'s abort reason (<see cref="AbortSignal.Reason"/>).<br/>The promise may also be rejected with an error thrown by the callback during execution.</returns>
</SchedulerPostTask>
</docs>