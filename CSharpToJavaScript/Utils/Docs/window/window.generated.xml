<docs>
<Window>
<summary>
The <strong><c>Window</c></strong> interface represents a window containing a <see href="https://developer.mozilla.org/en-US/docs/Glossary/DOM">DOM</see> document; the <c>document</c> property points to the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document">DOM document</see> loaded in that window.
</summary>
<remarks>
<para>A window for a given document can be obtained using the <see cref="Document.DefaultView"/> property.</para><para>A global variable, <c>window</c>, representing the window in which the script is running, is exposed to JavaScript code.</para><para>The <c>Window</c> interface is home to a variety of functions, namespaces, objects, and constructors which are not necessarily directly associated with the concept of a user interface window. However, the <c>Window</c> interface is a suitable place to include these items that need to be globally available. Many of these are documented in the <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference">JavaScript Reference</see> and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">DOM Reference</see>.</para><para>In a tabbed browser, each tab is represented by its own <c>Window</c> object; the global <c>window</c> seen by JavaScript code running within a given tab always represents the tab in which the code is running. That said, even in a tabbed browser, some properties and methods still apply to the overall window that contains the tab, such as <see cref="Window.ResizeTo"/> and <see cref="Window.InnerHeight"/>. Generally, anything that can't reasonably pertain to a tab pertains to the window instead.</para><para></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Window>
<WindowCaches>
<summary>
The <strong><c>caches</c></strong> read-only property of the <see cref="Window"/> interface returns the <see cref="CacheStorage"/> object associated with the current context.<br/>This object enables functionality such as storing assets for offline use, and generating custom responses to requests.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">Service Workers</see><br/>-<see cref="CacheStorage"/><br/>-<see cref="Cache"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/caches"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="CacheStorage"/> object.</value>
</WindowCaches>
<WindowGetComputedStyle>
<summary>
The<br/><strong><c>Window.getComputedStyle()</c></strong> method returns an object<br/>containing the values of all CSS properties of an element, after applying active<br/>stylesheets and resolving any basic computation those values may contain.
</summary>
<remarks>
<para>Individual CSS property values are accessed through APIs provided by the returned <see cref="CSSStyleDeclaration"/> object, or by indexing with CSS property names. The values returned by <c>getComputedStyle</c> are <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Value_processing#resolved_value">resolved values</see>.</para>
<para>-<see cref="Window.GetDefaultComputedStyle"/><br/>-<see cref="CSSStyleDeclaration.GetPropertyValue"/><br/>-<see cref="Element.ComputedStyleMap"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Value_processing#resolved_value">Resolved value</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <strong>live</strong> <see cref="CSSStyleDeclaration"/> object, which updates automatically when the element's styles are changed.Note that:The returned object is the same <see cref="CSSStyleDeclaration"/> type as the object returned from the element's <see cref="HTMLElementstyle"/> property. However, the two objects have different purposes:</returns>
</WindowGetComputedStyle>
<WindowPopstate>
<summary>
The <strong><c>popstate</c></strong> event of the <see cref="Window"/> interface is fired when the active history entry changes while the user navigates the session history. It changes the current history entry to that of the last page the user visited or, if <see cref="History.PushState"/> has been used to add a history entry to the history stack, that history entry is used instead.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">Manipulating the browser history (the History API)</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event">Window: <c>hashchange</c> event</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowPopstate>
<WindowWindow>
<summary>
The <strong><c>window</c></strong> property of a <see cref="Window"/> object points to the window object itself.
</summary>
<remarks>
<para>Thus, the following expressions all return the same window object:</para><para>In web pages, the window object is also a <strong>global object</strong>. This means:</para><para>The point of having the <c>window</c> property refer to the object itself, was likely to make it easy to refer to the global object. Otherwise, you&amp;apos;d have to do a manual <c>let window = this;</c> assignment at the top of your script.</para><para>Another reason, is that without this property you wouldn't be able to write, for example, <see cref="Window.Open"/>. You'd have to use <c>open(&amp;apos;https://google.com/&amp;apos;)</c> instead.</para><para>Yet another reason to use this property, is for libraries which wish to offer OOP-versions, and non-OOP versions (especially JavaScript modules). For example, if we refer to &amp;quot;this.window.location.href&amp;quot;, a <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">JavaScript module</see> could define a property called &amp;quot;window&amp;quot; inside of a class it defined (since no global &amp;quot;window&amp;quot; variable exists for it by default) which could be created after passing in a window object to the module class&amp;apos; constructor. Thus, &amp;quot;this.window&amp;quot; inside of its functions would refer to that window object. In the non-namespaced version, &amp;quot;this.window&amp;quot; would refer back to &amp;quot;window&amp;quot;, and also be able to readily get the document location. Another advantage, is that the objects of such a class (even if the class were defined outside of a module) could change their reference to the window at will, they would not be able to do this if they had hard-coded a reference to &amp;quot;window&amp;quot;. The default in the class could still be set as the current window object.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/window"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowWindow>
<WindowStatus>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>status</c></strong> property of the<br/><see cref="Window"/> interface was originally intended to set the text in the status<br/>bar at the bottom of the browser window. However, the HTML standard now requires<br/>setting <c>window.status</c> to have no effect on the text displayed in the<br/>status bar.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/status"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</WindowStatus>
<WindowIndexedDB>
<summary>
The <strong><c>indexedDB</c></strong> read-only property of the <see cref="Window"/> interface provides a mechanism for applications to<br/>asynchronously access the capabilities of indexed databases.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB">Using IndexedDB</see><br/>-Starting transactions: <see cref="IDBDatabase"/><br/>-Using transactions: <see cref="IDBTransaction"/><br/>-Setting a range of keys: <see cref="IDBKeyRange"/><br/>-Retrieving and making changes to your data: <see cref="IDBObjectStore"/><br/>-Using cursors: <see cref="IDBCursor"/><br/>-Reference example: <see href="https://github.com/mdn/dom-examples/tree/main/to-do-notifications">To-do Notifications</see> (<see href="https://mdn.github.io/dom-examples/to-do-notifications/">View the example live</see>).<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/indexedDB"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An <see cref="IDBFactory"/> object.</value>
</WindowIndexedDB>
<WindowMoveBy>
<summary>
The <strong><c>moveBy()</c></strong> method of the <see cref="Window"/><br/>interface moves the current window by a specified amount.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This function moves the window relative to its current<br/>location. In contrast, <see cref="Window.MoveTo"/> moves the window to an absolute<br/>location.</para></blockquote>
<para>-<see cref="Window.MoveTo"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowMoveBy>
<WindowReportError>
<summary>
The <strong><c>reportError()</c></strong> method of the <see cref="Window"/> interface may be used to report errors to the console or event handlers of global scopes, emulating an uncaught JavaScript exception.
</summary>
<remarks>
<para>This feature is primarily intended for custom event-dispatching or callback-manipulating libraries.<br/>Libraries can use this feature to catch errors in callback code and re-throw them to the top level handler.<br/>This ensures that an exception in one callback will not prevent others from being handled, while at the same time ensuring that stack trace information is still readily available for debugging at the top level.</para>
<para>-<see cref="Window"/><br/>-<see cref="WorkerGlobalScope.ReportError"/><br/>-<see cref="Window"/>: <see cref="Windowerror"/> event<br/>-<see cref="WorkerGlobalScope"/>: <see cref="WorkerGlobalScopeerror"/> event<br/>-<see cref="HTMLElement"/>: <see cref="HTMLElementerror"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/reportError"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowReportError>
<WindowScrollByLines>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>Window.scrollByLines()</c></strong> method scrolls the document by<br/>the specified number of lines.
</summary>
<remarks>
<para>-<see cref="Window.Scroll"/><br/>-<see cref="Window.ScrollBy"/><br/>-<see cref="Window.ScrollByPages"/><br/>-<see cref="Window.ScrollTo"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByLines"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowScrollByLines>
<WindowWebkitConvertPointFromNodeToPage>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> Given a <see cref="WebKitPoint"/> specified in a particular DOM <see cref="Node"/>'s coordinate system, the <see cref="Window"/> method <strong><c>webkitConvertPointFromNodeToPage()</c></strong> returns a <c>Point</c> which specifies the same position in the page&amp;apos;s coordinate system. This method is non-standard and <strong>should not be used</strong>.
</summary>
<remarks>
<blockquote class="WARNING"><h5>WARNING</h5><para>Please review the <see href="https://developer.mozilla.org#browser_compatibility">Browser compatibility</see> section before using this method, as it's not widely supported (nor is the <see cref="WebKitPoint"/> object it uses).</para></blockquote>
<para>-<see cref="Window.WebkitConvertPointFromPageToNode"/><br/>-Mozilla implementation bug: <see href="https://bugzil.la/850806">Firefox bug 850806</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/webkitConvertPointFromNodeToPage"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="WebKitPoint"/> object specifying a point in the page's coordinate system.</returns>
</WindowWebkitConvertPointFromNodeToPage>
<WindowMatchMedia>
<summary>
The <see cref="Window"/> interface's <strong><c>matchMedia()</c></strong> method<br/>returns a new <see cref="MediaQueryList"/> object that can then be used to determine if<br/>the <see cref="Document"/> matches the <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries">media query</see> string,<br/>as well as to monitor the document to detect when it matches (or stops matching) that<br/>media query.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries">Media queries</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Testing_media_queries">Using media queries from code</see><br/>-<see cref="MediaQueryList"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A new <see cref="MediaQueryList"/> object for the media query. Use this object's<br/>properties and events to detect matches and to monitor for changes to those matches over<br/>time.</returns>
</WindowMatchMedia>
<WindowBlur>
<summary>
The <strong><c>blur</c></strong> event fires when an element has lost focus.
</summary>
<remarks>
<para>The opposite of <c>blur</c> is <see cref="Windowfocus"/>.</para><para>This event is not cancelable and does not bubble.</para>
<para>-Related event: <see cref="Windowfocus"/><br/>-This event on <c>Element</c> targets: <see cref="Elementblur"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/blur"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowBlur>
<WindowUnhandledrejection>
<summary>
The <strong><c>unhandledrejection</c></strong> event is sent to the global scope of a script when a JavaScript {{jsxref("Promise")}} that has no rejection handler is rejected; typically, this is the <see cref="Window"/>, but may also be a <see cref="Worker"/>.
</summary>
<remarks>
<para>This is useful for debugging and for providing fallback error handling for unexpected situations.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#promise_rejection_events">Promise rejection events</see><br/>-<see cref="Windowrejectionhandled"/> event<br/>-<see cref="Promise"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowUnhandledrejection>
<WindowFullScreen>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>fullScreen</c></strong> property of the <c>Window</c><br/>interface indicates whether the window is displayed in full screen mode or not.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/fullScreen"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value with <c>true</c> meaning that the window is in full-screen mode and <c>false</c> meaning it isn&amp;apos;t.</value>
</WindowFullScreen>
<WindowOuterHeight>
<summary>
The <strong><c>Window.outerHeight</c></strong> read-only property returns the height in pixels of the whole browser window, including any sidebar, window chrome, and window-resizing borders/handles.
</summary>
<remarks>
<para>-<see cref="Window.InnerHeight"/><br/>-<see cref="Window.InnerWidth"/><br/>-<see cref="Window.OuterWidth"/><br/>-<see cref="Window.ResizeBy"/><br/>-<see cref="Window.ResizeTo"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowOuterHeight>
<WindowVrdisplaydisconnect>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>vrdisplaydisconnect</c></strong> event of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see> is fired when a compatible VR display is disconnected from the computer.
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplaydisconnect"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowVrdisplaydisconnect>
<WindowOrientationchange>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <c>orientationchange</c> event is fired when the orientation of the device has changed.
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para><para>This event is deprecated. Listen for the <see cref="ScreenOrientation.Change"/> event of the <see cref="ScreenOrientation"/> interface instead.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/orientationchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowOrientationchange>
<WindowSelf>
<summary>
The <strong><c>Window.self</c></strong> read-only property returns the window itself, as a <see href="https://developer.mozilla.org/en-US/docs/Glossary/WindowProxy">WindowProxy</see>. It can be used with dot notation on a <c>window</c> object (that is, <c>window.self</c>) or standalone (<c>self</c>). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in {{domxref(&amp;quot;Worker&amp;quot;, &amp;quot;Web Workers&amp;quot;, &amp;quot;&amp;quot;, 1)}}. By using <c>self</c>, you can refer to the global scope in a way that will work not only in a window context (<c>self</c> will resolve to <c>window.self</c>) but also in a worker context (<c>self</c> will then resolve to <see cref="WorkerGlobalScope.Self"/>).
</summary>
<remarks>
<para>-Its <c>Worker</c> equivalent, <see cref="WorkerGlobalScope.Self"/>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/self"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see href="https://developer.mozilla.org/en-US/docs/Glossary/WindowProxy">WindowProxy</see> object.</value>
</WindowSelf>
<WindowBeforeunload>
<summary>
The <strong><c>beforeunload</c></strong> event is fired when the current window, contained document, and associated resources are about to be unloaded. The document is still visible and the event is still cancelable at this point.
</summary>
<remarks>
<para>The main use case for this event is to trigger a browser-generated confirmation dialog that asks users to confirm if they <strong>really</strong> want to leave the page when they try to close or reload it, or navigate somewhere else. This is intended to help prevent loss of unsaved data.</para><para>The dialog can be triggered in the following ways:</para><para>The last two mechanisms are legacy features; best practice is to trigger the dialog by invoking <c>preventDefault()</c> on the event object, while also setting <c>returnValue</c> to support legacy cases.</para>
<para>-<see cref="BeforeUnloadEvent"/> interface<br/>-Related events:-<see cref="DocumentDOMContentLoaded"/><br/>-<see cref="Documentreadystatechange"/><br/>-<see cref="Windowload"/><br/>-<see cref="Windowunload"/><br/><br/>-<see href="https://developer.chrome.com/docs/web-platform/page-lifecycle-api#developer-recommendations-for-each-state">Page Lifecycle API</see> provides more useful guidance on handling page lifecycle behavior in your web apps.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowBeforeunload>
<WindowDeviceorientation>
<summary>
The <strong><c>deviceorientation</c></strong> event is fired when fresh data is available from an orientation sensor about the current orientation of the device as compared to the Earth coordinate frame. This data is gathered from a magnetometer inside the device.
</summary>
<remarks>
<para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientation_events/Orientation_and_motion_data_explained">Orientation and motion data explained</see> for details.</para><para>This event is not cancelable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/devicemotion_event"><c>devicemotion</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientation_events/Detecting_device_orientation">Detecting device orientation</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientation_events/Orientation_and_motion_data_explained">Orientation and motion data explained</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/deviceorientation"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowDeviceorientation>
<WindowQueryLocalFonts>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>window.queryLocalFonts()</c></strong> method returns a {{jsxref("Promise")}} that fulfills with an array of <see cref="FontData"/> objects representing the font faces available locally.
</summary>
<remarks>
<para>To use this method, the user must grant permission to access <c>local-fonts</c> (permission status can be queried via the {{domxref(&amp;quot;Permissions API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}). In addition, this feature may be blocked by a <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Permissions_Policy">Permissions Policy</see> set on your server.</para>
<para>-{{domxref(&amp;quot;Local Font Access API&amp;quot;, &amp;quot;Local Font Access API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/local-fonts">Use advanced typography with local fonts</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face">@font-face</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/queryLocalFonts"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} that fulfills with an array of <see cref="FontData"/> objects representing the font faces available locally.</returns>
</WindowQueryLocalFonts>
<WindowClearTimeout>
<summary>
The <strong><c>clearTimeout()</c></strong> method of the <see cref="Window"/> interface cancels a timeout previously established by calling <see cref="Window.SetTimeout"/>.
</summary>
<remarks>
<para>If the parameter provided does not identify a previously established action,<br/>this method does nothing.</para>
<para>-<see cref="Window.SetTimeout"/><br/>-<see cref="WorkerGlobalScope.ClearTimeout"/><br/>-<see cref="Window.ClearInterval"/><br/>-<see cref="Window.CancelAnimationFrame"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowClearTimeout>
<WindowDocumentPictureInPicture>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>documentPictureInPicture</c></strong> read-only property of the<br/><see cref="Window"/> interface returns a reference to the <see cref="DocumentPictureInPicture"/> object for the current document context.
</summary>
<remarks>
<para>-{{domxref(&amp;quot;Document Picture-in-Picture API&amp;quot;, &amp;quot;Document Picture-in-Picture API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Picture-in-Picture_API/Using">Using the Document Picture-in-Picture API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/documentPictureInPicture"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="DocumentPictureInPicture"/> object instance.</value>
</WindowDocumentPictureInPicture>
<WindowFrames>
<summary>
Returns the window itself, which is an array-like object, listing the direct sub-frames<br/>of the current window.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/frames"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A list of frame objects. It is similar to an<br/>array in that it has a <c>length</c> property and its items can be accessed<br/>using the <c>[i]</c> notation.</value>
</WindowFrames>
<WindowShowDirectoryPicker>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>showDirectoryPicker()</c></strong> method of the<br/><see cref="Window"/> interface displays a directory picker which allows the user to<br/>select a directory.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API">File System API</see><br/>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/file-system-access">The File System Access API: simplifying access to local files</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} whose fulfillment handler receives a <see cref="'FileSystemDirectoryHandle'"/> object.</returns>
</WindowShowDirectoryPicker>
<WindowFetch>
<summary>
The <strong><c>fetch()</c></strong> method of the <see cref="Window"/> interface starts the process of fetching a resource from the network, returning a promise that is fulfilled once the response is available.
</summary>
<remarks>
<para>The promise resolves to the <see cref="Response"/> object representing the response to your request.</para><para>A <c>fetch()</c> promise only rejects when the request fails, for example, because of a badly-formed request URL or a network error.<br/>A <c>fetch()</c> promise <strong>does not</strong> reject if the server responds with HTTP status codes that indicate errors (<c>404</c>, <c>504</c>, etc.).<br/>Instead, a <c>then()</c> handler must check the <see cref="Response.Ok"/> and/or <see cref="Response.Status"/> properties.</para><para>The <c>fetch()</c> method is controlled by the <c>connect-src</c> directive of <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy">Content Security Policy</see> rather than the directive of the resources it&amp;apos;s retrieving.</para><blockquote class="NOTE"><h5>NOTE</h5><para>The <c>fetch()</c> method's parameters are identical to those of the <see cref="Request.Request"/> constructor.</para></blockquote>
<para>-<see cref="WorkerGlobalScope.Fetch"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">ServiceWorker API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CORS">HTTP access control (CORS)</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} that resolves to a <see cref="Response"/> object.</returns>
</WindowFetch>
<WindowStop>
<summary>
The <strong><c>window.stop()</c></strong> stops further resource loading in the current<br/>browsing context, equivalent to the stop button in the browser.
</summary>
<remarks>
<para>Because of how scripts are executed, this method cannot interrupt its parent<br/>document&amp;apos;s loading, but it will stop its images, new windows, and other still-loading<br/>objects.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/stop"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowStop>
<WindowCredentialless>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>window.credentialless</c></strong> read-only property returns a boolean that indicates whether the current document was loaded inside a credentialless <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see>, meaning that it is loaded in a new, ephemeral context.
</summary>
<remarks>
<para>This context doesn't have access to the network, cookies, and storage data associated with its origin. It uses a new context local to the top-level document lifetime. In return, the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy">Cross-Origin-Embedder-Policy</see> (COEP) embedding rules can be lifted, so documents with COEP set can embed third-party documents that do not.</para><para>See <see href="https://developer.mozilla.org/en-US/docs/Web/Security/IFrame_credentialless">IFrame credentialless</see> for a deeper explanation.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/credentialless"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean. A value of <c>true</c> indicates that the document was loaded inside a credentialless <c>&amp;lt;iframe&amp;gt;</c>; <c>false</c> indicates that it was not.</value>
</WindowCredentialless>
<WindowOriginAgentCluster>
<summary>
The <strong><c>originAgentCluster</c></strong> read-only property of the <see cref="Window"/> interface returns <c>true</c> if this window belongs to an <strong>origin-keyed </strong><strong><see href="https://tc39.es/ecma262/#sec-agent-clusters">agent cluster</see></strong>: this means that the operating system has provided dedicated resources (for example an operating system process) to this window&amp;apos;s origin that are not shared with windows from other origins.
</summary>
<remarks>
<para>Otherwise this property returns <c>false</c>.</para><para>Windows that are part of an origin-keyed agent cluster are subjects to some additional restrictions, compared with windows that are not. In particular, they cannot:</para><para>To request that the browser assign this window to an origin-keyed agent cluster, the server must send the <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin-Agent-Cluster">Origin-Agent-Cluster</see> response header.</para><para>Note that the origin-keyed agent cluster feature is only supported in <see href="https://developer.mozilla.org/en-US/docs/Glossary/Secure Context">Secure Context</see>. If a site is not a secure context, the <c>window.originAgentCluster</c> will always return <c>false</c>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin-Agent-Cluster">Origin-Agent-Cluster</see> HTTP response header<br/>-<see href="https://web.dev/articles/origin-agent-cluster">Requesting performance isolation with the Origin-Agent-Cluster header</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/originAgentCluster"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowOriginAgentCluster>
<WindowScroll>
<summary>
The <strong><c>Window.scroll()</c></strong> method scrolls the window to a<br/>particular place in the document.
</summary>
<remarks>
<para>-<see cref="Window.ScrollByLines"/><br/>-<see cref="Window.ScrollByPages"/><br/>-<see cref="Element.ScrollIntoView"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowScroll>
<WindowSizeToContent>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>Window.sizeToContent()</c></strong> method sizes the window<br/>according to its content. In order for it to work, the DOM content should be loaded when<br/>this function is called—for example, once the <see cref="DocumentDOMContentLoaded"/> event has<br/>been thrown.
</summary>
<remarks>
<para>Since Firefox 20, the minimal size of the window is clamped to prevent the window from<br/>being too small for the user to interact with.</para>
<para>-<see cref="Window"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sizeToContent"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowSizeToContent>
<WindowConfirm>
<summary>
<c>window.confirm()</c> instructs the browser to display a dialog with an optional message, and to wait until the user either confirms or cancels the dialog.
</summary>
<remarks>
<para>Under some conditions — for example, when the user switches tabs — the browser may not actually display a dialog, or may not wait for the user to confirm or cancel the dialog.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog">dialog</see> element<br/>-<see cref="Window.Alert"/><br/>-<see cref="Window.Prompt"/><br/>-<see href="https://alistapart.com/article/neveruseawarning/">Never Use a Warning When you Mean Undo</see> on A List Apart (2017)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A boolean indicating whether OK (<c>true</c>) or Cancel (<c>false</c>) was selected.<br/>If a browser is ignoring in-page dialogs, then the returned value is always <c>false</c>.</returns>
</WindowConfirm>
<WindowAlert>
<summary>
<c>window.alert()</c> instructs the browser to display a dialog with an optional message, and to wait until the user dismisses the dialog.
</summary>
<remarks>
<para>Under some conditions — for example, when the user switches tabs — the browser may not actually display a dialog, or may not wait for the user to dismiss the dialog.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog">dialog</see> element<br/>-<see cref="Window.Confirm"/><br/>-<see cref="Window.Prompt"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowAlert>
<WindowGamepaddisconnected>
<summary>
The <c>gamepaddisconnected</c> event is fired when the browser detects that a gamepad has been disconnected.
</summary>
<remarks>
<para>The event will not fire if disallowed by the document's <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/'Permissions-Policy/gamepad'">'Permissions-Policy/gamepad'</see> <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Permissions_Policy">Permissions Policy</see>.</para><para>This event is not cancelable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/gamepadconnected_event">gamepadconnected</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API">Using Gamepad API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/gamepaddisconnected"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowGamepaddisconnected>
<WindowReleaseEvents>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> Releases the window from trapping events of a specific type.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowReleaseEvents>
<WindowResize>
<summary>
The <strong><c>resize</c></strong> event fires when the document view (window) has been resized.
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para><para>In some earlier browsers it was possible to register <c>resize</c> event handlers on any HTML element. It is still possible to set <c>onresize</c> attributes or use <see cref="EventTarget.AddEventListener"/> to set a handler on any element. However, <c>resize</c> events are only fired on the <see cref="Window"/> object (i.e., returned by <see cref="Document.DefaultView"/>). Only handlers registered on the <c>window</c> object will receive <c>resize</c> events.</para><para>While the <c>resize</c> event fires only for the window nowadays, you can get resize notifications for other elements using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver">ResizeObserver</see> API.</para><para>If the resize event is triggered too many times for your application, see <see href="https://bencentra.com/code/2015/02/27/optimizing-window-resize.html">Optimizing window.onresize</see> to control the time after which the event fires.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/resize"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowResize>
<WindowDump>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>Window.dump()</c></strong> method logs messages to the browser&amp;apos;s standard output (<c>stdout</c>). If the browser was started from a terminal, output sent to <c>dump()</c> will appear in the terminal.
</summary>
<remarks>
<para>Output from <c>dump()</c> is <strong>not</strong> sent to the browser&amp;apos;s developer tools console. To log to the developer tools console, use <see href="https://developer.mozilla.org/en-US/docs/Web/API/console/log_static"><c>console.log()</c></see>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/dump"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowDump>
<WindowPrint>
<summary>
Opens the print dialog to print the current document.
</summary>
<remarks>
<para>If the document is still loading when this function is called, then the document will finish loading before opening the print dialog.</para><para>This method will block while the print dialog is open.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Printing">Printing</see><br/>-<see cref="Window.Beforeprint"/> event<br/>-<see cref="Window.Afterprint"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/print"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowPrint>
<WindowSessionStorage>
<summary>
The read-only <strong><c>sessionStorage</c></strong> property accesses a session <see cref="Storage"/> object for the current {{glossary("origin")}}. <c>sessionStorage</c> is similar to <see cref="Window.LocalStorage"/>; the difference is that while <c>localStorage</c> is partitioned by origin only, <c>sessionStorage</c> is partitioned by both origin and browser tabs (top-level browsing contexts). The data in <c>sessionStorage</c> is only kept for the duration of the page session.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API">Using the Web Storage API</see><br/>-<see cref="Window.LocalStorage"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Storage"/> object which can be used to access the current origin's<br/>session storage space.</value>
</WindowSessionStorage>
<WindowScreen>
<summary>
The <see cref="Window"/> property <strong><c>screen</c></strong> returns a<br/>reference to the screen object associated with the window. The <c>screen</c><br/>object, implementing the <see cref="Screen"/> interface, is a special object for<br/>inspecting properties of the screen on which the current window is being rendered.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/screen"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Screen"/> object.</value>
</WindowScreen>
<WindowBtoa>
<summary>
The <strong><c>btoa()</c></strong> method of the <see cref="Window"/> interface creates a<br/><see href="https://developer.mozilla.org/en-US/docs/Glossary/Base64">Base64</see>-encoded <see href="https://developer.mozilla.org/en-US/docs/Glossary/ASCII">ASCII</see> string from a <strong>binary string</strong> (i.e., a<br/>string in which each character in the string is treated as a byte<br/>of binary data).
</summary>
<remarks>
<para>You can use this method to encode data which may otherwise cause communication<br/>problems, transmit it, then use the <see cref="Window.Atob"/> method to decode the data again.<br/>For example, you can encode control characters such as ASCII values 0 through 31.</para><para>Also consider using the <see cref="Uint8ArrayPrototypeToBase64"/> method if your data is in a <c>Uint8Array</c> object to avoid creating a string containing raw bytes.</para>
<para>-<see href="https://github.com/zloirock/core-js#base64-utility-methods">A polyfill of <c>btoa</c></see> is available in <see href="https://github.com/zloirock/core-js"><c>core-js</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/URI/Reference/Schemes/data"><c>data</c> URLs</see><br/>-<see cref="WorkerGlobalScope.Btoa"/>: the same method, but in worker scopes.<br/>-<see cref="Window.Atob"/><br/>-<see cref="Uint8ArrayPrototypeToBase64"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Glossary/Base64">Base64</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An ASCII string containing the Base64 representation of <c>stringToEncode</c>.</returns>
</WindowBtoa>
<WindowLength>
<summary>

</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/length"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number.</value>
</WindowLength>
<WindowLocationbar>
<summary>
Returns the <c>locationbar</c> object.
</summary>
<remarks>
<para>This is one of a group of <c>Window</c> properties that contain a boolean <c>visible</c> property, that used to represent whether or not a particular part of a web browser&amp;apos;s user interface was visible.</para><para>For privacy and interoperability reasons, the value of the <c>visible</c> property is now <c>false</c> if this <c>Window</c> is a popup, and <c>true</c> otherwise.</para>
<para>-<see cref="Window.Menubar"/><br/>-<see cref="Window.Personalbar"/><br/>-<see cref="Window.Scrollbars"/><br/>-<see cref="Window.Statusbar"/><br/>-<see cref="Window.Toolbar"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/locationbar"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An object containing a single property:</value>
</WindowLocationbar>
<WindowTop>
<summary>
Returns a reference to the topmost window in the window hierarchy.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/top"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The reference to the topmost window.</value>
</WindowTop>
<WindowToolbar>
<summary>
Returns the <c>toolbar</c> object.
</summary>
<remarks>
<para>This is one of a group of <c>Window</c> properties that contain a boolean <c>visible</c> property, that used to represent whether or not a particular part of a web browser&amp;apos;s user interface was visible.</para><para>For privacy and interoperability reasons, the value of the <c>visible</c> property is now <c>false</c> if this <c>Window</c> is a popup, and <c>true</c> otherwise.</para>
<para>-<see cref="Window.Locationbar"/><br/>-<see cref="Window.Menubar"/><br/>-<see cref="Window.Personalbar"/><br/>-<see cref="Window.Scrollbars"/><br/>-<see cref="Window.Statusbar"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/toolbar"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An object containing a single property:</value>
</WindowToolbar>
<WindowRequestFileSystem>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The non-standard <see cref="Window"/> method<br/><strong><c>requestFileSystem()</c></strong> method is a Google Chrome-specific<br/>method which lets a website or app gain access to a sandboxed file system for its own<br/>use. The returned <see cref="FileSystem"/> is then available for use with the other <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API">file system APIs</see>.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This method is prefixed with <c>webkit</c> in all browsers that implement it.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestFileSystem"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowRequestFileSystem>
<WindowResizeBy>
<summary>
The <strong><c>Window.resizeBy()</c></strong> method resizes the current window<br/>by a specified amount.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowResizeBy>
<WindowStorage>
<summary>
The <strong><c>storage</c></strong> event of the <see cref="Window"/> interface fires when another document that shares the same storage area (either <see cref="WindowlocalStorage"/> or <see cref="WindowsessionStorage"/>) as the current window updates that storage area. The event is <strong>not</strong> fired on the window that made the change.
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para>
<para>-{{domxref(&amp;quot;Web Storage API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API">Using the Web Storage API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#responding_to_storage_changes_with_the_storageevent">Responding to storage changes with the StorageEvent</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/storage"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowStorage>
<WindowError>
<summary>
The <c>error</c> event is fired on a <see cref="Window"/> object when a resource failed to load or couldn't be used — for example if a script has an execution error.
</summary>
<remarks>
<para>This event is only generated for script errors thrown synchronously, such as during initial loading or within event handlers. If a promise was rejected (including an uncaught <c>throw</c> within an <c>async function</c>) and no rejection handlers were attached, an <see cref="Windowunhandledrejection"/> event is fired instead.</para>
<para>-This event on <c>Element</c> targets: <see cref="HTMLElementerror"/> event<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event"><c>Window</c>: <c>unhandledrejection</c> event</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/error"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowError>
<WindowLocation>
<summary>
The <strong><c>Window.location</c></strong> read-only property returns a <see cref="Location"/> object with information about the current location of the document.
</summary>
<remarks>
<para>Though <c>Window.location</c> is a <strong>read-only</strong> <c>Location</c> object, you can also assign a string to it.<br/>This means that you can work with <c>location</c> as if it were a string in most cases:<br/><c>location = &amp;apos;http://www.example.com&amp;apos;</c> is a synonym of <c>location.href = &amp;apos;http://www.example.com&amp;apos;</c>.</para><para>See <see cref="Location"/> for all available properties.</para>
<para>-The interface of the returned value, <see cref="Location"/><br/>-A similar information, but attached to the document,<br/><see cref="Document.Location"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">Manipulating the browser history</see><br/>-<see cref="Windowhashchange"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/location"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Location"/> object.</value>
</WindowLocation>
<WindowOrigin>
<summary>
The <strong><c>origin</c></strong> read-only property of the <see cref="Window"/> interface returns the origin of the global scope, serialized as a string.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/origin"><c>WorkerGlobalScope.origin</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Glossary/origin">origin</see> glossary term<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/origin"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</WindowOrigin>
<WindowSetImmediate>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> This method is used to break up long running operations and run a callback function immediately after the browser has completed other operations such as events and display updates.
</summary>
<remarks>
<para>-<see href="https://github.com/zloirock/core-js#setimmediate">Polyfill of <c>setImmediate</c> in <c>core-js</c></see><br/>-<see href="https://jphpsf.github.io/setImmediate-shim-demo/">Microsoft <c>setImmediate</c> API Demo</see><br/>-<see cref="Window.ClearImmediate"/><br/>-<see cref="Window.RequestIdleCallback"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The ID of the immediate which can be used later with <see cref="Window.ClearImmediate"/>.</returns>
</WindowSetImmediate>
<WindowOrientation>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> Returns the orientation in degrees (in 90-degree increments) of the viewport relative to the device&amp;apos;s natural orientation.
</summary>
<remarks>
<para>Its only possible values are <c>-90</c>, <c>0</c>, <c>90</c>, and <c>180</c>. Positive values are counterclockwise; negative values are clockwise.</para><para>This property is deprecated. Use the <see cref="Screen.Orientation"/> property instead, available on the <see cref="Window.Screen"/> property.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowOrientation>
<WindowOffline>
<summary>
The <strong><c>offline</c></strong> event of the <see cref="Window"/> interface is fired when the browser has lost access to the network and the value of <see cref="Navigator.OnLine"/> switches to <c>false</c>.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event"><c>online</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/offline"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowOffline>
<WindowDevicemotion>
<summary>
The <strong><c>devicemotion</c></strong> event is fired at a regular interval and indicates the acceleration rate of the device with/without the contribution of the gravity force at that time. It also provides information about the rate of rotation, if available.
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para>
<para>-<see cref="Window.Deviceorientation"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/devicemotion"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowDevicemotion>
<WindowShowOpenFilePicker>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>showOpenFilePicker()</c></strong> method of the<br/><see cref="Window"/> interface shows a file picker that allows a user to select a file<br/>or multiple files and returns a handle for the file(s).
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API">File System API</see><br/>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/file-system-access">The File System Access API: simplifying access to local files</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} whose fulfillment handler receives an {{jsxref('Array')}} of <see cref="'FileSystemFileHandle'"/> objects.</returns>
</WindowShowOpenFilePicker>
<WindowPersonalbar>
<summary>
Returns the <c>personalbar</c> object.
</summary>
<remarks>
<para>This is one of a group of <c>Window</c> properties that contain a boolean <c>visible</c> property, that used to represent whether or not a particular part of a web browser&amp;apos;s user interface was visible.</para><para>For privacy and interoperability reasons, the value of the <c>visible</c> property is now <c>false</c> if this <c>Window</c> is a popup, and <c>true</c> otherwise.</para>
<para>-<see cref="Window.Locationbar"/><br/>-<see cref="Window.Menubar"/><br/>-<see cref="Window.Scrollbars"/><br/>-<see cref="Window.Statusbar"/><br/>-<see cref="Window.Toolbar"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/personalbar"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An object containing a single property:</value>
</WindowPersonalbar>
<WindowIsSecureContext>
<summary>
The <strong><c>isSecureContext</c></strong> read-only property of the <see cref="Window"/> interface returns a boolean indicating whether the current <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts">context is secure</see> (<c>true</c>) or not (<c>false</c>).
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts">Secure contexts</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean.</value>
</WindowIsSecureContext>
<WindowScrollByPages>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>Window.scrollByPages()</c></strong> method scrolls the current<br/>document by the specified number of pages.
</summary>
<remarks>
<para>-<see cref="Window.Scroll"/><br/>-<see cref="Window.ScrollBy"/><br/>-<see cref="Window.ScrollByLines"/><br/>-<see cref="Window.ScrollTo"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByPages"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowScrollByPages>
<WindowScrollMaxX>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>Window.scrollMaxX</c></strong> read-only property returns the<br/>maximum number of pixels that the document can be scrolled horizontally.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxX"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number.</value>
</WindowScrollMaxX>
<WindowScreenX>
<summary>
The <strong><c>Window.screenX</c></strong> read-only property returns the<br/>horizontal distance, in CSS pixels, of the left border of the user&amp;apos;s browser viewport to<br/>the left side of the screen.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>An alias of <c>screenX</c> was implemented across modern<br/>browsers in more recent times — <see cref="Window.ScreenLeft"/>. This was originally<br/>supported only in IE but was introduced everywhere due to popularity.</para></blockquote>
<para>-<see cref="Window.ScreenLeft"/><br/>-<see cref="Window.ScreenY"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number equal to the number of CSS pixels from the left edge of the browser viewport<br/>to the left edge of the screen.</value>
</WindowScreenX>
<WindowResizeTo>
<summary>
The <strong><c>Window.resizeTo()</c></strong> method dynamically resizes the<br/>window.
</summary>
<remarks>
<para>-<see cref="Window.ResizeBy"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowResizeTo>
<WindowPagereveal>
<summary>
The <strong><c>pagereveal</c></strong> event is fired when a document is first rendered, either when loading a fresh document from the network or activating a document (either from <see href="https://developer.mozilla.org/en-US/docs/Glossary/bfcache">back/forward cache</see> (bfcache) or <see href="https://developer.mozilla.org/en-US/docs/Glossary/Prerender">prerender</see>).
</summary>
<remarks>
<para>This is useful in the case of cross-document (MPA) <see href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API">view transitions</see> for manipulating an active transition from the inbound page of a navigation. For example, you might wish to skip the transition, or customize the inbound transition animation via JavaScript.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API/Using">Using the View Transition API</see><br/>-<see cref="Window.Pageswap"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/pagereveal"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowPagereveal>
<WindowSpeechSynthesis>
<summary>
The <c>speechSynthesis</c> read-only property of the Window object returns a <see cref="SpeechSynthesis"/> object, which is the entry point into using <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API">Web Speech API</see> speech synthesis functionality.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API">Web Speech API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="SpeechSynthesis"/> object.</value>
</WindowSpeechSynthesis>
<WindowSetTimeout>
<summary>
The <strong><c>setTimeout()</c></strong> method of the <see cref="Window"/> interface sets a timer which executes a function or specified piece of code once the timer expires.
</summary>
<remarks>
<para>-<see href="https://github.com/zloirock/core-js#settimeout-and-setinterval">Polyfill of <c>setTimeout</c> which allows passing arguments to the callback in <c>core-js</c></see><br/>-<see cref="Window.ClearTimeout"/><br/>-<see cref="WorkerGlobalScope.SetTimeout"/><br/>-<see cref="Window.SetInterval"/><br/>-<see cref="Window.RequestAnimationFrame"/><br/>-<see cref="Window.QueueMicrotask"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The <c>setTimeout()</c> method returns a positive integer (typically within the range of 1 to 2,147,483,647) that uniquely identifies the timer created by the call. This identifier, often referred to as a "timeout ID", can be passed to <see cref="Window.ClearTimeout"/> to cancel the timer.Within the same global environment (e.g., a specific window or worker) the timeout ID is guaranteed not to be reused for any new timer as long as the original timer remains active. However, separate global environments maintain their own independent pools of timer IDs.</returns>
</WindowSetTimeout>
<WindowScreenLeft>
<summary>
The <strong><c>Window.screenLeft</c></strong> read-only property returns the<br/>horizontal distance, in CSS pixels, from the left border of the user&amp;apos;s browser viewport<br/>to the left side of the screen.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para><c>screenLeft</c> is an alias of the older<br/><see cref="Window.ScreenX"/> property. <c>screenLeft</c> was originally<br/>supported only in IE but was introduced everywhere due to popularity.</para></blockquote>
<para>-<see cref="Window.ScreenTop"/><br/>-<see cref="Window.ScreenX"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/screenLeft"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number equal to the number of CSS pixels from the left edge of the browser viewport<br/>to the left edge of the screen.</value>
</WindowScreenLeft>
<WindowCreateImageBitmap>
<summary>
The <strong><c>createImageBitmap()</c></strong> method of the <see cref="Window"/> interface creates a bitmap from a given source, optionally cropped to contain only a portion of that source.<br/>It accepts a variety of different image sources, and returns a {{jsxref("Promise")}} which resolves to an <see cref="ImageBitmap"/>.
</summary>
<remarks>
<para>-<see cref="WorkerGlobalScope.CreateImageBitmap"/><br/>-<see cref="CanvasRenderingContext2D.DrawImage"/><br/>-<see cref="ImageData"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} which resolves to an <see cref="ImageBitmap"/> object containing bitmap data from the given rectangle.</returns>
</WindowCreateImageBitmap>
<WindowExternal>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <c>external</c> property of the <see cref="Window"/> API returns an instance of the <c>External</c> interface, which was intended to contain functions related to adding external search providers to the browser. However, this is now deprecated, and the contained methods are now dummy functions that do nothing as per spec.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/external"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowExternal>
<WindowFind>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> <blockquote class="NOTE"><h5>NOTE</h5>Support for <c>Window.find()</c> might change in future<br/>versions of Gecko. See <see href="https://bugzil.la/672395">Firefox bug 672395</see>.</blockquote>
</summary>
<remarks>
<para>The <strong><c>Window.find()</c></strong> method finds a string in a window sequentially.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/find"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns><c>true</c> if the string is found; otherwise, <c>false</c>.</returns>
</WindowFind>
<WindowVrdisplayactivate>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>vrdisplayactivate</c></strong> event of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see> is fired when a VR display is able to be presented to, for example if an HMD has been moved to bring it out of standby, or woken up by being put on.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This event was part of the old <see href="https://immersive-web.github.io/webvr/spec/1.1/">WebVR API</see>. It has been superseded by the <see href="https://immersive-web.github.io/webxr/">WebXR Device API</see>.</para></blockquote><para>This event is not cancelable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplayactivate"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowVrdisplayactivate>
<WindowStructuredClone>
<summary>
The <strong><c>structuredClone()</c></strong> method of the <see cref="Window"/> interface creates a <see href="https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy">deep clone</see> of a given value using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm">structured clone algorithm</see>.
</summary>
<remarks>
<para>The method also allows <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects">transferable objects</see> in the original value to be <strong>transferred</strong> rather than cloned to the new object.<br/>Transferred objects are detached from the original object and attached to the new object; they are no longer accessible in the original object.</para>
<para>-<see href="https://github.com/zloirock/core-js#structuredclone">A polyfill of <c>structuredClone</c></see> is available in <see href="https://github.com/zloirock/core-js"><c>core-js</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm">Structured clone algorithm</see><br/>-<see href="https://github.com/ungap/structured-clone">Structured clone polyfill</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/structuredClone"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see href="https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy">deep copy</see> of the original <c>value</c>.</returns>
</WindowStructuredClone>
<WindowCancelIdleCallback>
<summary>
The <strong><c>window.cancelIdleCallback()</c></strong> method cancels a callback<br/>previously scheduled with <see cref="Window.RequestIdleCallback"/>.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowCancelIdleCallback>
<WindowSetInterval>
<summary>
The <strong><c>setInterval()</c></strong> method of the <see cref="Window"/> interface repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.
</summary>
<remarks>
<para>-<see href="https://github.com/zloirock/core-js#settimeout-and-setinterval">Polyfill of <c>setInterval</c> which allows passing arguments to the callback in <c>core-js</c></see><br/>-<see cref="Window.ClearInterval"/><br/>-<see cref="WorkerGlobalScope.SetInterval"/><br/>-<see cref="Window.SetTimeout"/><br/>-<see cref="Window.RequestAnimationFrame"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The <c>setInterval()</c> method returns a positive integer (typically within the range of 1 to 2,147,483,647) that uniquely identifies the interval timer created by the call. This identifier, often referred to as an "interval ID", can be passed to <see cref="Window.ClearInterval"/> to stop the repeated execution of the specified function.Within the same global environment (e.g., a particular window or worker), the interval ID is ensured to remain unique and is not reused for any new interval timer as long as the original timer is still active. However, different global environments maintain their own independent pools of interval IDs.Be aware that <c>setInterval()</c> and <see cref="Window.SetTimeout"/> share the same pool of IDs, and that <c>clearInterval()</c> and <see cref="Window.ClearTimeout"/> can technically be used interchangeably.<br/>For clarity, however, you should try to always match them to avoid confusion when maintaining your code.<blockquote class="NOTE"><h5>NOTE</h5>The <c>delay</c> argument is converted to a signed 32-bit integer.<br/>This effectively limits <c>delay</c> to 2147483647 ms, roughly 24.8 days, since it&amp;apos;s specified as a signed integer in the IDL.</blockquote></returns>
</WindowSetInterval>
<WindowScrollBy>
<summary>
The <strong><c>Window.scrollBy()</c></strong> method scrolls the document in the<br/>window by the given amount.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowScrollBy>
<WindowClosed>
<summary>
The <strong><c>Window.closed</c></strong> read-only property indicates whether<br/>the referenced window is closed or not.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/closed"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value. Possible values:</value>
</WindowClosed>
<WindowGetDefaultComputedStyle>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>getDefaultComputedStyle()</c></strong> method gives the default <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Value_processing#computed_value">computed values</see> of all the CSS<br/>properties of an element, ignoring author styling. That is, only user-agent and user<br/>styles are taken into account.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getDefaultComputedStyle"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>The returned <c>style</c> is a <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration"><c>CSSStyleDeclaration</c></see><br/>object. The object is of the same type as the object returned by<br/><see cref="Window.GetComputedStyle"/>, but only takes into account user-agent and<br/>user rules.</returns>
</WindowGetDefaultComputedStyle>
<WindowLaunchQueue>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <c>launchQueue</c> read-only property of the <see cref="Window"/> interface provides access to the <see cref="LaunchQueue"/> class, which allows custom launch navigation handling to be implemented in a <see href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps">progressive web app</see> (PWA), with the handling context signified by the <see href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Manifest/Reference/launch_handler"><c>launch_handler</c></see> manifest field <c>client_mode</c> value.
</summary>
<remarks>
<para>The custom launch navigation handling functionality is controlled by the properties of the <see cref="LaunchParams"/> object passed into the <see cref="LaunchQueue.SetConsumer"/> callback function.</para>
<para>-{{domxref(&amp;quot;Launch Handler API&amp;quot;, &amp;quot;Launch Handler API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}<br/>-<see href="https://developer.chrome.com/docs/web-platform/launch-handler/">Launch Handler API: Control how your app is launched</see><br/>-<see href="https://mdn.github.io/dom-examples/launch-handler/">Musicr 2.0</see> demo app<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/launchQueue"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="LaunchQueue"/> object instance.</value>
</WindowLaunchQueue>
<WindowOuterWidth>
<summary>
<strong><c>Window.outerWidth</c></strong> read-only property returns the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.
</summary>
<remarks>
<para>-<see cref="Window.OuterHeight"/>, <see cref="Window.InnerHeight"/>, <see cref="Window.InnerWidth"/><br/>-<see cref="Window.ResizeBy"/>, <see cref="Window.ResizeTo"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowOuterWidth>
<WindowRequestAnimationFrame>
<summary>
The <strong><c>window.requestAnimationFrame()</c></strong> method tells the<br/>browser you wish to perform an animation. It requests the browser to call a<br/>user-supplied callback function before the next repaint.
</summary>
<remarks>
<para>The frequency of calls to the callback function will generally match the display<br/>refresh rate. The most common refresh rate is 60hz,<br/>(60 cycles/frames per second), though 75hz, 120hz, and 144hz are also widely used.<br/><c>requestAnimationFrame()</c> calls are paused in most browsers when running in<br/>background tabs or hidden <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see>s, in order to improve<br/>performance and battery life.</para><blockquote class="NOTE"><h5>NOTE</h5><para>Your callback function must call <c>requestAnimationFrame()</c> again if<br/>you want to animate another frame. <c>requestAnimationFrame()</c> is one-shot.</para></blockquote><blockquote class="WARNING"><h5>WARNING</h5><para>Be sure always to use the first argument (or some other method for<br/>getting the current time) to calculate how much the animation will progress in<br/>a frame — <strong>otherwise, the animation will run faster on high refresh-rate screens</strong>.<br/>For ways to do that, see the examples below.</para></blockquote>
<para>-<see cref="Window.CancelAnimationFrame"/><br/>-<see cref="DedicatedWorkerGlobalScope.RequestAnimationFrame"/><br/>-<see href="https://hacks.mozilla.org/2011/08/animating-with-javascript-from-setinterval-to-requestanimationframe/">Animating with JavaScript: from setInterval to requestAnimationFrame</see> - Blog post<br/>-<see href="https://www.testufo.com/#test=animation-time-graph">TestUFO: Test your web browser for requestAnimationFrame() Timing Deviations</see><br/>-<see href="https://phabricator.services.mozilla.com/rMOZILLACENTRAL149722297f033d5c3ad126d0c72edcb1cb96d72e">Firefox switching to uint32_t for the requestAnimationFrame request ID</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An <c>unsigned long</c> integer value, the request ID, that uniquely identifies the entry<br/>in the callback list. You should not make any assumptions about its value. You can pass this value to<br/><see cref="Window.CancelAnimationFrame"/> to cancel the refresh callback request.<blockquote class="WARNING"><h5>WARNING</h5>The request ID is typically implemented as a per-window incrementing counter. Therefore, even when it starts counting at 1, it may overflow and end up reaching 0.<br/>While unlikely to cause issues for short-lived applications, you should avoid <c>0</c> as a sentinel value for invalid request identifier IDs and instead prefer unattainable values such as <c>null</c>.<br/>The spec doesn&amp;apos;t specify the overflowing behavior, so browsers have divergent behaviors. When overflowing, the value would either wrap around to 0, to a negative value, or fail with an error.<br/>Unless overflow throws, request IDs are also not truly unique because there are only finitely many 32-bit integers for possibly infinitely many callbacks.<br/>Note, however, that it would take ~500 days to reach the issue when rendering at 60Hz with 100 calls to <c>requestAnimationFrame()</c> per frame.</blockquote></returns>
</WindowRequestAnimationFrame>
<WindowAtob>
<summary>
The <strong><c>atob()</c></strong> method of the <see cref="Window"/> interface decodes a<br/>string of data which has been encoded using <see href="https://developer.mozilla.org/en-US/docs/Glossary/Base64">Base64</see> encoding. You can use<br/>the <see cref="Window.Btoa"/> method to encode and transmit<br/>data which may otherwise cause communication problems, then transmit it and use the<br/><c>atob()</c> method to decode the data again. For example, you can encode,<br/>transmit, and decode control characters such as <see href="https://developer.mozilla.org/en-US/docs/Glossary/ASCII">ASCII</see> values 0 through 31.
</summary>
<remarks>
<para>Also consider using the <see cref="Uint8ArrayFromBase64"/> method, which creates a <c>Uint8Array</c> object from a base64-encoded string. It results in a byte array, which is easier to work with than a string containing raw bytes.</para>
<para>-<see href="https://github.com/zloirock/core-js#base64-utility-methods">A polyfill of <c>atob</c></see> is available in <see href="https://github.com/zloirock/core-js"><c>core-js</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/URI/Reference/Schemes/data"><c>data</c> URLs</see><br/>-<see cref="WorkerGlobalScope.Atob"/>: the same method, but in worker scopes.<br/>-<see cref="Window.Btoa"/><br/>-<see cref="Uint8ArrayFromBase64"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/atob"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A binary string containing raw bytes decoded from <c>encodedData</c>. Strings in JavaScript are encoded as <see href="https://developer.mozilla.org/en-US/docs/Glossary/UTF-16">UTF-16</see>, so this means each character must have a code point less than 256, representing one byte of data.</returns>
</WindowAtob>
<WindowShowSaveFilePicker>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>showSaveFilePicker()</c></strong> method of the<br/><see cref="Window"/> interface shows a file picker that allows a user to save a file.<br/>Either by selecting an existing file, or entering a name for a new file.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API">File System API</see><br/>-<see href="https://developer.chrome.com/docs/capabilities/web-apis/file-system-access">The File System Access API: simplifying access to local files</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showSaveFilePicker"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} whose fulfillment handler receives a <see cref="'FileSystemFileHandle'"/> object.</returns>
</WindowShowSaveFilePicker>
<WindowScrollsnapchanging>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>scrollsnapchanging</c></strong> event of the <see cref="Window"/> interface is fired on the <c>window</c> when the browser determines a new scroll snap target is pending, i.e., it will be selected when the current scroll gesture ends.
</summary>
<remarks>
<para>This event works in much the same way as the <see cref="Element"/> interface's <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollsnapchanging_event"><c>scrollsnapchanging</c></see> event, except that the overall HTML document has to be set as the scroll snap container (i.e., {{cssxref("scroll-snap-type")}} is set on the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html">html</see> element).</para>
<para>-<see cref="Windowscrollsnapchange"/> event<br/>-<see cref="Documentscrollend"/> event<br/>-<see cref="SnapEvent"/><br/>-CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type">scroll-snap-type</see> property<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap">CSS scroll snap module</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap/Using_scroll_snap_events">Using scroll snap events</see><br/>-<see href="https://developer.chrome.com/blog/scroll-snap-events">Scroll Snap Events</see> on developer.chrome.com (2024)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollsnapchanging"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowScrollsnapchanging>
<WindowWebkitConvertPointFromPageToNode>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> Given a <see cref="WebKitPoint"/> specified in the page's coordinate system, the<br/><see cref="Window"/> method <strong><c>webkitConvertPointFromPageToNode()</c></strong><br/>returns a <c>Point</c> object specifying the same location in the coordinate<br/>system of the specified DOM <see cref="Node"/>.
</summary>
<remarks>
<blockquote class="WARNING"><h5>WARNING</h5><para>Please review the <see href="https://developer.mozilla.org#browser_compatibility">Browser compatibility</see> section before using this method,<br/>as it's not widely supported (nor is the <see cref="WebKitPoint"/> object it uses).</para></blockquote>
<para>-<see cref="Window.WebkitConvertPointFromNodeToPage"/><br/>-Mozilla implementation bug: <see href="https://bugzil.la/850808">Firefox bug 850808</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/webkitConvertPointFromPageToNode"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <c>Point</c> object describing the specified location in the node&amp;apos;s coordinate<br/>system.</returns>
</WindowWebkitConvertPointFromPageToNode>
<WindowScrollbars>
<summary>
Returns the <c>scrollbars</c> object.
</summary>
<remarks>
<para>This is one of a group of <c>Window</c> properties that contain a boolean <c>visible</c> property, that used to represent whether or not a particular part of a web browser&amp;apos;s user interface was visible.</para><para>For privacy and interoperability reasons, the value of the <c>visible</c> property is now <c>false</c> if this <c>Window</c> is a popup, and <c>true</c> otherwise.</para>
<para>-<see cref="Window.Locationbar"/><br/>-<see cref="Window.Menubar"/><br/>-<see cref="Window.Personalbar"/><br/>-<see cref="Window.Statusbar"/><br/>-<see cref="Window.Toolbar"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An object containing a single property:</value>
</WindowScrollbars>
<WindowPageshow>
<summary>
The <strong><c>pageshow</c></strong> event is sent to a <see cref="Window"/> when the browser displays the window's document due to navigation.
</summary>
<remarks>
<para>This includes:</para><blockquote class="NOTE"><h5>NOTE</h5><para>During the initial page load, the <c>pageshow</c> event fires <strong>after</strong> the <see cref="Windowload"/> event.</para></blockquote>
<para>-<see cref="Window.Pagehide"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/pageshow"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowPageshow>
<WindowPrompt>
<summary>
<c>window.prompt()</c> instructs the browser to display a dialog with an optional message prompting the user to input some text, and to wait until the user either submits the text or cancels the dialog.
</summary>
<remarks>
<para>Under some conditions (when the user switches tabs, for example) the browser may not display a dialog, or may not wait for the user to submit text or to cancel the dialog.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog">dialog</see> element<br/>-<see cref="Window.Alert"/><br/>-<see cref="Window.Confirm"/><br/>-<see href="https://alistapart.com/article/neveruseawarning/">Never Use a Warning When you Mean Undo</see> on A List Apart (2017)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A string containing the text entered by the user, or <c>null</c>.</returns>
</WindowPrompt>
<WindowRequestIdleCallback>
<summary>
The <strong><c>window.requestIdleCallback()</c></strong> method queues a function<br/>to be called during a browser&amp;apos;s idle periods. This enables developers to perform<br/>background and low priority work on the main thread, without impacting<br/>latency-critical events such as animation and input response. Functions are generally<br/>called in first-in-first-out order; however, callbacks which have a <c>timeout</c><br/>specified may be called out-of-order if necessary in order to run them before the<br/>timeout elapses.
</summary>
<remarks>
<para>You can call <c>requestIdleCallback()</c> within an idle callback function to<br/>schedule another callback to take place no sooner than the next pass through the event<br/>loop.</para><blockquote class="NOTE"><h5>NOTE</h5><para>A <c>timeout</c> option is strongly recommended for required work,<br/>as otherwise it&amp;apos;s possible multiple seconds will elapse before the callback is fired.</para></blockquote>
<para>-<see cref="Window.CancelIdleCallback"/><br/>-<see cref="IdleDeadline"/><br/>-<see cref="Window.SetTimeout"/><br/>-<see cref="Window.SetInterval"/><br/>-<see cref="Window.RequestAnimationFrame"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>An ID which can be used to cancel the callback by passing it into the<br/><see cref="Window.CancelIdleCallback"/> method.</returns>
</WindowRequestIdleCallback>
<WindowNavigation>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>navigation</c></strong> read-only property of the <see cref="Window"/> interface returns the current <c>window</c>'s associated <see cref="Navigation"/> object.
</summary>
<remarks>
<para>This is the entry point for the {{domxref(&amp;quot;Navigation API&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}.</para>
<para>-<see href="https://developer.chrome.com/docs/web-platform/navigation-api/">Modern client-side routing: the Navigation API</see><br/>-<see href="https://github.com/WICG/navigation-api/blob/main/README.md">Navigation API explainer</see><br/>-<see href="https://mdn.github.io/dom-examples/navigation-api/">Navigation API live demo</see> (<see href="https://github.com/mdn/dom-examples/tree/main/navigation-api">view demo source</see>)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/navigation"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Navigation"/> object instance.</value>
</WindowNavigation>
<WindowDevicePixelRatio>
<summary>
The <strong><c>devicePixelRatio</c></strong> of <see cref="Window"/> interface returns the ratio of the resolution in <strong>physical pixels</strong> to the resolution in <strong>CSS pixels</strong> for the current display device.
</summary>
<remarks>
<para>This value could also be interpreted as the ratio of pixel sizes: the size of one <strong>CSS pixel</strong> to the size of one <strong>physical pixel</strong>.<br/>In simpler terms, this tells the browser how many of the screen&amp;apos;s actual pixels should be used to draw a single CSS pixel.</para><para>Page zooming affects the value of <c>devicePixelRatio</c>. When a page is zoomed in (made larger), the size of a CSS pixel increases, and so the <c>devicePixelRatio</c> value increases.<br/>Pinch-zooming does not affect <c>devicePixelRatio</c>, because this magnifies the page without changing the size of a CSS pixel.</para><para>This is useful when dealing with the difference between rendering on a standard display versus a HiDPI or Retina display, which use more screen pixels to draw the same objects, resulting in a sharper image.</para><para>You can use <see cref="Window.MatchMedia"/> to check if the value of <c>devicePixelRatio</c> changes (which can happen, for example, if the user drags the window to a display with a different pixel density).<br/>See <see href="https://developer.mozilla.org#monitoring_screen_resolution_or_zoom_level_changes">the example below</see>.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries">Media queries</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries">Using media queries</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/resolution">CSS <c>resolution</c> media query</see><br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/image-resolution">image-resolution</see> property<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A double-precision floating-point value indicating the ratio of the display&amp;apos;s resolution in physical pixels to the resolution in CSS pixels. A value of 1 indicates a classic 96 DPI display, while a value of 2 is expected for HiDPI/Retina displays.Other values may be returned in the case of unusually low resolution displays or, more often, when a screen has a higher pixel density than double the standard resolution of 96 DPI.<br/>Modern mobile device screens - which offer high display resolutions at small physical sizes - often yield a <c>devicePixelRatio</c> value greater than 2.</value>
</WindowDevicePixelRatio>
<WindowMoveTo>
<summary>
The <strong><c>moveTo()</c></strong> method of the <see cref="Window"/><br/>interface moves the current window to the specified coordinates.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This function moves the window to an absolute location. In<br/>contrast, <see cref="Window.MoveBy"/> moves the window relative to its current<br/>location.</para></blockquote>
<para>-<see cref="Window.MoveBy"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowMoveTo>
<WindowGetSelection>
<summary>
The <strong><c>getSelection()</c></strong> method of the <see cref="Window"/> interface returns the <see cref="Selection"/> object associated with the window's <see cref="Document"/>, representing the range of text selected by the user or the current position of the caret.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Selection">Selection API</see><br/>-<see cref="Selection"/><br/>-<see cref="Range"/><br/>-<see cref="Document.GetSelection"/><br/>-<see cref="HTMLInputElement.SetSelectionRange"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="Selection"/> object, or <c>null</c> if the associated document has no <see href="https://developer.mozilla.org/en-US/docs/Glossary/Browsing_context">browsing context</see> (for example, the window is an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see> that is not attached to a document).When called on an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see> that is not displayed (e.g., where <c>display: none</c> is set) Firefox returns <c>null</c>, whereas other browsers returns a <see cref="Selection"/> object with <see cref="Selection.Type"/> set to <c>None</c>.</returns>
</WindowGetSelection>
<WindowGetScreenDetails>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>getScreenDetails()</c></strong> method of the<br/><see cref="Window"/> interface returns a {{jsxref("Promise")}} that fulfills with a <see cref="ScreenDetails"/> object instance representing the details of all the screens available to the user's device.
</summary>
<remarks>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Management_API">Window Management API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getScreenDetails"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A {{jsxref("Promise")}} that fulfills with a <see cref="ScreenDetails"/> object instance.</returns>
</WindowGetScreenDetails>
<WindowScrollMaxY>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <strong><c>Window.scrollMaxY</c></strong> read-only property returns the<br/>maximum number of pixels that the document can be scrolled vertically.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxY"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number.</value>
</WindowScrollMaxY>
<WindowFocus>
<summary>
The <strong><c>focus</c></strong> event fires when an element has received focus.
</summary>
<remarks>
<para>The opposite of <c>focus</c> is <see cref="Windowblur"/>.</para><para>This event is not cancelable and does not bubble.</para>
<para>-Related event: <see cref="Windowblur"/><br/>-This event on <c>Element</c> targets: <see cref="Elementfocus"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/focus"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowFocus>
<WindowHistory>
<summary>
The <c>Window.history</c> read-only property returns a reference to the <see cref="History"/> object, which provides an interface for manipulating the browser <strong>session history</strong> (pages visited in the tab or frame that the current page is loaded in).
</summary>
<remarks>
<para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">Manipulating the browser history</see> for examples and details. In particular, that article explains security features of the <see cref="History.PushState"/> and <see cref="History.ReplaceState"/> methods that you should be aware of before using them.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/history"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A reference to the <see cref="History"/> object.</value>
</WindowHistory>
<WindowCrossOriginIsolated>
<summary>
The <strong><c>crossOriginIsolated</c></strong> read-only property of the <see cref="Window"/> interface returns a boolean value that indicates whether the document is cross-origin isolated.
</summary>
<remarks>
<para>A cross-origin isolated document only shares its <see href="https://developer.mozilla.org/en-US/docs/Glossary/Browsing context">Browsing context</see> with same-origin documents in popups and navigations, and resources (both same-origin and cross-origin) that the document has opted into using via <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CORS">CORS</see> (and <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Cross-Origin-Embedder-Policy">COEP</see> for <c>&amp;lt;iframe&amp;gt;</c>).<br/>The relationship between a cross-origin opener of the document or any cross-origin popups that it opens are severed.<br/>The document may also be hosted in a separate OS process alongside other documents with which it can communicate by operating on shared memory.<br/>This mitigates the risk of side-channel attacks and cross-origin attacks referred to as <see href="https://xsleaks.dev/">XS-Leaks</see>.</para><para>Cross-origin isolated documents operate with fewer restrictions when using the following APIs:</para><para>A document will be cross-origin isolated if it is returned with an HTTP response that includes the headers:</para><para>Access to the APIs must also be allowed by the <c>Permissions-Policy</c> <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/cross-origin-isolated">Permissions-Policy/cross-origin-isolated</see>.<br/>Otherwise <c>crossOriginIsolated</c> property will return <c>false</c>, and the document will not be able to use the APIs listed above with reduced restrictions.</para>
<para>-<see cref="WorkerGlobalScope.CrossOriginIsolated"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/crossOriginIsolated"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean value.</value>
</WindowCrossOriginIsolated>
<WindowQueueMicrotask>
<summary>
The <strong><c>queueMicrotask()</c></strong> method of the <see cref="Window"/> interface<br/>queues a microtask to be executed at a safe time prior to control returning to the<br/>browser&amp;apos;s event loop.
</summary>
<remarks>
<para>The microtask is a short function which will run after<br/>the current task has completed its work and when there is no other code waiting to be<br/>run before control of the execution context is returned to the browser&amp;apos;s event loop.</para><para>This lets your code run without interfering with any other, potentially higher<br/>priority, code that is pending, but before the browser regains control over the<br/>execution context, potentially depending on work you need to complete. You can learn<br/>more about how to use microtasks and why you might choose to do so in our <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide">microtask guide</see>.</para><para>The importance of microtasks comes in its ability to perform tasks asynchronously but<br/>in a specific order. See <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide">Using microtasks in JavaScript with <c>queueMicrotask()</c></see> for more details.</para><para>Microtasks are especially useful for libraries and frameworks that need to perform<br/>final cleanup or other just-before-rendering tasks.</para>
<para>-<see cref="WorkerGlobalScope.QueueMicrotask"/><br/>-<see href="https://github.com/zloirock/core-js#queuemicrotask">Polyfill of <c>queueMicrotask()</c> in <c>core-js</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide">Using microtasks in JavaScript with queueMicrotask()</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Async_JS">Asynchronous JavaScript</see><br/>-<see href="https://github.com/fergald/docs/blob/master/explainers/queueMicrotask.md">queueMicrotask explainer</see><br/>-<see href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">Tasks, microtasks, queues and schedules</see> by Jake Archibald<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/queueMicrotask"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowQueueMicrotask>
<WindowLoad>
<summary>
The <strong><c>load</c></strong> event is fired when the whole page has loaded, including all dependent resources such as stylesheets, scripts (including async, deferred, and module scripts), iframes, and images, except those that are <see href="https://developer.mozilla.org/en-US/docs/Web/Performance/Guides/Lazy_loading#images_and_iframes">loaded lazily</see>.<br/>This is in contrast to <see cref="DocumentDOMContentLoaded"/>, which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading.
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para><blockquote class="NOTE"><h5>NOTE</h5><para><strong>All events named </strong><strong><c>load</c></strong><strong> will not propagate to </strong><strong><c>Window</c></strong>, even with <c>bubbles</c> initialized to <c>true</c>. To catch <c>load</c> events on the <c>window</c>, that <c>load</c> event must be dispatched directly to the <c>window</c>.</para></blockquote><blockquote class="NOTE"><h5>NOTE</h5><para>The <c>load</c> event that is dispatched when the main document has loaded <strong>is</strong> dispatched on the <c>window</c>, but has two mutated properties: <c>target</c> is <c>document</c>, and <c>path</c> is <c>undefined</c>. These two properties are mutated due to legacy conformance.</para></blockquote><para>To avoid running a script before the DOM it manipulates has been fully constructed, you can place the script at the end of the document body, immediately before the closing <c>&amp;lt;/body&amp;gt;</c> tag, without wrapping it in an event listener. You should usually only use the <c>load</c> event to wait for external resources, such as images or deferred scripts, to load.</para>
<para>-Document <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState">readyState</see> API<br/>-Related events:-<see cref="DocumentDOMContentLoaded"/><br/>-<see cref="Documentreadystatechange"/><br/>-<see cref="Windowbeforeunload"/><br/>-<see cref="Windowunload"/><br/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowLoad>
<WindowMozInnerScreenX>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> Gets the X coordinate of the top-left corner of the window&amp;apos;s viewport, in screen<br/>coordinates.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This coordinate is reported in CSS pixels, not in hardware pixels. That means it can be affected by the zoom level; to compute the actual number of physical screen pixels, you should use the <c>nsIDOMWindowUtils.screenPixelsPerCSSPixel</c> property.</para></blockquote>
<para>-<see cref="Window.MozInnerScreenY"/><br/>-<c>nsIDOMWindowUtils.screenPixelsPerCSSPixel</c><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenX"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The <c>window.mozInnerScreenX</c> property is a floating point, read-only value; it has no default value.</value>
</WindowMozInnerScreenX>
<WindowUnload>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> <blockquote class="WARNING"><h5>WARNING</h5>Developers should avoid using this event. See &amp;quot;Usage notes&amp;quot; below.</blockquote>
</summary>
<remarks>
<para>The <strong><c>unload</c></strong> event is fired when the document or a child resource is being unloaded.</para><para>It is fired after:</para><para>The document is in the following state:</para><para>Please note that the unload event also follows the document tree: parent frame unload will happen <strong>before</strong> child frame <c>unload</c> (see example below).</para>
<para>-Related events: <see cref="DocumentDOMContentLoaded"/>, <see cref="Documentreadystatechange"/>, <see cref="Windowload"/><br/>-<see href="https://html.spec.whatwg.org/multipage/browsers.html#unloading-documents">Unloading Documents — unload a document</see><br/>-The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_event"><c>visibilitychange</c></see> event.<br/>-<see href="https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/">Don&amp;apos;t lose user and app state, use Page Visibility</see> explains in<br/>detail why you should use <c>visibilitychange</c>, not<br/><c>beforeunload</c>/<c>unload</c>.<br/>-<see href="https://developer.chrome.com/docs/web-platform/page-lifecycle-api#developer-recommendations-for-each-state">Page Lifecycle API</see> gives best-practices guidance on handling<br/>page lifecycle behavior in your web applications.<br/>-<see href="https://github.com/GoogleChromeLabs/page-lifecycle">PageLifecycle.js</see>: a JavaScript library that deals with cross-browser inconsistencies in page lifecycle behavior.<br/>-<see href="https://web.dev/articles/bfcache">Back/forward cache</see> explains what the back/forward cache is, and its implications for various page lifecycle events.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/unload"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowUnload>
<WindowVrdisplaypresentchange>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>vrdisplaypresentchange</c></strong> event of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see> is fired when the presenting state of a VR display changes — i.e., goes from presenting to not presenting, or vice versa.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This event was part of the old <see href="https://immersive-web.github.io/webvr/spec/1.1/">WebVR API</see>. It has been superseded by the <see href="https://immersive-web.github.io/webxr/">WebXR Device API</see>.</para></blockquote><para>This event is not cancelable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplaypresentchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowVrdisplaypresentchange>
<WindowStatusbar>
<summary>
Returns the <c>statusbar</c> object.
</summary>
<remarks>
<para>This is one of a group of <c>Window</c> properties that contain a boolean <c>visible</c> property, that used to represent whether or not a particular part of a web browser&amp;apos;s user interface was visible.</para><para>For privacy and interoperability reasons, the value of the <c>visible</c> property is now <c>false</c> if this <c>Window</c> is a popup, and <c>true</c> otherwise.</para>
<para>-<see cref="Window.Locationbar"/><br/>-<see cref="Window.Menubar"/><br/>-<see cref="Window.Personalbar"/><br/>-<see cref="Window.Scrollbars"/><br/>-<see cref="Window.Toolbar"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/statusbar"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An object containing a single property:</value>
</WindowStatusbar>
<WindowInnerWidth>
<summary>
The read-only <see cref="Window"/> property <strong><c>innerWidth</c></strong> returns the interior width of the window in pixels (that is, the width of the window's <see href="https://developer.mozilla.org/en-US/docs/Glossary/layout viewport">layout viewport</see>). That includes the width of the vertical scroll bar, if one is present.
</summary>
<remarks>
<para>Similarly, the interior height of the window (that is, the height of the layout viewport) can be obtained using the <see cref="Window.InnerHeight"/> property. That measurement also accounts for the height of the horizontal scroll bar, if it is visible.</para>
<para>-<see cref="Window.OuterWidth"/><br/>-<see cref="Window.InnerHeight"/><br/>-<see cref="Window.OuterHeight"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An integer value indicating the width of the window&amp;apos;s layout viewport in pixels. This<br/>property is read-only, and has no default value.To change the window's width, use one of the <see cref="Window"/> methods for resizing<br/>windows, such as <see cref="Window.ResizeBy"/> or<br/><see cref="Window.ResizeTo"/>.</value>
</WindowInnerWidth>
<WindowCrypto>
<summary>
The <strong><c>crypto</c></strong> read-only property of the <see cref="Window"/> interface returns the <see cref="Crypto"/> object for this window's scope. This object gives web pages access to certain cryptographic related services.
</summary>
<remarks>
<para>Although the property itself is read-only, all of its methods (and the methods of its<br/>child object, <see cref="SubtleCrypto"/>) are not read-only, and therefore vulnerable<br/>to attack by <see href="https://developer.mozilla.org/en-US/docs/Glossary/polyfill">polyfill</see>.</para><para>Although <c>crypto</c> is available on all windows, the returned <c>Crypto</c> object only has one usable feature in insecure contexts: the <see cref="Crypto.GetRandomValues"/> method. In general, you should use this API only in secure contexts.</para>
<para>-The <see cref="Crypto"/> interface<br/>-<see cref="WorkerGlobalScope.Crypto"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An instance of the <see cref="Crypto"/> interface, providing access to general-purpose cryptography and a strong random-number generator.</value>
</WindowCrypto>
<WindowCaptureEvents>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Window.captureEvents()</c></strong> method does nothing. Its original behavior has been removed from the specification, but the method itself has been retained so as not to break code that calls it.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowCaptureEvents>
<WindowBlur>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>Window.blur()</c></strong> method does nothing.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Historically, this method was the programmatic equivalent of the user shifting focus away<br/>from the current window. This behavior was removed due to hostile sites abusing this functionality.<br/>In Firefox, you can enable the old behavior with the <c>dom.disable_window_flip</c> preference.</para></blockquote>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/blur"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowBlur>
<WindowScreenY>
<summary>
The <strong><c>Window.screenY</c></strong> read-only property returns the vertical distance, in CSS pixels, of the top border of the user&amp;apos;s browser viewport to the top edge of the screen.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>An alias of <c>screenY</c> was implemented across modern browsers in more recent times — <see cref="Window.ScreenTop"/>. This was originally supported only in IE but was introduced everywhere due to popularity.</para></blockquote>
<para>-<see cref="Window.ScreenTop"/><br/>-<see cref="Window.ScreenX"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number equal to the number of CSS pixels from the top edge of the browser viewport to the top edge of the screen.</value>
</WindowScreenY>
<WindowHashchange>
<summary>
The <strong><c>hashchange</c></strong> event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the <c>#</c> symbol).
</summary>
<remarks>
<para>This event does not fire when the hash is modified using <see cref="History.PushState"/> or <see cref="History.ReplaceState"/>.</para>
<para>-<see cref="Windowpopstate"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowHashchange>
<WindowEvent>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The read-only <see cref="Window"/> property <strong><c>event</c></strong> returns the <see cref="Event"/> which is currently being handled by the site's code. Outside the context of an event handler, the value is always <c>undefined</c>.
</summary>
<remarks>
<para>You <strong>should</strong> avoid using this property in new code, and should instead use the <see cref="Event"/> passed into the event handler function. This property is not universally supported and even when supported introduces potential fragility to your code.</para><blockquote class="NOTE"><h5>NOTE</h5><para>This property can be fragile, in that there may be situations in which the returned <c>Event</c> is not the expected value. In addition, <c>Window.event</c> is not accurate for events dispatched within <see href="https://developer.mozilla.org/en-US/docs/Glossary/shadow tree">shadow tree</see>.</para></blockquote>
<para>-<see cref="Event.SrcElement"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/event"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowEvent>
<WindowCookieStore>
<summary>
The <strong><c>cookieStore</c></strong> read-only property of the <see cref="Window"/> interface returns a reference to the <see cref="CookieStore"/> object for the current document context. This is an entry point for the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Cookie_Store_API">Cookie Store API</see>.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/cookieStore"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="CookieStore"/> object instance.</value>
</WindowCookieStore>
<WindowPerformance>
<summary>
The <strong><c>performance</c></strong> property of the <see cref="Window"/> interface returns a <see cref="Performance"/> object, which can be used to gather performance information about code running in the window's scope.
</summary>
<remarks>
<para>Performance entries are per context. If you create a mark on the main thread (or other worker), you cannot see it in a worker thread, and vice versa.</para>
<para>-<see cref="WorkerGlobalScope.Performance"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/performance"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Performance"/> object offering access to performance and timing-related information about code running in the window's scope.</value>
</WindowPerformance>
<WindowCancelAnimationFrame>
<summary>
The <strong><c>window.cancelAnimationFrame()</c></strong> method cancels an<br/>animation frame request previously scheduled through a call to<br/><see cref="Window.RequestAnimationFrame"/>.
</summary>
<remarks>
<para>-<see cref="Window.RequestAnimationFrame"/><br/>-<see cref="DedicatedWorkerGlobalScope.CancelAnimationFrame"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowCancelAnimationFrame>
<WindowAfterprint>
<summary>
The <strong><c>afterprint</c></strong> event is fired after the associated document has started printing or the print preview has been closed.
</summary>
<remarks>
<para>The <see cref="Window.Beforeprint"/> and <c>afterprint</c> events allow pages to change their content before printing starts (perhaps to remove a banner, for example) and then revert those changes after printing has completed. In general, you should prefer the use of a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries#targeting_media_types"><c>_media print</c></see> CSS at-rule, but it may be necessary to use these events in some cases.</para>
<para>-Related events: <see cref="Windowbeforeprint"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/afterprint"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowAfterprint>
<WindowGamepadconnected>
<summary>
The <c>gamepadconnected</c> event is fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.
</summary>
<remarks>
<para>The event will not fire if disallowed by the document's <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/'Permissions-Policy/gamepad'">'Permissions-Policy/gamepad'</see> <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Permissions_Policy">Permissions Policy</see>.</para><para>This event is not cancelable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/gamepaddisconnected_event">gamepaddisconnected</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API">Using Gamepad API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/gamepadconnected"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowGamepadconnected>
<WindowBeforeinstallprompt>
<summary>
The <strong><c>beforeinstallprompt</c></strong> event fires when the browser has detected that a website can be <see href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Guides/Making_PWAs_installable">installed as a Progressive Web App</see>.
</summary>
<remarks>
<para>There&amp;apos;s no guaranteed time this event is fired, but it usually happens on page load.</para><para>The typical use for this event is when a web app wants to provide its own in-app UI inviting the user to install the app, rather than the generic one provided by the browser. This enables the app to provide more context about the app, explaining to the user why they might want to install it.</para><para>In this scenario, the handler for this event will:</para><para>When the user uses the in-app installation UI to install the app, the in-app installation UI calls the <see cref="BeforeInstallPromptEvent.Prompt"/> method of the retained <c>BeforeInstallPromptEvent</c> object to show the installation prompt.</para>
<para>-<see cref="BeforeInstallPromptEvent.Prompt"/><br/>-<see cref="BeforeInstallPromptEvent"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeinstallprompt"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowBeforeinstallprompt>
<WindowSetResizable>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> This method does nothing; it is a no-op. It is solely kept for compatibility with Netscape 4.x.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setResizable"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowSetResizable>
<WindowMessageerror>
<summary>
The <c>messageerror</c> event is fired on a <see cref="'Window'"/> object when it receives a message that can't be deserialized.
</summary>
<remarks>
<para>This event is not cancellable and does not bubble.</para>
<para>-<see cref="Window.PostMessage"/><br/>-Related events: <see cref="Windowmessage"/>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/messageerror"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowMessageerror>
<WindowFetchLater>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>fetchLater()</c></strong> method of the <see cref="Window"/> interface creates a deferred fetch.
</summary>
<remarks>
<para>A <c>fetchLater()</c> request is sent once the page is navigated away from (it is destroyed or enters the <see href="https://developer.mozilla.org/en-US/docs/Glossary/bfcache">bfcache</see>), or after a provided <c>activateAfter</c> timeout — whichever comes first.</para><para>The <c>fetchLater()</c> methods returns a <see cref="FetchLaterResult"/> object containing a single <c>activated</c> value stating whether the request has been sent yet. Note the method does not return the result of the actual fetch when that happens (since it is often sent after the document has been destroyed) and the whole response of the fetch, including body and headers, is ignored.</para><para>Requests whose body is a <see cref="ReadableStream"/> cannot be deferred.</para><para>The <c>fetchLater()</c> method is controlled by the <c>connect-src</c> <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy">Content Security Policy</see> directive rather than the directive of the retrieved resources.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/fetchLater_API"><c>fetchLater()</c> API</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/fetchLater_API/fetchLater_quotas"><c>fetchLater()</c> quotas</see><br/>-<see cref="FetchLaterResult"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/fetchLater"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>A <see cref="FetchLaterResult"/> containing an <c>activated</c> boolean property indicating if the request has been sent yet.<blockquote class="NOTE"><h5>NOTE</h5>Once the fetch request is sent, its response — including the body and headers — is not made available and will be ignored.</blockquote></returns>
</WindowFetchLater>
<WindowScrollsnapchange>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>scrollsnapchange</c></strong> event of the <see cref="Window"/> interface is fired on the <c>window</c> at the end of a scrolling operation when a new scroll snap target is selected.
</summary>
<remarks>
<para>This event works in much the same way as the <see cref="Element"/> interface's <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollsnapchange_event"><c>scrollsnapchange</c></see> event, except that the overall HTML document has to be set as the scroll snap container (i.e., {{cssxref("scroll-snap-type")}} is set on the <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html">html</see> element).</para>
<para>-<see cref="Windowscrollsnapchanging"/> event<br/>-<see cref="Documentscrollend"/> event<br/>-<see cref="SnapEvent"/><br/>-CSS <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type">scroll-snap-type</see> property<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap">CSS scroll snap module</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap/Using_scroll_snap_events">Using scroll snap events</see><br/>-<see href="https://developer.chrome.com/blog/scroll-snap-events">Scroll Snap Events</see> on developer.chrome.com (2024)<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollsnapchange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowScrollsnapchange>
<WindowScrollX>
<summary>
The read-only <strong><c>scrollX</c></strong> property of the <see cref="Window"/> interface returns the number of pixels by which the document is currently scrolled horizontally. This value is subpixel precise in modern browsers, meaning that it isn't necessarily a whole number. You can get the number of pixels the document is scrolled vertically from the <see cref="Window.ScrollY"/> property.
</summary>
<remarks>
<para>-<see cref="Window.ScrollY"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A double-precision floating-point value indicating the number of pixels by which the document is currently scrolled horizontally from the origin, where a positive value means the content is scrolled to the right (to reveal more content to the right). In more technical terms, <c>scrollX</c> returns the X coordinate of the left edge of the current <see href="https://developer.mozilla.org/en-US/docs/Glossary/viewport">viewport</see>. If the document isn't scrolled at all left or right, then <c>scrollX</c> is 0. If there is no viewport, the returned value is 0. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component.<blockquote class="NOTE"><h5>NOTE</h5>If you need an integer value, you can use <see cref="MathRound"/> to round it off.</blockquote>It&amp;apos;s possible for <c>scrollX</c> to be negative if the document can be scrolled to the left from the initial containing block. For example, if the document is right-to-left and content grows to the left.Safari responds to overscrolling by updating <c>scrollX</c> beyond the maximum scroll position (unless the default "bounce" effect is disabled, such as by setting <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior">overscroll-behavior</see> to <c>none</c>), while Chrome and Firefox do not.This property is read-only. To scroll the window to a particular place, use <see cref="Window.Scroll"/>.</value>
</WindowScrollX>
<WindowSharedStorage>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The global read-only <strong><c>sharedStorage</c></strong> property returns the <see cref="WindowSharedStorage"/> object for the current origin. This is the main entry point for writing data to shared storage using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Shared_Storage_API">Shared Storage API</see>.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para><c>sharedStorage</c> is not available inside workers. It is implemented by <see cref="Window"/> and is also available in shared storage worklets (see <see cref="SharedStorageWorkletGlobalScope.SharedStorage"/>, which returns <see cref="WorkletSharedStorage"/>).</para></blockquote>
<para>-<see cref="WindowSharedStorage"/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Shared_Storage_API">Shared Storage API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sharedStorage"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="WindowSharedStorage"/> object instance.</value>
</WindowSharedStorage>
<WindowPagehide>
<summary>
The <strong><c>pagehide</c></strong> event is sent to a <see cref="Window"/> when the browser hides the current page in the process of presenting a different page from the session's history.
</summary>
<remarks>
<para>For example, when the user clicks the browser&amp;apos;s Back button, the current page receives a <c>pagehide</c> event before the previous page is shown.</para>
<para>-The <see cref="Window.Pageshow"/> event.<br/>-<see href="https://developer.chrome.com/docs/web-platform/page-lifecycle-api#developer-recommendations-for-each-state">Page Lifecycle API</see> gives best-practices guidance on handling page lifecycle behavior in your web applications.<br/>-<see href="https://github.com/GoogleChromeLabs/page-lifecycle">PageLifecycle.js</see>: a JavaScript library that deals with cross-browser inconsistencies in page lifecycle behavior.<br/>-<see href="https://web.dev/articles/bfcache">Back/forward cache</see> explains what the back/forward cache is, and its implications for various page lifecycle events.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/pagehide"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowPagehide>
<WindowScrollTo>
<summary>
<strong><c>Window.scrollTo()</c></strong> scrolls to a particular set of<br/>coordinates in the document.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowScrollTo>
<WindowFence>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <c>fence</c> read-only property of the <see cref="Window"/> interface returns a <see cref="Fence"/> object instance for the current document context.
</summary>
<remarks>
<para><c>Fence</c> objects are only available to documents embedded inside {{htmlelement("fencedframe")}}s (loaded via <see cref="FencedFrameConfig"/>s) or {{htmlelement("iframe")}}s (loaded via opaque URNs).</para><blockquote class="NOTE"><h5>NOTE</h5><para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Fenced_frame_API#how_do_fencedframes_work">How do <c>&amp;lt;fencedframe&amp;gt;</c>s work?</see> for some description around <c>FencedFrameConfig</c>s and opaque URNs.</para></blockquote>
<para>-<see href="https://privacysandbox.google.com/private-advertising/fenced-frame">Fenced frames</see> on privacysandbox.google.com<br/>-<see href="https://privacysandbox.google.com/">The Privacy Sandbox</see> on privacysandbox.google.com<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/fence"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Fence"/> object instance, or <c>null</c> if the document context does not have access to a <see cref="Fence"/> object.</value>
</WindowFence>
<WindowMenubar>
<summary>
Returns the <c>menubar</c> object.
</summary>
<remarks>
<para>This is one of a group of <c>Window</c> properties that contain a boolean <c>visible</c> property, that used to represent whether or not a particular part of a web browser&amp;apos;s user interface was visible.</para><para>For privacy and interoperability reasons, the value of the <c>visible</c> property is now <c>false</c> if this <c>Window</c> is a popup, and <c>true</c> otherwise.</para>
<para>-<see cref="Window.Locationbar"/><br/>-<see cref="Window.Personalbar"/><br/>-<see cref="Window.Scrollbars"/><br/>-<see cref="Window.Statusbar"/><br/>-<see cref="Window.Toolbar"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An object containing a single property:</value>
</WindowMenubar>
<WindowDeviceorientationabsolute>
<summary>
The <strong><c>deviceorientationabsolute</c></strong> event is fired when absolute device orientation changes.
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para>
<para>-<see cref="Window.Devicemotion"/> event<br/>-<see cref="Window.Deviceorientation"/> event<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Device_orientation_events/Detecting_device_orientation">Detecting device orientation</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/deviceorientationabsolute"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowDeviceorientationabsolute>
<WindowClearInterval>
<summary>
The <strong><c>clearInterval()</c></strong> method of the <see cref="Window"/> interface cancels a timed, repeating action which was previously established by a call to <see cref="Window.SetInterval"/>. If the parameter provided does not identify a previously established action, this method does nothing.
</summary>
<remarks>
<para>-<see cref="Window.SetInterval"/><br/>-<see cref="WorkerGlobalScope.ClearInterval"/><br/>-<see cref="Window.ClearTimeout"/><br/>-<see cref="Window.CancelAnimationFrame"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowClearInterval>
<WindowMozInnerScreenY>
<summary>
<div class="CAUTION"><h5>CAUTION</h5> <strong>Non-standard</strong></div> The <c>mozInnerScreenY</c> property of the <see cref="Window"/> interface returns the Y coordinate of the top-left corner of the window's viewport, in screen<br/>coordinates.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This coordinate is reported in CSS pixels, not in hardware pixels.</para></blockquote>
<para>-<see cref="Window.MozInnerScreenX"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenY"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The <c>window.mozInnerScreenY</c> property is a floating point, read-only value; it has no default value.</value>
</WindowMozInnerScreenY>
<WindowScreenTop>
<summary>
The <strong><c>Window.screenTop</c></strong> read-only property returns the<br/>vertical distance, in CSS pixels, from the top border of the user&amp;apos;s browser viewport to<br/>the top side of the screen.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para><c>screenTop</c> is an alias of the older<br/><see cref="Window.ScreenY"/> property. <c>screenTop</c> was originally<br/>supported only in IE but was introduced everywhere due to popularity.</para></blockquote>
<para>-<see cref="Window.ScreenLeft"/><br/>-<see cref="Window.ScreenY"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/screenTop"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number equal to the number of CSS pixels from the top edge of the browser viewport to<br/>the top edge of the screen.</value>
</WindowScreenTop>
<WindowRejectionhandled>
<summary>
The <strong><c>rejectionhandled</c></strong> event is sent to the script's global scope (usually <see cref="Window"/> but also <see cref="Worker"/>) whenever a rejected JavaScript {{jsxref("Promise")}} is handled late, i.e., when a handler is attached to the promise after its rejection had caused an <see cref="Window.Unhandledrejection"/> event.
</summary>
<remarks>
<para>This can be used in debugging and for general application resiliency, in tandem with the <c>unhandledrejection</c> event, which is sent when a promise is rejected but there is no handler for the rejection at the time.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#promise_rejection_events">Promise rejection events</see><br/>-<see cref="PromiseRejectionEvent"/><br/>-<see cref="Promise"/><br/>-<see cref="Windowunhandledrejection"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/rejectionhandled"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowRejectionhandled>
<WindowOpen>
<summary>
The <strong><c>open()</c></strong> method of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window"><c>Window</c></see> interface loads a specified resource into a new or existing browsing context (that is, a tab, a window, or an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe">iframe</see>) under a specified name.
</summary>
<remarks>
<para>-<c>target</c> attribute documentation:-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/a#target"><c>&amp;lt;a&amp;gt;</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/form#target"><c>&amp;lt;form&amp;gt;</c></see><br/><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/close"><c>window.close()</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/closed"><c>window.closed</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/focus"><c>window.focus()</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/opener"><c>window.opener</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/rel#opener"><c>rel=&amp;quot;opener&amp;quot;</c></see> and <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/rel#noopener"><c>rel=&amp;quot;noopener&amp;quot;</c></see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same-origin policy</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/open"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>If the browser successfully opens the new browsing context, a <see href="https://developer.mozilla.org/en-US/docs/Glossary/WindowProxy"><c>WindowProxy</c></see> object is returned.<br/>The returned reference can be used to access properties and methods of the new context as long as it complies with <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">the same-origin policy</see> security requirements.If the {{httpheader("Cross-Origin-Opener-Policy")}} HTTP header is being used, and the document policies are such that the document is opened in a new {{glossary("Browsing context","browsing context group")}}, references to the opened window are severed and the returned object will indicate that the opened window is closed (<see cref="Window.Closed"/> is <c>true</c>).<c>null</c> is returned if the browser fails to open the new browsing context, for example because it was blocked by a browser popup blocker.</returns>
</WindowOpen>
<WindowVrdisplaydeactivate>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>vrdisplaydeactivate</c></strong> event of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see> is fired when a VR display can no longer be presented to, for example if an HMD has gone into standby or sleep mode due to a period of inactivity.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This event was part of the old <see href="https://immersive-web.github.io/webvr/spec/1.1/">WebVR API</see>. It has been superseded by the <see href="https://immersive-web.github.io/webxr/">WebXR Device API</see>.</para></blockquote><para>This event is not cancelable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplaydeactivate"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowVrdisplaydeactivate>
<WindowClearImmediate>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> This method clears the action specified by <see cref="Window.SetImmediate"/>.
</summary>
<remarks>
<para>-<see href="https://github.com/zloirock/core-js#setimmediate">Polyfill of <c>clearImmediate</c> in <c>core-js</c></see><br/>-<see cref="Window.SetImmediate"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/clearImmediate"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowClearImmediate>
<WindowName>
<summary>
The <c>Window.name</c> property<br/>gets/sets the name of the window&amp;apos;s browsing context.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/name"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A string.</value>
</WindowName>
<WindowNavigator>
<summary>
The <strong><c>Window.navigator</c></strong> read-only property returns a<br/>reference to the <see cref="Navigator"/> object, which has methods and properties about<br/>the application running the script.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The <see cref="Navigator"/> object.</value>
</WindowNavigator>
<WindowParent>
<summary>
The <strong><c>Window.parent</c></strong> property is a reference to the parent<br/>of the current window or subframe.
</summary>
<remarks>
<para>If a window does not have a parent, its <c>parent</c> property is a reference to<br/>itself.</para><para>When a window is loaded in an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see>, <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object">object</see>, or<br/><see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame">frame</see>, its parent is the window with the element embedding the<br/>window.</para>
<para>-<see cref="Window.FrameElement"/> returns the specific element (such as<br/><c>&amp;lt;iframe&amp;gt;</c>) the <c>window</c> is embedded into.<br/>-<see cref="Window.Top"/> returns a reference to the top-level window.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/parent"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <c>Window</c> or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see> object.</value>
</WindowParent>
<WindowScrollY>
<summary>
The read-only <strong><c>scrollY</c></strong> property of the <see cref="Window"/> interface returns the number of pixels by which the document is currently scrolled vertically. This value is subpixel precise in modern browsers, meaning that it isn't necessarily a whole number. You can get the number of pixels the document is scrolled horizontally from the <see cref="Window.ScrollX"/> property.
</summary>
<remarks>
<para>-<see cref="Window.ScrollX"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A double-precision floating-point value indicating the number of pixels by which the document is currently scrolled vertically from the origin, where a positive value means the content is scrolled down (to reveal more content to the bottom). In more technical terms, <c>scrollY</c> returns the Y coordinate of the top edge of the current <see href="https://developer.mozilla.org/en-US/docs/Glossary/viewport">viewport</see>. If the document isn't scrolled at all top or down, then <c>scrollY</c> is 0. If there is no viewport, the returned value is 0. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component.<blockquote class="NOTE"><h5>NOTE</h5>If you need an integer value, you can use <see cref="MathRound"/> to round it off.</blockquote>Safari responds to overscrolling by updating <c>scrollY</c> beyond the maximum scroll position (unless the default "bounce" effect is disabled, such as by setting <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior">overscroll-behavior</see> to <c>none</c>), while Chrome and Firefox do not. For example, <c>scrollY</c> may be negative on Safari just by continuing to scroll up when the document is already at the top.This property is read-only. To scroll the window to a particular place, use <see cref="Window.Scroll"/>.</value>
</WindowScrollY>
<WindowBeforeprint>
<summary>
The <strong><c>beforeprint</c></strong> event is fired when the associated document is about to be printed or previewed for printing.
</summary>
<remarks>
<para>The <see cref="Window.Afterprint"/> and <c>beforeprint</c> events allow pages to change their content before printing starts (perhaps to remove a banner, for example) and then revert those changes after printing has completed. In general, you should prefer the use of a <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries#targeting_media_types"><c>_media print</c></see> CSS at-rule, but it may be necessary to use these events in some cases.</para>
<para>-Related events: <see cref="Windowafterprint"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeprint"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowBeforeprint>
<WindowAppinstalled>
<summary>
The <strong><c>appinstalled</c></strong> event of the <see href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Manifest">Web Manifest API</see> is fired when the browser has successfully installed a page as an application.
</summary>
<remarks>
<para>This event is not cancelable and does not bubble.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/appinstalled"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowAppinstalled>
<WindowVrdisplayconnect>
<summary>
<div class="IMPORTANT"><h5>IMPORTANT</h5> <strong>Deprecated</strong></div> The <strong><c>vrdisplayconnect</c></strong> event of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see> is fired when a compatible VR display is connected to the computer.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This event was part of the old <see href="https://immersive-web.github.io/webvr/spec/1.1/">WebVR API</see>. It has been superseded by the <see href="https://immersive-web.github.io/webxr/">WebXR Device API</see>.</para></blockquote><para>This event is not cancelable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebVR API</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplayconnect"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowVrdisplayconnect>
<WindowFocus>
<summary>
Makes a request to bring the window to the front. It may fail due to user settings and the window isn&amp;apos;t guaranteed to be frontmost before this method returns.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/focus"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowFocus>
<WindowClose>
<summary>
The <strong><c>Window.close()</c></strong> method closes the current window, or<br/>the window on which it was called.
</summary>
<remarks>
<para>Windows are <strong>script-closable</strong> if they were created by web content. This generally includes:</para><para>Windows opened by browser UI actions — such as right-click → Open in new tab, Ctrl+Click, Shift+Click, or middle-click — are often not script-closable. They may only be closed if they have not been navigated (history length remains 1). Calling <c>close()</c> otherwise typically shows a console warning: <c>Scripts may not close windows that were not opened by script.</c></para><para>Note also that <c>close()</c> has no effect when called on <see cref="Window"/><br/>objects returned by<br/><see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow"><c>HTMLIFrameElement.contentWindow</c></see>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/close"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowClose>
<WindowTrustedTypes>
<summary>
The <strong><c>trustedTypes</c></strong> read-only property of the <see cref="Window"/> interface returns the <see cref="TrustedTypePolicyFactory"/> object associated with the global object, providing the entry point for using the {{domxref("Trusted Types API", &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;nocode&amp;quot;)}}.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/trustedTypes"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="TrustedTypePolicyFactory"/> object.</value>
</WindowTrustedTypes>
<WindowScheduler>
<summary>
The <strong><c>scheduler</c></strong> read-only property of the <see cref="Window"/> interface is the entry point for using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API">Prioritized Task Scheduling API</see>.
</summary>
<remarks>
<para>It returns a <see cref="Scheduler"/> object instance containing <see cref="'Scheduler.PostTask'"/> and <see cref="'Scheduler.Yield'"/> methods that can be used to schedule prioritized tasks.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API">Prioritized Task Scheduling API</see><br/>-<see cref="'Scheduler.PostTask'"/><br/>-<see cref="'Scheduler.Yield'"/><br/>-<see cref="'TaskController'"/><br/>-<see cref="WorkerGlobalScope.Scheduler"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scheduler"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Scheduler"/>.</value>
</WindowScheduler>
<WindowFrameElement>
<summary>
The <strong><c>Window.frameElement</c></strong> property<br/>returns the element (such as <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object">object</see>)<br/>in which the window is embedded.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>Despite this property&amp;apos;s name, it works for documents embedded<br/>within any embedding point, including <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object">object</see>,<br/><see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</see>, or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed">embed</see>.</para></blockquote>
<para>-<see cref="Window.Frames"/> returns an array-like object, listing the direct<br/>sub-frames of the current window.<br/>-<see cref="Window.Parent"/> returns the parent window, which is the window<br/>containing the <c>frameElement</c> of the child window.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>The element which the window is embedded into. If the window isn&amp;apos;t embedded into<br/>another document, or if the document into which it&amp;apos;s embedded has a different<br/><see href="https://developer.mozilla.org/en-US/docs/Glossary/origin">origin</see>, the value is <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null"><c>null</c></see> instead.</value>
</WindowFrameElement>
<WindowOpener>
<summary>
The <see cref="Window"/> interface's<br/><strong><c>opener</c></strong> property returns a reference to the window that<br/>opened the window, either with <see cref="Window.Open"/>, or by navigating<br/>a link with a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/a#target"><c>target</c></see> attribute.
</summary>
<remarks>
<para>In other words, if window <c>A</c> opens window <c>B</c>,<br/><c>B.opener</c> returns <c>A</c>.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/opener"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Window"/>-like object referring to the window that opened the current<br/>window (using <see cref="Window.Open"/>, or by a link with <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/a#target"><c>target</c></see> attribute set). If this window was not opened by being linked to or created by<br/>another, returns <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null"><c>null</c></see>.If the opener is not on the same origin as the current page, functionality of the<br/>opener object is limited. For example, variables and functions on the window object are<br/>not accessible. However, navigation of the opener window is possible, which means that<br/>the opened page can open a URL in the original tab or window. In some cases, this makes<br/>phishing attacks possible, where a trusted page that is opened in the original window is<br/>replaced by a phishing page by the newly opened page.To be exact, for cross-origin opener objects, the following properties are available:In addition, there are a few properties: <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables"><c>then</c></see>, {{jsxref(&amp;quot;Symbol/toStringTag&amp;quot;, &amp;quot;[Symbol.toStringTag]&amp;quot;)}}, {{jsxref(&amp;quot;Symbol/hasInstance&amp;quot;, &amp;quot;[Symbol.hasInstance]&amp;quot;)}}, {{jsxref(&amp;quot;Symbol/isConcatSpreadable&amp;quot;, &amp;quot;[Symbol.isConcatSpreadable]&amp;quot;)}}, which are used by various JavaScript operations. These properties have values <c>undefined</c>. All other properties generate a <c>SecurityError</c> <see cref="DOMException"/> when accessed.In the following cases, the browser does not populate <c>window.opener</c>, but<br/>leaves it <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null"><c>null</c></see>:</value>
</WindowOpener>
<WindowOnline>
<summary>
The <strong><c>online</c></strong> event of the <see cref="Window"/> interface is fired when the browser has gained access to the network and the value of <see cref="Navigator.OnLine"/> switches to <c>true</c>.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>This event shouldn&amp;apos;t be used to determine the availability of a particular website. Network problems or firewalls might still prevent the website from being reached.</para></blockquote>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event"><c>offline</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/online"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowOnline>
<WindowLocalStorage>
<summary>
The <strong><c>localStorage</c></strong> read-only property of the <see cref="Window"/> interface allows you to access a <see cref="Storage"/> object for the <see cref="Document"/>'s {{glossary("origin")}}; the stored data is saved across browser sessions.
</summary>
<remarks>
<para><c>localStorage</c> is similar to <see cref="Window.SessionStorage"/>, except that while <c>localStorage</c> data has no expiration time, <c>sessionStorage</c> data gets cleared when the page session ends — that is, when the page is closed. (<c>localStorage</c> data for a document loaded in a &amp;quot;private browsing&amp;quot; or &amp;quot;incognito&amp;quot; session is cleared when the last &amp;quot;private&amp;quot; tab is closed.)</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API">Using the Web Storage API</see><br/>-<see cref="Window.SessionStorage"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="Storage"/> object which can be used to access the current origin's local storage space.</value>
</WindowLocalStorage>
<WindowVisualViewport>
<summary>
The <strong><c>visualViewport</c></strong> read-only property of the <see cref="Window"/> interface returns a <see cref="VisualViewport"/> object representing the visual viewport for a given window, or <c>null</c> if current document is not fully active.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/visualViewport"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see cref="VisualViewport"/> object.</value>
</WindowVisualViewport>
<WindowLanguagechange>
<summary>
The <strong><c>languagechange</c></strong> event is fired at the global scope object when the user&amp;apos;s preferred language changes.
</summary>
<remarks>
<para>-<see cref="Navigator.Language"/><br/>-<see cref="Navigator.Languages"/><br/>-<see cref="Navigator"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/languagechange"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowLanguagechange>
<WindowPostMessage>
<summary>
The <strong><c>window.postMessage()</c></strong> method safely enables cross-origin communication between <see cref="Window"/> objects; <strong>e.g.,</strong> between a page and a pop-up that it spawned, or between a page and an iframe embedded within it.
</summary>
<remarks>
<para>Normally, scripts on different pages are allowed to access each other if and only if the pages they originate from share the same <see href="https://developer.mozilla.org/en-US/docs/Web/API/Location/origin">origin</see> (also known as the &amp;quot;<see href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">same-origin policy</see>&amp;quot;). <c>window.postMessage()</c> provides a controlled mechanism to securely circumvent this restriction (if used properly).</para><para>Furthermore, an accessing script must have obtained the window object of the accessed document beforehand. This can occur through methods such as <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/open"><c>window.open()</c></see> for popups or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow"><c>iframe.contentWindow</c></see> for iframes.</para><para>Broadly, one window may obtain a reference to another (<strong>e.g.,</strong> via <c>targetWindow = window.opener</c>), and then dispatch a <see cref="MessageEvent"/> on it with <c>targetWindow.postMessage()</c>. The receiving window is then free to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events#registering_event_handlers">handle this event</see> as needed. The arguments passed to <c>window.postMessage()</c> (<strong>i.e.,</strong> the &amp;quot;message&amp;quot;) are <see href="https://developer.mozilla.org#the_dispatched_event">exposed to the receiving window through the event object</see>.</para>
<para>-<see cref="Document.Domain"/><br/>-<see cref="CustomEvent"/><br/>-<see cref="BroadcastChannel"/> - For same-origin communication.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WindowPostMessage>
<WindowInnerHeight>
<summary>
The read-only <strong><c>innerHeight</c></strong> property of the<br/><see cref="Window"/> interface returns the interior height of the window in pixels,<br/>including the height of the horizontal scroll bar, if present.
</summary>
<remarks>
<para>The value of <c>innerHeight</c> is taken from the height of the window&amp;apos;s<br/><see href="https://developer.mozilla.org/en-US/docs/Glossary/layout viewport">layout viewport</see>. The width can be obtained using the<br/><see cref="Window.InnerWidth"/> property.</para>
<para>-<see cref="Window.InnerWidth"/><br/>-<see cref="Window.OuterHeight"/><br/>-<see cref="Window.OuterWidth"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>An integer value indicating the window&amp;apos;s layout viewport height in pixels. The property<br/>is read only and has no default value.To change the height of the window, call one of its resize methods, such as<br/><see cref="Window.ResizeTo"/> or <see cref="Window.ResizeBy"/>.</value>
</WindowInnerHeight>
<WindowMessage>
<summary>
The <c>message</c> event is fired on a <see cref="'Window'"/> object when the window receives a message, for example from a call to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"><c>Window.postMessage()</c></see> from another browsing context.
</summary>
<remarks>
<para>This event is not cancellable and does not bubble.</para>
<para>-Related events: <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/messageerror_event"><c>messageerror</c></see>.<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"><c>Window.postMessage()</c></see>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/message"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowMessage>
<WindowDocument>
<summary>
<strong><c>window.document</c></strong> returns a reference to the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document">document</see> contained in the window.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/document"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document">document</see> object.</value>
</WindowDocument>
<WindowPageswap>
<summary>
The <strong><c>pageswap</c></strong> event is fired when you navigate across documents, when the previous document is about to unload.
</summary>
<remarks>
<para>This is useful in the case of cross-document (MPA) <see href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API">view transitions</see> for manipulating an active transition from the outbound page of a navigation. For example, you might wish to skip the transition, or customize the outbound transition animation via JavaScript.</para><para>It also provides access to the navigation type and current and destination document history entries.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API/Using">Using the View Transition API</see><br/>-<see cref="Window.Pagereveal"/> event<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/pageswap"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowPageswap>
<WindowCustomElements>
<summary>
The <strong><c>customElements</c></strong> read-only property of the <see cref="Window"/> interface returns a reference to the <see cref="CustomElementRegistry"/> object, which can be used to register new <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements">custom elements</see> and get information about previously registered custom elements.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WindowCustomElements>
</docs>