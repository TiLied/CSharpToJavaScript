<docs>
<Worker>
<summary>
The <strong><c>Worker</c></strong> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers API</see> represents a background task that can be created via script, which can send messages back to its creator.
</summary>
<remarks>
<para>Creating a worker is done by calling the <c>Worker(&amp;quot;path/to/worker/script&amp;quot;)</c> constructor.</para><para>Workers may themselves spawn new workers, as long as those workers are hosted at the same <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">origin</see> as the parent page.</para><para>Note that not all interfaces and functions are available to web workers. See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers">Functions and classes available to Web Workers</see> for details.</para><para></para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Using Web Workers</see><br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers">Functions and classes available to Web Workers</see><br/>-Other kind of workers: <see cref="SharedWorker"/> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">Service Worker</see>.<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas"><c>OffscreenCanvas</c></see> interface<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Worker"> <em>See also on MDN</em> </seealso></para>
</remarks>
</Worker>
<WorkerTerminate>
<summary>
The <strong><c>terminate()</c></strong> method of the <see cref="Worker"/> interface immediately terminates the <see cref="Worker"/>. This does not offer the worker an opportunity to finish its operations; it is stopped at once.
</summary>
<remarks>
<para>-<see cref="Worker"/> interface<br/>-<see cref="DedicatedWorkerGlobalScope.Close"/><br/>-<see cref="SharedWorkerGlobalScope.Close"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WorkerTerminate>
<WorkerWorker>
<summary>
The <strong><c>Worker()</c></strong> constructor creates a <see cref="Worker"/> object that executes the script at the specified URL. This script must obey the <see href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">same-origin policy</see>.
</summary>
<remarks>
<blockquote class="NOTE"><h5>NOTE</h5><para>There is a disagreement among browser manufacturers about whether a data URL is of the same origin or not. Though Firefox 10 and later accept data URLs, that&amp;apos;s not the case in all other browsers.</para></blockquote>
<para>The <see cref="Worker"/> interface it belongs to.</para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WorkerWorker>
<WorkerError>
<summary>
The <strong><c>error</c></strong> event of the <see cref="Worker"/> interface fires when an error occurs in the worker.
</summary>
<remarks>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/error"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WorkerError>
<WorkerMessageerror>
<summary>
The <c>messageerror</c> event is fired on a <see cref="'Worker'"/> object when it receives a message that can't be deserialized.
</summary>
<remarks>
<para>This event is not cancellable and does not bubble.</para>
<para>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage"><c>Worker.postMessage()</c></see><br/>-Related events: <see href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/message_event"><c>message</c></see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/messageerror"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WorkerMessageerror>
<WorkerPostMessage>
<summary>
The <strong><c>postMessage()</c></strong> method of the <see cref="Worker"/> interface sends a message to the worker. The first parameter is the data to send to the worker. The data may be any JavaScript object that can be handled by the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm">structured clone algorithm</see>.
</summary>
<remarks>
<para>The <see cref="Worker"/> <c>postMessage()</c> method delegates to the <see cref="MessagePort"/> <see cref="MessagePort.PostMessage"/> method, which adds a task on the event loop corresponding to the receiving <see cref="MessagePort"/>.</para><para>The <c>Worker</c> can send back information to the thread that spawned it using the <see cref="DedicatedWorkerGlobalScope.PostMessage"/> method.</para>
<para>-The <see cref="Worker"/> interface it belongs to.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage"> <em>See also on MDN</em> </seealso></para>
</remarks>
<returns>None (<see cref="Undefined"/>).</returns>
</WorkerPostMessage>
<WorkerMessage>
<summary>
The <c>message</c> event is fired on a <see cref="'Worker'"/> object when the worker's parent receives a message from its worker (i.e., when the worker sends a message using <see href="https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage"><c>DedicatedWorkerGlobalScope.postMessage()</c></see>).
</summary>
<remarks>
<para>This event is not cancellable and does not bubble.</para>
<para>-Related events: <see href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/messageerror_event"><c>messageerror</c></see>.<br/>-<see href="https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage"><c>DedicatedWorkerGlobalScope.postMessage()</c></see>.<br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/message"> <em>See also on MDN</em> </seealso></para>
</remarks>
</WorkerMessage>
</docs>