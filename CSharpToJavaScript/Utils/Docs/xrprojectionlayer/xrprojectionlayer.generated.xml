<docs>
<XRProjectionLayer>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>XRProjectionLayer</c></strong> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API">WebXR Device API</see> is a layer that fills the entire view of the observer and is refreshed close to the device&amp;apos;s native frame rate.
</summary>
<remarks>
<para><c>XRProjectionLayer</c> is supported by all <see cref="XRSession"/> objects (no <c>layers</c> feature descriptor is needed).</para><para>To create a new <c>XRProjectionLayer</c>, call <see cref="XRWebGLBinding.CreateProjectionLayer"/>.<br/>To present layers to the XR device, add them to the <c>layers</c> render state using <see cref="XRSession.UpdateRenderState"/>.</para><para><c>XRProjectionLayer</c> objects don't have an associated <see cref="XRSpace"/>, because they render to the full frame.</para><para></para>
<para>-<see cref="XRLayer"/><br/>-<see cref="EventTarget"/><br/>-<see cref="XRCompositionLayer"/><br/>-<see cref="XREquirectLayer"/><br/>-<see cref="XRCubeLayer"/><br/>-<see cref="XRCylinderLayer"/><br/>-<see cref="XRQuadLayer"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer"> <em>See also on MDN</em> </seealso></para>
</remarks>
</XRProjectionLayer>
<XRProjectionLayerTextureArrayLength>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The read-only <strong><c>textureArrayLength</c></strong> property of the <see cref="XRProjectionLayer"/> interface indicates layer's layer count for array textures when using <c>texture-array</c> as the <c>textureType</c>.
</summary>
<remarks>
<para>The projection layer's layer count for array textures is determined by the user agent or the device. It is reported in the <see cref="XRSubImage"/>, which can only be accessed inside the frame loop. If you want to manage your own depth buffers and don't want to wait for first frame after layer creation to determine the required dimensions for those buffers, the <c>textureArrayLength</c> property allows access to layer count for array textures outside the frame loop. Allocation of these buffers can happen directly after layer creation.</para>
<para>-<see cref="XRSubImage"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer/textureArrayLength"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number indicating the number of layers of the color textures when using <c>texture-array</c> as the <c>textureType</c>. Otherwise it will be <c>1</c>.</value>
</XRProjectionLayerTextureArrayLength>
<XRProjectionLayerTextureHeight>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The read-only <strong><c>textureHeight</c></strong> property of the <see cref="XRProjectionLayer"/> interface indicates the height in pixels of the color textures of this layer.
</summary>
<remarks>
<para>The projection layer's texture height is determined by the user agent or the device. It is reported in the <see cref="XRSubImage"/>, which can only be accessed inside the frame loop. If you want to manage your own depth buffers and don't want to wait for first frame after layer creation to determine the required dimensions for those buffers, the <c>textureHeight</c> property allows access to layer texture height outside the frame loop. Allocation of these buffers can happen directly after layer creation.</para>
<para>-<see cref="XRWebGLBinding.CreateProjectionLayer"/><br/>-<see cref="WebGL2RenderingContext.RenderbufferStorageMultisample"/><br/>-<see cref="XRSubImage"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer/textureHeight"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number indicating the height in pixels.</value>
</XRProjectionLayerTextureHeight>
<XRProjectionLayerFixedFoveation>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The <strong><c>fixedFoveation</c></strong> property of the <see cref="XRProjectionLayer"/> interface is a number indicating the amount of foveation used by the XR compositor for the layer. Fixed Foveated Rendering (FFR) renders the edges of the eye textures at a lower resolution than the center and reduces the GPU load.
</summary>
<remarks>
<para>It is most useful for low-contrast textures such as background images, but less for high-contrast ones such as text or detailed images. Authors can adjust the level on a per-frame basis to achieve the best tradeoff between performance and visual quality.</para>
<para>-<see href="https://en.wikipedia.org/wiki/Foveated_rendering">Foveated rendering</see><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer/fixedFoveation"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number between 0 and 1.It's up to the user agent how to interpret the numbers in this range. When changing the foveation level, the effect will visible in the next <see cref="XRFrame"/>.Note that some user agents might implement certain levels of foveation, so you might need to adjust the foveation level in large increments to see an effect. Example levels:Some devices don&amp;apos;t support foveated rendering. In that case <c>fixedFoveation</c> is <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null"><c>null</c></see> and setting it will not do anything.</value>
</XRProjectionLayerFixedFoveation>
<XRProjectionLayerTextureWidth>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The read-only <strong><c>textureWidth</c></strong> property of the <see cref="XRProjectionLayer"/> interface indicates the width in pixels of the color textures of this layer.
</summary>
<remarks>
<para>The projection layer's texture width is determined by the user agent or the device. It is reported in the <see cref="XRSubImage"/>, which can only be accessed inside the frame loop. If you want to manage your own depth buffers and don't want to wait for first frame after layer creation to determine the required dimensions for those buffers, the <c>textureWidth</c> property allows access to layer texture width outside the frame loop. Allocation of these buffers can happen directly after layer creation.</para>
<para>-<see cref="XRWebGLBinding.CreateProjectionLayer"/><br/>-<see cref="WebGL2RenderingContext.RenderbufferStorageMultisample"/><br/>-<see cref="XRSubImage"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer/textureWidth"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A number indicating the width in pixels.</value>
</XRProjectionLayerTextureWidth>
<XRProjectionLayerIgnoreDepthValues>
<summary>
<div class="NOTE"><h5>NOTE</h5> <strong>Experimental</strong></div> The read-only <strong><c>ignoreDepthValues</c></strong> property of the <see cref="XRProjectionLayer"/> interface is a boolean indicating if the XR compositor is not making use of depth buffer values when rendering the layer.
</summary>
<remarks>
<para>-<see cref="XRWebGLBinding.CreateProjectionLayer"/><br/></para>
<para><seealso href="https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer/ignoreDepthValues"> <em>See also on MDN</em> </seealso></para>
</remarks>
<value>A boolean. <c>true</c> indicates the XR compositor doesn&amp;apos;t make use of depth buffer values; <c>false</c> indicates the content of the depth buffer will be used when rendering the layer.</value>
</XRProjectionLayerIgnoreDepthValues>
</docs>